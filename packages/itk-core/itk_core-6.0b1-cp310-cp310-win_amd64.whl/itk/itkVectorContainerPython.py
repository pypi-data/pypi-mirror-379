# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorContainerPython
else:
    import _itkVectorContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkArrayPython

def itkDataObjectDecoratorVCUCD_New():
    return itkDataObjectDecoratorVCUCD.New()

class itkDataObjectDecoratorVCUCD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorVCUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkVectorContainerUCD const *

        """
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorVCUCD const *

        """
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft(self, *args)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkDataObjectDecoratorVCUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorVCUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorVCUCD

        Create a new object of the class itkDataObjectDecoratorVCUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorVCUCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorVCUCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorVCUCD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorVCUCD in _itkVectorContainerPython:
_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_swigregister(itkDataObjectDecoratorVCUCD)

def itkVectorContainerUCD_New():
    return itkVectorContainerUCD.New()

class itkVectorContainerUCD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> double const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> double &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: double

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: double

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: double *

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCD

        Create a new object of the class itkVectorContainerUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCD in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCD_swigregister(itkVectorContainerUCD)

def itkVectorContainerUCF_New():
    return itkVectorContainerUCF.New()

class itkVectorContainerUCF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> float const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> float &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: float

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: float

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: float *

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCF

        Create a new object of the class itkVectorContainerUCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCF in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCF_swigregister(itkVectorContainerUCF)

def itkVectorContainerUCO2_New():
    return itkVectorContainerUCO2.New()

class itkVectorContainerUCO2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCO2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkOffset2

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> itkOffset2

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkOffset2

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkOffset2

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset2

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset2

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset2 *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCO2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO2

        Create a new object of the class itkVectorContainerUCO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCO2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCO2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCO2_swigregister(itkVectorContainerUCO2)

def itkVectorContainerUCO3_New():
    return itkVectorContainerUCO3.New()

class itkVectorContainerUCO3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCO3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkOffset3

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> itkOffset3

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkOffset3

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkOffset3

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset3

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset3

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset3 *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCO3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO3

        Create a new object of the class itkVectorContainerUCO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCO3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCO3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCO3_swigregister(itkVectorContainerUCO3)

def itkVectorContainerUCO4_New():
    return itkVectorContainerUCO4.New()

class itkVectorContainerUCO4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCO4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCO4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCO4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkOffset4,std::allocator< itkOffset4 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkOffset4,std::allocator< itkOffset4 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkOffset4

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> itkOffset4

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkOffset4

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkOffset4

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset4

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset4

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: itkOffset4 *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCO4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCO4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO4

        Create a new object of the class itkVectorContainerUCO4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCO4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCO4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCO4_swigregister(itkVectorContainerUCO4)

def itkVectorContainerUCSS_New():
    return itkVectorContainerUCSS.New()

class itkVectorContainerUCSS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> short

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> short const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> short &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> short

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: short

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: short

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: short *

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCSS

        Create a new object of the class itkVectorContainerUCSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCSS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCSS_swigregister(itkVectorContainerUCSS)

def itkVectorContainerUCUC_New():
    return itkVectorContainerUCUC.New()

class itkVectorContainerUCUC(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> unsigned char const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned char &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned char *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUC

        Create a new object of the class itkVectorContainerUCUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUC_swigregister(itkVectorContainerUCUC)

def itkVectorContainerUCUI_New():
    return itkVectorContainerUCUI.New()

class itkVectorContainerUCUI(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> unsigned int const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned int &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned int *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUI

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCUI

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUI

        Create a new object of the class itkVectorContainerUCUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUI_swigregister(itkVectorContainerUCUI)

def itkVectorContainerUCULL_New():
    return itkVectorContainerUCULL.New()

class itkVectorContainerUCULL(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> unsigned long long const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned long long &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned long long *

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCULL_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCULL

        Create a new object of the class itkVectorContainerUCULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCULL_swigregister(itkVectorContainerUCULL)

def itkVectorContainerUCUS_New():
    return itkVectorContainerUCUS.New()

class itkVectorContainerUCUS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUCUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUCUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUCUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned char

        ElementAt(self, arg0) -> unsigned short const &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned short &

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned char
        arg1: unsigned short *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUCUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUCUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUS

        Create a new object of the class itkVectorContainerUCUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUCUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUCUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUCUS_swigregister(itkVectorContainerUCUS)

def itkVectorContainerUICID2_New():
    return itkVectorContainerUICID2.New()

class itkVectorContainerUICID2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUICID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkContinuousIndexD2

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> itkContinuousIndexD2

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkContinuousIndexD2

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkContinuousIndexD2

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD2

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD2

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD2 *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUICID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID2

        Create a new object of the class itkVectorContainerUICID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUICID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUICID2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUICID2_swigregister(itkVectorContainerUICID2)

def itkVectorContainerUICID3_New():
    return itkVectorContainerUICID3.New()

class itkVectorContainerUICID3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUICID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkContinuousIndexD3

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> itkContinuousIndexD3

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkContinuousIndexD3

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkContinuousIndexD3

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD3

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD3

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD3 *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUICID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID3

        Create a new object of the class itkVectorContainerUICID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUICID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUICID3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUICID3_swigregister(itkVectorContainerUICID3)

def itkVectorContainerUICID4_New():
    return itkVectorContainerUICID4.New()

class itkVectorContainerUICID4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUICID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUICID4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUICID4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkContinuousIndexD4,std::allocator< itkContinuousIndexD4 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkContinuousIndexD4,std::allocator< itkContinuousIndexD4 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkContinuousIndexD4

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> itkContinuousIndexD4

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkContinuousIndexD4

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkContinuousIndexD4

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD4

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD4

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkContinuousIndexD4 *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUICID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUICID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID4

        Create a new object of the class itkVectorContainerUICID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUICID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUICID4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUICID4_swigregister(itkVectorContainerUICID4)

def itkVectorContainerUIUC_New():
    return itkVectorContainerUIUC.New()

class itkVectorContainerUIUC(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> unsigned char const &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned char &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned char *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUC

        Create a new object of the class itkVectorContainerUIUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUC_swigregister(itkVectorContainerUIUC)

def itkVectorContainerUIUI_New():
    return itkVectorContainerUIUI.New()

class itkVectorContainerUIUI(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUIUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> unsigned int const &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned int &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUI

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUIUI

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUI

        Create a new object of the class itkVectorContainerUIUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUI_swigregister(itkVectorContainerUIUI)

def itkVectorContainerUIULL_New():
    return itkVectorContainerUIULL.New()

class itkVectorContainerUIULL(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUIULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUIULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUIULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> unsigned long long const &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned long long &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned long long *

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIULL_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUIULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUIULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIULL

        Create a new object of the class itkVectorContainerUIULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIULL_swigregister(itkVectorContainerUIULL)

def itkVectorContainerUIUS_New():
    return itkVectorContainerUIUS.New()

class itkVectorContainerUIUS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUIUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUIUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> unsigned short const &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned short &

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned short *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUIUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUS

        Create a new object of the class itkVectorContainerUIUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIUS_swigregister(itkVectorContainerUIUS)

def itkVectorContainerUIVUC1_New():
    return itkVectorContainerUIVUC1.New()

class itkVectorContainerUIVUC1(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUIVUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorUC1

        Parameters
        ----------
        arg0: unsigned int

        ElementAt(self, arg0) -> itkVectorUC1

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorUC1

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorUC1

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkVectorUC1

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkVectorUC1

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned int
        arg1: itkVectorUC1 *

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIVUC1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUIVUC1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIVUC1

        Create a new object of the class itkVectorContainerUIVUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIVUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIVUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUIVUC1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUIVUC1 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUIVUC1_swigregister(itkVectorContainerUIVUC1)

def itkVectorContainerULLAD_New():
    return itkVectorContainerULLAD.New()

class itkVectorContainerULLAD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLAD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLAD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLAD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLAD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkArrayD,std::allocator< itkArrayD > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkArrayD,std::allocator< itkArrayD > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkArrayD

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkArrayD

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkArrayD

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkArrayD

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayD

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayD

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayD *

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLAD_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLAD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLAD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLAD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLAD

        Create a new object of the class itkVectorContainerULLAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLAD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLAD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLAD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLAD in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLAD_swigregister(itkVectorContainerULLAD)

def itkVectorContainerULLAF_New():
    return itkVectorContainerULLAF.New()

class itkVectorContainerULLAF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLAF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLAF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLAF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLAF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkArrayF,std::allocator< itkArrayF > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkArrayF,std::allocator< itkArrayF > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkArrayF

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkArrayF

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkArrayF

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkArrayF

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayF

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayF

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkArrayF *

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLAF_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLAF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLAF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLAF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLAF

        Create a new object of the class itkVectorContainerULLAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLAF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLAF in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLAF_swigregister(itkVectorContainerULLAF)

def itkVectorContainerULLD_New():
    return itkVectorContainerULLD.New()

class itkVectorContainerULLD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULLD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> double const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> double &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double *

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLD_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLD

        Create a new object of the class itkVectorContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLD in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLD_swigregister(itkVectorContainerULLD)

def itkVectorContainerULLF_New():
    return itkVectorContainerULLF.New()

class itkVectorContainerULLF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULLF_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> float const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> float &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float *

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLF_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLF

        Create a new object of the class itkVectorContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLF in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLF_swigregister(itkVectorContainerULLF)

def itkVectorContainerULLMD22_New():
    return itkVectorContainerULLMD22.New()

class itkVectorContainerULLMD22(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD22

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD22

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD22 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD22_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD22

        Create a new object of the class itkVectorContainerULLMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMD22 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMD22_swigregister(itkVectorContainerULLMD22)

def itkVectorContainerULLMD33_New():
    return itkVectorContainerULLMD33.New()

class itkVectorContainerULLMD33(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD33

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD33

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD33 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD33_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD33

        Create a new object of the class itkVectorContainerULLMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMD33 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMD33_swigregister(itkVectorContainerULLMD33)

def itkVectorContainerULLMD44_New():
    return itkVectorContainerULLMD44.New()

class itkVectorContainerULLMD44(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMD44_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMD44_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixD44,std::allocator< itkMatrixD44 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixD44,std::allocator< itkMatrixD44 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD44

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD44

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixD44 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMD44_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMD44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMD44

        Create a new object of the class itkVectorContainerULLMD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMD44 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMD44_swigregister(itkVectorContainerULLMD44)

def itkVectorContainerULLMF22_New():
    return itkVectorContainerULLMF22.New()

class itkVectorContainerULLMF22(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF22

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF22

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF22 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF22_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF22

        Create a new object of the class itkVectorContainerULLMF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMF22 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMF22_swigregister(itkVectorContainerULLMF22)

def itkVectorContainerULLMF33_New():
    return itkVectorContainerULLMF33.New()

class itkVectorContainerULLMF33(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF33

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF33

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF33 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF33_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF33

        Create a new object of the class itkVectorContainerULLMF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMF33 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMF33_swigregister(itkVectorContainerULLMF33)

def itkVectorContainerULLMF44_New():
    return itkVectorContainerULLMF44.New()

class itkVectorContainerULLMF44(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLMF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLMF44_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLMF44_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkMatrixF44,std::allocator< itkMatrixF44 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkMatrixF44,std::allocator< itkMatrixF44 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF44

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF44

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkMatrixF44 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLMF44_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLMF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLMF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLMF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLMF44

        Create a new object of the class itkVectorContainerULLMF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLMF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLMF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLMF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLMF44 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLMF44_swigregister(itkVectorContainerULLMF44)

def itkVectorContainerULLPD2_New():
    return itkVectorContainerULLPD2.New()

class itkVectorContainerULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD2

        Create a new object of the class itkVectorContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPD2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPD2_swigregister(itkVectorContainerULLPD2)

def itkVectorContainerULLPD3_New():
    return itkVectorContainerULLPD3.New()

class itkVectorContainerULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD3

        Create a new object of the class itkVectorContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPD3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPD3_swigregister(itkVectorContainerULLPD3)

def itkVectorContainerULLPD4_New():
    return itkVectorContainerULLPD4.New()

class itkVectorContainerULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPD4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPD4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointD4"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointD4"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPD4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPD4

        Create a new object of the class itkVectorContainerULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPD4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPD4_swigregister(itkVectorContainerULLPD4)

def itkVectorContainerULLPF2_New():
    return itkVectorContainerULLPF2.New()

class itkVectorContainerULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF2

        Create a new object of the class itkVectorContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPF2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPF2_swigregister(itkVectorContainerULLPF2)

def itkVectorContainerULLPF3_New():
    return itkVectorContainerULLPF3.New()

class itkVectorContainerULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF3

        Create a new object of the class itkVectorContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPF3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPF3_swigregister(itkVectorContainerULLPF3)

def itkVectorContainerULLPF4_New():
    return itkVectorContainerULLPF4.New()

class itkVectorContainerULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLPF4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLPF4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectoritkPointF4"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectoritkPointF4"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLPF4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLPF4

        Create a new object of the class itkVectorContainerULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLPF4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLPF4_swigregister(itkVectorContainerULLPF4)

def itkVectorContainerULLSS_New():
    return itkVectorContainerULLSS.New()

class itkVectorContainerULLSS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> short

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> short const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> short &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> short

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: short

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: short

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: short *

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLSS

        Create a new object of the class itkVectorContainerULLSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLSS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLSS_swigregister(itkVectorContainerULLSS)

def itkVectorContainerULLSULL_New():
    return itkVectorContainerULLSULL.New()

class itkVectorContainerULLSULL(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLSULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::allocator< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::allocator< std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > *

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLSULL_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLSULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLSULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLSULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLSULL

        Create a new object of the class itkVectorContainerULLSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLSULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLSULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLSULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLSULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLSULL_swigregister(itkVectorContainerULLSULL)

def itkVectorContainerULLUC_New():
    return itkVectorContainerULLUC.New()

class itkVectorContainerULLUC(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> unsigned char const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned char &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned char *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUC_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUC

        Create a new object of the class itkVectorContainerULLUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUC_swigregister(itkVectorContainerULLUC)

def itkVectorContainerULLUI_New():
    return itkVectorContainerULLUI.New()

class itkVectorContainerULLUI(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUI___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> unsigned int const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned int &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned int *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUI_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUI

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLUI

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUI_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUI

        Create a new object of the class itkVectorContainerULLUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUI_swigregister(itkVectorContainerULLUI)

def itkVectorContainerULLULL_New():
    return itkVectorContainerULLULL.New()

class itkVectorContainerULLULL(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> unsigned long long const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned long long &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned long long *

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLULL_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLULL

        Create a new object of the class itkVectorContainerULLULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLULL_swigregister(itkVectorContainerULLULL)

def itkVectorContainerULLUS_New():
    return itkVectorContainerULLUS.New()

class itkVectorContainerULLUS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> unsigned short const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned short &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: unsigned short *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLUS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLUS

        Create a new object of the class itkVectorContainerULLUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLUS_swigregister(itkVectorContainerULLUS)

def itkVectorContainerULLVD2_New():
    return itkVectorContainerULLVD2.New()

class itkVectorContainerULLVD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD2

        Create a new object of the class itkVectorContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVD2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVD2_swigregister(itkVectorContainerULLVD2)

def itkVectorContainerULLVD3_New():
    return itkVectorContainerULLVD3.New()

class itkVectorContainerULLVD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD3

        Create a new object of the class itkVectorContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVD3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVD3_swigregister(itkVectorContainerULLVD3)

def itkVectorContainerULLVD4_New():
    return itkVectorContainerULLVD4.New()

class itkVectorContainerULLVD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVD4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVD4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorD4,std::allocator< itkVectorD4 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorD4,std::allocator< itkVectorD4 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVD4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVD4

        Create a new object of the class itkVectorContainerULLVD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVD4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVD4_swigregister(itkVectorContainerULLVD4)

def itkVectorContainerULLVF2_New():
    return itkVectorContainerULLVF2.New()

class itkVectorContainerULLVF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF2_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF2

        Create a new object of the class itkVectorContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVF2 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVF2_swigregister(itkVectorContainerULLVF2)

def itkVectorContainerULLVF3_New():
    return itkVectorContainerULLVF3.New()

class itkVectorContainerULLVF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF3_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF3

        Create a new object of the class itkVectorContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVF3 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVF3_swigregister(itkVectorContainerULLVF3)

def itkVectorContainerULLVF4_New():
    return itkVectorContainerULLVF4.New()

class itkVectorContainerULLVF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerULLVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerULLVF4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerULLVF4_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< itkVectorF4,std::allocator< itkVectorF4 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< itkVectorF4,std::allocator< itkVectorF4 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4 *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULLVF4_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULLVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerULLVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerULLVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULLVF4

        Create a new object of the class itkVectorContainerULLVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULLVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerULLVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerULLVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerULLVF4 in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerULLVF4_swigregister(itkVectorContainerULLVF4)

def itkVectorContainerUSUC_New():
    return itkVectorContainerUSUC.New()

class itkVectorContainerUSUC(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUSUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUSUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUSUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned short

        ElementAt(self, arg0) -> unsigned char const &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned char &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned char

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned char

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned char *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUC_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUSUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUC

        Create a new object of the class itkVectorContainerUSUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUC in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUC_swigregister(itkVectorContainerUSUC)

def itkVectorContainerUSUI_New():
    return itkVectorContainerUSUI.New()

class itkVectorContainerUSUI(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUSUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUSUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUI___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUSUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUI"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned short

        ElementAt(self, arg0) -> unsigned int const &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned int &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned int

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned int

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned int *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUI_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUI

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUSUI

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUI_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUI

        Create a new object of the class itkVectorContainerUSUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUI in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUI_swigregister(itkVectorContainerUSUI)

def itkVectorContainerUSULL_New():
    return itkVectorContainerUSULL.New()

class itkVectorContainerUSULL(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUSULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUSULL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > &"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::vector< unsigned long long,std::allocator< unsigned long long > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned short

        ElementAt(self, arg0) -> unsigned long long const &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned long long &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned long long

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned long long

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned long long *

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSULL_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUSULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUSULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSULL

        Create a new object of the class itkVectorContainerUSULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSULL in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSULL_swigregister(itkVectorContainerUSULL)

def itkVectorContainerUSUS_New():
    return itkVectorContainerUSUS.New()

class itkVectorContainerUSUS(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkVectorContainerUSUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorContainerUSUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorContainerUSUS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> vectorUS"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned short

        ElementAt(self, arg0) -> unsigned short const &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> unsigned short &

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> unsigned short

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned short
        arg1: unsigned short *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned short"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned short

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUSUS_Initialize(self)
    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUSUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorContainerUSUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorContainerPython.itkVectorContainerUSUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUSUS

        Create a new object of the class itkVectorContainerUSUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUSUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorContainerUSUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorContainerUSUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorContainerUSUS in _itkVectorContainerPython:
_itkVectorContainerPython.itkVectorContainerUSUS_swigregister(itkVectorContainerUSUS)

