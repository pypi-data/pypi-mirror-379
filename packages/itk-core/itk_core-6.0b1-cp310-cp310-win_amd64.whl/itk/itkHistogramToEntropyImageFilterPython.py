# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToEntropyImageFilterPython
else:
    import _itkHistogramToEntropyImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkHistogramToEntropyImageFilterHDID2_Superclass_New():
    return itkHistogramToEntropyImageFilterHDID2_Superclass.New()

class itkHistogramToEntropyImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID2_Superclass)

def itkHistogramToEntropyImageFilterHDID3_Superclass_New():
    return itkHistogramToEntropyImageFilterHDID3_Superclass.New()

class itkHistogramToEntropyImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID3_Superclass)

def itkHistogramToEntropyImageFilterHDID4_Superclass_New():
    return itkHistogramToEntropyImageFilterHDID4_Superclass.New()

class itkHistogramToEntropyImageFilterHDID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID4_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID4_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID4_Superclass)

def itkHistogramToEntropyImageFilterHDIF2_Superclass_New():
    return itkHistogramToEntropyImageFilterHDIF2_Superclass.New()

class itkHistogramToEntropyImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF2_Superclass)

def itkHistogramToEntropyImageFilterHDIF3_Superclass_New():
    return itkHistogramToEntropyImageFilterHDIF3_Superclass.New()

class itkHistogramToEntropyImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF3_Superclass)

def itkHistogramToEntropyImageFilterHDIF4_Superclass_New():
    return itkHistogramToEntropyImageFilterHDIF4_Superclass.New()

class itkHistogramToEntropyImageFilterHDIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF4_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF4_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF4_Superclass)

def itkHistogramToEntropyImageFilterHFID2_Superclass_New():
    return itkHistogramToEntropyImageFilterHFID2_Superclass.New()

class itkHistogramToEntropyImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID2_Superclass)

def itkHistogramToEntropyImageFilterHFID3_Superclass_New():
    return itkHistogramToEntropyImageFilterHFID3_Superclass.New()

class itkHistogramToEntropyImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID3_Superclass)

def itkHistogramToEntropyImageFilterHFID4_Superclass_New():
    return itkHistogramToEntropyImageFilterHFID4_Superclass.New()

class itkHistogramToEntropyImageFilterHFID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID4_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID4_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID4_Superclass)

def itkHistogramToEntropyImageFilterHFIF2_Superclass_New():
    return itkHistogramToEntropyImageFilterHFIF2_Superclass.New()

class itkHistogramToEntropyImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF2_Superclass)

def itkHistogramToEntropyImageFilterHFIF3_Superclass_New():
    return itkHistogramToEntropyImageFilterHFIF3_Superclass.New()

class itkHistogramToEntropyImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF3_Superclass)

def itkHistogramToEntropyImageFilterHFIF4_Superclass_New():
    return itkHistogramToEntropyImageFilterHFIF4_Superclass.New()

class itkHistogramToEntropyImageFilterHFIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramEntropyFunction< unsigned long long,float > const &

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float >
        GetFunctor(self) -> itk::Function::HistogramEntropyFunction< unsigned long long,float > const &
        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF4_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF4_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF4_Superclass)

def itkHistogramToEntropyImageFilterHDID2_New():
    return itkHistogramToEntropyImageFilterHDID2.New()

class itkHistogramToEntropyImageFilterHDID2(itkHistogramToEntropyImageFilterHDID2_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_swigregister(itkHistogramToEntropyImageFilterHDID2)

def itkHistogramToEntropyImageFilterHDID3_New():
    return itkHistogramToEntropyImageFilterHDID3.New()

class itkHistogramToEntropyImageFilterHDID3(itkHistogramToEntropyImageFilterHDID3_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_swigregister(itkHistogramToEntropyImageFilterHDID3)

def itkHistogramToEntropyImageFilterHDID4_New():
    return itkHistogramToEntropyImageFilterHDID4.New()

class itkHistogramToEntropyImageFilterHDID4(itkHistogramToEntropyImageFilterHDID4_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDID4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDID4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID4

        Create a new object of the class itkHistogramToEntropyImageFilterHDID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID4 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID4_swigregister(itkHistogramToEntropyImageFilterHDID4)

def itkHistogramToEntropyImageFilterHDIF2_New():
    return itkHistogramToEntropyImageFilterHDIF2.New()

class itkHistogramToEntropyImageFilterHDIF2(itkHistogramToEntropyImageFilterHDIF2_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_swigregister(itkHistogramToEntropyImageFilterHDIF2)

def itkHistogramToEntropyImageFilterHDIF3_New():
    return itkHistogramToEntropyImageFilterHDIF3.New()

class itkHistogramToEntropyImageFilterHDIF3(itkHistogramToEntropyImageFilterHDIF3_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_swigregister(itkHistogramToEntropyImageFilterHDIF3)

def itkHistogramToEntropyImageFilterHDIF4_New():
    return itkHistogramToEntropyImageFilterHDIF4.New()

class itkHistogramToEntropyImageFilterHDIF4(itkHistogramToEntropyImageFilterHDIF4_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHDIF4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHDIF4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHDIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF4

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF4 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF4_swigregister(itkHistogramToEntropyImageFilterHDIF4)

def itkHistogramToEntropyImageFilterHFID2_New():
    return itkHistogramToEntropyImageFilterHFID2.New()

class itkHistogramToEntropyImageFilterHFID2(itkHistogramToEntropyImageFilterHFID2_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_swigregister(itkHistogramToEntropyImageFilterHFID2)

def itkHistogramToEntropyImageFilterHFID3_New():
    return itkHistogramToEntropyImageFilterHFID3.New()

class itkHistogramToEntropyImageFilterHFID3(itkHistogramToEntropyImageFilterHFID3_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_swigregister(itkHistogramToEntropyImageFilterHFID3)

def itkHistogramToEntropyImageFilterHFID4_New():
    return itkHistogramToEntropyImageFilterHFID4.New()

class itkHistogramToEntropyImageFilterHFID4(itkHistogramToEntropyImageFilterHFID4_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFID4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFID4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID4

        Create a new object of the class itkHistogramToEntropyImageFilterHFID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID4 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID4_swigregister(itkHistogramToEntropyImageFilterHFID4)

def itkHistogramToEntropyImageFilterHFIF2_New():
    return itkHistogramToEntropyImageFilterHFIF2.New()

class itkHistogramToEntropyImageFilterHFIF2(itkHistogramToEntropyImageFilterHFIF2_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF2_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_swigregister(itkHistogramToEntropyImageFilterHFIF2)

def itkHistogramToEntropyImageFilterHFIF3_New():
    return itkHistogramToEntropyImageFilterHFIF3.New()

class itkHistogramToEntropyImageFilterHFIF3(itkHistogramToEntropyImageFilterHFIF3_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF3_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_swigregister(itkHistogramToEntropyImageFilterHFIF3)

def itkHistogramToEntropyImageFilterHFIF4_New():
    return itkHistogramToEntropyImageFilterHFIF4.New()

class itkHistogramToEntropyImageFilterHFIF4(itkHistogramToEntropyImageFilterHFIF4_Superclass):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToEntropyImageFilterHFIF4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToEntropyImageFilterHFIF4_Pointer"""
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToEntropyImageFilterHFIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF4

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF4 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF4_swigregister(itkHistogramToEntropyImageFilterHFIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_entropy_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToEntropyImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToEntropyImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_entropy_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToEntropyImageFilter
    histogram_to_entropy_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_entropy_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToImageFilter
    histogram_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_image_filter.__doc__ = filter_object.__doc__



