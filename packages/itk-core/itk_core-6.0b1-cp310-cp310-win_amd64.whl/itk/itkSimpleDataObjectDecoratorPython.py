# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSimpleDataObjectDecoratorPython
else:
    import _itkSimpleDataObjectDecoratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkRGBPixelPython

def itkSimpleDataObjectDecoratorAD_New():
    return itkSimpleDataObjectDecoratorAD.New()

class itkSimpleDataObjectDecoratorAD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorAD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorAD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorAD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkArrayD const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkArrayD
        Get(self) -> itkArrayD
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorAD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAD

        Create a new object of the class itkSimpleDataObjectDecoratorAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAD in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAD_swigregister(itkSimpleDataObjectDecoratorAD)

def itkSimpleDataObjectDecoratorAF_New():
    return itkSimpleDataObjectDecoratorAF.New()

class itkSimpleDataObjectDecoratorAF(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorAF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorAF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorAF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkArrayF const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkArrayF
        Get(self) -> itkArrayF
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorAF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAF

        Create a new object of the class itkSimpleDataObjectDecoratorAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAF_swigregister(itkSimpleDataObjectDecoratorAF)

def itkSimpleDataObjectDecoratorAUL_New():
    return itkSimpleDataObjectDecoratorAUL.New()

class itkSimpleDataObjectDecoratorAUL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorAUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorAUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorAUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkArrayUL const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkArrayUL
        Get(self) -> itkArrayUL
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAUL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorAUL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAUL

        Create a new object of the class itkSimpleDataObjectDecoratorAUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAUL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAUL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAUL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAUL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAUL_swigregister(itkSimpleDataObjectDecoratorAUL)

def itkSimpleDataObjectDecoratorAULL_New():
    return itkSimpleDataObjectDecoratorAULL.New()

class itkSimpleDataObjectDecoratorAULL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorAULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorAULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorAULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkArrayULL const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkArrayULL
        Get(self) -> itkArrayULL
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorAULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorAULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorAULL

        Create a new object of the class itkSimpleDataObjectDecoratorAULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorAULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorAULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorAULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorAULL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorAULL_swigregister(itkSimpleDataObjectDecoratorAULL)

def itkSimpleDataObjectDecoratorB_New():
    return itkSimpleDataObjectDecoratorB.New()

class itkSimpleDataObjectDecoratorB(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorB_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorB_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: bool const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> bool
        Get(self) -> bool const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorB

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorB

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorB

        Create a new object of the class itkSimpleDataObjectDecoratorB and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorB.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorB.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorB.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorB in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_swigregister(itkSimpleDataObjectDecoratorB)

def itkSimpleDataObjectDecoratorCD_New():
    return itkSimpleDataObjectDecoratorCD.New()

class itkSimpleDataObjectDecoratorCD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorCD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorCD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: stdcomplexD const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> stdcomplexD
        Get(self) -> stdcomplexD
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCD

        Create a new object of the class itkSimpleDataObjectDecoratorCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCD in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCD_swigregister(itkSimpleDataObjectDecoratorCD)

def itkSimpleDataObjectDecoratorCF_New():
    return itkSimpleDataObjectDecoratorCF.New()

class itkSimpleDataObjectDecoratorCF(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorCF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorCF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: stdcomplexF const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> stdcomplexF
        Get(self) -> stdcomplexF
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorCF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCF

        Create a new object of the class itkSimpleDataObjectDecoratorCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCF_swigregister(itkSimpleDataObjectDecoratorCF)

def itkSimpleDataObjectDecoratorCVF2_New():
    return itkSimpleDataObjectDecoratorCVF2.New()

class itkSimpleDataObjectDecoratorCVF2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorCVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorCVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorCVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkCovariantVectorF2 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkCovariantVectorF2
        Get(self) -> itkCovariantVectorF2
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorCVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF2

        Create a new object of the class itkSimpleDataObjectDecoratorCVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF2 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF2_swigregister(itkSimpleDataObjectDecoratorCVF2)

def itkSimpleDataObjectDecoratorCVF3_New():
    return itkSimpleDataObjectDecoratorCVF3.New()

class itkSimpleDataObjectDecoratorCVF3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorCVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorCVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorCVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkCovariantVectorF3 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkCovariantVectorF3
        Get(self) -> itkCovariantVectorF3
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorCVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF3

        Create a new object of the class itkSimpleDataObjectDecoratorCVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF3 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF3_swigregister(itkSimpleDataObjectDecoratorCVF3)

def itkSimpleDataObjectDecoratorCVF4_New():
    return itkSimpleDataObjectDecoratorCVF4.New()

class itkSimpleDataObjectDecoratorCVF4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorCVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorCVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorCVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkCovariantVectorF4 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkCovariantVectorF4
        Get(self) -> itkCovariantVectorF4
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorCVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorCVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorCVF4

        Create a new object of the class itkSimpleDataObjectDecoratorCVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorCVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorCVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorCVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorCVF4 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorCVF4_swigregister(itkSimpleDataObjectDecoratorCVF4)

def itkSimpleDataObjectDecoratorD_New():
    return itkSimpleDataObjectDecoratorD.New()

class itkSimpleDataObjectDecoratorD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorD_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: double const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> double
        Get(self) -> double const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorD

        Create a new object of the class itkSimpleDataObjectDecoratorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorD in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_swigregister(itkSimpleDataObjectDecoratorD)

def itkSimpleDataObjectDecoratorF_New():
    return itkSimpleDataObjectDecoratorF.New()

class itkSimpleDataObjectDecoratorF(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorF_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: float const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> float
        Get(self) -> float const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorF

        Create a new object of the class itkSimpleDataObjectDecoratorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorF in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_swigregister(itkSimpleDataObjectDecoratorF)

def itkSimpleDataObjectDecoratorRGBAUC_New():
    return itkSimpleDataObjectDecoratorRGBAUC.New()

class itkSimpleDataObjectDecoratorRGBAUC(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorRGBAUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorRGBAUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorRGBAUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkRGBAPixelUC const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkRGBAPixelUC
        Get(self) -> itkRGBAPixelUC
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBAUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorRGBAUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBAUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBAUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBAUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBAUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorRGBAUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorRGBAUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBAUC_swigregister(itkSimpleDataObjectDecoratorRGBAUC)

def itkSimpleDataObjectDecoratorRGBUC_New():
    return itkSimpleDataObjectDecoratorRGBUC.New()

class itkSimpleDataObjectDecoratorRGBUC(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorRGBUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorRGBUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorRGBUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkRGBPixelUC const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkRGBPixelUC
        Get(self) -> itkRGBPixelUC
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorRGBUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorRGBUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorRGBUC

        Create a new object of the class itkSimpleDataObjectDecoratorRGBUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorRGBUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorRGBUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorRGBUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorRGBUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorRGBUC_swigregister(itkSimpleDataObjectDecoratorRGBUC)

def itkSimpleDataObjectDecoratorSC_New():
    return itkSimpleDataObjectDecoratorSC.New()

class itkSimpleDataObjectDecoratorSC(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorSC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorSC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: signed char const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> signed char
        Get(self) -> signed char const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorSC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSC

        Create a new object of the class itkSimpleDataObjectDecoratorSC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_swigregister(itkSimpleDataObjectDecoratorSC)

def itkSimpleDataObjectDecoratorSL_New():
    return itkSimpleDataObjectDecoratorSL.New()

class itkSimpleDataObjectDecoratorSL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorSL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorSL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: long const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> long
        Get(self) -> long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorSL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSL

        Create a new object of the class itkSimpleDataObjectDecoratorSL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_swigregister(itkSimpleDataObjectDecoratorSL)

def itkSimpleDataObjectDecoratorSLL_New():
    return itkSimpleDataObjectDecoratorSLL.New()

class itkSimpleDataObjectDecoratorSLL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorSLL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorSLL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorSLL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: long long const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> long long
        Get(self) -> long long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSLL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorSLL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSLL

        Create a new object of the class itkSimpleDataObjectDecoratorSLL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSLL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSLL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSLL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSLL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSLL_swigregister(itkSimpleDataObjectDecoratorSLL)

def itkSimpleDataObjectDecoratorSS_New():
    return itkSimpleDataObjectDecoratorSS.New()

class itkSimpleDataObjectDecoratorSS(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorSS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorSS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: short const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> short
        Get(self) -> short const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSS

        Create a new object of the class itkSimpleDataObjectDecoratorSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorSS in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_swigregister(itkSimpleDataObjectDecoratorSS)

def itkSimpleDataObjectDecoratorUC_New():
    return itkSimpleDataObjectDecoratorUC.New()

class itkSimpleDataObjectDecoratorUC(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorUC_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: unsigned char const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> unsigned char
        Get(self) -> unsigned char const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUC

        Create a new object of the class itkSimpleDataObjectDecoratorUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUC in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_swigregister(itkSimpleDataObjectDecoratorUC)

def itkSimpleDataObjectDecoratorUL_New():
    return itkSimpleDataObjectDecoratorUL.New()

class itkSimpleDataObjectDecoratorUL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorUL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: unsigned long const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> unsigned long
        Get(self) -> unsigned long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorUL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUL

        Create a new object of the class itkSimpleDataObjectDecoratorUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_swigregister(itkSimpleDataObjectDecoratorUL)

def itkSimpleDataObjectDecoratorULL_New():
    return itkSimpleDataObjectDecoratorULL.New()

class itkSimpleDataObjectDecoratorULL(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorULL_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: unsigned long long const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> unsigned long long
        Get(self) -> unsigned long long const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorULL

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorULL

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorULL

        Create a new object of the class itkSimpleDataObjectDecoratorULL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorULL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorULL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorULL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorULL in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorULL_swigregister(itkSimpleDataObjectDecoratorULL)

def itkSimpleDataObjectDecoratorUS_New():
    return itkSimpleDataObjectDecoratorUS.New()

class itkSimpleDataObjectDecoratorUS(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorUS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorUS_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: unsigned short const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> unsigned short
        Get(self) -> unsigned short const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUS

        Create a new object of the class itkSimpleDataObjectDecoratorUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorUS in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_swigregister(itkSimpleDataObjectDecoratorUS)

def itkSimpleDataObjectDecoratorVF2_New():
    return itkSimpleDataObjectDecoratorVF2.New()

class itkSimpleDataObjectDecoratorVF2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorVF2_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkVectorF2 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkVectorF2
        Get(self) -> itkVectorF2
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF2

        Create a new object of the class itkSimpleDataObjectDecoratorVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF2 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF2_swigregister(itkSimpleDataObjectDecoratorVF2)

def itkSimpleDataObjectDecoratorVF3_New():
    return itkSimpleDataObjectDecoratorVF3.New()

class itkSimpleDataObjectDecoratorVF3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorVF3_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkVectorF3 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkVectorF3
        Get(self) -> itkVectorF3
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF3

        Create a new object of the class itkSimpleDataObjectDecoratorVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF3 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF3_swigregister(itkSimpleDataObjectDecoratorVF3)

def itkSimpleDataObjectDecoratorVF4_New():
    return itkSimpleDataObjectDecoratorVF4.New()

class itkSimpleDataObjectDecoratorVF4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorVF4_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkVectorF4 const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> itkVectorF4
        Get(self) -> itkVectorF4
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorVF4

        Create a new object of the class itkSimpleDataObjectDecoratorVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorVF4 in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorVF4_swigregister(itkSimpleDataObjectDecoratorVF4)

def itkSimpleDataObjectDecoratorstring_New():
    return itkSimpleDataObjectDecoratorstring.New()

class itkSimpleDataObjectDecoratorstring(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkSimpleDataObjectDecoratorstring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSimpleDataObjectDecoratorstring_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSimpleDataObjectDecoratorstring_Pointer"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: std::string const &

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Set(self, val)

    def Get(self, *args):
        r"""
        Get(self) -> std::string
        Get(self) -> std::string const &
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_Get(self, *args)
    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorstring

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSimpleDataObjectDecoratorstring

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorstring

        Create a new object of the class itkSimpleDataObjectDecoratorstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimpleDataObjectDecoratorstring.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimpleDataObjectDecoratorstring.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimpleDataObjectDecoratorstring.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimpleDataObjectDecoratorstring in _itkSimpleDataObjectDecoratorPython:
_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorstring_swigregister(itkSimpleDataObjectDecoratorstring)

