# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixPython
else:
    import _itkMatrixPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython

def itkMatrixF22_New():
  return itkMatrixF22.New()


def itkMatrixD22_New():
  return itkMatrixD22.New()


def itkMatrixF23_New():
  return itkMatrixF23.New()


def itkMatrixD23_New():
  return itkMatrixD23.New()


def itkMatrixF24_New():
  return itkMatrixF24.New()


def itkMatrixD24_New():
  return itkMatrixD24.New()


def itkMatrixF25_New():
  return itkMatrixF25.New()


def itkMatrixD25_New():
  return itkMatrixD25.New()


def itkMatrixF32_New():
  return itkMatrixF32.New()


def itkMatrixD32_New():
  return itkMatrixD32.New()


def itkMatrixF33_New():
  return itkMatrixF33.New()


def itkMatrixD33_New():
  return itkMatrixD33.New()


def itkMatrixF34_New():
  return itkMatrixF34.New()


def itkMatrixD34_New():
  return itkMatrixD34.New()


def itkMatrixF35_New():
  return itkMatrixF35.New()


def itkMatrixD35_New():
  return itkMatrixD35.New()


def itkMatrixF42_New():
  return itkMatrixF42.New()


def itkMatrixD42_New():
  return itkMatrixD42.New()


def itkMatrixF43_New():
  return itkMatrixF43.New()


def itkMatrixD43_New():
  return itkMatrixD43.New()


def itkMatrixF44_New():
  return itkMatrixF44.New()


def itkMatrixD44_New():
  return itkMatrixD44.New()


def itkMatrixF45_New():
  return itkMatrixF45.New()


def itkMatrixD45_New():
  return itkMatrixD45.New()


def itkMatrixF52_New():
  return itkMatrixF52.New()


def itkMatrixD52_New():
  return itkMatrixD52.New()


def itkMatrixF53_New():
  return itkMatrixF53.New()


def itkMatrixD53_New():
  return itkMatrixD53.New()


def itkMatrixF54_New():
  return itkMatrixF54.New()


def itkMatrixD54_New():
  return itkMatrixD54.New()


def itkMatrixF55_New():
  return itkMatrixF55.New()


def itkMatrixD55_New():
  return itkMatrixD55.New()

class itkMatrixD22(object):
    r"""Proxy of C++ itkMatrixD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD22___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD2 const &

        __mul__(self, pnt) -> itkPointD2

        Parameters
        ----------
        pnt: itkPointD2 const &

        __mul__(self, covect) -> itkCovariantVectorD2

        Parameters
        ----------
        covect: itkCovariantVectorD2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,2 > const &

        __mul__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD22

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD22___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD22___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_2_2
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_2_2
        """
        return _itkMatrixPython.itkMatrixD22___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD22_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD22"""
        return _itkMatrixPython.itkMatrixD22_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD22_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD22 const &

        """
        return _itkMatrixPython.itkMatrixD22___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_2_2"""
        return _itkMatrixPython.itkMatrixD22_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_2_2"""
        return _itkMatrixPython.itkMatrixD22_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD22_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD22_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD22_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD22_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD22_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD22 &

        """
        return _itkMatrixPython.itkMatrixD22_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD22_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_2_2 const &

        __init__(self) -> itkMatrixD22
        __init__(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: itkMatrixD22 const &

        """
        _itkMatrixPython.itkMatrixD22_swiginit(self, _itkMatrixPython.new_itkMatrixD22(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD22_swigregister(itkMatrixD22)
class itkMatrixD23(object):
    r"""Proxy of C++ itkMatrixD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD23___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD3 const &

        __mul__(self, pnt) -> itkPointD2

        Parameters
        ----------
        pnt: itkPointD3 const &

        __mul__(self, covect) -> itkCovariantVectorD2

        Parameters
        ----------
        covect: itkCovariantVectorD3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,3 > const &

        __mul__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD23

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD23___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD23___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_2_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_2_3
        """
        return _itkMatrixPython.itkMatrixD23___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD23_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD23"""
        return _itkMatrixPython.itkMatrixD23_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD23_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD23 const &

        """
        return _itkMatrixPython.itkMatrixD23___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,3,2 >"""
        return _itkMatrixPython.itkMatrixD23_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,3,2 >"""
        return _itkMatrixPython.itkMatrixD23_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD23_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD23_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD23_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD23_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD23_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD23 &

        """
        return _itkMatrixPython.itkMatrixD23_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD23_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_2_3 const &

        __init__(self) -> itkMatrixD23
        __init__(self, arg0) -> itkMatrixD23

        Parameters
        ----------
        arg0: itkMatrixD23 const &

        """
        _itkMatrixPython.itkMatrixD23_swiginit(self, _itkMatrixPython.new_itkMatrixD23(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD23_swigregister(itkMatrixD23)
class itkMatrixD24(object):
    r"""Proxy of C++ itkMatrixD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD24___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD4 const &

        __mul__(self, pnt) -> itkPointD2

        Parameters
        ----------
        pnt: itkPointD4 const &

        __mul__(self, covect) -> itkCovariantVectorD2

        Parameters
        ----------
        covect: itkCovariantVectorD4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,4 > const &

        __mul__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD24

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD24___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD24___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,2,4 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,2,4 > const &
        """
        return _itkMatrixPython.itkMatrixD24___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD24_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD24"""
        return _itkMatrixPython.itkMatrixD24_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD24_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD24 const &

        """
        return _itkMatrixPython.itkMatrixD24___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,4,2 >"""
        return _itkMatrixPython.itkMatrixD24_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,4,2 >"""
        return _itkMatrixPython.itkMatrixD24_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD24_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD24_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD24_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD24_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD24_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD24 &

        """
        return _itkMatrixPython.itkMatrixD24_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD24_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,2,4 > const &

        __init__(self) -> itkMatrixD24
        __init__(self, arg0) -> itkMatrixD24

        Parameters
        ----------
        arg0: itkMatrixD24 const &

        """
        _itkMatrixPython.itkMatrixD24_swiginit(self, _itkMatrixPython.new_itkMatrixD24(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD24_swigregister(itkMatrixD24)
class itkMatrixD25(object):
    r"""Proxy of C++ itkMatrixD25 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD25___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD5 const &

        __mul__(self, pnt) -> itkPointD2

        Parameters
        ----------
        pnt: itkPointD5 const &

        __mul__(self, covect) -> itkCovariantVectorD2

        Parameters
        ----------
        covect: itkCovariantVectorD5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,5 > const &

        __mul__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD25

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD25___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD25___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD25___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD25___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,2,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,2,5 > const &
        """
        return _itkMatrixPython.itkMatrixD25___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD25_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD25"""
        return _itkMatrixPython.itkMatrixD25_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD25_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD25 const &

        """
        return _itkMatrixPython.itkMatrixD25___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,5,2 >"""
        return _itkMatrixPython.itkMatrixD25_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,5,2 >"""
        return _itkMatrixPython.itkMatrixD25_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD25_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD25_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD25_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD25_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD25_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD25 &

        """
        return _itkMatrixPython.itkMatrixD25_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD25_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,2,5 > const &

        __init__(self) -> itkMatrixD25
        __init__(self, arg0) -> itkMatrixD25

        Parameters
        ----------
        arg0: itkMatrixD25 const &

        """
        _itkMatrixPython.itkMatrixD25_swiginit(self, _itkMatrixPython.new_itkMatrixD25(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD25

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD25 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD25_swigregister(itkMatrixD25)
class itkMatrixD32(object):
    r"""Proxy of C++ itkMatrixD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD32___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD2 const &

        __mul__(self, pnt) -> itkPointD3

        Parameters
        ----------
        pnt: itkPointD2 const &

        __mul__(self, covect) -> itkCovariantVectorD3

        Parameters
        ----------
        covect: itkCovariantVectorD2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,2 > const &

        __mul__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD32

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD32___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD32___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,3,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,3,2 > const &
        """
        return _itkMatrixPython.itkMatrixD32___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD32_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD32"""
        return _itkMatrixPython.itkMatrixD32_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD32_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD32 const &

        """
        return _itkMatrixPython.itkMatrixD32___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_2_3"""
        return _itkMatrixPython.itkMatrixD32_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_2_3"""
        return _itkMatrixPython.itkMatrixD32_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD32_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD32_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD32_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD32_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD32_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD32 &

        """
        return _itkMatrixPython.itkMatrixD32_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD32_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,3,2 > const &

        __init__(self) -> itkMatrixD32
        __init__(self, arg0) -> itkMatrixD32

        Parameters
        ----------
        arg0: itkMatrixD32 const &

        """
        _itkMatrixPython.itkMatrixD32_swiginit(self, _itkMatrixPython.new_itkMatrixD32(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD32_swigregister(itkMatrixD32)
class itkMatrixD33(object):
    r"""Proxy of C++ itkMatrixD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD33___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD3 const &

        __mul__(self, pnt) -> itkPointD3

        Parameters
        ----------
        pnt: itkPointD3 const &

        __mul__(self, covect) -> itkCovariantVectorD3

        Parameters
        ----------
        covect: itkCovariantVectorD3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,3 > const &

        __mul__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD33

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD33___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD33___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_3_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_3_3
        """
        return _itkMatrixPython.itkMatrixD33___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD33_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD33"""
        return _itkMatrixPython.itkMatrixD33_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD33_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD33 const &

        """
        return _itkMatrixPython.itkMatrixD33___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_3_3"""
        return _itkMatrixPython.itkMatrixD33_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_3_3"""
        return _itkMatrixPython.itkMatrixD33_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD33_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD33_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD33_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD33_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD33_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD33 &

        """
        return _itkMatrixPython.itkMatrixD33_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD33_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_3_3 const &

        __init__(self) -> itkMatrixD33
        __init__(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: itkMatrixD33 const &

        """
        _itkMatrixPython.itkMatrixD33_swiginit(self, _itkMatrixPython.new_itkMatrixD33(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD33_swigregister(itkMatrixD33)
class itkMatrixD34(object):
    r"""Proxy of C++ itkMatrixD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD34___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD4 const &

        __mul__(self, pnt) -> itkPointD3

        Parameters
        ----------
        pnt: itkPointD4 const &

        __mul__(self, covect) -> itkCovariantVectorD3

        Parameters
        ----------
        covect: itkCovariantVectorD4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,4 > const &

        __mul__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD34

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD34___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD34___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_3_4
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_3_4
        """
        return _itkMatrixPython.itkMatrixD34___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD34_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD34"""
        return _itkMatrixPython.itkMatrixD34_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD34_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD34 const &

        """
        return _itkMatrixPython.itkMatrixD34___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_4_3"""
        return _itkMatrixPython.itkMatrixD34_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_4_3"""
        return _itkMatrixPython.itkMatrixD34_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD34_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD34_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD34_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD34_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD34_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD34 &

        """
        return _itkMatrixPython.itkMatrixD34_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD34_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_3_4 const &

        __init__(self) -> itkMatrixD34
        __init__(self, arg0) -> itkMatrixD34

        Parameters
        ----------
        arg0: itkMatrixD34 const &

        """
        _itkMatrixPython.itkMatrixD34_swiginit(self, _itkMatrixPython.new_itkMatrixD34(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD34_swigregister(itkMatrixD34)
class itkMatrixD35(object):
    r"""Proxy of C++ itkMatrixD35 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD35___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD5 const &

        __mul__(self, pnt) -> itkPointD3

        Parameters
        ----------
        pnt: itkPointD5 const &

        __mul__(self, covect) -> itkCovariantVectorD3

        Parameters
        ----------
        covect: itkCovariantVectorD5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,5 > const &

        __mul__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD35

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD35___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD35___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD35___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD35___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,3,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,3,5 > const &
        """
        return _itkMatrixPython.itkMatrixD35___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD35_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD35"""
        return _itkMatrixPython.itkMatrixD35_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD35_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD35 const &

        """
        return _itkMatrixPython.itkMatrixD35___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,5,3 >"""
        return _itkMatrixPython.itkMatrixD35_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,5,3 >"""
        return _itkMatrixPython.itkMatrixD35_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD35_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD35_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD35_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD35_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD35_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD35 &

        """
        return _itkMatrixPython.itkMatrixD35_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD35_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,3,5 > const &

        __init__(self) -> itkMatrixD35
        __init__(self, arg0) -> itkMatrixD35

        Parameters
        ----------
        arg0: itkMatrixD35 const &

        """
        _itkMatrixPython.itkMatrixD35_swiginit(self, _itkMatrixPython.new_itkMatrixD35(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD35

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD35 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD35_swigregister(itkMatrixD35)
class itkMatrixD42(object):
    r"""Proxy of C++ itkMatrixD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD42___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD2 const &

        __mul__(self, pnt) -> itkPointD4

        Parameters
        ----------
        pnt: itkPointD2 const &

        __mul__(self, covect) -> itkCovariantVectorD4

        Parameters
        ----------
        covect: itkCovariantVectorD2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,2 > const &

        __mul__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD42

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD42___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD42___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,4,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,4,2 > const &
        """
        return _itkMatrixPython.itkMatrixD42___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD42_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD42"""
        return _itkMatrixPython.itkMatrixD42_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD42_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD42 const &

        """
        return _itkMatrixPython.itkMatrixD42___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,2,4 >"""
        return _itkMatrixPython.itkMatrixD42_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,2,4 >"""
        return _itkMatrixPython.itkMatrixD42_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD42_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD42_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD42_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD42_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD42_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD42 &

        """
        return _itkMatrixPython.itkMatrixD42_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD42_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,4,2 > const &

        __init__(self) -> itkMatrixD42
        __init__(self, arg0) -> itkMatrixD42

        Parameters
        ----------
        arg0: itkMatrixD42 const &

        """
        _itkMatrixPython.itkMatrixD42_swiginit(self, _itkMatrixPython.new_itkMatrixD42(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD42_swigregister(itkMatrixD42)
class itkMatrixD43(object):
    r"""Proxy of C++ itkMatrixD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD43___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD3 const &

        __mul__(self, pnt) -> itkPointD4

        Parameters
        ----------
        pnt: itkPointD3 const &

        __mul__(self, covect) -> itkCovariantVectorD4

        Parameters
        ----------
        covect: itkCovariantVectorD3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,3 > const &

        __mul__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD43

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD43___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD43___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_4_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_4_3
        """
        return _itkMatrixPython.itkMatrixD43___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD43_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD43"""
        return _itkMatrixPython.itkMatrixD43_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD43_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD43 const &

        """
        return _itkMatrixPython.itkMatrixD43___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_3_4"""
        return _itkMatrixPython.itkMatrixD43_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_3_4"""
        return _itkMatrixPython.itkMatrixD43_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD43_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD43_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD43_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD43_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD43_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD43 &

        """
        return _itkMatrixPython.itkMatrixD43_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD43_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_4_3 const &

        __init__(self) -> itkMatrixD43
        __init__(self, arg0) -> itkMatrixD43

        Parameters
        ----------
        arg0: itkMatrixD43 const &

        """
        _itkMatrixPython.itkMatrixD43_swiginit(self, _itkMatrixPython.new_itkMatrixD43(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD43_swigregister(itkMatrixD43)
class itkMatrixD44(object):
    r"""Proxy of C++ itkMatrixD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD44___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD4 const &

        __mul__(self, pnt) -> itkPointD4

        Parameters
        ----------
        pnt: itkPointD4 const &

        __mul__(self, covect) -> itkCovariantVectorD4

        Parameters
        ----------
        covect: itkCovariantVectorD4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,4 > const &

        __mul__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD44

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD44___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD44___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_4_4
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedD_4_4
        """
        return _itkMatrixPython.itkMatrixD44___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD44_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD44"""
        return _itkMatrixPython.itkMatrixD44_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD44_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD44 const &

        """
        return _itkMatrixPython.itkMatrixD44___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedD_4_4"""
        return _itkMatrixPython.itkMatrixD44_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedD_4_4"""
        return _itkMatrixPython.itkMatrixD44_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD44_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD44_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD44_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD44_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD44_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD44 &

        """
        return _itkMatrixPython.itkMatrixD44_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD44_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_4_4 const &

        __init__(self) -> itkMatrixD44
        __init__(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: itkMatrixD44 const &

        """
        _itkMatrixPython.itkMatrixD44_swiginit(self, _itkMatrixPython.new_itkMatrixD44(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD44_swigregister(itkMatrixD44)
class itkMatrixD45(object):
    r"""Proxy of C++ itkMatrixD45 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD45___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD5 const &

        __mul__(self, pnt) -> itkPointD4

        Parameters
        ----------
        pnt: itkPointD5 const &

        __mul__(self, covect) -> itkCovariantVectorD4

        Parameters
        ----------
        covect: itkCovariantVectorD5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,5 > const &

        __mul__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD45

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD45___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD45___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD45___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD45___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,4,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,4,5 > const &
        """
        return _itkMatrixPython.itkMatrixD45___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD45_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD45"""
        return _itkMatrixPython.itkMatrixD45_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD45_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD45 const &

        """
        return _itkMatrixPython.itkMatrixD45___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,5,4 >"""
        return _itkMatrixPython.itkMatrixD45_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,5,4 >"""
        return _itkMatrixPython.itkMatrixD45_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD45_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD45_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD45_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD45_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD45_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD45 &

        """
        return _itkMatrixPython.itkMatrixD45_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD45_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,4,5 > const &

        __init__(self) -> itkMatrixD45
        __init__(self, arg0) -> itkMatrixD45

        Parameters
        ----------
        arg0: itkMatrixD45 const &

        """
        _itkMatrixPython.itkMatrixD45_swiginit(self, _itkMatrixPython.new_itkMatrixD45(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD45

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD45 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD45_swigregister(itkMatrixD45)
class itkMatrixD52(object):
    r"""Proxy of C++ itkMatrixD52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD52___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD5

        Parameters
        ----------
        vect: itkVectorD2 const &

        __mul__(self, pnt) -> itkPointD5

        Parameters
        ----------
        pnt: itkPointD2 const &

        __mul__(self, covect) -> itkCovariantVectorD5

        Parameters
        ----------
        covect: itkCovariantVectorD2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,2 > const &

        __mul__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: itkMatrixD22 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD52

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD52___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD52___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD52___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD52___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,2 > const &
        """
        return _itkMatrixPython.itkMatrixD52___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD52_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD52"""
        return _itkMatrixPython.itkMatrixD52_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD52_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD52 const &

        """
        return _itkMatrixPython.itkMatrixD52___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,2,5 >"""
        return _itkMatrixPython.itkMatrixD52_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,2,5 >"""
        return _itkMatrixPython.itkMatrixD52_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD52_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD52_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD52_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD52_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD52_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD52 &

        """
        return _itkMatrixPython.itkMatrixD52_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD52_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,2 > const &

        __init__(self) -> itkMatrixD52
        __init__(self, arg0) -> itkMatrixD52

        Parameters
        ----------
        arg0: itkMatrixD52 const &

        """
        _itkMatrixPython.itkMatrixD52_swiginit(self, _itkMatrixPython.new_itkMatrixD52(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD52

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD52 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD52_swigregister(itkMatrixD52)
class itkMatrixD53(object):
    r"""Proxy of C++ itkMatrixD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD53___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD5

        Parameters
        ----------
        vect: itkVectorD3 const &

        __mul__(self, pnt) -> itkPointD5

        Parameters
        ----------
        pnt: itkPointD3 const &

        __mul__(self, covect) -> itkCovariantVectorD5

        Parameters
        ----------
        covect: itkCovariantVectorD3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,3 > const &

        __mul__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: itkMatrixD33 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD53

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD53___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD53___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD53___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD53___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,3 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,3 > const &
        """
        return _itkMatrixPython.itkMatrixD53___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD53_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD53"""
        return _itkMatrixPython.itkMatrixD53_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD53_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD53 const &

        """
        return _itkMatrixPython.itkMatrixD53___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,3,5 >"""
        return _itkMatrixPython.itkMatrixD53_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,3,5 >"""
        return _itkMatrixPython.itkMatrixD53_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD53_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD53_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD53_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD53_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD53_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD53 &

        """
        return _itkMatrixPython.itkMatrixD53_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD53_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,3 > const &

        __init__(self) -> itkMatrixD53
        __init__(self, arg0) -> itkMatrixD53

        Parameters
        ----------
        arg0: itkMatrixD53 const &

        """
        _itkMatrixPython.itkMatrixD53_swiginit(self, _itkMatrixPython.new_itkMatrixD53(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD53

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD53 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD53_swigregister(itkMatrixD53)
class itkMatrixD54(object):
    r"""Proxy of C++ itkMatrixD54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD54___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD5

        Parameters
        ----------
        vect: itkVectorD4 const &

        __mul__(self, pnt) -> itkPointD5

        Parameters
        ----------
        pnt: itkPointD4 const &

        __mul__(self, covect) -> itkCovariantVectorD5

        Parameters
        ----------
        covect: itkCovariantVectorD4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,4 > const &

        __mul__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: itkMatrixD44 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD54

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD54___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD54___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD54___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD54___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,4 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,4 > const &
        """
        return _itkMatrixPython.itkMatrixD54___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD54_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD54"""
        return _itkMatrixPython.itkMatrixD54_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD54_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD54 const &

        """
        return _itkMatrixPython.itkMatrixD54___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,4,5 >"""
        return _itkMatrixPython.itkMatrixD54_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,4,5 >"""
        return _itkMatrixPython.itkMatrixD54_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD54_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD54_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD54_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD54_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD54_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD54 &

        """
        return _itkMatrixPython.itkMatrixD54_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD54_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,4 > const &

        __init__(self) -> itkMatrixD54
        __init__(self, arg0) -> itkMatrixD54

        Parameters
        ----------
        arg0: itkMatrixD54 const &

        """
        _itkMatrixPython.itkMatrixD54_swiginit(self, _itkMatrixPython.new_itkMatrixD54(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD54

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD54 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD54_swigregister(itkMatrixD54)
class itkMatrixD55(object):
    r"""Proxy of C++ itkMatrixD55 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD55___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD5

        Parameters
        ----------
        vect: itkVectorD5 const &

        __mul__(self, pnt) -> itkPointD5

        Parameters
        ----------
        pnt: itkPointD5 const &

        __mul__(self, covect) -> itkCovariantVectorD5

        Parameters
        ----------
        covect: itkCovariantVectorD5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,5 > const &

        __mul__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD55

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD55___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD55___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD55___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixD55___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,5,5 > const &
        """
        return _itkMatrixPython.itkMatrixD55___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixD55_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD55"""
        return _itkMatrixPython.itkMatrixD55_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixPython.itkMatrixD55_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD55 const &

        """
        return _itkMatrixPython.itkMatrixD55___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,5,5 >"""
        return _itkMatrixPython.itkMatrixD55_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,5,5 >"""
        return _itkMatrixPython.itkMatrixD55_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixD55_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD55_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _itkMatrixPython.itkMatrixD55_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD55_cbegin(self)

    def cend(self):
        r"""cend(self) -> double const *"""
        return _itkMatrixPython.itkMatrixD55_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD55 &

        """
        return _itkMatrixPython.itkMatrixD55_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixD55_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,5 > const &

        __init__(self) -> itkMatrixD55
        __init__(self, arg0) -> itkMatrixD55

        Parameters
        ----------
        arg0: itkMatrixD55 const &

        """
        _itkMatrixPython.itkMatrixD55_swiginit(self, _itkMatrixPython.new_itkMatrixD55(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD55

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD55 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD55_swigregister(itkMatrixD55)
class itkMatrixF22(object):
    r"""Proxy of C++ itkMatrixF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF22___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF2

        Parameters
        ----------
        vect: itkVectorF2 const &

        __mul__(self, pnt) -> itkPointF2

        Parameters
        ----------
        pnt: itkPointF2 const &

        __mul__(self, covect) -> itkCovariantVectorF2

        Parameters
        ----------
        covect: itkCovariantVectorF2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,2 > const &

        __mul__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF22

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF22___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF22___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_2_2
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_2_2
        """
        return _itkMatrixPython.itkMatrixF22___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF22_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF22"""
        return _itkMatrixPython.itkMatrixF22_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF22_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF22 const &

        """
        return _itkMatrixPython.itkMatrixF22___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_2_2"""
        return _itkMatrixPython.itkMatrixF22_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_2_2"""
        return _itkMatrixPython.itkMatrixF22_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF22_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF22_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF22_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF22_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF22_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF22 &

        """
        return _itkMatrixPython.itkMatrixF22_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF22_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_2_2 const &

        __init__(self) -> itkMatrixF22
        __init__(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: itkMatrixF22 const &

        """
        _itkMatrixPython.itkMatrixF22_swiginit(self, _itkMatrixPython.new_itkMatrixF22(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF22_swigregister(itkMatrixF22)
class itkMatrixF23(object):
    r"""Proxy of C++ itkMatrixF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF23___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF2

        Parameters
        ----------
        vect: itkVectorF3 const &

        __mul__(self, pnt) -> itkPointF2

        Parameters
        ----------
        pnt: itkPointF3 const &

        __mul__(self, covect) -> itkCovariantVectorF2

        Parameters
        ----------
        covect: itkCovariantVectorF3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,3 > const &

        __mul__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF23

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF23___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF23___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_2_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_2_3
        """
        return _itkMatrixPython.itkMatrixF23___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF23_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF23"""
        return _itkMatrixPython.itkMatrixF23_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF23_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF23 const &

        """
        return _itkMatrixPython.itkMatrixF23___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,3,2 >"""
        return _itkMatrixPython.itkMatrixF23_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,3,2 >"""
        return _itkMatrixPython.itkMatrixF23_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF23_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF23_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF23_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF23_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF23_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF23 &

        """
        return _itkMatrixPython.itkMatrixF23_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF23_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_2_3 const &

        __init__(self) -> itkMatrixF23
        __init__(self, arg0) -> itkMatrixF23

        Parameters
        ----------
        arg0: itkMatrixF23 const &

        """
        _itkMatrixPython.itkMatrixF23_swiginit(self, _itkMatrixPython.new_itkMatrixF23(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF23_swigregister(itkMatrixF23)
class itkMatrixF24(object):
    r"""Proxy of C++ itkMatrixF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF24___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF2

        Parameters
        ----------
        vect: itkVectorF4 const &

        __mul__(self, pnt) -> itkPointF2

        Parameters
        ----------
        pnt: itkPointF4 const &

        __mul__(self, covect) -> itkCovariantVectorF2

        Parameters
        ----------
        covect: itkCovariantVectorF4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,4 > const &

        __mul__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF24

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF24___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF24___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,2,4 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,2,4 > const &
        """
        return _itkMatrixPython.itkMatrixF24___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF24_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF24"""
        return _itkMatrixPython.itkMatrixF24_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF24_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF24 const &

        """
        return _itkMatrixPython.itkMatrixF24___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,4,2 >"""
        return _itkMatrixPython.itkMatrixF24_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,4,2 >"""
        return _itkMatrixPython.itkMatrixF24_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF24_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF24_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF24_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF24_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF24_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF24 &

        """
        return _itkMatrixPython.itkMatrixF24_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF24_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,2,4 > const &

        __init__(self) -> itkMatrixF24
        __init__(self, arg0) -> itkMatrixF24

        Parameters
        ----------
        arg0: itkMatrixF24 const &

        """
        _itkMatrixPython.itkMatrixF24_swiginit(self, _itkMatrixPython.new_itkMatrixF24(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF24_swigregister(itkMatrixF24)
class itkMatrixF25(object):
    r"""Proxy of C++ itkMatrixF25 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF25___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF2

        Parameters
        ----------
        vect: itkVectorF5 const &

        __mul__(self, pnt) -> itkPointF2

        Parameters
        ----------
        pnt: itkPointF5 const &

        __mul__(self, covect) -> itkCovariantVectorF2

        Parameters
        ----------
        covect: itkCovariantVectorF5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,5 > const &

        __mul__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF25

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF25___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF25___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF25___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF25___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,2,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,2,5 > const &
        """
        return _itkMatrixPython.itkMatrixF25___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF25_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF25"""
        return _itkMatrixPython.itkMatrixF25_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF25_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF25 const &

        """
        return _itkMatrixPython.itkMatrixF25___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,5,2 >"""
        return _itkMatrixPython.itkMatrixF25_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,5,2 >"""
        return _itkMatrixPython.itkMatrixF25_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF25_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF25_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF25_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF25_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF25_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF25 &

        """
        return _itkMatrixPython.itkMatrixF25_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF25_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,2,5 > const &

        __init__(self) -> itkMatrixF25
        __init__(self, arg0) -> itkMatrixF25

        Parameters
        ----------
        arg0: itkMatrixF25 const &

        """
        _itkMatrixPython.itkMatrixF25_swiginit(self, _itkMatrixPython.new_itkMatrixF25(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF25

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF25 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF25_swigregister(itkMatrixF25)
class itkMatrixF32(object):
    r"""Proxy of C++ itkMatrixF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF32___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF3

        Parameters
        ----------
        vect: itkVectorF2 const &

        __mul__(self, pnt) -> itkPointF3

        Parameters
        ----------
        pnt: itkPointF2 const &

        __mul__(self, covect) -> itkCovariantVectorF3

        Parameters
        ----------
        covect: itkCovariantVectorF2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,2 > const &

        __mul__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF32

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF32___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF32___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,3,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,3,2 > const &
        """
        return _itkMatrixPython.itkMatrixF32___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF32_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF32"""
        return _itkMatrixPython.itkMatrixF32_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF32_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF32 const &

        """
        return _itkMatrixPython.itkMatrixF32___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_2_3"""
        return _itkMatrixPython.itkMatrixF32_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_2_3"""
        return _itkMatrixPython.itkMatrixF32_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF32_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF32_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF32_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF32_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF32_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF32 &

        """
        return _itkMatrixPython.itkMatrixF32_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF32_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,3,2 > const &

        __init__(self) -> itkMatrixF32
        __init__(self, arg0) -> itkMatrixF32

        Parameters
        ----------
        arg0: itkMatrixF32 const &

        """
        _itkMatrixPython.itkMatrixF32_swiginit(self, _itkMatrixPython.new_itkMatrixF32(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF32_swigregister(itkMatrixF32)
class itkMatrixF33(object):
    r"""Proxy of C++ itkMatrixF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF33___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF3

        Parameters
        ----------
        vect: itkVectorF3 const &

        __mul__(self, pnt) -> itkPointF3

        Parameters
        ----------
        pnt: itkPointF3 const &

        __mul__(self, covect) -> itkCovariantVectorF3

        Parameters
        ----------
        covect: itkCovariantVectorF3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,3 > const &

        __mul__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF33

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF33___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF33___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_3_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_3_3
        """
        return _itkMatrixPython.itkMatrixF33___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF33_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF33"""
        return _itkMatrixPython.itkMatrixF33_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF33_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF33 const &

        """
        return _itkMatrixPython.itkMatrixF33___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_3_3"""
        return _itkMatrixPython.itkMatrixF33_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_3_3"""
        return _itkMatrixPython.itkMatrixF33_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF33_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF33_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF33_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF33_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF33_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF33 &

        """
        return _itkMatrixPython.itkMatrixF33_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF33_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_3_3 const &

        __init__(self) -> itkMatrixF33
        __init__(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: itkMatrixF33 const &

        """
        _itkMatrixPython.itkMatrixF33_swiginit(self, _itkMatrixPython.new_itkMatrixF33(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF33_swigregister(itkMatrixF33)
class itkMatrixF34(object):
    r"""Proxy of C++ itkMatrixF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF34___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF3

        Parameters
        ----------
        vect: itkVectorF4 const &

        __mul__(self, pnt) -> itkPointF3

        Parameters
        ----------
        pnt: itkPointF4 const &

        __mul__(self, covect) -> itkCovariantVectorF3

        Parameters
        ----------
        covect: itkCovariantVectorF4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,4 > const &

        __mul__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF34

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF34___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF34___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_3_4
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_3_4
        """
        return _itkMatrixPython.itkMatrixF34___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF34_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF34"""
        return _itkMatrixPython.itkMatrixF34_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF34_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF34 const &

        """
        return _itkMatrixPython.itkMatrixF34___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_4_3"""
        return _itkMatrixPython.itkMatrixF34_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_4_3"""
        return _itkMatrixPython.itkMatrixF34_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF34_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF34_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF34_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF34_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF34_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF34 &

        """
        return _itkMatrixPython.itkMatrixF34_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF34_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_3_4 const &

        __init__(self) -> itkMatrixF34
        __init__(self, arg0) -> itkMatrixF34

        Parameters
        ----------
        arg0: itkMatrixF34 const &

        """
        _itkMatrixPython.itkMatrixF34_swiginit(self, _itkMatrixPython.new_itkMatrixF34(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF34_swigregister(itkMatrixF34)
class itkMatrixF35(object):
    r"""Proxy of C++ itkMatrixF35 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF35___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF3

        Parameters
        ----------
        vect: itkVectorF5 const &

        __mul__(self, pnt) -> itkPointF3

        Parameters
        ----------
        pnt: itkPointF5 const &

        __mul__(self, covect) -> itkCovariantVectorF3

        Parameters
        ----------
        covect: itkCovariantVectorF5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,5 > const &

        __mul__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF35

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF35___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF35___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF35___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF35___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,3,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,3,5 > const &
        """
        return _itkMatrixPython.itkMatrixF35___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF35_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF35"""
        return _itkMatrixPython.itkMatrixF35_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF35_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF35 const &

        """
        return _itkMatrixPython.itkMatrixF35___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,5,3 >"""
        return _itkMatrixPython.itkMatrixF35_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,5,3 >"""
        return _itkMatrixPython.itkMatrixF35_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF35_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF35_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF35_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF35_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF35_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF35 &

        """
        return _itkMatrixPython.itkMatrixF35_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF35_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,3,5 > const &

        __init__(self) -> itkMatrixF35
        __init__(self, arg0) -> itkMatrixF35

        Parameters
        ----------
        arg0: itkMatrixF35 const &

        """
        _itkMatrixPython.itkMatrixF35_swiginit(self, _itkMatrixPython.new_itkMatrixF35(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF35

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF35 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF35_swigregister(itkMatrixF35)
class itkMatrixF42(object):
    r"""Proxy of C++ itkMatrixF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF42___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF4

        Parameters
        ----------
        vect: itkVectorF2 const &

        __mul__(self, pnt) -> itkPointF4

        Parameters
        ----------
        pnt: itkPointF2 const &

        __mul__(self, covect) -> itkCovariantVectorF4

        Parameters
        ----------
        covect: itkCovariantVectorF2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,2 > const &

        __mul__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF42

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF42___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF42___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,4,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,4,2 > const &
        """
        return _itkMatrixPython.itkMatrixF42___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF42_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF42"""
        return _itkMatrixPython.itkMatrixF42_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF42_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF42 const &

        """
        return _itkMatrixPython.itkMatrixF42___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,2,4 >"""
        return _itkMatrixPython.itkMatrixF42_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,2,4 >"""
        return _itkMatrixPython.itkMatrixF42_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF42_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF42_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF42_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF42_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF42_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF42 &

        """
        return _itkMatrixPython.itkMatrixF42_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF42_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,4,2 > const &

        __init__(self) -> itkMatrixF42
        __init__(self, arg0) -> itkMatrixF42

        Parameters
        ----------
        arg0: itkMatrixF42 const &

        """
        _itkMatrixPython.itkMatrixF42_swiginit(self, _itkMatrixPython.new_itkMatrixF42(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF42_swigregister(itkMatrixF42)
class itkMatrixF43(object):
    r"""Proxy of C++ itkMatrixF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF43___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF4

        Parameters
        ----------
        vect: itkVectorF3 const &

        __mul__(self, pnt) -> itkPointF4

        Parameters
        ----------
        pnt: itkPointF3 const &

        __mul__(self, covect) -> itkCovariantVectorF4

        Parameters
        ----------
        covect: itkCovariantVectorF3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,3 > const &

        __mul__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF43

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF43___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF43___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_4_3
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_4_3
        """
        return _itkMatrixPython.itkMatrixF43___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF43_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF43"""
        return _itkMatrixPython.itkMatrixF43_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF43_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF43 const &

        """
        return _itkMatrixPython.itkMatrixF43___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_3_4"""
        return _itkMatrixPython.itkMatrixF43_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_3_4"""
        return _itkMatrixPython.itkMatrixF43_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF43_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF43_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF43_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF43_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF43_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF43 &

        """
        return _itkMatrixPython.itkMatrixF43_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF43_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_4_3 const &

        __init__(self) -> itkMatrixF43
        __init__(self, arg0) -> itkMatrixF43

        Parameters
        ----------
        arg0: itkMatrixF43 const &

        """
        _itkMatrixPython.itkMatrixF43_swiginit(self, _itkMatrixPython.new_itkMatrixF43(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF43_swigregister(itkMatrixF43)
class itkMatrixF44(object):
    r"""Proxy of C++ itkMatrixF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF44___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF4

        Parameters
        ----------
        vect: itkVectorF4 const &

        __mul__(self, pnt) -> itkPointF4

        Parameters
        ----------
        pnt: itkPointF4 const &

        __mul__(self, covect) -> itkCovariantVectorF4

        Parameters
        ----------
        covect: itkCovariantVectorF4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,4 > const &

        __mul__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF44

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF44___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF44___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_4_4
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixedF_4_4
        """
        return _itkMatrixPython.itkMatrixF44___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF44_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF44"""
        return _itkMatrixPython.itkMatrixF44_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF44_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF44 const &

        """
        return _itkMatrixPython.itkMatrixF44___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixedF_4_4"""
        return _itkMatrixPython.itkMatrixF44_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixedF_4_4"""
        return _itkMatrixPython.itkMatrixF44_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF44_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF44_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF44_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF44_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF44_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF44 &

        """
        return _itkMatrixPython.itkMatrixF44_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF44_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_4_4 const &

        __init__(self) -> itkMatrixF44
        __init__(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: itkMatrixF44 const &

        """
        _itkMatrixPython.itkMatrixF44_swiginit(self, _itkMatrixPython.new_itkMatrixF44(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF44_swigregister(itkMatrixF44)
class itkMatrixF45(object):
    r"""Proxy of C++ itkMatrixF45 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF45___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF4

        Parameters
        ----------
        vect: itkVectorF5 const &

        __mul__(self, pnt) -> itkPointF4

        Parameters
        ----------
        pnt: itkPointF5 const &

        __mul__(self, covect) -> itkCovariantVectorF4

        Parameters
        ----------
        covect: itkCovariantVectorF5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,5 > const &

        __mul__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF45

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF45___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF45___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF45___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF45___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,4,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,4,5 > const &
        """
        return _itkMatrixPython.itkMatrixF45___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF45_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF45"""
        return _itkMatrixPython.itkMatrixF45_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF45_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF45 const &

        """
        return _itkMatrixPython.itkMatrixF45___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,5,4 >"""
        return _itkMatrixPython.itkMatrixF45_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,5,4 >"""
        return _itkMatrixPython.itkMatrixF45_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF45_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF45_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF45_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF45_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF45_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF45 &

        """
        return _itkMatrixPython.itkMatrixF45_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF45_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,4,5 > const &

        __init__(self) -> itkMatrixF45
        __init__(self, arg0) -> itkMatrixF45

        Parameters
        ----------
        arg0: itkMatrixF45 const &

        """
        _itkMatrixPython.itkMatrixF45_swiginit(self, _itkMatrixPython.new_itkMatrixF45(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF45

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF45 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF45_swigregister(itkMatrixF45)
class itkMatrixF52(object):
    r"""Proxy of C++ itkMatrixF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF52___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF5

        Parameters
        ----------
        vect: itkVectorF2 const &

        __mul__(self, pnt) -> itkPointF5

        Parameters
        ----------
        pnt: itkPointF2 const &

        __mul__(self, covect) -> itkCovariantVectorF5

        Parameters
        ----------
        covect: itkCovariantVectorF2 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,2 > const &

        __mul__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: itkMatrixF22 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF52

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF52___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF52___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF52___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF52___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,2 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,2 > const &
        """
        return _itkMatrixPython.itkMatrixF52___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF52_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF52"""
        return _itkMatrixPython.itkMatrixF52_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF52_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF52 const &

        """
        return _itkMatrixPython.itkMatrixF52___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,2,5 >"""
        return _itkMatrixPython.itkMatrixF52_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,2,5 >"""
        return _itkMatrixPython.itkMatrixF52_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF52_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF52_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF52_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF52_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF52_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF52 &

        """
        return _itkMatrixPython.itkMatrixF52_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF52_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,2 > const &

        __init__(self) -> itkMatrixF52
        __init__(self, arg0) -> itkMatrixF52

        Parameters
        ----------
        arg0: itkMatrixF52 const &

        """
        _itkMatrixPython.itkMatrixF52_swiginit(self, _itkMatrixPython.new_itkMatrixF52(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF52

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF52 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF52_swigregister(itkMatrixF52)
class itkMatrixF53(object):
    r"""Proxy of C++ itkMatrixF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF53___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF5

        Parameters
        ----------
        vect: itkVectorF3 const &

        __mul__(self, pnt) -> itkPointF5

        Parameters
        ----------
        pnt: itkPointF3 const &

        __mul__(self, covect) -> itkCovariantVectorF5

        Parameters
        ----------
        covect: itkCovariantVectorF3 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,3 > const &

        __mul__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: itkMatrixF33 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF53

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF53___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF53___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF53___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF53___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,3 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,3 > const &
        """
        return _itkMatrixPython.itkMatrixF53___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF53_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF53"""
        return _itkMatrixPython.itkMatrixF53_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF53_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF53 const &

        """
        return _itkMatrixPython.itkMatrixF53___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,3,5 >"""
        return _itkMatrixPython.itkMatrixF53_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,3,5 >"""
        return _itkMatrixPython.itkMatrixF53_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF53_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF53_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF53_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF53_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF53_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF53 &

        """
        return _itkMatrixPython.itkMatrixF53_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF53_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,3 > const &

        __init__(self) -> itkMatrixF53
        __init__(self, arg0) -> itkMatrixF53

        Parameters
        ----------
        arg0: itkMatrixF53 const &

        """
        _itkMatrixPython.itkMatrixF53_swiginit(self, _itkMatrixPython.new_itkMatrixF53(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF53

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF53 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF53_swigregister(itkMatrixF53)
class itkMatrixF54(object):
    r"""Proxy of C++ itkMatrixF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF54___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF5

        Parameters
        ----------
        vect: itkVectorF4 const &

        __mul__(self, pnt) -> itkPointF5

        Parameters
        ----------
        pnt: itkPointF4 const &

        __mul__(self, covect) -> itkCovariantVectorF5

        Parameters
        ----------
        covect: itkCovariantVectorF4 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,4 > const &

        __mul__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: itkMatrixF44 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF54

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF54___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF54___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF54___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF54___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,4 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,4 > const &
        """
        return _itkMatrixPython.itkMatrixF54___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF54_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF54"""
        return _itkMatrixPython.itkMatrixF54_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF54_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF54 const &

        """
        return _itkMatrixPython.itkMatrixF54___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,4,5 >"""
        return _itkMatrixPython.itkMatrixF54_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,4,5 >"""
        return _itkMatrixPython.itkMatrixF54_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF54_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF54_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF54_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF54_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF54_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF54 &

        """
        return _itkMatrixPython.itkMatrixF54_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF54_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,4 > const &

        __init__(self) -> itkMatrixF54
        __init__(self, arg0) -> itkMatrixF54

        Parameters
        ----------
        arg0: itkMatrixF54 const &

        """
        _itkMatrixPython.itkMatrixF54_swiginit(self, _itkMatrixPython.new_itkMatrixF54(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF54

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF54 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF54_swigregister(itkMatrixF54)
class itkMatrixF55(object):
    r"""Proxy of C++ itkMatrixF55 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __imul__(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF55___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorF5

        Parameters
        ----------
        vect: itkVectorF5 const &

        __mul__(self, pnt) -> itkPointF5

        Parameters
        ----------
        pnt: itkPointF5 const &

        __mul__(self, covect) -> itkCovariantVectorF5

        Parameters
        ----------
        covect: itkCovariantVectorF5 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< float,5 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< float,5 > const &

        __mul__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        __mul__(self, matrix) -> vnl_matrixF

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __mul__(self, vc) -> vnl_vectorF

        Parameters
        ----------
        vc: vnl_vectorF const &

        __mul__(self, value) -> itkMatrixF55

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF55___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF55___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF55___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixPython.itkMatrixF55___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,5 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< float,5,5 > const &
        """
        return _itkMatrixPython.itkMatrixF55___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixPython.itkMatrixF55_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixF55"""
        return _itkMatrixPython.itkMatrixF55_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkMatrixPython.itkMatrixF55_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixF55 const &

        """
        return _itkMatrixPython.itkMatrixF55___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< float,5,5 >"""
        return _itkMatrixPython.itkMatrixF55_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< float,5,5 >"""
        return _itkMatrixPython.itkMatrixF55_GetTranspose(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkMatrixPython.itkMatrixF55_size(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF55_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _itkMatrixPython.itkMatrixF55_end(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF55_cbegin(self)

    def cend(self):
        r"""cend(self) -> float const *"""
        return _itkMatrixPython.itkMatrixF55_cend(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixF55 &

        """
        return _itkMatrixPython.itkMatrixF55_swap(self, other)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkMatrixPython.itkMatrixF55_PrintSelf(self, os, indent)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,5 > const &

        __init__(self) -> itkMatrixF55
        __init__(self, arg0) -> itkMatrixF55

        Parameters
        ----------
        arg0: itkMatrixF55 const &

        """
        _itkMatrixPython.itkMatrixF55_swiginit(self, _itkMatrixPython.new_itkMatrixF55(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF55

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixF55 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF55_swigregister(itkMatrixF55)

