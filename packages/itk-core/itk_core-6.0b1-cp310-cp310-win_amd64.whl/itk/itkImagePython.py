# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImagePython
else:
    import _itkImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
class vectoritkImageRGBUC2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBUC2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBUC2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBUC2

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBUC2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBUC2_Pointer >::difference_type
        v: std::vector< itkImageRGBUC2_Pointer,std::allocator< itkImageRGBUC2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBUC2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBUC2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBUC2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBUC2_Pointer,std::allocator< itkImageRGBUC2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC2_Pointer >::difference_type
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBUC2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBUC2_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBUC2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBUC2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBUC2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBUC2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBUC2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBUC2_Pointer >::iterator
        last: std::vector< itkImageRGBUC2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBUC2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBUC2
        __init__(self, other) -> vectoritkImageRGBUC2

        Parameters
        ----------
        other: std::vector< itkImageRGBUC2_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBUC2

        Parameters
        ----------
        size: std::vector< itkImageRGBUC2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBUC2

        Parameters
        ----------
        size: std::vector< itkImageRGBUC2_Pointer >::size_type
        value: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBUC2_swiginit(self, _itkImagePython.new_vectoritkImageRGBUC2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC2_Pointer >::size_type
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC2_Pointer >::size_type
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC2_Pointer >::iterator
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC2_Pointer >::iterator
        n: std::vector< itkImageRGBUC2_Pointer >::size_type
        x: std::vector< itkImageRGBUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBUC2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBUC2

# Register vectoritkImageRGBUC2 in _itkImagePython:
_itkImagePython.vectoritkImageRGBUC2_swigregister(vectoritkImageRGBUC2)
class vectoritkImageRGBAUC2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBAUC2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBAUC2

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        v: std::vector< itkImageRGBAUC2_Pointer,std::allocator< itkImageRGBAUC2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBAUC2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBAUC2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBAUC2_Pointer,std::allocator< itkImageRGBAUC2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC2_Pointer >::difference_type
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBAUC2_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBAUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBAUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBAUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBAUC2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBAUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBAUC2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBAUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBAUC2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBAUC2_Pointer >::iterator
        last: std::vector< itkImageRGBAUC2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBAUC2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBAUC2
        __init__(self, other) -> vectoritkImageRGBAUC2

        Parameters
        ----------
        other: std::vector< itkImageRGBAUC2_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBAUC2

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBAUC2

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC2_Pointer >::size_type
        value: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBAUC2_swiginit(self, _itkImagePython.new_vectoritkImageRGBAUC2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBAUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC2_Pointer >::size_type
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC2_Pointer >::size_type
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBAUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC2_Pointer >::iterator
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC2_Pointer >::iterator
        n: std::vector< itkImageRGBAUC2_Pointer >::size_type
        x: std::vector< itkImageRGBAUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBAUC2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBAUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBAUC2

# Register vectoritkImageRGBAUC2 in _itkImagePython:
_itkImagePython.vectoritkImageRGBAUC2_swigregister(vectoritkImageRGBAUC2)
class vectoritkImageVF22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF22

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type
        j: std::vector< itkImageVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type
        j: std::vector< itkImageVF22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type
        j: std::vector< itkImageVF22_Pointer >::difference_type
        v: std::vector< itkImageVF22_Pointer,std::allocator< itkImageVF22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type
        j: std::vector< itkImageVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF22_Pointer,std::allocator< itkImageVF22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF22_Pointer >::difference_type
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF22_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF22_Pointer >::iterator
        last: std::vector< itkImageVF22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF22
        __init__(self, other) -> vectoritkImageVF22

        Parameters
        ----------
        other: std::vector< itkImageVF22_Pointer > const &

        __init__(self, size) -> vectoritkImageVF22

        Parameters
        ----------
        size: std::vector< itkImageVF22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF22

        Parameters
        ----------
        size: std::vector< itkImageVF22_Pointer >::size_type
        value: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF22_swiginit(self, _itkImagePython.new_vectoritkImageVF22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF22_Pointer >::size_type
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF22_Pointer >::size_type
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF22_Pointer >::iterator
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF22_Pointer >::iterator
        n: std::vector< itkImageVF22_Pointer >::size_type
        x: std::vector< itkImageVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF22

# Register vectoritkImageVF22 in _itkImagePython:
_itkImagePython.vectoritkImageVF22_swigregister(vectoritkImageVF22)
class vectoritkImageVF32(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF32_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF32___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF32

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type
        j: std::vector< itkImageVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type
        j: std::vector< itkImageVF32_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type
        j: std::vector< itkImageVF32_Pointer >::difference_type
        v: std::vector< itkImageVF32_Pointer,std::allocator< itkImageVF32_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type
        j: std::vector< itkImageVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF32

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF32_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF32_Pointer,std::allocator< itkImageVF32_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF32_Pointer >::difference_type
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF32_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF32_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF32_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF32_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF32_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF32_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF32_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF32_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF32_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF32_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF32_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF32_Pointer >::iterator
        last: std::vector< itkImageVF32_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF32
        __init__(self, other) -> vectoritkImageVF32

        Parameters
        ----------
        other: std::vector< itkImageVF32_Pointer > const &

        __init__(self, size) -> vectoritkImageVF32

        Parameters
        ----------
        size: std::vector< itkImageVF32_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF32

        Parameters
        ----------
        size: std::vector< itkImageVF32_Pointer >::size_type
        value: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF32_swiginit(self, _itkImagePython.new_vectoritkImageVF32(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF32_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF32_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF32_Pointer >::size_type
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF32_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF32_Pointer >::size_type
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF32_Pointer >::iterator
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF32_Pointer >::iterator
        n: std::vector< itkImageVF32_Pointer >::size_type
        x: std::vector< itkImageVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF32_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF32_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF32_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF32_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF32

# Register vectoritkImageVF32 in _itkImagePython:
_itkImagePython.vectoritkImageVF32_swigregister(vectoritkImageVF32)
class vectoritkImageVF42(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF42_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF42_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF42___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF42___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF42

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type
        j: std::vector< itkImageVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF42___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type
        j: std::vector< itkImageVF42_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type
        j: std::vector< itkImageVF42_Pointer >::difference_type
        v: std::vector< itkImageVF42_Pointer,std::allocator< itkImageVF42_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF42___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type
        j: std::vector< itkImageVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF42___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF42___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF42

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF42_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF42___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF42_Pointer,std::allocator< itkImageVF42_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF42_Pointer >::difference_type
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF42_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF42_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF42_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF42_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF42_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF42_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF42_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF42_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF42_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF42_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF42_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF42_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF42_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF42_Pointer >::iterator
        last: std::vector< itkImageVF42_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF42_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF42
        __init__(self, other) -> vectoritkImageVF42

        Parameters
        ----------
        other: std::vector< itkImageVF42_Pointer > const &

        __init__(self, size) -> vectoritkImageVF42

        Parameters
        ----------
        size: std::vector< itkImageVF42_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF42

        Parameters
        ----------
        size: std::vector< itkImageVF42_Pointer >::size_type
        value: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF42_swiginit(self, _itkImagePython.new_vectoritkImageVF42(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF42_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF42_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF42_Pointer >::size_type
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF42_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF42_Pointer >::size_type
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF42_Pointer >::iterator
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF42_Pointer >::iterator
        n: std::vector< itkImageVF42_Pointer >::size_type
        x: std::vector< itkImageVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF42_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF42_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF42_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF42_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF42

# Register vectoritkImageVF42 in _itkImagePython:
_itkImagePython.vectoritkImageVF42_swigregister(vectoritkImageVF42)
class vectoritkImageCVF22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF22

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type
        j: std::vector< itkImageCVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type
        j: std::vector< itkImageCVF22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type
        j: std::vector< itkImageCVF22_Pointer >::difference_type
        v: std::vector< itkImageCVF22_Pointer,std::allocator< itkImageCVF22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type
        j: std::vector< itkImageCVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF22_Pointer,std::allocator< itkImageCVF22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF22_Pointer >::difference_type
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF22_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF22_Pointer >::iterator
        last: std::vector< itkImageCVF22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF22
        __init__(self, other) -> vectoritkImageCVF22

        Parameters
        ----------
        other: std::vector< itkImageCVF22_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF22

        Parameters
        ----------
        size: std::vector< itkImageCVF22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF22

        Parameters
        ----------
        size: std::vector< itkImageCVF22_Pointer >::size_type
        value: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF22_swiginit(self, _itkImagePython.new_vectoritkImageCVF22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF22_Pointer >::size_type
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF22_Pointer >::size_type
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF22_Pointer >::iterator
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF22_Pointer >::iterator
        n: std::vector< itkImageCVF22_Pointer >::size_type
        x: std::vector< itkImageCVF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF22

# Register vectoritkImageCVF22 in _itkImagePython:
_itkImagePython.vectoritkImageCVF22_swigregister(vectoritkImageCVF22)
class vectoritkImageCVF32(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF32_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF32

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type
        j: std::vector< itkImageCVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type
        j: std::vector< itkImageCVF32_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type
        j: std::vector< itkImageCVF32_Pointer >::difference_type
        v: std::vector< itkImageCVF32_Pointer,std::allocator< itkImageCVF32_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type
        j: std::vector< itkImageCVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF32

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF32_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF32_Pointer,std::allocator< itkImageCVF32_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF32_Pointer >::difference_type
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF32_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF32_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF32_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF32_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF32_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF32_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF32_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF32_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF32_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF32_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF32_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF32_Pointer >::iterator
        last: std::vector< itkImageCVF32_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF32
        __init__(self, other) -> vectoritkImageCVF32

        Parameters
        ----------
        other: std::vector< itkImageCVF32_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF32

        Parameters
        ----------
        size: std::vector< itkImageCVF32_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF32

        Parameters
        ----------
        size: std::vector< itkImageCVF32_Pointer >::size_type
        value: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF32_swiginit(self, _itkImagePython.new_vectoritkImageCVF32(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF32_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF32_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF32_Pointer >::size_type
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF32_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF32_Pointer >::size_type
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF32_Pointer >::iterator
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF32_Pointer >::iterator
        n: std::vector< itkImageCVF32_Pointer >::size_type
        x: std::vector< itkImageCVF32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF32_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF32_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF32_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF32_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF32

# Register vectoritkImageCVF32 in _itkImagePython:
_itkImagePython.vectoritkImageCVF32_swigregister(vectoritkImageCVF32)
class vectoritkImageCVF42(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF42_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF42_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF42

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type
        j: std::vector< itkImageCVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF42___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type
        j: std::vector< itkImageCVF42_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type
        j: std::vector< itkImageCVF42_Pointer >::difference_type
        v: std::vector< itkImageCVF42_Pointer,std::allocator< itkImageCVF42_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF42___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type
        j: std::vector< itkImageCVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF42___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF42___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF42

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF42_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF42___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF42_Pointer,std::allocator< itkImageCVF42_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF42_Pointer >::difference_type
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF42_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF42_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF42_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF42_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF42_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF42_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF42_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF42_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF42_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF42_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF42_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF42_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF42_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF42_Pointer >::iterator
        last: std::vector< itkImageCVF42_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF42_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF42
        __init__(self, other) -> vectoritkImageCVF42

        Parameters
        ----------
        other: std::vector< itkImageCVF42_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF42

        Parameters
        ----------
        size: std::vector< itkImageCVF42_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF42

        Parameters
        ----------
        size: std::vector< itkImageCVF42_Pointer >::size_type
        value: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF42_swiginit(self, _itkImagePython.new_vectoritkImageCVF42(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF42_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF42_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF42_Pointer >::size_type
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF42_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF42_Pointer >::size_type
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF42_Pointer >::iterator
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF42_Pointer >::iterator
        n: std::vector< itkImageCVF42_Pointer >::size_type
        x: std::vector< itkImageCVF42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF42_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF42_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF42_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF42_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF42

# Register vectoritkImageCVF42 in _itkImagePython:
_itkImagePython.vectoritkImageCVF42_swigregister(vectoritkImageCVF42)
class vectoritkImageSS2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSS2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSS2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSS2

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type
        j: std::vector< itkImageSS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type
        j: std::vector< itkImageSS2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type
        j: std::vector< itkImageSS2_Pointer >::difference_type
        v: std::vector< itkImageSS2_Pointer,std::allocator< itkImageSS2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSS2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type
        j: std::vector< itkImageSS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSS2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSS2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSS2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSS2_Pointer,std::allocator< itkImageSS2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSS2_Pointer >::difference_type
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSS2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSS2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSS2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSS2_Pointer > &

        """
        return _itkImagePython.vectoritkImageSS2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSS2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSS2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSS2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSS2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSS2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSS2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSS2_Pointer >::iterator
        last: std::vector< itkImageSS2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSS2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSS2
        __init__(self, other) -> vectoritkImageSS2

        Parameters
        ----------
        other: std::vector< itkImageSS2_Pointer > const &

        __init__(self, size) -> vectoritkImageSS2

        Parameters
        ----------
        size: std::vector< itkImageSS2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSS2

        Parameters
        ----------
        size: std::vector< itkImageSS2_Pointer >::size_type
        value: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSS2_swiginit(self, _itkImagePython.new_vectoritkImageSS2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSS2_Pointer >::size_type
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSS2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSS2_Pointer >::size_type
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSS2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS2_Pointer >::iterator
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSS2_Pointer >::iterator
        n: std::vector< itkImageSS2_Pointer >::size_type
        x: std::vector< itkImageSS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSS2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSS2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSS2

# Register vectoritkImageSS2 in _itkImagePython:
_itkImagePython.vectoritkImageSS2_swigregister(vectoritkImageSS2)
class vectoritkImageUC2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUC2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUC2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUC2

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type
        j: std::vector< itkImageUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type
        j: std::vector< itkImageUC2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type
        j: std::vector< itkImageUC2_Pointer >::difference_type
        v: std::vector< itkImageUC2_Pointer,std::allocator< itkImageUC2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUC2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type
        j: std::vector< itkImageUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUC2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUC2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUC2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUC2_Pointer,std::allocator< itkImageUC2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUC2_Pointer >::difference_type
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUC2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUC2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUC2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUC2_Pointer > &

        """
        return _itkImagePython.vectoritkImageUC2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUC2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUC2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUC2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUC2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUC2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUC2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUC2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUC2_Pointer >::iterator
        last: std::vector< itkImageUC2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUC2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUC2
        __init__(self, other) -> vectoritkImageUC2

        Parameters
        ----------
        other: std::vector< itkImageUC2_Pointer > const &

        __init__(self, size) -> vectoritkImageUC2

        Parameters
        ----------
        size: std::vector< itkImageUC2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUC2

        Parameters
        ----------
        size: std::vector< itkImageUC2_Pointer >::size_type
        value: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUC2_swiginit(self, _itkImagePython.new_vectoritkImageUC2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUC2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUC2_Pointer >::size_type
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUC2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUC2_Pointer >::size_type
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUC2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC2_Pointer >::iterator
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUC2_Pointer >::iterator
        n: std::vector< itkImageUC2_Pointer >::size_type
        x: std::vector< itkImageUC2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUC2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUC2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUC2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUC2

# Register vectoritkImageUC2 in _itkImagePython:
_itkImagePython.vectoritkImageUC2_swigregister(vectoritkImageUC2)
class vectoritkImageUS2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUS2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUS2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUS2

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type
        j: std::vector< itkImageUS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type
        j: std::vector< itkImageUS2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type
        j: std::vector< itkImageUS2_Pointer >::difference_type
        v: std::vector< itkImageUS2_Pointer,std::allocator< itkImageUS2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUS2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type
        j: std::vector< itkImageUS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUS2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUS2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUS2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUS2_Pointer,std::allocator< itkImageUS2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUS2_Pointer >::difference_type
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUS2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUS2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUS2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUS2_Pointer > &

        """
        return _itkImagePython.vectoritkImageUS2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUS2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUS2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUS2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUS2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUS2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUS2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUS2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUS2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUS2_Pointer >::iterator
        last: std::vector< itkImageUS2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUS2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUS2
        __init__(self, other) -> vectoritkImageUS2

        Parameters
        ----------
        other: std::vector< itkImageUS2_Pointer > const &

        __init__(self, size) -> vectoritkImageUS2

        Parameters
        ----------
        size: std::vector< itkImageUS2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUS2

        Parameters
        ----------
        size: std::vector< itkImageUS2_Pointer >::size_type
        value: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUS2_swiginit(self, _itkImagePython.new_vectoritkImageUS2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUS2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUS2_Pointer >::size_type
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUS2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUS2_Pointer >::size_type
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUS2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS2_Pointer >::iterator
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUS2_Pointer >::iterator
        n: std::vector< itkImageUS2_Pointer >::size_type
        x: std::vector< itkImageUS2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUS2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUS2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUS2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUS2

# Register vectoritkImageUS2 in _itkImagePython:
_itkImagePython.vectoritkImageUS2_swigregister(vectoritkImageUS2)
class vectoritkImageF2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageF2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageF2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageF2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageF2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageF2

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type
        j: std::vector< itkImageF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type
        j: std::vector< itkImageF2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type
        j: std::vector< itkImageF2_Pointer >::difference_type
        v: std::vector< itkImageF2_Pointer,std::allocator< itkImageF2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageF2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type
        j: std::vector< itkImageF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageF2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageF2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageF2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageF2_Pointer,std::allocator< itkImageF2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageF2_Pointer >::difference_type
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageF2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageF2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageF2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageF2_Pointer > &

        """
        return _itkImagePython.vectoritkImageF2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageF2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageF2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageF2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageF2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageF2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageF2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageF2_Pointer >::iterator
        last: std::vector< itkImageF2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageF2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageF2
        __init__(self, other) -> vectoritkImageF2

        Parameters
        ----------
        other: std::vector< itkImageF2_Pointer > const &

        __init__(self, size) -> vectoritkImageF2

        Parameters
        ----------
        size: std::vector< itkImageF2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageF2

        Parameters
        ----------
        size: std::vector< itkImageF2_Pointer >::size_type
        value: std::vector< itkImageF2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageF2_swiginit(self, _itkImagePython.new_vectoritkImageF2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageF2_Pointer >::size_type
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageF2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageF2_Pointer >::size_type
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageF2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF2_Pointer >::iterator
        x: std::vector< itkImageF2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageF2_Pointer >::iterator
        n: std::vector< itkImageF2_Pointer >::size_type
        x: std::vector< itkImageF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageF2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageF2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageF2

# Register vectoritkImageF2 in _itkImagePython:
_itkImagePython.vectoritkImageF2_swigregister(vectoritkImageF2)
class vectoritkImageD2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageD2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageD2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageD2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageD2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageD2

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type
        j: std::vector< itkImageD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type
        j: std::vector< itkImageD2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type
        j: std::vector< itkImageD2_Pointer >::difference_type
        v: std::vector< itkImageD2_Pointer,std::allocator< itkImageD2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageD2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type
        j: std::vector< itkImageD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageD2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageD2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageD2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageD2_Pointer,std::allocator< itkImageD2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageD2_Pointer >::difference_type
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageD2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageD2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageD2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageD2_Pointer > &

        """
        return _itkImagePython.vectoritkImageD2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageD2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageD2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageD2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageD2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageD2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageD2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageD2_Pointer >::iterator
        last: std::vector< itkImageD2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageD2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageD2
        __init__(self, other) -> vectoritkImageD2

        Parameters
        ----------
        other: std::vector< itkImageD2_Pointer > const &

        __init__(self, size) -> vectoritkImageD2

        Parameters
        ----------
        size: std::vector< itkImageD2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageD2

        Parameters
        ----------
        size: std::vector< itkImageD2_Pointer >::size_type
        value: std::vector< itkImageD2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageD2_swiginit(self, _itkImagePython.new_vectoritkImageD2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageD2_Pointer >::size_type
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageD2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageD2_Pointer >::size_type
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageD2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD2_Pointer >::iterator
        x: std::vector< itkImageD2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageD2_Pointer >::iterator
        n: std::vector< itkImageD2_Pointer >::size_type
        x: std::vector< itkImageD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageD2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageD2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageD2

# Register vectoritkImageD2 in _itkImagePython:
_itkImagePython.vectoritkImageD2_swigregister(vectoritkImageD2)
class vectoritkImageCD2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCD2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCD2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCD2

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type
        j: std::vector< itkImageCD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type
        j: std::vector< itkImageCD2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type
        j: std::vector< itkImageCD2_Pointer >::difference_type
        v: std::vector< itkImageCD2_Pointer,std::allocator< itkImageCD2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCD2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type
        j: std::vector< itkImageCD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCD2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCD2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCD2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCD2_Pointer,std::allocator< itkImageCD2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCD2_Pointer >::difference_type
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCD2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCD2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCD2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCD2_Pointer > &

        """
        return _itkImagePython.vectoritkImageCD2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCD2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCD2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCD2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCD2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCD2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCD2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCD2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCD2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCD2_Pointer >::iterator
        last: std::vector< itkImageCD2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCD2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCD2
        __init__(self, other) -> vectoritkImageCD2

        Parameters
        ----------
        other: std::vector< itkImageCD2_Pointer > const &

        __init__(self, size) -> vectoritkImageCD2

        Parameters
        ----------
        size: std::vector< itkImageCD2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCD2

        Parameters
        ----------
        size: std::vector< itkImageCD2_Pointer >::size_type
        value: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCD2_swiginit(self, _itkImagePython.new_vectoritkImageCD2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCD2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCD2_Pointer >::size_type
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCD2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCD2_Pointer >::size_type
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCD2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD2_Pointer >::iterator
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCD2_Pointer >::iterator
        n: std::vector< itkImageCD2_Pointer >::size_type
        x: std::vector< itkImageCD2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCD2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCD2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCD2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCD2

# Register vectoritkImageCD2 in _itkImagePython:
_itkImagePython.vectoritkImageCD2_swigregister(vectoritkImageCD2)
class vectoritkImageCF2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCF2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCF2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCF2

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type
        j: std::vector< itkImageCF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type
        j: std::vector< itkImageCF2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type
        j: std::vector< itkImageCF2_Pointer >::difference_type
        v: std::vector< itkImageCF2_Pointer,std::allocator< itkImageCF2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCF2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type
        j: std::vector< itkImageCF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCF2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCF2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCF2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCF2_Pointer,std::allocator< itkImageCF2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCF2_Pointer >::difference_type
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCF2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCF2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCF2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCF2_Pointer > &

        """
        return _itkImagePython.vectoritkImageCF2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCF2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCF2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCF2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCF2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCF2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCF2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCF2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCF2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCF2_Pointer >::iterator
        last: std::vector< itkImageCF2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCF2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCF2
        __init__(self, other) -> vectoritkImageCF2

        Parameters
        ----------
        other: std::vector< itkImageCF2_Pointer > const &

        __init__(self, size) -> vectoritkImageCF2

        Parameters
        ----------
        size: std::vector< itkImageCF2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCF2

        Parameters
        ----------
        size: std::vector< itkImageCF2_Pointer >::size_type
        value: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCF2_swiginit(self, _itkImagePython.new_vectoritkImageCF2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCF2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCF2_Pointer >::size_type
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCF2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCF2_Pointer >::size_type
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCF2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF2_Pointer >::iterator
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCF2_Pointer >::iterator
        n: std::vector< itkImageCF2_Pointer >::size_type
        x: std::vector< itkImageCF2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCF2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCF2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCF2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCF2

# Register vectoritkImageCF2 in _itkImagePython:
_itkImagePython.vectoritkImageCF2_swigregister(vectoritkImageCF2)
class vectoritkImageVD22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD22

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type
        j: std::vector< itkImageVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type
        j: std::vector< itkImageVD22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type
        j: std::vector< itkImageVD22_Pointer >::difference_type
        v: std::vector< itkImageVD22_Pointer,std::allocator< itkImageVD22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type
        j: std::vector< itkImageVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD22_Pointer,std::allocator< itkImageVD22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD22_Pointer >::difference_type
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD22_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD22_Pointer >::iterator
        last: std::vector< itkImageVD22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD22
        __init__(self, other) -> vectoritkImageVD22

        Parameters
        ----------
        other: std::vector< itkImageVD22_Pointer > const &

        __init__(self, size) -> vectoritkImageVD22

        Parameters
        ----------
        size: std::vector< itkImageVD22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD22

        Parameters
        ----------
        size: std::vector< itkImageVD22_Pointer >::size_type
        value: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD22_swiginit(self, _itkImagePython.new_vectoritkImageVD22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD22_Pointer >::size_type
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD22_Pointer >::size_type
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD22_Pointer >::iterator
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD22_Pointer >::iterator
        n: std::vector< itkImageVD22_Pointer >::size_type
        x: std::vector< itkImageVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD22

# Register vectoritkImageVD22 in _itkImagePython:
_itkImagePython.vectoritkImageVD22_swigregister(vectoritkImageVD22)
class vectoritkImageVD32(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD32_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD32___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD32

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type
        j: std::vector< itkImageVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type
        j: std::vector< itkImageVD32_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type
        j: std::vector< itkImageVD32_Pointer >::difference_type
        v: std::vector< itkImageVD32_Pointer,std::allocator< itkImageVD32_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type
        j: std::vector< itkImageVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD32

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD32_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD32_Pointer,std::allocator< itkImageVD32_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD32_Pointer >::difference_type
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD32_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD32_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD32_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD32_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD32_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD32_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD32_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD32_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD32_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD32_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD32_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD32_Pointer >::iterator
        last: std::vector< itkImageVD32_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD32
        __init__(self, other) -> vectoritkImageVD32

        Parameters
        ----------
        other: std::vector< itkImageVD32_Pointer > const &

        __init__(self, size) -> vectoritkImageVD32

        Parameters
        ----------
        size: std::vector< itkImageVD32_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD32

        Parameters
        ----------
        size: std::vector< itkImageVD32_Pointer >::size_type
        value: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD32_swiginit(self, _itkImagePython.new_vectoritkImageVD32(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD32_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD32_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD32_Pointer >::size_type
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD32_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD32_Pointer >::size_type
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD32_Pointer >::iterator
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD32_Pointer >::iterator
        n: std::vector< itkImageVD32_Pointer >::size_type
        x: std::vector< itkImageVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD32_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD32_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD32_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD32_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD32

# Register vectoritkImageVD32 in _itkImagePython:
_itkImagePython.vectoritkImageVD32_swigregister(vectoritkImageVD32)
class vectoritkImageVD42(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD42_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD42_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD42___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD42___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD42

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type
        j: std::vector< itkImageVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD42___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type
        j: std::vector< itkImageVD42_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type
        j: std::vector< itkImageVD42_Pointer >::difference_type
        v: std::vector< itkImageVD42_Pointer,std::allocator< itkImageVD42_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD42___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type
        j: std::vector< itkImageVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD42___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD42___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD42

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD42_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD42___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD42_Pointer,std::allocator< itkImageVD42_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD42_Pointer >::difference_type
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD42_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD42_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD42_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD42_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD42_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD42_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD42_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD42_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD42_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD42_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD42_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD42_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD42_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD42_Pointer >::iterator
        last: std::vector< itkImageVD42_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD42_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD42
        __init__(self, other) -> vectoritkImageVD42

        Parameters
        ----------
        other: std::vector< itkImageVD42_Pointer > const &

        __init__(self, size) -> vectoritkImageVD42

        Parameters
        ----------
        size: std::vector< itkImageVD42_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD42

        Parameters
        ----------
        size: std::vector< itkImageVD42_Pointer >::size_type
        value: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD42_swiginit(self, _itkImagePython.new_vectoritkImageVD42(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD42_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD42_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD42_Pointer >::size_type
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD42_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD42_Pointer >::size_type
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD42_Pointer >::iterator
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD42_Pointer >::iterator
        n: std::vector< itkImageVD42_Pointer >::size_type
        x: std::vector< itkImageVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD42_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD42_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD42_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD42_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD42

# Register vectoritkImageVD42 in _itkImagePython:
_itkImagePython.vectoritkImageVD42_swigregister(vectoritkImageVD42)
class vectoritkImageSI2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSI2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSI2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSI2

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type
        j: std::vector< itkImageSI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type
        j: std::vector< itkImageSI2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type
        j: std::vector< itkImageSI2_Pointer >::difference_type
        v: std::vector< itkImageSI2_Pointer,std::allocator< itkImageSI2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSI2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type
        j: std::vector< itkImageSI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSI2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSI2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSI2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSI2_Pointer,std::allocator< itkImageSI2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSI2_Pointer >::difference_type
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSI2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSI2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSI2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSI2_Pointer > &

        """
        return _itkImagePython.vectoritkImageSI2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSI2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSI2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSI2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSI2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSI2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSI2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSI2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSI2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSI2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSI2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSI2_Pointer >::iterator
        last: std::vector< itkImageSI2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSI2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSI2
        __init__(self, other) -> vectoritkImageSI2

        Parameters
        ----------
        other: std::vector< itkImageSI2_Pointer > const &

        __init__(self, size) -> vectoritkImageSI2

        Parameters
        ----------
        size: std::vector< itkImageSI2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSI2

        Parameters
        ----------
        size: std::vector< itkImageSI2_Pointer >::size_type
        value: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSI2_swiginit(self, _itkImagePython.new_vectoritkImageSI2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSI2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSI2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSI2_Pointer >::size_type
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSI2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSI2_Pointer >::size_type
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSI2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI2_Pointer >::iterator
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSI2_Pointer >::iterator
        n: std::vector< itkImageSI2_Pointer >::size_type
        x: std::vector< itkImageSI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSI2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSI2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSI2

# Register vectoritkImageSI2 in _itkImagePython:
_itkImagePython.vectoritkImageSI2_swigregister(vectoritkImageSI2)
class vectoritkImageUI2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUI2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUI2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUI2

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type
        j: std::vector< itkImageUI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type
        j: std::vector< itkImageUI2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type
        j: std::vector< itkImageUI2_Pointer >::difference_type
        v: std::vector< itkImageUI2_Pointer,std::allocator< itkImageUI2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUI2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type
        j: std::vector< itkImageUI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUI2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUI2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUI2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUI2_Pointer,std::allocator< itkImageUI2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUI2_Pointer >::difference_type
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUI2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUI2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUI2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUI2_Pointer > &

        """
        return _itkImagePython.vectoritkImageUI2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUI2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUI2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUI2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUI2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUI2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUI2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUI2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUI2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUI2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUI2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUI2_Pointer >::iterator
        last: std::vector< itkImageUI2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUI2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUI2
        __init__(self, other) -> vectoritkImageUI2

        Parameters
        ----------
        other: std::vector< itkImageUI2_Pointer > const &

        __init__(self, size) -> vectoritkImageUI2

        Parameters
        ----------
        size: std::vector< itkImageUI2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUI2

        Parameters
        ----------
        size: std::vector< itkImageUI2_Pointer >::size_type
        value: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUI2_swiginit(self, _itkImagePython.new_vectoritkImageUI2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUI2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUI2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUI2_Pointer >::size_type
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUI2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUI2_Pointer >::size_type
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUI2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI2_Pointer >::iterator
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUI2_Pointer >::iterator
        n: std::vector< itkImageUI2_Pointer >::size_type
        x: std::vector< itkImageUI2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUI2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUI2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUI2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUI2

# Register vectoritkImageUI2 in _itkImagePython:
_itkImagePython.vectoritkImageUI2_swigregister(vectoritkImageUI2)
class vectoritkImageUL2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUL2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUL2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUL2

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type
        j: std::vector< itkImageUL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type
        j: std::vector< itkImageUL2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type
        j: std::vector< itkImageUL2_Pointer >::difference_type
        v: std::vector< itkImageUL2_Pointer,std::allocator< itkImageUL2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUL2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type
        j: std::vector< itkImageUL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUL2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUL2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUL2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUL2_Pointer,std::allocator< itkImageUL2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUL2_Pointer >::difference_type
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUL2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUL2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUL2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUL2_Pointer > &

        """
        return _itkImagePython.vectoritkImageUL2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUL2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUL2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUL2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUL2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUL2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUL2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUL2_Pointer >::iterator
        last: std::vector< itkImageUL2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUL2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUL2
        __init__(self, other) -> vectoritkImageUL2

        Parameters
        ----------
        other: std::vector< itkImageUL2_Pointer > const &

        __init__(self, size) -> vectoritkImageUL2

        Parameters
        ----------
        size: std::vector< itkImageUL2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUL2

        Parameters
        ----------
        size: std::vector< itkImageUL2_Pointer >::size_type
        value: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUL2_swiginit(self, _itkImagePython.new_vectoritkImageUL2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUL2_Pointer >::size_type
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUL2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUL2_Pointer >::size_type
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUL2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL2_Pointer >::iterator
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUL2_Pointer >::iterator
        n: std::vector< itkImageUL2_Pointer >::size_type
        x: std::vector< itkImageUL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUL2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUL2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUL2

# Register vectoritkImageUL2 in _itkImagePython:
_itkImagePython.vectoritkImageUL2_swigregister(vectoritkImageUL2)
class vectoritkImageULL2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageULL2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageULL2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageULL2

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type
        j: std::vector< itkImageULL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type
        j: std::vector< itkImageULL2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type
        j: std::vector< itkImageULL2_Pointer >::difference_type
        v: std::vector< itkImageULL2_Pointer,std::allocator< itkImageULL2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageULL2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type
        j: std::vector< itkImageULL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageULL2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageULL2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageULL2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageULL2_Pointer,std::allocator< itkImageULL2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageULL2_Pointer >::difference_type
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageULL2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageULL2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageULL2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageULL2_Pointer > &

        """
        return _itkImagePython.vectoritkImageULL2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageULL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageULL2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageULL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageULL2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageULL2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageULL2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageULL2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageULL2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageULL2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageULL2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageULL2_Pointer >::iterator
        last: std::vector< itkImageULL2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageULL2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageULL2
        __init__(self, other) -> vectoritkImageULL2

        Parameters
        ----------
        other: std::vector< itkImageULL2_Pointer > const &

        __init__(self, size) -> vectoritkImageULL2

        Parameters
        ----------
        size: std::vector< itkImageULL2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageULL2

        Parameters
        ----------
        size: std::vector< itkImageULL2_Pointer >::size_type
        value: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageULL2_swiginit(self, _itkImagePython.new_vectoritkImageULL2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageULL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageULL2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageULL2_Pointer >::size_type
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageULL2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageULL2_Pointer >::size_type
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageULL2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL2_Pointer >::iterator
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageULL2_Pointer >::iterator
        n: std::vector< itkImageULL2_Pointer >::size_type
        x: std::vector< itkImageULL2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageULL2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageULL2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageULL2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageULL2

# Register vectoritkImageULL2 in _itkImagePython:
_itkImagePython.vectoritkImageULL2_swigregister(vectoritkImageULL2)
class vectoritkImageB2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageB2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageB2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageB2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageB2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageB2

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type
        j: std::vector< itkImageB2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type
        j: std::vector< itkImageB2_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type
        j: std::vector< itkImageB2_Pointer >::difference_type
        v: std::vector< itkImageB2_Pointer,std::allocator< itkImageB2_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageB2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type
        j: std::vector< itkImageB2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageB2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageB2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageB2_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageB2_Pointer,std::allocator< itkImageB2_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageB2_Pointer >::difference_type
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageB2_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageB2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageB2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageB2_Pointer > &

        """
        return _itkImagePython.vectoritkImageB2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageB2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageB2_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageB2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageB2_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageB2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageB2_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageB2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageB2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageB2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB2_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageB2_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageB2_Pointer >::iterator
        last: std::vector< itkImageB2_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageB2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageB2
        __init__(self, other) -> vectoritkImageB2

        Parameters
        ----------
        other: std::vector< itkImageB2_Pointer > const &

        __init__(self, size) -> vectoritkImageB2

        Parameters
        ----------
        size: std::vector< itkImageB2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageB2

        Parameters
        ----------
        size: std::vector< itkImageB2_Pointer >::size_type
        value: std::vector< itkImageB2_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageB2_swiginit(self, _itkImagePython.new_vectoritkImageB2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageB2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB2_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageB2_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageB2_Pointer >::size_type
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageB2_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageB2_Pointer >::size_type
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageB2_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB2_Pointer >::iterator
        x: std::vector< itkImageB2_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageB2_Pointer >::iterator
        n: std::vector< itkImageB2_Pointer >::size_type
        x: std::vector< itkImageB2_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageB2_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageB2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageB2_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB2_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageB2

# Register vectoritkImageB2 in _itkImagePython:
_itkImagePython.vectoritkImageB2_swigregister(vectoritkImageB2)
class vectoritkImageFAF22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAF22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAF22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAF22

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type
        j: std::vector< itkImageFAF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type
        j: std::vector< itkImageFAF22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type
        j: std::vector< itkImageFAF22_Pointer >::difference_type
        v: std::vector< itkImageFAF22_Pointer,std::allocator< itkImageFAF22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAF22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type
        j: std::vector< itkImageFAF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAF22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAF22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAF22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAF22_Pointer,std::allocator< itkImageFAF22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAF22_Pointer >::difference_type
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAF22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAF22_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAF22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAF22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAF22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAF22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAF22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAF22_Pointer >::iterator
        last: std::vector< itkImageFAF22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAF22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAF22
        __init__(self, other) -> vectoritkImageFAF22

        Parameters
        ----------
        other: std::vector< itkImageFAF22_Pointer > const &

        __init__(self, size) -> vectoritkImageFAF22

        Parameters
        ----------
        size: std::vector< itkImageFAF22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAF22

        Parameters
        ----------
        size: std::vector< itkImageFAF22_Pointer >::size_type
        value: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAF22_swiginit(self, _itkImagePython.new_vectoritkImageFAF22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAF22_Pointer >::size_type
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF22_Pointer >::size_type
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF22_Pointer >::iterator
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAF22_Pointer >::iterator
        n: std::vector< itkImageFAF22_Pointer >::size_type
        x: std::vector< itkImageFAF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAF22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAF22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAF22

# Register vectoritkImageFAF22 in _itkImagePython:
_itkImagePython.vectoritkImageFAF22_swigregister(vectoritkImageFAF22)
class vectoritkImageFAD22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAD22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAD22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAD22

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type
        j: std::vector< itkImageFAD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type
        j: std::vector< itkImageFAD22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type
        j: std::vector< itkImageFAD22_Pointer >::difference_type
        v: std::vector< itkImageFAD22_Pointer,std::allocator< itkImageFAD22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAD22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type
        j: std::vector< itkImageFAD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAD22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAD22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAD22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAD22_Pointer,std::allocator< itkImageFAD22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAD22_Pointer >::difference_type
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAD22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAD22_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAD22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAD22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAD22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAD22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAD22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAD22_Pointer >::iterator
        last: std::vector< itkImageFAD22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAD22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAD22
        __init__(self, other) -> vectoritkImageFAD22

        Parameters
        ----------
        other: std::vector< itkImageFAD22_Pointer > const &

        __init__(self, size) -> vectoritkImageFAD22

        Parameters
        ----------
        size: std::vector< itkImageFAD22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAD22

        Parameters
        ----------
        size: std::vector< itkImageFAD22_Pointer >::size_type
        value: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAD22_swiginit(self, _itkImagePython.new_vectoritkImageFAD22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAD22_Pointer >::size_type
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD22_Pointer >::size_type
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD22_Pointer >::iterator
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAD22_Pointer >::iterator
        n: std::vector< itkImageFAD22_Pointer >::size_type
        x: std::vector< itkImageFAD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAD22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAD22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAD22

# Register vectoritkImageFAD22 in _itkImagePython:
_itkImagePython.vectoritkImageFAD22_swigregister(vectoritkImageFAD22)
class vectoritkImageO22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageO22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageO22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageO22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageO22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageO22

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type
        j: std::vector< itkImageO22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type
        j: std::vector< itkImageO22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type
        j: std::vector< itkImageO22_Pointer >::difference_type
        v: std::vector< itkImageO22_Pointer,std::allocator< itkImageO22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageO22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type
        j: std::vector< itkImageO22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageO22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageO22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageO22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageO22_Pointer,std::allocator< itkImageO22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageO22_Pointer >::difference_type
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageO22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageO22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageO22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageO22_Pointer > &

        """
        return _itkImagePython.vectoritkImageO22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageO22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageO22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageO22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageO22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageO22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageO22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageO22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageO22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageO22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageO22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageO22_Pointer >::iterator
        last: std::vector< itkImageO22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageO22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageO22
        __init__(self, other) -> vectoritkImageO22

        Parameters
        ----------
        other: std::vector< itkImageO22_Pointer > const &

        __init__(self, size) -> vectoritkImageO22

        Parameters
        ----------
        size: std::vector< itkImageO22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageO22

        Parameters
        ----------
        size: std::vector< itkImageO22_Pointer >::size_type
        value: std::vector< itkImageO22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageO22_swiginit(self, _itkImagePython.new_vectoritkImageO22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageO22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageO22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageO22_Pointer >::size_type
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageO22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageO22_Pointer >::size_type
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageO22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO22_Pointer >::iterator
        x: std::vector< itkImageO22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageO22_Pointer >::iterator
        n: std::vector< itkImageO22_Pointer >::size_type
        x: std::vector< itkImageO22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageO22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageO22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageO22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageO22

# Register vectoritkImageO22 in _itkImagePython:
_itkImagePython.vectoritkImageO22_swigregister(vectoritkImageO22)
class vectoritkImageSSRTD22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTD22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTD22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTD22

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type
        j: std::vector< itkImageSSRTD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type
        j: std::vector< itkImageSSRTD22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type
        j: std::vector< itkImageSSRTD22_Pointer >::difference_type
        v: std::vector< itkImageSSRTD22_Pointer,std::allocator< itkImageSSRTD22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTD22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type
        j: std::vector< itkImageSSRTD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTD22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTD22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTD22_Pointer,std::allocator< itkImageSSRTD22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD22_Pointer >::difference_type
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTD22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTD22_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTD22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTD22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTD22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTD22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTD22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTD22_Pointer >::iterator
        last: std::vector< itkImageSSRTD22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTD22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTD22
        __init__(self, other) -> vectoritkImageSSRTD22

        Parameters
        ----------
        other: std::vector< itkImageSSRTD22_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTD22

        Parameters
        ----------
        size: std::vector< itkImageSSRTD22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTD22

        Parameters
        ----------
        size: std::vector< itkImageSSRTD22_Pointer >::size_type
        value: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTD22_swiginit(self, _itkImagePython.new_vectoritkImageSSRTD22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD22_Pointer >::size_type
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD22_Pointer >::size_type
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD22_Pointer >::iterator
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD22_Pointer >::iterator
        n: std::vector< itkImageSSRTD22_Pointer >::size_type
        x: std::vector< itkImageSSRTD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTD22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTD22

# Register vectoritkImageSSRTD22 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTD22_swigregister(vectoritkImageSSRTD22)
class vectoritkImageSSRTF22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTF22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTF22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTF22

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type
        j: std::vector< itkImageSSRTF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type
        j: std::vector< itkImageSSRTF22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type
        j: std::vector< itkImageSSRTF22_Pointer >::difference_type
        v: std::vector< itkImageSSRTF22_Pointer,std::allocator< itkImageSSRTF22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTF22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type
        j: std::vector< itkImageSSRTF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTF22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTF22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTF22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTF22_Pointer,std::allocator< itkImageSSRTF22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF22_Pointer >::difference_type
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTF22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTF22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTF22_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTF22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTF22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTF22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTF22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTF22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTF22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTF22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTF22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTF22_Pointer >::iterator
        last: std::vector< itkImageSSRTF22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTF22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTF22
        __init__(self, other) -> vectoritkImageSSRTF22

        Parameters
        ----------
        other: std::vector< itkImageSSRTF22_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTF22

        Parameters
        ----------
        size: std::vector< itkImageSSRTF22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTF22

        Parameters
        ----------
        size: std::vector< itkImageSSRTF22_Pointer >::size_type
        value: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTF22_swiginit(self, _itkImagePython.new_vectoritkImageSSRTF22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTF22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF22_Pointer >::size_type
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF22_Pointer >::size_type
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTF22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF22_Pointer >::iterator
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF22_Pointer >::iterator
        n: std::vector< itkImageSSRTF22_Pointer >::size_type
        x: std::vector< itkImageSSRTF22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTF22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTF22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTF22

# Register vectoritkImageSSRTF22 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTF22_swigregister(vectoritkImageSSRTF22)
class vectoritkImageRGBUC3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBUC3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBUC3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBUC3

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBUC3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBUC3_Pointer >::difference_type
        v: std::vector< itkImageRGBUC3_Pointer,std::allocator< itkImageRGBUC3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBUC3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBUC3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBUC3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBUC3_Pointer,std::allocator< itkImageRGBUC3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC3_Pointer >::difference_type
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBUC3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBUC3_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBUC3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBUC3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBUC3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBUC3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBUC3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBUC3_Pointer >::iterator
        last: std::vector< itkImageRGBUC3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBUC3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBUC3
        __init__(self, other) -> vectoritkImageRGBUC3

        Parameters
        ----------
        other: std::vector< itkImageRGBUC3_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBUC3

        Parameters
        ----------
        size: std::vector< itkImageRGBUC3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBUC3

        Parameters
        ----------
        size: std::vector< itkImageRGBUC3_Pointer >::size_type
        value: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBUC3_swiginit(self, _itkImagePython.new_vectoritkImageRGBUC3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC3_Pointer >::size_type
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC3_Pointer >::size_type
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC3_Pointer >::iterator
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC3_Pointer >::iterator
        n: std::vector< itkImageRGBUC3_Pointer >::size_type
        x: std::vector< itkImageRGBUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBUC3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBUC3

# Register vectoritkImageRGBUC3 in _itkImagePython:
_itkImagePython.vectoritkImageRGBUC3_swigregister(vectoritkImageRGBUC3)
class vectoritkImageRGBAUC3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBAUC3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBAUC3

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        v: std::vector< itkImageRGBAUC3_Pointer,std::allocator< itkImageRGBAUC3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBAUC3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBAUC3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBAUC3_Pointer,std::allocator< itkImageRGBAUC3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC3_Pointer >::difference_type
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBAUC3_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBAUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBAUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBAUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBAUC3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBAUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBAUC3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBAUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBAUC3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBAUC3_Pointer >::iterator
        last: std::vector< itkImageRGBAUC3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBAUC3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBAUC3
        __init__(self, other) -> vectoritkImageRGBAUC3

        Parameters
        ----------
        other: std::vector< itkImageRGBAUC3_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBAUC3

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBAUC3

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC3_Pointer >::size_type
        value: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBAUC3_swiginit(self, _itkImagePython.new_vectoritkImageRGBAUC3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBAUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC3_Pointer >::size_type
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC3_Pointer >::size_type
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBAUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC3_Pointer >::iterator
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC3_Pointer >::iterator
        n: std::vector< itkImageRGBAUC3_Pointer >::size_type
        x: std::vector< itkImageRGBAUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBAUC3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBAUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBAUC3

# Register vectoritkImageRGBAUC3 in _itkImagePython:
_itkImagePython.vectoritkImageRGBAUC3_swigregister(vectoritkImageRGBAUC3)
class vectoritkImageVF23(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF23_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF23_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF23___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF23___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF23

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type
        j: std::vector< itkImageVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF23___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type
        j: std::vector< itkImageVF23_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type
        j: std::vector< itkImageVF23_Pointer >::difference_type
        v: std::vector< itkImageVF23_Pointer,std::allocator< itkImageVF23_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF23___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type
        j: std::vector< itkImageVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF23___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF23___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF23

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF23_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF23___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF23_Pointer,std::allocator< itkImageVF23_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF23_Pointer >::difference_type
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF23_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF23_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF23_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF23_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF23_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF23_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF23_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF23_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF23_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF23_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF23_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF23_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF23_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF23_Pointer >::iterator
        last: std::vector< itkImageVF23_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF23_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF23
        __init__(self, other) -> vectoritkImageVF23

        Parameters
        ----------
        other: std::vector< itkImageVF23_Pointer > const &

        __init__(self, size) -> vectoritkImageVF23

        Parameters
        ----------
        size: std::vector< itkImageVF23_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF23

        Parameters
        ----------
        size: std::vector< itkImageVF23_Pointer >::size_type
        value: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF23_swiginit(self, _itkImagePython.new_vectoritkImageVF23(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF23_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF23_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF23_Pointer >::size_type
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF23_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF23_Pointer >::size_type
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF23_Pointer >::iterator
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF23_Pointer >::iterator
        n: std::vector< itkImageVF23_Pointer >::size_type
        x: std::vector< itkImageVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF23_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF23_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF23_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF23_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF23

# Register vectoritkImageVF23 in _itkImagePython:
_itkImagePython.vectoritkImageVF23_swigregister(vectoritkImageVF23)
class vectoritkImageVF33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF33

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type
        j: std::vector< itkImageVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type
        j: std::vector< itkImageVF33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type
        j: std::vector< itkImageVF33_Pointer >::difference_type
        v: std::vector< itkImageVF33_Pointer,std::allocator< itkImageVF33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type
        j: std::vector< itkImageVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF33_Pointer,std::allocator< itkImageVF33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF33_Pointer >::difference_type
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF33_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF33_Pointer >::iterator
        last: std::vector< itkImageVF33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF33
        __init__(self, other) -> vectoritkImageVF33

        Parameters
        ----------
        other: std::vector< itkImageVF33_Pointer > const &

        __init__(self, size) -> vectoritkImageVF33

        Parameters
        ----------
        size: std::vector< itkImageVF33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF33

        Parameters
        ----------
        size: std::vector< itkImageVF33_Pointer >::size_type
        value: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF33_swiginit(self, _itkImagePython.new_vectoritkImageVF33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF33_Pointer >::size_type
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF33_Pointer >::size_type
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF33_Pointer >::iterator
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF33_Pointer >::iterator
        n: std::vector< itkImageVF33_Pointer >::size_type
        x: std::vector< itkImageVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF33

# Register vectoritkImageVF33 in _itkImagePython:
_itkImagePython.vectoritkImageVF33_swigregister(vectoritkImageVF33)
class vectoritkImageVF43(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF43_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF43_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF43___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF43___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF43

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type
        j: std::vector< itkImageVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF43___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type
        j: std::vector< itkImageVF43_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type
        j: std::vector< itkImageVF43_Pointer >::difference_type
        v: std::vector< itkImageVF43_Pointer,std::allocator< itkImageVF43_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF43___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type
        j: std::vector< itkImageVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF43___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF43___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF43

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF43_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF43___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF43_Pointer,std::allocator< itkImageVF43_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF43_Pointer >::difference_type
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF43_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF43_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF43_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF43_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF43_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF43_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF43_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF43_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF43_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF43_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF43_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF43_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF43_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF43_Pointer >::iterator
        last: std::vector< itkImageVF43_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF43_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF43
        __init__(self, other) -> vectoritkImageVF43

        Parameters
        ----------
        other: std::vector< itkImageVF43_Pointer > const &

        __init__(self, size) -> vectoritkImageVF43

        Parameters
        ----------
        size: std::vector< itkImageVF43_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF43

        Parameters
        ----------
        size: std::vector< itkImageVF43_Pointer >::size_type
        value: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF43_swiginit(self, _itkImagePython.new_vectoritkImageVF43(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF43_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF43_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF43_Pointer >::size_type
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF43_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF43_Pointer >::size_type
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF43_Pointer >::iterator
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF43_Pointer >::iterator
        n: std::vector< itkImageVF43_Pointer >::size_type
        x: std::vector< itkImageVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF43_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF43_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF43_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF43_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF43

# Register vectoritkImageVF43 in _itkImagePython:
_itkImagePython.vectoritkImageVF43_swigregister(vectoritkImageVF43)
class vectoritkImageCVF23(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF23_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF23_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF23

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type
        j: std::vector< itkImageCVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF23___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type
        j: std::vector< itkImageCVF23_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type
        j: std::vector< itkImageCVF23_Pointer >::difference_type
        v: std::vector< itkImageCVF23_Pointer,std::allocator< itkImageCVF23_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF23___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type
        j: std::vector< itkImageCVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF23___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF23___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF23

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF23_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF23___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF23_Pointer,std::allocator< itkImageCVF23_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF23_Pointer >::difference_type
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF23_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF23_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF23_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF23_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF23_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF23_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF23_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF23_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF23_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF23_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF23_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF23_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF23_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF23_Pointer >::iterator
        last: std::vector< itkImageCVF23_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF23_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF23
        __init__(self, other) -> vectoritkImageCVF23

        Parameters
        ----------
        other: std::vector< itkImageCVF23_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF23

        Parameters
        ----------
        size: std::vector< itkImageCVF23_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF23

        Parameters
        ----------
        size: std::vector< itkImageCVF23_Pointer >::size_type
        value: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF23_swiginit(self, _itkImagePython.new_vectoritkImageCVF23(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF23_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF23_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF23_Pointer >::size_type
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF23_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF23_Pointer >::size_type
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF23_Pointer >::iterator
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF23_Pointer >::iterator
        n: std::vector< itkImageCVF23_Pointer >::size_type
        x: std::vector< itkImageCVF23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF23_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF23_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF23_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF23_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF23

# Register vectoritkImageCVF23 in _itkImagePython:
_itkImagePython.vectoritkImageCVF23_swigregister(vectoritkImageCVF23)
class vectoritkImageCVF33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF33

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type
        j: std::vector< itkImageCVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type
        j: std::vector< itkImageCVF33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type
        j: std::vector< itkImageCVF33_Pointer >::difference_type
        v: std::vector< itkImageCVF33_Pointer,std::allocator< itkImageCVF33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type
        j: std::vector< itkImageCVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF33_Pointer,std::allocator< itkImageCVF33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF33_Pointer >::difference_type
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF33_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF33_Pointer >::iterator
        last: std::vector< itkImageCVF33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF33
        __init__(self, other) -> vectoritkImageCVF33

        Parameters
        ----------
        other: std::vector< itkImageCVF33_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF33

        Parameters
        ----------
        size: std::vector< itkImageCVF33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF33

        Parameters
        ----------
        size: std::vector< itkImageCVF33_Pointer >::size_type
        value: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF33_swiginit(self, _itkImagePython.new_vectoritkImageCVF33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF33_Pointer >::size_type
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF33_Pointer >::size_type
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF33_Pointer >::iterator
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF33_Pointer >::iterator
        n: std::vector< itkImageCVF33_Pointer >::size_type
        x: std::vector< itkImageCVF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF33

# Register vectoritkImageCVF33 in _itkImagePython:
_itkImagePython.vectoritkImageCVF33_swigregister(vectoritkImageCVF33)
class vectoritkImageCVF43(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF43_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF43_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF43

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type
        j: std::vector< itkImageCVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF43___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type
        j: std::vector< itkImageCVF43_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type
        j: std::vector< itkImageCVF43_Pointer >::difference_type
        v: std::vector< itkImageCVF43_Pointer,std::allocator< itkImageCVF43_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF43___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type
        j: std::vector< itkImageCVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF43___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF43___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF43

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF43_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF43___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF43_Pointer,std::allocator< itkImageCVF43_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF43_Pointer >::difference_type
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF43_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF43_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF43_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF43_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF43_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF43_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF43_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF43_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF43_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF43_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF43_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF43_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF43_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF43_Pointer >::iterator
        last: std::vector< itkImageCVF43_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF43_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF43
        __init__(self, other) -> vectoritkImageCVF43

        Parameters
        ----------
        other: std::vector< itkImageCVF43_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF43

        Parameters
        ----------
        size: std::vector< itkImageCVF43_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF43

        Parameters
        ----------
        size: std::vector< itkImageCVF43_Pointer >::size_type
        value: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF43_swiginit(self, _itkImagePython.new_vectoritkImageCVF43(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF43_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF43_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF43_Pointer >::size_type
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF43_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF43_Pointer >::size_type
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF43_Pointer >::iterator
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF43_Pointer >::iterator
        n: std::vector< itkImageCVF43_Pointer >::size_type
        x: std::vector< itkImageCVF43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF43_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF43_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF43_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF43_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF43

# Register vectoritkImageCVF43 in _itkImagePython:
_itkImagePython.vectoritkImageCVF43_swigregister(vectoritkImageCVF43)
class vectoritkImageSS3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSS3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSS3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSS3

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type
        j: std::vector< itkImageSS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type
        j: std::vector< itkImageSS3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type
        j: std::vector< itkImageSS3_Pointer >::difference_type
        v: std::vector< itkImageSS3_Pointer,std::allocator< itkImageSS3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSS3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type
        j: std::vector< itkImageSS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSS3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSS3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSS3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSS3_Pointer,std::allocator< itkImageSS3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSS3_Pointer >::difference_type
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSS3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSS3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSS3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSS3_Pointer > &

        """
        return _itkImagePython.vectoritkImageSS3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSS3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSS3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSS3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSS3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSS3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSS3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSS3_Pointer >::iterator
        last: std::vector< itkImageSS3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSS3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSS3
        __init__(self, other) -> vectoritkImageSS3

        Parameters
        ----------
        other: std::vector< itkImageSS3_Pointer > const &

        __init__(self, size) -> vectoritkImageSS3

        Parameters
        ----------
        size: std::vector< itkImageSS3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSS3

        Parameters
        ----------
        size: std::vector< itkImageSS3_Pointer >::size_type
        value: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSS3_swiginit(self, _itkImagePython.new_vectoritkImageSS3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSS3_Pointer >::size_type
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSS3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSS3_Pointer >::size_type
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSS3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS3_Pointer >::iterator
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSS3_Pointer >::iterator
        n: std::vector< itkImageSS3_Pointer >::size_type
        x: std::vector< itkImageSS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSS3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSS3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSS3

# Register vectoritkImageSS3 in _itkImagePython:
_itkImagePython.vectoritkImageSS3_swigregister(vectoritkImageSS3)
class vectoritkImageUC3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUC3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUC3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUC3

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type
        j: std::vector< itkImageUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type
        j: std::vector< itkImageUC3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type
        j: std::vector< itkImageUC3_Pointer >::difference_type
        v: std::vector< itkImageUC3_Pointer,std::allocator< itkImageUC3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUC3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type
        j: std::vector< itkImageUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUC3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUC3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUC3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUC3_Pointer,std::allocator< itkImageUC3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUC3_Pointer >::difference_type
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUC3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUC3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUC3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUC3_Pointer > &

        """
        return _itkImagePython.vectoritkImageUC3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUC3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUC3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUC3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUC3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUC3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUC3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUC3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUC3_Pointer >::iterator
        last: std::vector< itkImageUC3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUC3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUC3
        __init__(self, other) -> vectoritkImageUC3

        Parameters
        ----------
        other: std::vector< itkImageUC3_Pointer > const &

        __init__(self, size) -> vectoritkImageUC3

        Parameters
        ----------
        size: std::vector< itkImageUC3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUC3

        Parameters
        ----------
        size: std::vector< itkImageUC3_Pointer >::size_type
        value: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUC3_swiginit(self, _itkImagePython.new_vectoritkImageUC3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUC3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUC3_Pointer >::size_type
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUC3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUC3_Pointer >::size_type
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUC3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC3_Pointer >::iterator
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUC3_Pointer >::iterator
        n: std::vector< itkImageUC3_Pointer >::size_type
        x: std::vector< itkImageUC3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUC3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUC3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUC3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUC3

# Register vectoritkImageUC3 in _itkImagePython:
_itkImagePython.vectoritkImageUC3_swigregister(vectoritkImageUC3)
class vectoritkImageUS3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUS3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUS3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUS3

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type
        j: std::vector< itkImageUS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type
        j: std::vector< itkImageUS3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type
        j: std::vector< itkImageUS3_Pointer >::difference_type
        v: std::vector< itkImageUS3_Pointer,std::allocator< itkImageUS3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUS3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type
        j: std::vector< itkImageUS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUS3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUS3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUS3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUS3_Pointer,std::allocator< itkImageUS3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUS3_Pointer >::difference_type
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUS3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUS3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUS3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUS3_Pointer > &

        """
        return _itkImagePython.vectoritkImageUS3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUS3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUS3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUS3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUS3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUS3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUS3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUS3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUS3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUS3_Pointer >::iterator
        last: std::vector< itkImageUS3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUS3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUS3
        __init__(self, other) -> vectoritkImageUS3

        Parameters
        ----------
        other: std::vector< itkImageUS3_Pointer > const &

        __init__(self, size) -> vectoritkImageUS3

        Parameters
        ----------
        size: std::vector< itkImageUS3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUS3

        Parameters
        ----------
        size: std::vector< itkImageUS3_Pointer >::size_type
        value: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUS3_swiginit(self, _itkImagePython.new_vectoritkImageUS3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUS3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUS3_Pointer >::size_type
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUS3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUS3_Pointer >::size_type
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUS3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS3_Pointer >::iterator
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUS3_Pointer >::iterator
        n: std::vector< itkImageUS3_Pointer >::size_type
        x: std::vector< itkImageUS3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUS3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUS3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUS3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUS3

# Register vectoritkImageUS3 in _itkImagePython:
_itkImagePython.vectoritkImageUS3_swigregister(vectoritkImageUS3)
class vectoritkImageF3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageF3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageF3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageF3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageF3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageF3

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type
        j: std::vector< itkImageF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type
        j: std::vector< itkImageF3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type
        j: std::vector< itkImageF3_Pointer >::difference_type
        v: std::vector< itkImageF3_Pointer,std::allocator< itkImageF3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageF3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type
        j: std::vector< itkImageF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageF3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageF3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageF3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageF3_Pointer,std::allocator< itkImageF3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageF3_Pointer >::difference_type
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageF3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageF3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageF3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageF3_Pointer > &

        """
        return _itkImagePython.vectoritkImageF3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageF3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageF3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageF3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageF3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageF3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageF3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageF3_Pointer >::iterator
        last: std::vector< itkImageF3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageF3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageF3
        __init__(self, other) -> vectoritkImageF3

        Parameters
        ----------
        other: std::vector< itkImageF3_Pointer > const &

        __init__(self, size) -> vectoritkImageF3

        Parameters
        ----------
        size: std::vector< itkImageF3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageF3

        Parameters
        ----------
        size: std::vector< itkImageF3_Pointer >::size_type
        value: std::vector< itkImageF3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageF3_swiginit(self, _itkImagePython.new_vectoritkImageF3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageF3_Pointer >::size_type
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageF3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageF3_Pointer >::size_type
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageF3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF3_Pointer >::iterator
        x: std::vector< itkImageF3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageF3_Pointer >::iterator
        n: std::vector< itkImageF3_Pointer >::size_type
        x: std::vector< itkImageF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageF3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageF3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageF3

# Register vectoritkImageF3 in _itkImagePython:
_itkImagePython.vectoritkImageF3_swigregister(vectoritkImageF3)
class vectoritkImageD3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageD3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageD3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageD3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageD3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageD3

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type
        j: std::vector< itkImageD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type
        j: std::vector< itkImageD3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type
        j: std::vector< itkImageD3_Pointer >::difference_type
        v: std::vector< itkImageD3_Pointer,std::allocator< itkImageD3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageD3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type
        j: std::vector< itkImageD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageD3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageD3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageD3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageD3_Pointer,std::allocator< itkImageD3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageD3_Pointer >::difference_type
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageD3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageD3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageD3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageD3_Pointer > &

        """
        return _itkImagePython.vectoritkImageD3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageD3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageD3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageD3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageD3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageD3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageD3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageD3_Pointer >::iterator
        last: std::vector< itkImageD3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageD3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageD3
        __init__(self, other) -> vectoritkImageD3

        Parameters
        ----------
        other: std::vector< itkImageD3_Pointer > const &

        __init__(self, size) -> vectoritkImageD3

        Parameters
        ----------
        size: std::vector< itkImageD3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageD3

        Parameters
        ----------
        size: std::vector< itkImageD3_Pointer >::size_type
        value: std::vector< itkImageD3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageD3_swiginit(self, _itkImagePython.new_vectoritkImageD3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageD3_Pointer >::size_type
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageD3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageD3_Pointer >::size_type
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageD3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD3_Pointer >::iterator
        x: std::vector< itkImageD3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageD3_Pointer >::iterator
        n: std::vector< itkImageD3_Pointer >::size_type
        x: std::vector< itkImageD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageD3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageD3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageD3

# Register vectoritkImageD3 in _itkImagePython:
_itkImagePython.vectoritkImageD3_swigregister(vectoritkImageD3)
class vectoritkImageCD3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCD3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCD3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCD3

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type
        j: std::vector< itkImageCD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type
        j: std::vector< itkImageCD3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type
        j: std::vector< itkImageCD3_Pointer >::difference_type
        v: std::vector< itkImageCD3_Pointer,std::allocator< itkImageCD3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCD3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type
        j: std::vector< itkImageCD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCD3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCD3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCD3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCD3_Pointer,std::allocator< itkImageCD3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCD3_Pointer >::difference_type
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCD3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCD3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCD3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCD3_Pointer > &

        """
        return _itkImagePython.vectoritkImageCD3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCD3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCD3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCD3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCD3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCD3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCD3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCD3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCD3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCD3_Pointer >::iterator
        last: std::vector< itkImageCD3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCD3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCD3
        __init__(self, other) -> vectoritkImageCD3

        Parameters
        ----------
        other: std::vector< itkImageCD3_Pointer > const &

        __init__(self, size) -> vectoritkImageCD3

        Parameters
        ----------
        size: std::vector< itkImageCD3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCD3

        Parameters
        ----------
        size: std::vector< itkImageCD3_Pointer >::size_type
        value: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCD3_swiginit(self, _itkImagePython.new_vectoritkImageCD3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCD3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCD3_Pointer >::size_type
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCD3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCD3_Pointer >::size_type
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCD3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD3_Pointer >::iterator
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCD3_Pointer >::iterator
        n: std::vector< itkImageCD3_Pointer >::size_type
        x: std::vector< itkImageCD3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCD3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCD3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCD3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCD3

# Register vectoritkImageCD3 in _itkImagePython:
_itkImagePython.vectoritkImageCD3_swigregister(vectoritkImageCD3)
class vectoritkImageCF3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCF3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCF3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCF3

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type
        j: std::vector< itkImageCF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type
        j: std::vector< itkImageCF3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type
        j: std::vector< itkImageCF3_Pointer >::difference_type
        v: std::vector< itkImageCF3_Pointer,std::allocator< itkImageCF3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCF3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type
        j: std::vector< itkImageCF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCF3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCF3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCF3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCF3_Pointer,std::allocator< itkImageCF3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCF3_Pointer >::difference_type
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCF3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCF3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCF3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCF3_Pointer > &

        """
        return _itkImagePython.vectoritkImageCF3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCF3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCF3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCF3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCF3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCF3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCF3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCF3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCF3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCF3_Pointer >::iterator
        last: std::vector< itkImageCF3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCF3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCF3
        __init__(self, other) -> vectoritkImageCF3

        Parameters
        ----------
        other: std::vector< itkImageCF3_Pointer > const &

        __init__(self, size) -> vectoritkImageCF3

        Parameters
        ----------
        size: std::vector< itkImageCF3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCF3

        Parameters
        ----------
        size: std::vector< itkImageCF3_Pointer >::size_type
        value: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCF3_swiginit(self, _itkImagePython.new_vectoritkImageCF3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCF3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCF3_Pointer >::size_type
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCF3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCF3_Pointer >::size_type
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCF3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF3_Pointer >::iterator
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCF3_Pointer >::iterator
        n: std::vector< itkImageCF3_Pointer >::size_type
        x: std::vector< itkImageCF3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCF3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCF3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCF3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCF3

# Register vectoritkImageCF3 in _itkImagePython:
_itkImagePython.vectoritkImageCF3_swigregister(vectoritkImageCF3)
class vectoritkImageVD23(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD23_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD23_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD23___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD23___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD23

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type
        j: std::vector< itkImageVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD23___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type
        j: std::vector< itkImageVD23_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type
        j: std::vector< itkImageVD23_Pointer >::difference_type
        v: std::vector< itkImageVD23_Pointer,std::allocator< itkImageVD23_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD23___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type
        j: std::vector< itkImageVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD23___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD23___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD23

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD23_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD23___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD23_Pointer,std::allocator< itkImageVD23_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD23_Pointer >::difference_type
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD23_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD23_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD23_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD23_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD23_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD23_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD23_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD23_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD23_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD23_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD23_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD23_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD23_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD23_Pointer >::iterator
        last: std::vector< itkImageVD23_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD23_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD23
        __init__(self, other) -> vectoritkImageVD23

        Parameters
        ----------
        other: std::vector< itkImageVD23_Pointer > const &

        __init__(self, size) -> vectoritkImageVD23

        Parameters
        ----------
        size: std::vector< itkImageVD23_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD23

        Parameters
        ----------
        size: std::vector< itkImageVD23_Pointer >::size_type
        value: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD23_swiginit(self, _itkImagePython.new_vectoritkImageVD23(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD23_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD23_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD23_Pointer >::size_type
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD23_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD23_Pointer >::size_type
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD23_Pointer >::iterator
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD23_Pointer >::iterator
        n: std::vector< itkImageVD23_Pointer >::size_type
        x: std::vector< itkImageVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD23_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD23_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD23_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD23_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD23

# Register vectoritkImageVD23 in _itkImagePython:
_itkImagePython.vectoritkImageVD23_swigregister(vectoritkImageVD23)
class vectoritkImageVD33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD33

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type
        j: std::vector< itkImageVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type
        j: std::vector< itkImageVD33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type
        j: std::vector< itkImageVD33_Pointer >::difference_type
        v: std::vector< itkImageVD33_Pointer,std::allocator< itkImageVD33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type
        j: std::vector< itkImageVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD33_Pointer,std::allocator< itkImageVD33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD33_Pointer >::difference_type
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD33_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD33_Pointer >::iterator
        last: std::vector< itkImageVD33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD33
        __init__(self, other) -> vectoritkImageVD33

        Parameters
        ----------
        other: std::vector< itkImageVD33_Pointer > const &

        __init__(self, size) -> vectoritkImageVD33

        Parameters
        ----------
        size: std::vector< itkImageVD33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD33

        Parameters
        ----------
        size: std::vector< itkImageVD33_Pointer >::size_type
        value: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD33_swiginit(self, _itkImagePython.new_vectoritkImageVD33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD33_Pointer >::size_type
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD33_Pointer >::size_type
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD33_Pointer >::iterator
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD33_Pointer >::iterator
        n: std::vector< itkImageVD33_Pointer >::size_type
        x: std::vector< itkImageVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD33

# Register vectoritkImageVD33 in _itkImagePython:
_itkImagePython.vectoritkImageVD33_swigregister(vectoritkImageVD33)
class vectoritkImageVD43(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD43_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD43_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD43___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD43___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD43

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type
        j: std::vector< itkImageVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD43___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type
        j: std::vector< itkImageVD43_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type
        j: std::vector< itkImageVD43_Pointer >::difference_type
        v: std::vector< itkImageVD43_Pointer,std::allocator< itkImageVD43_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD43___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type
        j: std::vector< itkImageVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD43___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD43___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD43

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD43_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD43___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD43_Pointer,std::allocator< itkImageVD43_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD43_Pointer >::difference_type
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD43_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD43_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD43_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD43_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD43_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD43_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD43_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD43_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD43_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD43_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD43_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD43_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD43_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD43_Pointer >::iterator
        last: std::vector< itkImageVD43_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD43_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD43
        __init__(self, other) -> vectoritkImageVD43

        Parameters
        ----------
        other: std::vector< itkImageVD43_Pointer > const &

        __init__(self, size) -> vectoritkImageVD43

        Parameters
        ----------
        size: std::vector< itkImageVD43_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD43

        Parameters
        ----------
        size: std::vector< itkImageVD43_Pointer >::size_type
        value: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD43_swiginit(self, _itkImagePython.new_vectoritkImageVD43(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD43_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD43_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD43_Pointer >::size_type
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD43_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD43_Pointer >::size_type
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD43_Pointer >::iterator
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD43_Pointer >::iterator
        n: std::vector< itkImageVD43_Pointer >::size_type
        x: std::vector< itkImageVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD43_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD43_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD43_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD43_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD43

# Register vectoritkImageVD43 in _itkImagePython:
_itkImagePython.vectoritkImageVD43_swigregister(vectoritkImageVD43)
class vectoritkImageSI3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSI3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSI3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSI3

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type
        j: std::vector< itkImageSI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type
        j: std::vector< itkImageSI3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type
        j: std::vector< itkImageSI3_Pointer >::difference_type
        v: std::vector< itkImageSI3_Pointer,std::allocator< itkImageSI3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSI3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type
        j: std::vector< itkImageSI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSI3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSI3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSI3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSI3_Pointer,std::allocator< itkImageSI3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSI3_Pointer >::difference_type
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSI3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSI3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSI3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSI3_Pointer > &

        """
        return _itkImagePython.vectoritkImageSI3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSI3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSI3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSI3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSI3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSI3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSI3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSI3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSI3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSI3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSI3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSI3_Pointer >::iterator
        last: std::vector< itkImageSI3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSI3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSI3
        __init__(self, other) -> vectoritkImageSI3

        Parameters
        ----------
        other: std::vector< itkImageSI3_Pointer > const &

        __init__(self, size) -> vectoritkImageSI3

        Parameters
        ----------
        size: std::vector< itkImageSI3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSI3

        Parameters
        ----------
        size: std::vector< itkImageSI3_Pointer >::size_type
        value: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSI3_swiginit(self, _itkImagePython.new_vectoritkImageSI3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSI3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSI3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSI3_Pointer >::size_type
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSI3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSI3_Pointer >::size_type
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSI3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI3_Pointer >::iterator
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSI3_Pointer >::iterator
        n: std::vector< itkImageSI3_Pointer >::size_type
        x: std::vector< itkImageSI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSI3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSI3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSI3

# Register vectoritkImageSI3 in _itkImagePython:
_itkImagePython.vectoritkImageSI3_swigregister(vectoritkImageSI3)
class vectoritkImageUI3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUI3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUI3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUI3

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type
        j: std::vector< itkImageUI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type
        j: std::vector< itkImageUI3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type
        j: std::vector< itkImageUI3_Pointer >::difference_type
        v: std::vector< itkImageUI3_Pointer,std::allocator< itkImageUI3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUI3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type
        j: std::vector< itkImageUI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUI3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUI3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUI3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUI3_Pointer,std::allocator< itkImageUI3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUI3_Pointer >::difference_type
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUI3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUI3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUI3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUI3_Pointer > &

        """
        return _itkImagePython.vectoritkImageUI3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUI3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUI3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUI3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUI3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUI3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUI3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUI3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUI3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUI3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUI3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUI3_Pointer >::iterator
        last: std::vector< itkImageUI3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUI3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUI3
        __init__(self, other) -> vectoritkImageUI3

        Parameters
        ----------
        other: std::vector< itkImageUI3_Pointer > const &

        __init__(self, size) -> vectoritkImageUI3

        Parameters
        ----------
        size: std::vector< itkImageUI3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUI3

        Parameters
        ----------
        size: std::vector< itkImageUI3_Pointer >::size_type
        value: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUI3_swiginit(self, _itkImagePython.new_vectoritkImageUI3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUI3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUI3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUI3_Pointer >::size_type
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUI3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUI3_Pointer >::size_type
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUI3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI3_Pointer >::iterator
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUI3_Pointer >::iterator
        n: std::vector< itkImageUI3_Pointer >::size_type
        x: std::vector< itkImageUI3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUI3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUI3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUI3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUI3

# Register vectoritkImageUI3 in _itkImagePython:
_itkImagePython.vectoritkImageUI3_swigregister(vectoritkImageUI3)
class vectoritkImageUL3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUL3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUL3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUL3

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type
        j: std::vector< itkImageUL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type
        j: std::vector< itkImageUL3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type
        j: std::vector< itkImageUL3_Pointer >::difference_type
        v: std::vector< itkImageUL3_Pointer,std::allocator< itkImageUL3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUL3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type
        j: std::vector< itkImageUL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUL3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUL3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUL3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUL3_Pointer,std::allocator< itkImageUL3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUL3_Pointer >::difference_type
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUL3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUL3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUL3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUL3_Pointer > &

        """
        return _itkImagePython.vectoritkImageUL3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUL3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUL3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUL3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUL3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUL3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUL3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUL3_Pointer >::iterator
        last: std::vector< itkImageUL3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUL3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUL3
        __init__(self, other) -> vectoritkImageUL3

        Parameters
        ----------
        other: std::vector< itkImageUL3_Pointer > const &

        __init__(self, size) -> vectoritkImageUL3

        Parameters
        ----------
        size: std::vector< itkImageUL3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUL3

        Parameters
        ----------
        size: std::vector< itkImageUL3_Pointer >::size_type
        value: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUL3_swiginit(self, _itkImagePython.new_vectoritkImageUL3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUL3_Pointer >::size_type
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUL3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUL3_Pointer >::size_type
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUL3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL3_Pointer >::iterator
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUL3_Pointer >::iterator
        n: std::vector< itkImageUL3_Pointer >::size_type
        x: std::vector< itkImageUL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUL3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUL3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUL3

# Register vectoritkImageUL3 in _itkImagePython:
_itkImagePython.vectoritkImageUL3_swigregister(vectoritkImageUL3)
class vectoritkImageULL3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageULL3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageULL3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageULL3

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type
        j: std::vector< itkImageULL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type
        j: std::vector< itkImageULL3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type
        j: std::vector< itkImageULL3_Pointer >::difference_type
        v: std::vector< itkImageULL3_Pointer,std::allocator< itkImageULL3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageULL3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type
        j: std::vector< itkImageULL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageULL3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageULL3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageULL3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageULL3_Pointer,std::allocator< itkImageULL3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageULL3_Pointer >::difference_type
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageULL3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageULL3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageULL3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageULL3_Pointer > &

        """
        return _itkImagePython.vectoritkImageULL3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageULL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageULL3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageULL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageULL3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageULL3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageULL3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageULL3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageULL3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageULL3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageULL3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageULL3_Pointer >::iterator
        last: std::vector< itkImageULL3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageULL3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageULL3
        __init__(self, other) -> vectoritkImageULL3

        Parameters
        ----------
        other: std::vector< itkImageULL3_Pointer > const &

        __init__(self, size) -> vectoritkImageULL3

        Parameters
        ----------
        size: std::vector< itkImageULL3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageULL3

        Parameters
        ----------
        size: std::vector< itkImageULL3_Pointer >::size_type
        value: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageULL3_swiginit(self, _itkImagePython.new_vectoritkImageULL3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageULL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageULL3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageULL3_Pointer >::size_type
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageULL3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageULL3_Pointer >::size_type
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageULL3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL3_Pointer >::iterator
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageULL3_Pointer >::iterator
        n: std::vector< itkImageULL3_Pointer >::size_type
        x: std::vector< itkImageULL3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageULL3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageULL3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageULL3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageULL3

# Register vectoritkImageULL3 in _itkImagePython:
_itkImagePython.vectoritkImageULL3_swigregister(vectoritkImageULL3)
class vectoritkImageB3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageB3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageB3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageB3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageB3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageB3

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type
        j: std::vector< itkImageB3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type
        j: std::vector< itkImageB3_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type
        j: std::vector< itkImageB3_Pointer >::difference_type
        v: std::vector< itkImageB3_Pointer,std::allocator< itkImageB3_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageB3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type
        j: std::vector< itkImageB3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageB3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageB3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageB3_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageB3_Pointer,std::allocator< itkImageB3_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageB3_Pointer >::difference_type
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageB3_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageB3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageB3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageB3_Pointer > &

        """
        return _itkImagePython.vectoritkImageB3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageB3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageB3_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageB3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageB3_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageB3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageB3_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageB3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageB3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageB3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB3_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageB3_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageB3_Pointer >::iterator
        last: std::vector< itkImageB3_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageB3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageB3
        __init__(self, other) -> vectoritkImageB3

        Parameters
        ----------
        other: std::vector< itkImageB3_Pointer > const &

        __init__(self, size) -> vectoritkImageB3

        Parameters
        ----------
        size: std::vector< itkImageB3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageB3

        Parameters
        ----------
        size: std::vector< itkImageB3_Pointer >::size_type
        value: std::vector< itkImageB3_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageB3_swiginit(self, _itkImagePython.new_vectoritkImageB3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageB3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB3_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageB3_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageB3_Pointer >::size_type
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageB3_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageB3_Pointer >::size_type
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageB3_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB3_Pointer >::iterator
        x: std::vector< itkImageB3_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageB3_Pointer >::iterator
        n: std::vector< itkImageB3_Pointer >::size_type
        x: std::vector< itkImageB3_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageB3_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageB3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageB3_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB3_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageB3

# Register vectoritkImageB3 in _itkImagePython:
_itkImagePython.vectoritkImageB3_swigregister(vectoritkImageB3)
class vectoritkImageFAF33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAF33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAF33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAF33

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type
        j: std::vector< itkImageFAF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type
        j: std::vector< itkImageFAF33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type
        j: std::vector< itkImageFAF33_Pointer >::difference_type
        v: std::vector< itkImageFAF33_Pointer,std::allocator< itkImageFAF33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAF33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type
        j: std::vector< itkImageFAF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAF33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAF33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAF33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAF33_Pointer,std::allocator< itkImageFAF33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAF33_Pointer >::difference_type
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAF33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAF33_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAF33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAF33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAF33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAF33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAF33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAF33_Pointer >::iterator
        last: std::vector< itkImageFAF33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAF33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAF33
        __init__(self, other) -> vectoritkImageFAF33

        Parameters
        ----------
        other: std::vector< itkImageFAF33_Pointer > const &

        __init__(self, size) -> vectoritkImageFAF33

        Parameters
        ----------
        size: std::vector< itkImageFAF33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAF33

        Parameters
        ----------
        size: std::vector< itkImageFAF33_Pointer >::size_type
        value: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAF33_swiginit(self, _itkImagePython.new_vectoritkImageFAF33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAF33_Pointer >::size_type
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF33_Pointer >::size_type
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF33_Pointer >::iterator
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAF33_Pointer >::iterator
        n: std::vector< itkImageFAF33_Pointer >::size_type
        x: std::vector< itkImageFAF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAF33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAF33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAF33

# Register vectoritkImageFAF33 in _itkImagePython:
_itkImagePython.vectoritkImageFAF33_swigregister(vectoritkImageFAF33)
class vectoritkImageFAD33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAD33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAD33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAD33

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type
        j: std::vector< itkImageFAD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type
        j: std::vector< itkImageFAD33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type
        j: std::vector< itkImageFAD33_Pointer >::difference_type
        v: std::vector< itkImageFAD33_Pointer,std::allocator< itkImageFAD33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAD33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type
        j: std::vector< itkImageFAD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAD33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAD33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAD33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAD33_Pointer,std::allocator< itkImageFAD33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAD33_Pointer >::difference_type
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAD33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAD33_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAD33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAD33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAD33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAD33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAD33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAD33_Pointer >::iterator
        last: std::vector< itkImageFAD33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAD33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAD33
        __init__(self, other) -> vectoritkImageFAD33

        Parameters
        ----------
        other: std::vector< itkImageFAD33_Pointer > const &

        __init__(self, size) -> vectoritkImageFAD33

        Parameters
        ----------
        size: std::vector< itkImageFAD33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAD33

        Parameters
        ----------
        size: std::vector< itkImageFAD33_Pointer >::size_type
        value: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAD33_swiginit(self, _itkImagePython.new_vectoritkImageFAD33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAD33_Pointer >::size_type
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD33_Pointer >::size_type
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD33_Pointer >::iterator
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAD33_Pointer >::iterator
        n: std::vector< itkImageFAD33_Pointer >::size_type
        x: std::vector< itkImageFAD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAD33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAD33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAD33

# Register vectoritkImageFAD33 in _itkImagePython:
_itkImagePython.vectoritkImageFAD33_swigregister(vectoritkImageFAD33)
class vectoritkImageO33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageO33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageO33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageO33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageO33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageO33

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type
        j: std::vector< itkImageO33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type
        j: std::vector< itkImageO33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type
        j: std::vector< itkImageO33_Pointer >::difference_type
        v: std::vector< itkImageO33_Pointer,std::allocator< itkImageO33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageO33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type
        j: std::vector< itkImageO33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageO33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageO33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageO33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageO33_Pointer,std::allocator< itkImageO33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageO33_Pointer >::difference_type
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageO33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageO33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageO33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageO33_Pointer > &

        """
        return _itkImagePython.vectoritkImageO33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageO33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageO33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageO33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageO33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageO33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageO33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageO33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageO33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageO33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageO33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageO33_Pointer >::iterator
        last: std::vector< itkImageO33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageO33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageO33
        __init__(self, other) -> vectoritkImageO33

        Parameters
        ----------
        other: std::vector< itkImageO33_Pointer > const &

        __init__(self, size) -> vectoritkImageO33

        Parameters
        ----------
        size: std::vector< itkImageO33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageO33

        Parameters
        ----------
        size: std::vector< itkImageO33_Pointer >::size_type
        value: std::vector< itkImageO33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageO33_swiginit(self, _itkImagePython.new_vectoritkImageO33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageO33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageO33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageO33_Pointer >::size_type
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageO33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageO33_Pointer >::size_type
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageO33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO33_Pointer >::iterator
        x: std::vector< itkImageO33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageO33_Pointer >::iterator
        n: std::vector< itkImageO33_Pointer >::size_type
        x: std::vector< itkImageO33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageO33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageO33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageO33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageO33

# Register vectoritkImageO33 in _itkImagePython:
_itkImagePython.vectoritkImageO33_swigregister(vectoritkImageO33)
class vectoritkImageSSRTD33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTD33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTD33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTD33

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type
        j: std::vector< itkImageSSRTD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type
        j: std::vector< itkImageSSRTD33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type
        j: std::vector< itkImageSSRTD33_Pointer >::difference_type
        v: std::vector< itkImageSSRTD33_Pointer,std::allocator< itkImageSSRTD33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTD33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type
        j: std::vector< itkImageSSRTD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTD33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTD33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTD33_Pointer,std::allocator< itkImageSSRTD33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD33_Pointer >::difference_type
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTD33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTD33_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTD33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTD33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTD33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTD33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTD33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTD33_Pointer >::iterator
        last: std::vector< itkImageSSRTD33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTD33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTD33
        __init__(self, other) -> vectoritkImageSSRTD33

        Parameters
        ----------
        other: std::vector< itkImageSSRTD33_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTD33

        Parameters
        ----------
        size: std::vector< itkImageSSRTD33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTD33

        Parameters
        ----------
        size: std::vector< itkImageSSRTD33_Pointer >::size_type
        value: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTD33_swiginit(self, _itkImagePython.new_vectoritkImageSSRTD33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD33_Pointer >::size_type
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD33_Pointer >::size_type
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD33_Pointer >::iterator
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD33_Pointer >::iterator
        n: std::vector< itkImageSSRTD33_Pointer >::size_type
        x: std::vector< itkImageSSRTD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTD33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTD33

# Register vectoritkImageSSRTD33 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTD33_swigregister(vectoritkImageSSRTD33)
class vectoritkImageSSRTF33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTF33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTF33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTF33

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type
        j: std::vector< itkImageSSRTF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type
        j: std::vector< itkImageSSRTF33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type
        j: std::vector< itkImageSSRTF33_Pointer >::difference_type
        v: std::vector< itkImageSSRTF33_Pointer,std::allocator< itkImageSSRTF33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTF33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type
        j: std::vector< itkImageSSRTF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTF33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTF33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTF33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTF33_Pointer,std::allocator< itkImageSSRTF33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF33_Pointer >::difference_type
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTF33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTF33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTF33_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTF33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTF33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTF33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTF33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTF33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTF33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTF33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTF33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTF33_Pointer >::iterator
        last: std::vector< itkImageSSRTF33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTF33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTF33
        __init__(self, other) -> vectoritkImageSSRTF33

        Parameters
        ----------
        other: std::vector< itkImageSSRTF33_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTF33

        Parameters
        ----------
        size: std::vector< itkImageSSRTF33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTF33

        Parameters
        ----------
        size: std::vector< itkImageSSRTF33_Pointer >::size_type
        value: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTF33_swiginit(self, _itkImagePython.new_vectoritkImageSSRTF33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTF33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF33_Pointer >::size_type
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF33_Pointer >::size_type
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTF33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF33_Pointer >::iterator
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF33_Pointer >::iterator
        n: std::vector< itkImageSSRTF33_Pointer >::size_type
        x: std::vector< itkImageSSRTF33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTF33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTF33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTF33

# Register vectoritkImageSSRTF33 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTF33_swigregister(vectoritkImageSSRTF33)
class vectoritkImageRGBUC4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBUC4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBUC4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBUC4

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBUC4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBUC4_Pointer >::difference_type
        v: std::vector< itkImageRGBUC4_Pointer,std::allocator< itkImageRGBUC4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBUC4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBUC4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBUC4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBUC4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBUC4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBUC4_Pointer,std::allocator< itkImageRGBUC4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBUC4_Pointer >::difference_type
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBUC4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBUC4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBUC4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBUC4_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBUC4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBUC4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBUC4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBUC4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBUC4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBUC4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBUC4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBUC4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBUC4_Pointer >::iterator
        last: std::vector< itkImageRGBUC4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBUC4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBUC4
        __init__(self, other) -> vectoritkImageRGBUC4

        Parameters
        ----------
        other: std::vector< itkImageRGBUC4_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBUC4

        Parameters
        ----------
        size: std::vector< itkImageRGBUC4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBUC4

        Parameters
        ----------
        size: std::vector< itkImageRGBUC4_Pointer >::size_type
        value: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBUC4_swiginit(self, _itkImagePython.new_vectoritkImageRGBUC4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBUC4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC4_Pointer >::size_type
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBUC4_Pointer >::size_type
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC4_Pointer >::iterator
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBUC4_Pointer >::iterator
        n: std::vector< itkImageRGBUC4_Pointer >::size_type
        x: std::vector< itkImageRGBUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBUC4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBUC4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBUC4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBUC4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBUC4

# Register vectoritkImageRGBUC4 in _itkImagePython:
_itkImagePython.vectoritkImageRGBUC4_swigregister(vectoritkImageRGBUC4)
class vectoritkImageRGBAUC4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRGBAUC4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageRGBAUC4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRGBAUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRGBAUC4

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        v: std::vector< itkImageRGBAUC4_Pointer,std::allocator< itkImageRGBAUC4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        j: std::vector< itkImageRGBAUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageRGBAUC4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRGBAUC4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageRGBAUC4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRGBAUC4_Pointer,std::allocator< itkImageRGBAUC4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRGBAUC4_Pointer >::difference_type
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageRGBAUC4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageRGBAUC4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageRGBAUC4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRGBAUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRGBAUC4_Pointer > &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRGBAUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRGBAUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageRGBAUC4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRGBAUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRGBAUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageRGBAUC4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageRGBAUC4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRGBAUC4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageRGBAUC4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageRGBAUC4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRGBAUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageRGBAUC4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRGBAUC4_Pointer >::iterator
        last: std::vector< itkImageRGBAUC4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageRGBAUC4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRGBAUC4
        __init__(self, other) -> vectoritkImageRGBAUC4

        Parameters
        ----------
        other: std::vector< itkImageRGBAUC4_Pointer > const &

        __init__(self, size) -> vectoritkImageRGBAUC4

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageRGBAUC4

        Parameters
        ----------
        size: std::vector< itkImageRGBAUC4_Pointer >::size_type
        value: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageRGBAUC4_swiginit(self, _itkImagePython.new_vectoritkImageRGBAUC4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageRGBAUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageRGBAUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageRGBAUC4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC4_Pointer >::size_type
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRGBAUC4_Pointer >::size_type
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRGBAUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC4_Pointer >::iterator
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRGBAUC4_Pointer >::iterator
        n: std::vector< itkImageRGBAUC4_Pointer >::size_type
        x: std::vector< itkImageRGBAUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageRGBAUC4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRGBAUC4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageRGBAUC4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRGBAUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageRGBAUC4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageRGBAUC4

# Register vectoritkImageRGBAUC4 in _itkImagePython:
_itkImagePython.vectoritkImageRGBAUC4_swigregister(vectoritkImageRGBAUC4)
class vectoritkImageVF24(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF24_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF24___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF24___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF24___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF24

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type
        j: std::vector< itkImageVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF24___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type
        j: std::vector< itkImageVF24_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type
        j: std::vector< itkImageVF24_Pointer >::difference_type
        v: std::vector< itkImageVF24_Pointer,std::allocator< itkImageVF24_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF24___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type
        j: std::vector< itkImageVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF24___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF24___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF24

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF24_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF24___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF24_Pointer,std::allocator< itkImageVF24_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF24_Pointer >::difference_type
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF24_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF24_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF24_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF24_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF24_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF24_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF24_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF24_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF24_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF24_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF24_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF24_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF24_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF24_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF24_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF24_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF24_Pointer >::iterator
        last: std::vector< itkImageVF24_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF24_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF24
        __init__(self, other) -> vectoritkImageVF24

        Parameters
        ----------
        other: std::vector< itkImageVF24_Pointer > const &

        __init__(self, size) -> vectoritkImageVF24

        Parameters
        ----------
        size: std::vector< itkImageVF24_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF24

        Parameters
        ----------
        size: std::vector< itkImageVF24_Pointer >::size_type
        value: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF24_swiginit(self, _itkImagePython.new_vectoritkImageVF24(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF24_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF24_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF24_Pointer >::size_type
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF24_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF24_Pointer >::size_type
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF24_Pointer >::iterator
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF24_Pointer >::iterator
        n: std::vector< itkImageVF24_Pointer >::size_type
        x: std::vector< itkImageVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF24_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF24_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF24_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF24_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF24

# Register vectoritkImageVF24 in _itkImagePython:
_itkImagePython.vectoritkImageVF24_swigregister(vectoritkImageVF24)
class vectoritkImageVF34(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF34_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF34___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF34___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF34___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF34

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type
        j: std::vector< itkImageVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF34___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type
        j: std::vector< itkImageVF34_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type
        j: std::vector< itkImageVF34_Pointer >::difference_type
        v: std::vector< itkImageVF34_Pointer,std::allocator< itkImageVF34_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF34___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type
        j: std::vector< itkImageVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF34___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF34___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF34

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF34_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF34___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF34_Pointer,std::allocator< itkImageVF34_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF34_Pointer >::difference_type
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF34_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF34_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF34_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF34_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF34_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF34_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF34_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF34_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF34_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF34_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF34_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF34_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF34_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF34_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF34_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF34_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF34_Pointer >::iterator
        last: std::vector< itkImageVF34_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF34_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF34
        __init__(self, other) -> vectoritkImageVF34

        Parameters
        ----------
        other: std::vector< itkImageVF34_Pointer > const &

        __init__(self, size) -> vectoritkImageVF34

        Parameters
        ----------
        size: std::vector< itkImageVF34_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF34

        Parameters
        ----------
        size: std::vector< itkImageVF34_Pointer >::size_type
        value: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF34_swiginit(self, _itkImagePython.new_vectoritkImageVF34(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF34_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF34_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF34_Pointer >::size_type
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF34_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF34_Pointer >::size_type
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF34_Pointer >::iterator
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF34_Pointer >::iterator
        n: std::vector< itkImageVF34_Pointer >::size_type
        x: std::vector< itkImageVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF34_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF34_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF34_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF34_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF34

# Register vectoritkImageVF34 in _itkImagePython:
_itkImagePython.vectoritkImageVF34_swigregister(vectoritkImageVF34)
class vectoritkImageVF44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF44

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type
        j: std::vector< itkImageVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type
        j: std::vector< itkImageVF44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type
        j: std::vector< itkImageVF44_Pointer >::difference_type
        v: std::vector< itkImageVF44_Pointer,std::allocator< itkImageVF44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type
        j: std::vector< itkImageVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF44_Pointer,std::allocator< itkImageVF44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF44_Pointer >::difference_type
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF44_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF44_Pointer >::iterator
        last: std::vector< itkImageVF44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF44
        __init__(self, other) -> vectoritkImageVF44

        Parameters
        ----------
        other: std::vector< itkImageVF44_Pointer > const &

        __init__(self, size) -> vectoritkImageVF44

        Parameters
        ----------
        size: std::vector< itkImageVF44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF44

        Parameters
        ----------
        size: std::vector< itkImageVF44_Pointer >::size_type
        value: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF44_swiginit(self, _itkImagePython.new_vectoritkImageVF44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF44_Pointer >::size_type
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF44_Pointer >::size_type
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF44_Pointer >::iterator
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF44_Pointer >::iterator
        n: std::vector< itkImageVF44_Pointer >::size_type
        x: std::vector< itkImageVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF44

# Register vectoritkImageVF44 in _itkImagePython:
_itkImagePython.vectoritkImageVF44_swigregister(vectoritkImageVF44)
class vectoritkImageCVF24(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF24_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF24___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF24___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF24___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF24

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type
        j: std::vector< itkImageCVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF24___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type
        j: std::vector< itkImageCVF24_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type
        j: std::vector< itkImageCVF24_Pointer >::difference_type
        v: std::vector< itkImageCVF24_Pointer,std::allocator< itkImageCVF24_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF24___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type
        j: std::vector< itkImageCVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF24___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF24___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF24

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF24_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF24___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF24_Pointer,std::allocator< itkImageCVF24_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF24_Pointer >::difference_type
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF24_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF24_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF24_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF24_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF24_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF24_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF24_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF24_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF24_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF24_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF24_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF24_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF24_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF24_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF24_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF24_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF24_Pointer >::iterator
        last: std::vector< itkImageCVF24_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF24_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF24
        __init__(self, other) -> vectoritkImageCVF24

        Parameters
        ----------
        other: std::vector< itkImageCVF24_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF24

        Parameters
        ----------
        size: std::vector< itkImageCVF24_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF24

        Parameters
        ----------
        size: std::vector< itkImageCVF24_Pointer >::size_type
        value: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF24_swiginit(self, _itkImagePython.new_vectoritkImageCVF24(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF24_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF24_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF24_Pointer >::size_type
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF24_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF24_Pointer >::size_type
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF24_Pointer >::iterator
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF24_Pointer >::iterator
        n: std::vector< itkImageCVF24_Pointer >::size_type
        x: std::vector< itkImageCVF24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF24_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF24_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF24_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF24_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF24

# Register vectoritkImageCVF24 in _itkImagePython:
_itkImagePython.vectoritkImageCVF24_swigregister(vectoritkImageCVF24)
class vectoritkImageCVF34(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF34_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF34___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF34___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF34___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF34

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type
        j: std::vector< itkImageCVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF34___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type
        j: std::vector< itkImageCVF34_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type
        j: std::vector< itkImageCVF34_Pointer >::difference_type
        v: std::vector< itkImageCVF34_Pointer,std::allocator< itkImageCVF34_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF34___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type
        j: std::vector< itkImageCVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF34___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF34___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF34

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF34_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF34___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF34_Pointer,std::allocator< itkImageCVF34_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF34_Pointer >::difference_type
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF34_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF34_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF34_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF34_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF34_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF34_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF34_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF34_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF34_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF34_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF34_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF34_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF34_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF34_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF34_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF34_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF34_Pointer >::iterator
        last: std::vector< itkImageCVF34_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF34_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF34
        __init__(self, other) -> vectoritkImageCVF34

        Parameters
        ----------
        other: std::vector< itkImageCVF34_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF34

        Parameters
        ----------
        size: std::vector< itkImageCVF34_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF34

        Parameters
        ----------
        size: std::vector< itkImageCVF34_Pointer >::size_type
        value: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF34_swiginit(self, _itkImagePython.new_vectoritkImageCVF34(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF34_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF34_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF34_Pointer >::size_type
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF34_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF34_Pointer >::size_type
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF34_Pointer >::iterator
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF34_Pointer >::iterator
        n: std::vector< itkImageCVF34_Pointer >::size_type
        x: std::vector< itkImageCVF34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF34_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF34_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF34_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF34_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF34

# Register vectoritkImageCVF34 in _itkImagePython:
_itkImagePython.vectoritkImageCVF34_swigregister(vectoritkImageCVF34)
class vectoritkImageCVF44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVF44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF44

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type
        j: std::vector< itkImageCVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type
        j: std::vector< itkImageCVF44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type
        j: std::vector< itkImageCVF44_Pointer >::difference_type
        v: std::vector< itkImageCVF44_Pointer,std::allocator< itkImageCVF44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVF44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type
        j: std::vector< itkImageCVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVF44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVF44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF44_Pointer,std::allocator< itkImageCVF44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF44_Pointer >::difference_type
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVF44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVF44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF44_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVF44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVF44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVF44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVF44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVF44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVF44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF44_Pointer >::iterator
        last: std::vector< itkImageCVF44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVF44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF44
        __init__(self, other) -> vectoritkImageCVF44

        Parameters
        ----------
        other: std::vector< itkImageCVF44_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF44

        Parameters
        ----------
        size: std::vector< itkImageCVF44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF44

        Parameters
        ----------
        size: std::vector< itkImageCVF44_Pointer >::size_type
        value: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVF44_swiginit(self, _itkImagePython.new_vectoritkImageCVF44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVF44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF44_Pointer >::size_type
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF44_Pointer >::size_type
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF44_Pointer >::iterator
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF44_Pointer >::iterator
        n: std::vector< itkImageCVF44_Pointer >::size_type
        x: std::vector< itkImageCVF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVF44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVF44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVF44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVF44

# Register vectoritkImageCVF44 in _itkImagePython:
_itkImagePython.vectoritkImageCVF44_swigregister(vectoritkImageCVF44)
class vectoritkImageSS4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSS4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSS4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSS4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSS4

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type
        j: std::vector< itkImageSS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type
        j: std::vector< itkImageSS4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type
        j: std::vector< itkImageSS4_Pointer >::difference_type
        v: std::vector< itkImageSS4_Pointer,std::allocator< itkImageSS4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSS4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type
        j: std::vector< itkImageSS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSS4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSS4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSS4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSS4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSS4_Pointer,std::allocator< itkImageSS4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSS4_Pointer >::difference_type
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSS4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSS4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSS4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSS4_Pointer > &

        """
        return _itkImagePython.vectoritkImageSS4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSS4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSS4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSS4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSS4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSS4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSS4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSS4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSS4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSS4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSS4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSS4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSS4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSS4_Pointer >::iterator
        last: std::vector< itkImageSS4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSS4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSS4
        __init__(self, other) -> vectoritkImageSS4

        Parameters
        ----------
        other: std::vector< itkImageSS4_Pointer > const &

        __init__(self, size) -> vectoritkImageSS4

        Parameters
        ----------
        size: std::vector< itkImageSS4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSS4

        Parameters
        ----------
        size: std::vector< itkImageSS4_Pointer >::size_type
        value: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSS4_swiginit(self, _itkImagePython.new_vectoritkImageSS4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSS4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSS4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSS4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSS4_Pointer >::size_type
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSS4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSS4_Pointer >::size_type
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSS4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSS4_Pointer >::iterator
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSS4_Pointer >::iterator
        n: std::vector< itkImageSS4_Pointer >::size_type
        x: std::vector< itkImageSS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSS4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSS4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSS4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSS4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSS4

# Register vectoritkImageSS4 in _itkImagePython:
_itkImagePython.vectoritkImageSS4_swigregister(vectoritkImageSS4)
class vectoritkImageUC4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUC4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUC4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUC4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUC4

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type
        j: std::vector< itkImageUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type
        j: std::vector< itkImageUC4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type
        j: std::vector< itkImageUC4_Pointer >::difference_type
        v: std::vector< itkImageUC4_Pointer,std::allocator< itkImageUC4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUC4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type
        j: std::vector< itkImageUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUC4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUC4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUC4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUC4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUC4_Pointer,std::allocator< itkImageUC4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUC4_Pointer >::difference_type
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUC4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUC4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUC4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUC4_Pointer > &

        """
        return _itkImagePython.vectoritkImageUC4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUC4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUC4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUC4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUC4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUC4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUC4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUC4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUC4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUC4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUC4_Pointer >::iterator
        last: std::vector< itkImageUC4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUC4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUC4
        __init__(self, other) -> vectoritkImageUC4

        Parameters
        ----------
        other: std::vector< itkImageUC4_Pointer > const &

        __init__(self, size) -> vectoritkImageUC4

        Parameters
        ----------
        size: std::vector< itkImageUC4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUC4

        Parameters
        ----------
        size: std::vector< itkImageUC4_Pointer >::size_type
        value: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUC4_swiginit(self, _itkImagePython.new_vectoritkImageUC4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUC4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUC4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUC4_Pointer >::size_type
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUC4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUC4_Pointer >::size_type
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUC4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC4_Pointer >::iterator
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUC4_Pointer >::iterator
        n: std::vector< itkImageUC4_Pointer >::size_type
        x: std::vector< itkImageUC4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUC4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUC4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUC4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUC4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUC4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUC4

# Register vectoritkImageUC4 in _itkImagePython:
_itkImagePython.vectoritkImageUC4_swigregister(vectoritkImageUC4)
class vectoritkImageUS4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUS4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUS4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUS4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUS4

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type
        j: std::vector< itkImageUS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type
        j: std::vector< itkImageUS4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type
        j: std::vector< itkImageUS4_Pointer >::difference_type
        v: std::vector< itkImageUS4_Pointer,std::allocator< itkImageUS4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUS4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type
        j: std::vector< itkImageUS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUS4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUS4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUS4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUS4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUS4_Pointer,std::allocator< itkImageUS4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUS4_Pointer >::difference_type
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUS4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUS4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUS4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUS4_Pointer > &

        """
        return _itkImagePython.vectoritkImageUS4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUS4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUS4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUS4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUS4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUS4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUS4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUS4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUS4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUS4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUS4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUS4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUS4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUS4_Pointer >::iterator
        last: std::vector< itkImageUS4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUS4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUS4
        __init__(self, other) -> vectoritkImageUS4

        Parameters
        ----------
        other: std::vector< itkImageUS4_Pointer > const &

        __init__(self, size) -> vectoritkImageUS4

        Parameters
        ----------
        size: std::vector< itkImageUS4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUS4

        Parameters
        ----------
        size: std::vector< itkImageUS4_Pointer >::size_type
        value: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUS4_swiginit(self, _itkImagePython.new_vectoritkImageUS4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUS4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUS4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUS4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUS4_Pointer >::size_type
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUS4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUS4_Pointer >::size_type
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUS4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS4_Pointer >::iterator
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUS4_Pointer >::iterator
        n: std::vector< itkImageUS4_Pointer >::size_type
        x: std::vector< itkImageUS4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUS4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUS4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUS4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUS4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUS4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUS4

# Register vectoritkImageUS4 in _itkImagePython:
_itkImagePython.vectoritkImageUS4_swigregister(vectoritkImageUS4)
class vectoritkImageF4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageF4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageF4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageF4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageF4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageF4

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type
        j: std::vector< itkImageF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type
        j: std::vector< itkImageF4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type
        j: std::vector< itkImageF4_Pointer >::difference_type
        v: std::vector< itkImageF4_Pointer,std::allocator< itkImageF4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageF4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type
        j: std::vector< itkImageF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageF4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageF4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageF4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageF4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageF4_Pointer,std::allocator< itkImageF4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageF4_Pointer >::difference_type
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageF4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageF4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageF4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageF4_Pointer > &

        """
        return _itkImagePython.vectoritkImageF4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageF4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageF4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageF4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageF4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageF4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageF4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageF4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageF4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageF4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageF4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageF4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageF4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageF4_Pointer >::iterator
        last: std::vector< itkImageF4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageF4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageF4
        __init__(self, other) -> vectoritkImageF4

        Parameters
        ----------
        other: std::vector< itkImageF4_Pointer > const &

        __init__(self, size) -> vectoritkImageF4

        Parameters
        ----------
        size: std::vector< itkImageF4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageF4

        Parameters
        ----------
        size: std::vector< itkImageF4_Pointer >::size_type
        value: std::vector< itkImageF4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageF4_swiginit(self, _itkImagePython.new_vectoritkImageF4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageF4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageF4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageF4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageF4_Pointer >::size_type
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageF4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageF4_Pointer >::size_type
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageF4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF4_Pointer >::iterator
        x: std::vector< itkImageF4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageF4_Pointer >::iterator
        n: std::vector< itkImageF4_Pointer >::size_type
        x: std::vector< itkImageF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageF4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageF4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageF4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageF4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageF4

# Register vectoritkImageF4 in _itkImagePython:
_itkImagePython.vectoritkImageF4_swigregister(vectoritkImageF4)
class vectoritkImageD4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageD4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageD4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageD4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageD4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageD4

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type
        j: std::vector< itkImageD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type
        j: std::vector< itkImageD4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type
        j: std::vector< itkImageD4_Pointer >::difference_type
        v: std::vector< itkImageD4_Pointer,std::allocator< itkImageD4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageD4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type
        j: std::vector< itkImageD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageD4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageD4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageD4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageD4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageD4_Pointer,std::allocator< itkImageD4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageD4_Pointer >::difference_type
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageD4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageD4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageD4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageD4_Pointer > &

        """
        return _itkImagePython.vectoritkImageD4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageD4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageD4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageD4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageD4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageD4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageD4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageD4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageD4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageD4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageD4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageD4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageD4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageD4_Pointer >::iterator
        last: std::vector< itkImageD4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageD4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageD4
        __init__(self, other) -> vectoritkImageD4

        Parameters
        ----------
        other: std::vector< itkImageD4_Pointer > const &

        __init__(self, size) -> vectoritkImageD4

        Parameters
        ----------
        size: std::vector< itkImageD4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageD4

        Parameters
        ----------
        size: std::vector< itkImageD4_Pointer >::size_type
        value: std::vector< itkImageD4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageD4_swiginit(self, _itkImagePython.new_vectoritkImageD4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageD4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageD4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageD4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageD4_Pointer >::size_type
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageD4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageD4_Pointer >::size_type
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageD4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD4_Pointer >::iterator
        x: std::vector< itkImageD4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageD4_Pointer >::iterator
        n: std::vector< itkImageD4_Pointer >::size_type
        x: std::vector< itkImageD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageD4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageD4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageD4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageD4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageD4

# Register vectoritkImageD4 in _itkImagePython:
_itkImagePython.vectoritkImageD4_swigregister(vectoritkImageD4)
class vectoritkImageCD4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCD4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCD4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCD4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCD4

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type
        j: std::vector< itkImageCD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type
        j: std::vector< itkImageCD4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type
        j: std::vector< itkImageCD4_Pointer >::difference_type
        v: std::vector< itkImageCD4_Pointer,std::allocator< itkImageCD4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCD4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type
        j: std::vector< itkImageCD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCD4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCD4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCD4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCD4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCD4_Pointer,std::allocator< itkImageCD4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCD4_Pointer >::difference_type
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCD4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCD4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCD4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCD4_Pointer > &

        """
        return _itkImagePython.vectoritkImageCD4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCD4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCD4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCD4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCD4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCD4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCD4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCD4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCD4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCD4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCD4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCD4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCD4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCD4_Pointer >::iterator
        last: std::vector< itkImageCD4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCD4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCD4
        __init__(self, other) -> vectoritkImageCD4

        Parameters
        ----------
        other: std::vector< itkImageCD4_Pointer > const &

        __init__(self, size) -> vectoritkImageCD4

        Parameters
        ----------
        size: std::vector< itkImageCD4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCD4

        Parameters
        ----------
        size: std::vector< itkImageCD4_Pointer >::size_type
        value: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCD4_swiginit(self, _itkImagePython.new_vectoritkImageCD4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCD4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCD4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCD4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCD4_Pointer >::size_type
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCD4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCD4_Pointer >::size_type
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCD4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCD4_Pointer >::iterator
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCD4_Pointer >::iterator
        n: std::vector< itkImageCD4_Pointer >::size_type
        x: std::vector< itkImageCD4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCD4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCD4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCD4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCD4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCD4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCD4

# Register vectoritkImageCD4 in _itkImagePython:
_itkImagePython.vectoritkImageCD4_swigregister(vectoritkImageCD4)
class vectoritkImageCF4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCF4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCF4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCF4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCF4

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type
        j: std::vector< itkImageCF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type
        j: std::vector< itkImageCF4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type
        j: std::vector< itkImageCF4_Pointer >::difference_type
        v: std::vector< itkImageCF4_Pointer,std::allocator< itkImageCF4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCF4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type
        j: std::vector< itkImageCF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCF4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCF4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCF4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCF4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCF4_Pointer,std::allocator< itkImageCF4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCF4_Pointer >::difference_type
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCF4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCF4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCF4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCF4_Pointer > &

        """
        return _itkImagePython.vectoritkImageCF4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCF4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCF4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCF4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCF4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCF4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCF4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCF4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCF4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCF4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCF4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCF4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCF4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCF4_Pointer >::iterator
        last: std::vector< itkImageCF4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCF4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCF4
        __init__(self, other) -> vectoritkImageCF4

        Parameters
        ----------
        other: std::vector< itkImageCF4_Pointer > const &

        __init__(self, size) -> vectoritkImageCF4

        Parameters
        ----------
        size: std::vector< itkImageCF4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCF4

        Parameters
        ----------
        size: std::vector< itkImageCF4_Pointer >::size_type
        value: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCF4_swiginit(self, _itkImagePython.new_vectoritkImageCF4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCF4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCF4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCF4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCF4_Pointer >::size_type
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCF4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCF4_Pointer >::size_type
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCF4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCF4_Pointer >::iterator
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCF4_Pointer >::iterator
        n: std::vector< itkImageCF4_Pointer >::size_type
        x: std::vector< itkImageCF4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCF4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCF4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCF4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCF4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCF4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCF4

# Register vectoritkImageCF4 in _itkImagePython:
_itkImagePython.vectoritkImageCF4_swigregister(vectoritkImageCF4)
class vectoritkImageVD24(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD24_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD24___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD24___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD24

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type
        j: std::vector< itkImageVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD24___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type
        j: std::vector< itkImageVD24_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type
        j: std::vector< itkImageVD24_Pointer >::difference_type
        v: std::vector< itkImageVD24_Pointer,std::allocator< itkImageVD24_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD24___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type
        j: std::vector< itkImageVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD24___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD24___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD24

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD24_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD24___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD24_Pointer,std::allocator< itkImageVD24_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD24_Pointer >::difference_type
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD24_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD24_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD24_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD24_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD24_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD24_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD24_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD24_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD24_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD24_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD24_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD24_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD24_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD24_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD24_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD24_Pointer >::iterator
        last: std::vector< itkImageVD24_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD24_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD24
        __init__(self, other) -> vectoritkImageVD24

        Parameters
        ----------
        other: std::vector< itkImageVD24_Pointer > const &

        __init__(self, size) -> vectoritkImageVD24

        Parameters
        ----------
        size: std::vector< itkImageVD24_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD24

        Parameters
        ----------
        size: std::vector< itkImageVD24_Pointer >::size_type
        value: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD24_swiginit(self, _itkImagePython.new_vectoritkImageVD24(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD24_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD24_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD24_Pointer >::size_type
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD24_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD24_Pointer >::size_type
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD24_Pointer >::iterator
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD24_Pointer >::iterator
        n: std::vector< itkImageVD24_Pointer >::size_type
        x: std::vector< itkImageVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD24_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD24_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD24_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD24_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD24

# Register vectoritkImageVD24 in _itkImagePython:
_itkImagePython.vectoritkImageVD24_swigregister(vectoritkImageVD24)
class vectoritkImageVD34(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD34_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD34___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD34___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD34

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type
        j: std::vector< itkImageVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD34___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type
        j: std::vector< itkImageVD34_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type
        j: std::vector< itkImageVD34_Pointer >::difference_type
        v: std::vector< itkImageVD34_Pointer,std::allocator< itkImageVD34_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD34___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type
        j: std::vector< itkImageVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD34___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD34___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD34

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD34_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD34___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD34_Pointer,std::allocator< itkImageVD34_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD34_Pointer >::difference_type
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD34_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD34_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD34_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD34_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD34_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD34_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD34_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD34_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD34_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD34_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD34_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD34_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD34_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD34_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD34_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD34_Pointer >::iterator
        last: std::vector< itkImageVD34_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD34_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD34
        __init__(self, other) -> vectoritkImageVD34

        Parameters
        ----------
        other: std::vector< itkImageVD34_Pointer > const &

        __init__(self, size) -> vectoritkImageVD34

        Parameters
        ----------
        size: std::vector< itkImageVD34_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD34

        Parameters
        ----------
        size: std::vector< itkImageVD34_Pointer >::size_type
        value: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD34_swiginit(self, _itkImagePython.new_vectoritkImageVD34(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD34_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD34_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD34_Pointer >::size_type
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD34_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD34_Pointer >::size_type
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD34_Pointer >::iterator
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD34_Pointer >::iterator
        n: std::vector< itkImageVD34_Pointer >::size_type
        x: std::vector< itkImageVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD34_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD34_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD34_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD34_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD34

# Register vectoritkImageVD34 in _itkImagePython:
_itkImagePython.vectoritkImageVD34_swigregister(vectoritkImageVD34)
class vectoritkImageVD44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD44

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type
        j: std::vector< itkImageVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type
        j: std::vector< itkImageVD44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type
        j: std::vector< itkImageVD44_Pointer >::difference_type
        v: std::vector< itkImageVD44_Pointer,std::allocator< itkImageVD44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type
        j: std::vector< itkImageVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD44_Pointer,std::allocator< itkImageVD44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD44_Pointer >::difference_type
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD44_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD44_Pointer >::iterator
        last: std::vector< itkImageVD44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD44
        __init__(self, other) -> vectoritkImageVD44

        Parameters
        ----------
        other: std::vector< itkImageVD44_Pointer > const &

        __init__(self, size) -> vectoritkImageVD44

        Parameters
        ----------
        size: std::vector< itkImageVD44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD44

        Parameters
        ----------
        size: std::vector< itkImageVD44_Pointer >::size_type
        value: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD44_swiginit(self, _itkImagePython.new_vectoritkImageVD44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD44_Pointer >::size_type
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD44_Pointer >::size_type
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD44_Pointer >::iterator
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD44_Pointer >::iterator
        n: std::vector< itkImageVD44_Pointer >::size_type
        x: std::vector< itkImageVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD44

# Register vectoritkImageVD44 in _itkImagePython:
_itkImagePython.vectoritkImageVD44_swigregister(vectoritkImageVD44)
class vectoritkImageSI4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSI4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSI4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSI4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSI4

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type
        j: std::vector< itkImageSI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type
        j: std::vector< itkImageSI4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type
        j: std::vector< itkImageSI4_Pointer >::difference_type
        v: std::vector< itkImageSI4_Pointer,std::allocator< itkImageSI4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSI4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type
        j: std::vector< itkImageSI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSI4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSI4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSI4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSI4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSI4_Pointer,std::allocator< itkImageSI4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSI4_Pointer >::difference_type
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSI4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSI4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSI4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSI4_Pointer > &

        """
        return _itkImagePython.vectoritkImageSI4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSI4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSI4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSI4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSI4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSI4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSI4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSI4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSI4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSI4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSI4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSI4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSI4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSI4_Pointer >::iterator
        last: std::vector< itkImageSI4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSI4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSI4
        __init__(self, other) -> vectoritkImageSI4

        Parameters
        ----------
        other: std::vector< itkImageSI4_Pointer > const &

        __init__(self, size) -> vectoritkImageSI4

        Parameters
        ----------
        size: std::vector< itkImageSI4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSI4

        Parameters
        ----------
        size: std::vector< itkImageSI4_Pointer >::size_type
        value: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSI4_swiginit(self, _itkImagePython.new_vectoritkImageSI4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSI4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSI4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSI4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSI4_Pointer >::size_type
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSI4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSI4_Pointer >::size_type
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSI4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSI4_Pointer >::iterator
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSI4_Pointer >::iterator
        n: std::vector< itkImageSI4_Pointer >::size_type
        x: std::vector< itkImageSI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSI4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSI4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSI4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSI4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSI4

# Register vectoritkImageSI4 in _itkImagePython:
_itkImagePython.vectoritkImageSI4_swigregister(vectoritkImageSI4)
class vectoritkImageUI4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUI4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUI4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUI4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUI4

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type
        j: std::vector< itkImageUI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type
        j: std::vector< itkImageUI4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type
        j: std::vector< itkImageUI4_Pointer >::difference_type
        v: std::vector< itkImageUI4_Pointer,std::allocator< itkImageUI4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUI4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type
        j: std::vector< itkImageUI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUI4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUI4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUI4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUI4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUI4_Pointer,std::allocator< itkImageUI4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUI4_Pointer >::difference_type
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUI4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUI4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUI4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUI4_Pointer > &

        """
        return _itkImagePython.vectoritkImageUI4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUI4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUI4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUI4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUI4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUI4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUI4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUI4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUI4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUI4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUI4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUI4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUI4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUI4_Pointer >::iterator
        last: std::vector< itkImageUI4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUI4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUI4
        __init__(self, other) -> vectoritkImageUI4

        Parameters
        ----------
        other: std::vector< itkImageUI4_Pointer > const &

        __init__(self, size) -> vectoritkImageUI4

        Parameters
        ----------
        size: std::vector< itkImageUI4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUI4

        Parameters
        ----------
        size: std::vector< itkImageUI4_Pointer >::size_type
        value: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUI4_swiginit(self, _itkImagePython.new_vectoritkImageUI4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUI4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUI4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUI4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUI4_Pointer >::size_type
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUI4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUI4_Pointer >::size_type
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUI4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUI4_Pointer >::iterator
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUI4_Pointer >::iterator
        n: std::vector< itkImageUI4_Pointer >::size_type
        x: std::vector< itkImageUI4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUI4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUI4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUI4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUI4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUI4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUI4

# Register vectoritkImageUI4 in _itkImagePython:
_itkImagePython.vectoritkImageUI4_swigregister(vectoritkImageUI4)
class vectoritkImageUL4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUL4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageUL4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageUL4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUL4

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type
        j: std::vector< itkImageUL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type
        j: std::vector< itkImageUL4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type
        j: std::vector< itkImageUL4_Pointer >::difference_type
        v: std::vector< itkImageUL4_Pointer,std::allocator< itkImageUL4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageUL4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type
        j: std::vector< itkImageUL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageUL4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUL4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUL4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageUL4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUL4_Pointer,std::allocator< itkImageUL4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUL4_Pointer >::difference_type
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUL4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageUL4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageUL4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUL4_Pointer > &

        """
        return _itkImagePython.vectoritkImageUL4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUL4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUL4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageUL4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUL4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUL4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageUL4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageUL4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUL4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageUL4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageUL4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUL4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUL4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUL4_Pointer >::iterator
        last: std::vector< itkImageUL4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageUL4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUL4
        __init__(self, other) -> vectoritkImageUL4

        Parameters
        ----------
        other: std::vector< itkImageUL4_Pointer > const &

        __init__(self, size) -> vectoritkImageUL4

        Parameters
        ----------
        size: std::vector< itkImageUL4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUL4

        Parameters
        ----------
        size: std::vector< itkImageUL4_Pointer >::size_type
        value: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageUL4_swiginit(self, _itkImagePython.new_vectoritkImageUL4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUL4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUL4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageUL4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUL4_Pointer >::size_type
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUL4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUL4_Pointer >::size_type
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUL4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUL4_Pointer >::iterator
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUL4_Pointer >::iterator
        n: std::vector< itkImageUL4_Pointer >::size_type
        x: std::vector< itkImageUL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageUL4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUL4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageUL4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageUL4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageUL4

# Register vectoritkImageUL4 in _itkImagePython:
_itkImagePython.vectoritkImageUL4_swigregister(vectoritkImageUL4)
class vectoritkImageULL4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageULL4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageULL4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageULL4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageULL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageULL4

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type
        j: std::vector< itkImageULL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type
        j: std::vector< itkImageULL4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type
        j: std::vector< itkImageULL4_Pointer >::difference_type
        v: std::vector< itkImageULL4_Pointer,std::allocator< itkImageULL4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageULL4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type
        j: std::vector< itkImageULL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageULL4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageULL4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageULL4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageULL4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageULL4_Pointer,std::allocator< itkImageULL4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageULL4_Pointer >::difference_type
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageULL4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageULL4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageULL4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageULL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageULL4_Pointer > &

        """
        return _itkImagePython.vectoritkImageULL4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageULL4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageULL4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageULL4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageULL4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageULL4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageULL4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageULL4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageULL4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageULL4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageULL4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageULL4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageULL4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageULL4_Pointer >::iterator
        last: std::vector< itkImageULL4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageULL4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageULL4
        __init__(self, other) -> vectoritkImageULL4

        Parameters
        ----------
        other: std::vector< itkImageULL4_Pointer > const &

        __init__(self, size) -> vectoritkImageULL4

        Parameters
        ----------
        size: std::vector< itkImageULL4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageULL4

        Parameters
        ----------
        size: std::vector< itkImageULL4_Pointer >::size_type
        value: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageULL4_swiginit(self, _itkImagePython.new_vectoritkImageULL4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageULL4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageULL4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageULL4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageULL4_Pointer >::size_type
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageULL4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageULL4_Pointer >::size_type
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageULL4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageULL4_Pointer >::iterator
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageULL4_Pointer >::iterator
        n: std::vector< itkImageULL4_Pointer >::size_type
        x: std::vector< itkImageULL4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageULL4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageULL4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageULL4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageULL4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageULL4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageULL4

# Register vectoritkImageULL4 in _itkImagePython:
_itkImagePython.vectoritkImageULL4_swigregister(vectoritkImageULL4)
class vectoritkImageB4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageB4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageB4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageB4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageB4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageB4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageB4

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type
        j: std::vector< itkImageB4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type
        j: std::vector< itkImageB4_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type
        j: std::vector< itkImageB4_Pointer >::difference_type
        v: std::vector< itkImageB4_Pointer,std::allocator< itkImageB4_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageB4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type
        j: std::vector< itkImageB4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageB4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageB4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageB4_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageB4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageB4_Pointer,std::allocator< itkImageB4_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageB4_Pointer >::difference_type
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageB4_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageB4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageB4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageB4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageB4_Pointer > &

        """
        return _itkImagePython.vectoritkImageB4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageB4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageB4_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageB4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageB4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageB4_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageB4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageB4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageB4_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageB4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageB4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageB4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB4_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageB4_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageB4_Pointer >::iterator
        last: std::vector< itkImageB4_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageB4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageB4
        __init__(self, other) -> vectoritkImageB4

        Parameters
        ----------
        other: std::vector< itkImageB4_Pointer > const &

        __init__(self, size) -> vectoritkImageB4

        Parameters
        ----------
        size: std::vector< itkImageB4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageB4

        Parameters
        ----------
        size: std::vector< itkImageB4_Pointer >::size_type
        value: std::vector< itkImageB4_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageB4_swiginit(self, _itkImagePython.new_vectoritkImageB4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageB4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB4_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageB4_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageB4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageB4_Pointer >::size_type
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageB4_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageB4_Pointer >::size_type
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageB4_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageB4_Pointer >::iterator
        x: std::vector< itkImageB4_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageB4_Pointer >::iterator
        n: std::vector< itkImageB4_Pointer >::size_type
        x: std::vector< itkImageB4_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageB4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageB4_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageB4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageB4_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageB4_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageB4

# Register vectoritkImageB4 in _itkImagePython:
_itkImagePython.vectoritkImageB4_swigregister(vectoritkImageB4)
class vectoritkImageFAF44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAF44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAF44

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type
        j: std::vector< itkImageFAF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type
        j: std::vector< itkImageFAF44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type
        j: std::vector< itkImageFAF44_Pointer >::difference_type
        v: std::vector< itkImageFAF44_Pointer,std::allocator< itkImageFAF44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAF44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type
        j: std::vector< itkImageFAF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAF44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAF44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAF44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAF44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAF44_Pointer,std::allocator< itkImageFAF44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAF44_Pointer >::difference_type
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAF44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAF44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAF44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAF44_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAF44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAF44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAF44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAF44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAF44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAF44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAF44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAF44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAF44_Pointer >::iterator
        last: std::vector< itkImageFAF44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAF44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAF44
        __init__(self, other) -> vectoritkImageFAF44

        Parameters
        ----------
        other: std::vector< itkImageFAF44_Pointer > const &

        __init__(self, size) -> vectoritkImageFAF44

        Parameters
        ----------
        size: std::vector< itkImageFAF44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAF44

        Parameters
        ----------
        size: std::vector< itkImageFAF44_Pointer >::size_type
        value: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAF44_swiginit(self, _itkImagePython.new_vectoritkImageFAF44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAF44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAF44_Pointer >::size_type
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAF44_Pointer >::size_type
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAF44_Pointer >::iterator
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAF44_Pointer >::iterator
        n: std::vector< itkImageFAF44_Pointer >::size_type
        x: std::vector< itkImageFAF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAF44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAF44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAF44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAF44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAF44

# Register vectoritkImageFAF44 in _itkImagePython:
_itkImagePython.vectoritkImageFAF44_swigregister(vectoritkImageFAF44)
class vectoritkImageFAD44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageFAD44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageFAD44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageFAD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageFAD44

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type
        j: std::vector< itkImageFAD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type
        j: std::vector< itkImageFAD44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type
        j: std::vector< itkImageFAD44_Pointer >::difference_type
        v: std::vector< itkImageFAD44_Pointer,std::allocator< itkImageFAD44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageFAD44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type
        j: std::vector< itkImageFAD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageFAD44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageFAD44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageFAD44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageFAD44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageFAD44_Pointer,std::allocator< itkImageFAD44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageFAD44_Pointer >::difference_type
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageFAD44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageFAD44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageFAD44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageFAD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageFAD44_Pointer > &

        """
        return _itkImagePython.vectoritkImageFAD44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageFAD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageFAD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageFAD44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageFAD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageFAD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageFAD44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageFAD44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageFAD44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageFAD44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageFAD44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageFAD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageFAD44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageFAD44_Pointer >::iterator
        last: std::vector< itkImageFAD44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageFAD44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageFAD44
        __init__(self, other) -> vectoritkImageFAD44

        Parameters
        ----------
        other: std::vector< itkImageFAD44_Pointer > const &

        __init__(self, size) -> vectoritkImageFAD44

        Parameters
        ----------
        size: std::vector< itkImageFAD44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageFAD44

        Parameters
        ----------
        size: std::vector< itkImageFAD44_Pointer >::size_type
        value: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageFAD44_swiginit(self, _itkImagePython.new_vectoritkImageFAD44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageFAD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageFAD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageFAD44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageFAD44_Pointer >::size_type
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageFAD44_Pointer >::size_type
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageFAD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageFAD44_Pointer >::iterator
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageFAD44_Pointer >::iterator
        n: std::vector< itkImageFAD44_Pointer >::size_type
        x: std::vector< itkImageFAD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageFAD44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageFAD44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageFAD44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageFAD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageFAD44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageFAD44

# Register vectoritkImageFAD44 in _itkImagePython:
_itkImagePython.vectoritkImageFAD44_swigregister(vectoritkImageFAD44)
class vectoritkImageO44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageO44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageO44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageO44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageO44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageO44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageO44

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type
        j: std::vector< itkImageO44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type
        j: std::vector< itkImageO44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type
        j: std::vector< itkImageO44_Pointer >::difference_type
        v: std::vector< itkImageO44_Pointer,std::allocator< itkImageO44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageO44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type
        j: std::vector< itkImageO44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageO44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageO44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageO44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageO44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageO44_Pointer,std::allocator< itkImageO44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageO44_Pointer >::difference_type
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageO44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageO44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageO44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageO44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageO44_Pointer > &

        """
        return _itkImagePython.vectoritkImageO44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageO44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageO44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageO44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageO44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageO44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageO44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageO44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageO44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageO44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageO44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageO44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageO44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageO44_Pointer >::iterator
        last: std::vector< itkImageO44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageO44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageO44
        __init__(self, other) -> vectoritkImageO44

        Parameters
        ----------
        other: std::vector< itkImageO44_Pointer > const &

        __init__(self, size) -> vectoritkImageO44

        Parameters
        ----------
        size: std::vector< itkImageO44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageO44

        Parameters
        ----------
        size: std::vector< itkImageO44_Pointer >::size_type
        value: std::vector< itkImageO44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageO44_swiginit(self, _itkImagePython.new_vectoritkImageO44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageO44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageO44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageO44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageO44_Pointer >::size_type
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageO44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageO44_Pointer >::size_type
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageO44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageO44_Pointer >::iterator
        x: std::vector< itkImageO44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageO44_Pointer >::iterator
        n: std::vector< itkImageO44_Pointer >::size_type
        x: std::vector< itkImageO44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageO44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageO44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageO44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageO44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageO44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageO44

# Register vectoritkImageO44 in _itkImagePython:
_itkImagePython.vectoritkImageO44_swigregister(vectoritkImageO44)
class vectoritkImageSSRTD44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTD44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTD44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTD44

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type
        j: std::vector< itkImageSSRTD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type
        j: std::vector< itkImageSSRTD44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type
        j: std::vector< itkImageSSRTD44_Pointer >::difference_type
        v: std::vector< itkImageSSRTD44_Pointer,std::allocator< itkImageSSRTD44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTD44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type
        j: std::vector< itkImageSSRTD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTD44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTD44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTD44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTD44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTD44_Pointer,std::allocator< itkImageSSRTD44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTD44_Pointer >::difference_type
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTD44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTD44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTD44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTD44_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTD44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTD44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTD44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTD44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTD44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTD44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTD44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTD44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTD44_Pointer >::iterator
        last: std::vector< itkImageSSRTD44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTD44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTD44
        __init__(self, other) -> vectoritkImageSSRTD44

        Parameters
        ----------
        other: std::vector< itkImageSSRTD44_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTD44

        Parameters
        ----------
        size: std::vector< itkImageSSRTD44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTD44

        Parameters
        ----------
        size: std::vector< itkImageSSRTD44_Pointer >::size_type
        value: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTD44_swiginit(self, _itkImagePython.new_vectoritkImageSSRTD44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTD44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD44_Pointer >::size_type
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTD44_Pointer >::size_type
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD44_Pointer >::iterator
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTD44_Pointer >::iterator
        n: std::vector< itkImageSSRTD44_Pointer >::size_type
        x: std::vector< itkImageSSRTD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTD44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTD44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTD44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTD44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTD44

# Register vectoritkImageSSRTD44 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTD44_swigregister(vectoritkImageSSRTD44)
class vectoritkImageSSRTF44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageSSRTF44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageSSRTF44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageSSRTF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageSSRTF44

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type
        j: std::vector< itkImageSSRTF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type
        j: std::vector< itkImageSSRTF44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type
        j: std::vector< itkImageSSRTF44_Pointer >::difference_type
        v: std::vector< itkImageSSRTF44_Pointer,std::allocator< itkImageSSRTF44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageSSRTF44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type
        j: std::vector< itkImageSSRTF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageSSRTF44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageSSRTF44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageSSRTF44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageSSRTF44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageSSRTF44_Pointer,std::allocator< itkImageSSRTF44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageSSRTF44_Pointer >::difference_type
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageSSRTF44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageSSRTF44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageSSRTF44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageSSRTF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageSSRTF44_Pointer > &

        """
        return _itkImagePython.vectoritkImageSSRTF44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageSSRTF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageSSRTF44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageSSRTF44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageSSRTF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageSSRTF44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageSSRTF44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageSSRTF44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageSSRTF44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageSSRTF44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageSSRTF44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageSSRTF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageSSRTF44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageSSRTF44_Pointer >::iterator
        last: std::vector< itkImageSSRTF44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageSSRTF44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageSSRTF44
        __init__(self, other) -> vectoritkImageSSRTF44

        Parameters
        ----------
        other: std::vector< itkImageSSRTF44_Pointer > const &

        __init__(self, size) -> vectoritkImageSSRTF44

        Parameters
        ----------
        size: std::vector< itkImageSSRTF44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageSSRTF44

        Parameters
        ----------
        size: std::vector< itkImageSSRTF44_Pointer >::size_type
        value: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageSSRTF44_swiginit(self, _itkImagePython.new_vectoritkImageSSRTF44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageSSRTF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageSSRTF44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageSSRTF44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF44_Pointer >::size_type
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageSSRTF44_Pointer >::size_type
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageSSRTF44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF44_Pointer >::iterator
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageSSRTF44_Pointer >::iterator
        n: std::vector< itkImageSSRTF44_Pointer >::size_type
        x: std::vector< itkImageSSRTF44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageSSRTF44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageSSRTF44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageSSRTF44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageSSRTF44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageSSRTF44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageSSRTF44

# Register vectoritkImageSSRTF44 in _itkImagePython:
_itkImagePython.vectoritkImageSSRTF44_swigregister(vectoritkImageSSRTF44)
class vectoritkImageVF12(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF12_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF12_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF12___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF12___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF12

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type
        j: std::vector< itkImageVF12_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF12___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type
        j: std::vector< itkImageVF12_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type
        j: std::vector< itkImageVF12_Pointer >::difference_type
        v: std::vector< itkImageVF12_Pointer,std::allocator< itkImageVF12_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF12___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type
        j: std::vector< itkImageVF12_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF12___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF12___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF12

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF12_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF12___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF12_Pointer,std::allocator< itkImageVF12_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF12_Pointer >::difference_type
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF12_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF12_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF12_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF12_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF12_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF12_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF12_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF12_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF12_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF12_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF12_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF12_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF12_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF12_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF12_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF12_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF12_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF12_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF12_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF12_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF12_Pointer >::iterator
        last: std::vector< itkImageVF12_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF12_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF12
        __init__(self, other) -> vectoritkImageVF12

        Parameters
        ----------
        other: std::vector< itkImageVF12_Pointer > const &

        __init__(self, size) -> vectoritkImageVF12

        Parameters
        ----------
        size: std::vector< itkImageVF12_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF12

        Parameters
        ----------
        size: std::vector< itkImageVF12_Pointer >::size_type
        value: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF12_swiginit(self, _itkImagePython.new_vectoritkImageVF12(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF12_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF12_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF12_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF12_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF12_Pointer >::size_type
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF12_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF12_Pointer >::size_type
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF12_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF12_Pointer >::iterator
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF12_Pointer >::iterator
        n: std::vector< itkImageVF12_Pointer >::size_type
        x: std::vector< itkImageVF12_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF12_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF12_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF12_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF12_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF12_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF12

# Register vectoritkImageVF12 in _itkImagePython:
_itkImagePython.vectoritkImageVF12_swigregister(vectoritkImageVF12)
class vectoritkImageVF13(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF13_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF13_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF13___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF13___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF13

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type
        j: std::vector< itkImageVF13_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF13___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type
        j: std::vector< itkImageVF13_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type
        j: std::vector< itkImageVF13_Pointer >::difference_type
        v: std::vector< itkImageVF13_Pointer,std::allocator< itkImageVF13_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF13___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type
        j: std::vector< itkImageVF13_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF13___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF13___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF13

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF13_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF13___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF13_Pointer,std::allocator< itkImageVF13_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF13_Pointer >::difference_type
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF13_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF13_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF13_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF13_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF13_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF13_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF13_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF13_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF13_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF13_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF13_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF13_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF13_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF13_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF13_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF13_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF13_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF13_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF13_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF13_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF13_Pointer >::iterator
        last: std::vector< itkImageVF13_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF13_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF13
        __init__(self, other) -> vectoritkImageVF13

        Parameters
        ----------
        other: std::vector< itkImageVF13_Pointer > const &

        __init__(self, size) -> vectoritkImageVF13

        Parameters
        ----------
        size: std::vector< itkImageVF13_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF13

        Parameters
        ----------
        size: std::vector< itkImageVF13_Pointer >::size_type
        value: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF13_swiginit(self, _itkImagePython.new_vectoritkImageVF13(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF13_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF13_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF13_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF13_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF13_Pointer >::size_type
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF13_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF13_Pointer >::size_type
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF13_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF13_Pointer >::iterator
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF13_Pointer >::iterator
        n: std::vector< itkImageVF13_Pointer >::size_type
        x: std::vector< itkImageVF13_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF13_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF13_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF13_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF13_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF13_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF13

# Register vectoritkImageVF13 in _itkImagePython:
_itkImagePython.vectoritkImageVF13_swigregister(vectoritkImageVF13)
class vectoritkImageVD25(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD25_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD25_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD25___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD25___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD25_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD25___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD25

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type
        j: std::vector< itkImageVD25_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD25___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type
        j: std::vector< itkImageVD25_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type
        j: std::vector< itkImageVD25_Pointer >::difference_type
        v: std::vector< itkImageVD25_Pointer,std::allocator< itkImageVD25_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD25___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type
        j: std::vector< itkImageVD25_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD25___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD25___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD25

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD25_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD25___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD25_Pointer,std::allocator< itkImageVD25_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD25_Pointer >::difference_type
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD25_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD25_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD25_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD25_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD25_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD25_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD25_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD25_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD25_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD25_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD25_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD25_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD25_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD25_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD25_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD25_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD25_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD25_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD25_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD25_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD25_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD25_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD25_Pointer >::iterator
        last: std::vector< itkImageVD25_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD25_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD25
        __init__(self, other) -> vectoritkImageVD25

        Parameters
        ----------
        other: std::vector< itkImageVD25_Pointer > const &

        __init__(self, size) -> vectoritkImageVD25

        Parameters
        ----------
        size: std::vector< itkImageVD25_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD25

        Parameters
        ----------
        size: std::vector< itkImageVD25_Pointer >::size_type
        value: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD25_swiginit(self, _itkImagePython.new_vectoritkImageVD25(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD25_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD25_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD25_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD25_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD25_Pointer >::size_type
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD25_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD25_Pointer >::size_type
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD25_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD25_Pointer >::iterator
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD25_Pointer >::iterator
        n: std::vector< itkImageVD25_Pointer >::size_type
        x: std::vector< itkImageVD25_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD25_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD25_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD25_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD25_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD25_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD25

# Register vectoritkImageVD25 in _itkImagePython:
_itkImagePython.vectoritkImageVD25_swigregister(vectoritkImageVD25)
class vectoritkImageVD35(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD35_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD35_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD35___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD35___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD35_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD35___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD35

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type
        j: std::vector< itkImageVD35_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD35___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type
        j: std::vector< itkImageVD35_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type
        j: std::vector< itkImageVD35_Pointer >::difference_type
        v: std::vector< itkImageVD35_Pointer,std::allocator< itkImageVD35_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD35___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type
        j: std::vector< itkImageVD35_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD35___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD35___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD35

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD35_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD35___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD35_Pointer,std::allocator< itkImageVD35_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD35_Pointer >::difference_type
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD35_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD35_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD35_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD35_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD35_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD35_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD35_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD35_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD35_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD35_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD35_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD35_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD35_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD35_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD35_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD35_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD35_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD35_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD35_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD35_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD35_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD35_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD35_Pointer >::iterator
        last: std::vector< itkImageVD35_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD35_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD35
        __init__(self, other) -> vectoritkImageVD35

        Parameters
        ----------
        other: std::vector< itkImageVD35_Pointer > const &

        __init__(self, size) -> vectoritkImageVD35

        Parameters
        ----------
        size: std::vector< itkImageVD35_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD35

        Parameters
        ----------
        size: std::vector< itkImageVD35_Pointer >::size_type
        value: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD35_swiginit(self, _itkImagePython.new_vectoritkImageVD35(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD35_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD35_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD35_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD35_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD35_Pointer >::size_type
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD35_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD35_Pointer >::size_type
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD35_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD35_Pointer >::iterator
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD35_Pointer >::iterator
        n: std::vector< itkImageVD35_Pointer >::size_type
        x: std::vector< itkImageVD35_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD35_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD35_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD35_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD35_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD35_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD35

# Register vectoritkImageVD35 in _itkImagePython:
_itkImagePython.vectoritkImageVD35_swigregister(vectoritkImageVD35)
class vectoritkImageVD45(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVD45_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVD45_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD45___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVD45___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVD45_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD45___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVD45

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type
        j: std::vector< itkImageVD45_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD45___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type
        j: std::vector< itkImageVD45_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type
        j: std::vector< itkImageVD45_Pointer >::difference_type
        v: std::vector< itkImageVD45_Pointer,std::allocator< itkImageVD45_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVD45___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type
        j: std::vector< itkImageVD45_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD45___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVD45___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVD45

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVD45_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVD45___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVD45_Pointer,std::allocator< itkImageVD45_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVD45_Pointer >::difference_type
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVD45_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVD45_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVD45_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVD45_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD45_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVD45_Pointer > &

        """
        return _itkImagePython.vectoritkImageVD45_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVD45_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD45_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVD45_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVD45_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVD45_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD45_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVD45_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVD45_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVD45_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVD45_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVD45_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVD45_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVD45_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD45_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVD45_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVD45_Pointer >::iterator
        last: std::vector< itkImageVD45_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVD45_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVD45
        __init__(self, other) -> vectoritkImageVD45

        Parameters
        ----------
        other: std::vector< itkImageVD45_Pointer > const &

        __init__(self, size) -> vectoritkImageVD45

        Parameters
        ----------
        size: std::vector< itkImageVD45_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVD45

        Parameters
        ----------
        size: std::vector< itkImageVD45_Pointer >::size_type
        value: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVD45_swiginit(self, _itkImagePython.new_vectoritkImageVD45(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVD45_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD45_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVD45_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVD45_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVD45_Pointer >::size_type
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVD45_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVD45_Pointer >::size_type
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVD45_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVD45_Pointer >::iterator
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVD45_Pointer >::iterator
        n: std::vector< itkImageVD45_Pointer >::size_type
        x: std::vector< itkImageVD45_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVD45_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVD45_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVD45_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVD45_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVD45_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVD45

# Register vectoritkImageVD45 in _itkImagePython:
_itkImagePython.vectoritkImageVD45_swigregister(vectoritkImageVD45)
class vectoritkImageVF14(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF14_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageVF14_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF14___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageVF14___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF14_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF14___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF14

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type
        j: std::vector< itkImageVF14_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF14___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type
        j: std::vector< itkImageVF14_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type
        j: std::vector< itkImageVF14_Pointer >::difference_type
        v: std::vector< itkImageVF14_Pointer,std::allocator< itkImageVF14_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageVF14___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type
        j: std::vector< itkImageVF14_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF14___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageVF14___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF14

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF14_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageVF14___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF14_Pointer,std::allocator< itkImageVF14_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF14_Pointer >::difference_type
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF14_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageVF14_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageVF14_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF14_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF14_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF14_Pointer > &

        """
        return _itkImagePython.vectoritkImageVF14_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF14_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF14_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF14_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageVF14_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF14_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF14_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF14_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageVF14_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageVF14_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF14_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageVF14_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageVF14_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF14_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF14_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF14_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF14_Pointer >::iterator
        last: std::vector< itkImageVF14_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageVF14_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF14
        __init__(self, other) -> vectoritkImageVF14

        Parameters
        ----------
        other: std::vector< itkImageVF14_Pointer > const &

        __init__(self, size) -> vectoritkImageVF14

        Parameters
        ----------
        size: std::vector< itkImageVF14_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF14

        Parameters
        ----------
        size: std::vector< itkImageVF14_Pointer >::size_type
        value: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageVF14_swiginit(self, _itkImagePython.new_vectoritkImageVF14(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF14_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF14_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF14_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageVF14_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF14_Pointer >::size_type
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF14_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF14_Pointer >::size_type
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF14_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF14_Pointer >::iterator
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF14_Pointer >::iterator
        n: std::vector< itkImageVF14_Pointer >::size_type
        x: std::vector< itkImageVF14_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageVF14_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF14_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageVF14_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF14_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageVF14_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageVF14

# Register vectoritkImageVF14 in _itkImagePython:
_itkImagePython.vectoritkImageVF14_swigregister(vectoritkImageVF14)
class vectoritkImageCVD22(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD22_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD22_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD22

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type
        j: std::vector< itkImageCVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD22___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type
        j: std::vector< itkImageCVD22_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type
        j: std::vector< itkImageCVD22_Pointer >::difference_type
        v: std::vector< itkImageCVD22_Pointer,std::allocator< itkImageCVD22_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD22___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type
        j: std::vector< itkImageCVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD22___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD22___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD22

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD22_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD22___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD22_Pointer,std::allocator< itkImageCVD22_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD22_Pointer >::difference_type
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD22_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD22_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD22_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD22_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD22_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD22_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD22_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD22_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD22_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD22_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD22_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD22_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD22_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD22_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD22_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD22_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD22_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD22_Pointer >::iterator
        last: std::vector< itkImageCVD22_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD22_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD22
        __init__(self, other) -> vectoritkImageCVD22

        Parameters
        ----------
        other: std::vector< itkImageCVD22_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD22

        Parameters
        ----------
        size: std::vector< itkImageCVD22_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD22

        Parameters
        ----------
        size: std::vector< itkImageCVD22_Pointer >::size_type
        value: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD22_swiginit(self, _itkImagePython.new_vectoritkImageCVD22(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD22_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD22_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD22_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD22_Pointer >::size_type
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD22_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD22_Pointer >::size_type
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD22_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD22_Pointer >::iterator
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD22_Pointer >::iterator
        n: std::vector< itkImageCVD22_Pointer >::size_type
        x: std::vector< itkImageCVD22_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD22_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD22_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD22_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD22_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD22_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD22

# Register vectoritkImageCVD22 in _itkImagePython:
_itkImagePython.vectoritkImageCVD22_swigregister(vectoritkImageCVD22)
class vectoritkImageCVD32(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD32_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD32

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type
        j: std::vector< itkImageCVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD32___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type
        j: std::vector< itkImageCVD32_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type
        j: std::vector< itkImageCVD32_Pointer >::difference_type
        v: std::vector< itkImageCVD32_Pointer,std::allocator< itkImageCVD32_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD32___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type
        j: std::vector< itkImageCVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD32___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD32___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD32

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD32_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD32___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD32_Pointer,std::allocator< itkImageCVD32_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD32_Pointer >::difference_type
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD32_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD32_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD32_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD32_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD32_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD32_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD32_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD32_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD32_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD32_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD32_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD32_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD32_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD32_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD32_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD32_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD32_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD32_Pointer >::iterator
        last: std::vector< itkImageCVD32_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD32_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD32
        __init__(self, other) -> vectoritkImageCVD32

        Parameters
        ----------
        other: std::vector< itkImageCVD32_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD32

        Parameters
        ----------
        size: std::vector< itkImageCVD32_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD32

        Parameters
        ----------
        size: std::vector< itkImageCVD32_Pointer >::size_type
        value: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD32_swiginit(self, _itkImagePython.new_vectoritkImageCVD32(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD32_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD32_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD32_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD32_Pointer >::size_type
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD32_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD32_Pointer >::size_type
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD32_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD32_Pointer >::iterator
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD32_Pointer >::iterator
        n: std::vector< itkImageCVD32_Pointer >::size_type
        x: std::vector< itkImageCVD32_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD32_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD32_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD32_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD32_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD32_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD32

# Register vectoritkImageCVD32 in _itkImagePython:
_itkImagePython.vectoritkImageCVD32_swigregister(vectoritkImageCVD32)
class vectoritkImageCVD42(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD42_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD42_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD42

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type
        j: std::vector< itkImageCVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD42___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type
        j: std::vector< itkImageCVD42_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type
        j: std::vector< itkImageCVD42_Pointer >::difference_type
        v: std::vector< itkImageCVD42_Pointer,std::allocator< itkImageCVD42_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD42___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type
        j: std::vector< itkImageCVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD42___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD42___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD42

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD42_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD42___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD42_Pointer,std::allocator< itkImageCVD42_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD42_Pointer >::difference_type
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD42_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD42_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD42_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD42_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD42_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD42_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD42_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD42_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD42_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD42_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD42_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD42_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD42_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD42_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD42_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD42_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD42_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD42_Pointer >::iterator
        last: std::vector< itkImageCVD42_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD42_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD42
        __init__(self, other) -> vectoritkImageCVD42

        Parameters
        ----------
        other: std::vector< itkImageCVD42_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD42

        Parameters
        ----------
        size: std::vector< itkImageCVD42_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD42

        Parameters
        ----------
        size: std::vector< itkImageCVD42_Pointer >::size_type
        value: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD42_swiginit(self, _itkImagePython.new_vectoritkImageCVD42(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD42_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD42_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD42_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD42_Pointer >::size_type
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD42_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD42_Pointer >::size_type
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD42_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD42_Pointer >::iterator
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD42_Pointer >::iterator
        n: std::vector< itkImageCVD42_Pointer >::size_type
        x: std::vector< itkImageCVD42_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD42_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD42_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD42_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD42_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD42_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD42

# Register vectoritkImageCVD42 in _itkImagePython:
_itkImagePython.vectoritkImageCVD42_swigregister(vectoritkImageCVD42)
class vectoritkImageCVD23(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD23_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD23_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD23

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type
        j: std::vector< itkImageCVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD23___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type
        j: std::vector< itkImageCVD23_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type
        j: std::vector< itkImageCVD23_Pointer >::difference_type
        v: std::vector< itkImageCVD23_Pointer,std::allocator< itkImageCVD23_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD23___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type
        j: std::vector< itkImageCVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD23___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD23___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD23

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD23_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD23___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD23_Pointer,std::allocator< itkImageCVD23_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD23_Pointer >::difference_type
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD23_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD23_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD23_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD23_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD23_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD23_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD23_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD23_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD23_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD23_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD23_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD23_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD23_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD23_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD23_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD23_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD23_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD23_Pointer >::iterator
        last: std::vector< itkImageCVD23_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD23_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD23
        __init__(self, other) -> vectoritkImageCVD23

        Parameters
        ----------
        other: std::vector< itkImageCVD23_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD23

        Parameters
        ----------
        size: std::vector< itkImageCVD23_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD23

        Parameters
        ----------
        size: std::vector< itkImageCVD23_Pointer >::size_type
        value: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD23_swiginit(self, _itkImagePython.new_vectoritkImageCVD23(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD23_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD23_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD23_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD23_Pointer >::size_type
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD23_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD23_Pointer >::size_type
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD23_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD23_Pointer >::iterator
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD23_Pointer >::iterator
        n: std::vector< itkImageCVD23_Pointer >::size_type
        x: std::vector< itkImageCVD23_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD23_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD23_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD23_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD23_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD23_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD23

# Register vectoritkImageCVD23 in _itkImagePython:
_itkImagePython.vectoritkImageCVD23_swigregister(vectoritkImageCVD23)
class vectoritkImageCVD33(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD33_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD33_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD33

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type
        j: std::vector< itkImageCVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD33___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type
        j: std::vector< itkImageCVD33_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type
        j: std::vector< itkImageCVD33_Pointer >::difference_type
        v: std::vector< itkImageCVD33_Pointer,std::allocator< itkImageCVD33_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD33___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type
        j: std::vector< itkImageCVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD33___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD33___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD33

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD33_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD33___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD33_Pointer,std::allocator< itkImageCVD33_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD33_Pointer >::difference_type
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD33_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD33_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD33_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD33_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD33_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD33_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD33_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD33_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD33_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD33_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD33_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD33_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD33_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD33_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD33_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD33_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD33_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD33_Pointer >::iterator
        last: std::vector< itkImageCVD33_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD33_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD33
        __init__(self, other) -> vectoritkImageCVD33

        Parameters
        ----------
        other: std::vector< itkImageCVD33_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD33

        Parameters
        ----------
        size: std::vector< itkImageCVD33_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD33

        Parameters
        ----------
        size: std::vector< itkImageCVD33_Pointer >::size_type
        value: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD33_swiginit(self, _itkImagePython.new_vectoritkImageCVD33(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD33_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD33_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD33_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD33_Pointer >::size_type
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD33_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD33_Pointer >::size_type
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD33_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD33_Pointer >::iterator
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD33_Pointer >::iterator
        n: std::vector< itkImageCVD33_Pointer >::size_type
        x: std::vector< itkImageCVD33_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD33_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD33_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD33_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD33_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD33_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD33

# Register vectoritkImageCVD33 in _itkImagePython:
_itkImagePython.vectoritkImageCVD33_swigregister(vectoritkImageCVD33)
class vectoritkImageCVD43(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD43_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD43_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD43

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type
        j: std::vector< itkImageCVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD43___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type
        j: std::vector< itkImageCVD43_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type
        j: std::vector< itkImageCVD43_Pointer >::difference_type
        v: std::vector< itkImageCVD43_Pointer,std::allocator< itkImageCVD43_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD43___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type
        j: std::vector< itkImageCVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD43___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD43___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD43

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD43_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD43___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD43_Pointer,std::allocator< itkImageCVD43_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD43_Pointer >::difference_type
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD43_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD43_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD43_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD43_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD43_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD43_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD43_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD43_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD43_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD43_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD43_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD43_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD43_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD43_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD43_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD43_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD43_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD43_Pointer >::iterator
        last: std::vector< itkImageCVD43_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD43_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD43
        __init__(self, other) -> vectoritkImageCVD43

        Parameters
        ----------
        other: std::vector< itkImageCVD43_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD43

        Parameters
        ----------
        size: std::vector< itkImageCVD43_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD43

        Parameters
        ----------
        size: std::vector< itkImageCVD43_Pointer >::size_type
        value: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD43_swiginit(self, _itkImagePython.new_vectoritkImageCVD43(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD43_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD43_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD43_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD43_Pointer >::size_type
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD43_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD43_Pointer >::size_type
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD43_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD43_Pointer >::iterator
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD43_Pointer >::iterator
        n: std::vector< itkImageCVD43_Pointer >::size_type
        x: std::vector< itkImageCVD43_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD43_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD43_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD43_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD43_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD43_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD43

# Register vectoritkImageCVD43 in _itkImagePython:
_itkImagePython.vectoritkImageCVD43_swigregister(vectoritkImageCVD43)
class vectoritkImageCVD24(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD24_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD24_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD24___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD24___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD24___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD24

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type
        j: std::vector< itkImageCVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD24___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type
        j: std::vector< itkImageCVD24_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type
        j: std::vector< itkImageCVD24_Pointer >::difference_type
        v: std::vector< itkImageCVD24_Pointer,std::allocator< itkImageCVD24_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD24___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type
        j: std::vector< itkImageCVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD24___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD24___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD24

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD24_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD24___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD24_Pointer,std::allocator< itkImageCVD24_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD24_Pointer >::difference_type
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD24_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD24_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD24_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD24_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD24_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD24_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD24_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD24_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD24_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD24_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD24_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD24_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD24_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD24_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD24_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD24_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD24_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD24_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD24_Pointer >::iterator
        last: std::vector< itkImageCVD24_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD24_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD24
        __init__(self, other) -> vectoritkImageCVD24

        Parameters
        ----------
        other: std::vector< itkImageCVD24_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD24

        Parameters
        ----------
        size: std::vector< itkImageCVD24_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD24

        Parameters
        ----------
        size: std::vector< itkImageCVD24_Pointer >::size_type
        value: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD24_swiginit(self, _itkImagePython.new_vectoritkImageCVD24(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD24_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD24_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD24_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD24_Pointer >::size_type
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD24_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD24_Pointer >::size_type
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD24_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD24_Pointer >::iterator
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD24_Pointer >::iterator
        n: std::vector< itkImageCVD24_Pointer >::size_type
        x: std::vector< itkImageCVD24_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD24_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD24_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD24_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD24_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD24_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD24

# Register vectoritkImageCVD24 in _itkImagePython:
_itkImagePython.vectoritkImageCVD24_swigregister(vectoritkImageCVD24)
class vectoritkImageCVD34(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD34_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD34_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD34___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD34___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD34___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD34

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type
        j: std::vector< itkImageCVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD34___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type
        j: std::vector< itkImageCVD34_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type
        j: std::vector< itkImageCVD34_Pointer >::difference_type
        v: std::vector< itkImageCVD34_Pointer,std::allocator< itkImageCVD34_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD34___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type
        j: std::vector< itkImageCVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD34___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD34___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD34

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD34_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD34___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD34_Pointer,std::allocator< itkImageCVD34_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD34_Pointer >::difference_type
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD34_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD34_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD34_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD34_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD34_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD34_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD34_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD34_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD34_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD34_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD34_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD34_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD34_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD34_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD34_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD34_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD34_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD34_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD34_Pointer >::iterator
        last: std::vector< itkImageCVD34_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD34_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD34
        __init__(self, other) -> vectoritkImageCVD34

        Parameters
        ----------
        other: std::vector< itkImageCVD34_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD34

        Parameters
        ----------
        size: std::vector< itkImageCVD34_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD34

        Parameters
        ----------
        size: std::vector< itkImageCVD34_Pointer >::size_type
        value: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD34_swiginit(self, _itkImagePython.new_vectoritkImageCVD34(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD34_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD34_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD34_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD34_Pointer >::size_type
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD34_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD34_Pointer >::size_type
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD34_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD34_Pointer >::iterator
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD34_Pointer >::iterator
        n: std::vector< itkImageCVD34_Pointer >::size_type
        x: std::vector< itkImageCVD34_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD34_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD34_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD34_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD34_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD34_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD34

# Register vectoritkImageCVD34 in _itkImagePython:
_itkImagePython.vectoritkImageCVD34_swigregister(vectoritkImageCVD34)
class vectoritkImageCVD44(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD44_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImagePython.vectoritkImageCVD44_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD44___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD44___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD44___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD44

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type
        j: std::vector< itkImageCVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD44___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type
        j: std::vector< itkImageCVD44_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type
        j: std::vector< itkImageCVD44_Pointer >::difference_type
        v: std::vector< itkImageCVD44_Pointer,std::allocator< itkImageCVD44_Pointer > > const &

        """
        return _itkImagePython.vectoritkImageCVD44___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type
        j: std::vector< itkImageCVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD44___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImagePython.vectoritkImageCVD44___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD44

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD44_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type

        """
        return _itkImagePython.vectoritkImageCVD44___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD44_Pointer,std::allocator< itkImageCVD44_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD44_Pointer >::difference_type
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD44_Pointer >::value_type"""
        return _itkImagePython.vectoritkImageCVD44_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImagePython.vectoritkImageCVD44_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD44_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD44_Pointer > &

        """
        return _itkImagePython.vectoritkImageCVD44_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD44_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD44_Pointer >::iterator"""
        return _itkImagePython.vectoritkImageCVD44_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD44_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD44_Pointer >::reverse_iterator"""
        return _itkImagePython.vectoritkImageCVD44_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImagePython.vectoritkImageCVD44_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD44_Pointer >::allocator_type"""
        return _itkImagePython.vectoritkImageCVD44_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImagePython.vectoritkImageCVD44_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD44_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD44_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD44_Pointer >::iterator
        last: std::vector< itkImageCVD44_Pointer >::iterator

        """
        return _itkImagePython.vectoritkImageCVD44_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD44
        __init__(self, other) -> vectoritkImageCVD44

        Parameters
        ----------
        other: std::vector< itkImageCVD44_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD44

        Parameters
        ----------
        size: std::vector< itkImageCVD44_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD44

        Parameters
        ----------
        size: std::vector< itkImageCVD44_Pointer >::size_type
        value: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        _itkImagePython.vectoritkImageCVD44_swiginit(self, _itkImagePython.new_vectoritkImageCVD44(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD44_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD44_Pointer >::value_type const &"""
        return _itkImagePython.vectoritkImageCVD44_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD44_Pointer >::size_type
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD44_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD44_Pointer >::size_type
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD44_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD44_Pointer >::iterator
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD44_Pointer >::iterator
        n: std::vector< itkImageCVD44_Pointer >::size_type
        x: std::vector< itkImageCVD44_Pointer >::value_type const &

        """
        return _itkImagePython.vectoritkImageCVD44_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD44_Pointer >::size_type

        """
        return _itkImagePython.vectoritkImageCVD44_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD44_Pointer >::size_type"""
        return _itkImagePython.vectoritkImageCVD44_capacity(self)
    __swig_destroy__ = _itkImagePython.delete_vectoritkImageCVD44

# Register vectoritkImageCVD44 in _itkImagePython:
_itkImagePython.vectoritkImageCVD44_swigregister(vectoritkImageCVD44)

def itkImageBase2_New():
    return itkImageBase2.New()

class itkImageBase2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageBase2_Pointer"""
        return _itkImagePython.itkImageBase2_Clone(self)

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetImageDimension()

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkImagePython.itkImageBase2_SetOrigin(self, *args)

    def __SetDirection_orig__(self, direction):
        r"""
        __SetDirection_orig__(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImagePython.itkImageBase2___SetDirection_orig__(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkImagePython.itkImageBase2_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImagePython.itkImageBase2_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImagePython.itkImageBase2_GetOrigin(self)

    def Allocate(self, arg0=False):
        r"""
        Allocate(self, arg0=False)

        Parameters
        ----------
        arg0: bool

        """
        return _itkImagePython.itkImageBase2_Allocate(self, arg0)

    def AllocateInitialized(self):
        r"""AllocateInitialized(self)"""
        return _itkImagePython.itkImageBase2_AllocateInitialized(self)

    def SetLargestPossibleRegion(self, region):
        r"""
        SetLargestPossibleRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImagePython.itkImageBase2_SetLargestPossibleRegion(self, region)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetLargestPossibleRegion_orig__(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImagePython.itkImageBase2_SetBufferedRegion(self, region)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetBufferedRegion_orig__(self)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        """
        return _itkImagePython.itkImageBase2_SetRequestedRegion(self, *args)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkImagePython.itkImageBase2___GetRequestedRegion_orig__(self)

    def SetRegions(self, *args):
        r"""
        SetRegions(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        SetRegions(self, size)

        Parameters
        ----------
        size: itkSize2 const &

        """
        return _itkImagePython.itkImageBase2_SetRegions(self, *args)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long long const *"""
        return _itkImagePython.itkImageBase2_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkImagePython.itkImageBase2_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long long

        """
        return _itkImagePython.itkImageBase2_ComputeIndex(self, offset)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: itkVectorD2 const &

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkImagePython.itkImageBase2_SetSpacing(self, *args)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _itkImagePython.itkImageBase2_Graft(self, image)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase2_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase2_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImagePython.itkImageBase2_GetNumberOfComponentsPerPixel(self)

    def SetNumberOfComponentsPerPixel(self, arg0):
        r"""
        SetNumberOfComponentsPerPixel(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkImagePython.itkImageBase2_SetNumberOfComponentsPerPixel(self, arg0)
    __swig_destroy__ = _itkImagePython.delete_itkImageBase2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageBase2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageBase2_cast(obj)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point):
        r"""
        TransformPhysicalPointToIndex(self, point) -> itkIndex2

        Parameters
        ----------
        point: itkPointD2 &

        """
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""
        TransformPhysicalPointToContinuousIndex(self, point) -> itkContinuousIndexD2

        Parameters
        ----------
        point: itkPointD2 &

        """
        return _itkImagePython.itkImageBase2_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, idx):
        r"""
        TransformContinuousIndexToPhysicalPoint(self, idx) -> itkPointD2

        Parameters
        ----------
        idx: itkContinuousIndexD2 &

        """
        return _itkImagePython.itkImageBase2_TransformContinuousIndexToPhysicalPoint(self, idx)

    def TransformIndexToPhysicalPoint(self, idx):
        r"""
        TransformIndexToPhysicalPoint(self, idx) -> itkPointD2

        Parameters
        ----------
        idx: itkIndex2 &

        """
        return _itkImagePython.itkImageBase2_TransformIndexToPhysicalPoint(self, idx)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalent to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalent to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
#ITK is C-order. The shape needs to be reversed unless we are a view on
#a NumPy array that is Fortran-order.
        reverse = True
        base = self
        while hasattr(base, 'base'):
            if hasattr(base, 'flags'):
                reverse = not base.flags.f_contiguous
                break
            base = base.base
        if reverse:
            result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalent to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def astype(self, pixel_type):
        """Cast the image to the provided itk pixel type or equivalent NumPy dtype."""
        import itk
        import numpy as np
        from itk.support import types

#Convert numpy type to dtype object for consistency
#i.e. <np.float32> -> np.dtype('float32')
        if type(pixel_type) is type:
            pixel_type = np.dtype(pixel_type)

#if both a numpy dtype and an ITK ctype exist, use the latter.
        if issubclass(type(pixel_type), np.dtype):
            c_pixel_type = types.itkCType.GetCTypeForDType(pixel_type)
            if c_pixel_type is not None:
                pixel_type = c_pixel_type

#input_image_template is Image or VectorImage
        (input_image_template, (input_pixel_type, input_image_dimension)) = itk.template(self)

        if input_pixel_type is pixel_type:
            return self
        OutputImageType = input_image_template[pixel_type, input_image_dimension]
        cast = itk.cast_image_filter(self, ttype=(type(self), OutputImageType))
        return cast

    def SetDirection(self, direction):
        from itk.support import helpers
        if helpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)

    def keys(self):
        """Return keys related to the image's metadata.

        These keys are used in the dictionary resulting from dict(image).

        These keys include MetaDataDictionary keys along with
        'origin', 'spacing', and 'direction' keys, which
        correspond to the image's Origin, Spacing, and Direction. However,
        they are in (z, y, x) order as opposed to (x, y, z) order to
        correspond to the indexing of the shape of the pixel buffer
        array resulting from np.array(image).
        """
        meta_keys = self.GetMetaDataDictionary().GetKeys()
#Ignore deprecated, legacy members that cause issues
        result = list(filter(lambda k: not k.startswith('ITK_original'), meta_keys))
        result.extend(['origin', 'spacing', 'direction'])
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        import itk
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                return np.flip(np.asarray(self.GetOrigin()), axis=None)
            elif key == 'spacing':
                return np.flip(np.asarray(self.GetSpacing()), axis=None)
            elif key == 'direction':
                return np.flip(itk.array_from_matrix(self.GetDirection()), axis=None)
            else:
                return self.GetMetaDataDictionary()[key]
        else:
            return itk.array_view_from_image(self).__getitem__(key)

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                self.SetOrigin(np.flip(value, axis=None))
            elif key == 'spacing':
                self.SetSpacing(np.flip(value, axis=None))
            elif key == 'direction':
                self.SetDirection(np.flip(value, axis=None))
            else:
                self.GetMetaDataDictionary()[key] = value
        else:
            import itk
            itk.array_view_from_image(self).__setitem__(key, value)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_image(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.image_from_dict(state)
        self.__dict__['this'] = deserialized
        self.SetOrigin(state['origin'])
        self.SetSpacing(state['spacing'])
        direction = np.asarray(self.GetDirection())
        self.SetDirection(direction)



    def New(*args, **kargs):
        """New() -> itkImageBase2

        Create a new object of the class itkImageBase2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase2 in _itkImagePython:
_itkImagePython.itkImageBase2_swigregister(itkImageBase2)

def itkImageBase3_New():
    return itkImageBase3.New()

class itkImageBase3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageBase3_Pointer"""
        return _itkImagePython.itkImageBase3_Clone(self)

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetImageDimension()

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkImagePython.itkImageBase3_SetOrigin(self, *args)

    def __SetDirection_orig__(self, direction):
        r"""
        __SetDirection_orig__(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImagePython.itkImageBase3___SetDirection_orig__(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkImagePython.itkImageBase3_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImagePython.itkImageBase3_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImagePython.itkImageBase3_GetOrigin(self)

    def Allocate(self, arg0=False):
        r"""
        Allocate(self, arg0=False)

        Parameters
        ----------
        arg0: bool

        """
        return _itkImagePython.itkImageBase3_Allocate(self, arg0)

    def AllocateInitialized(self):
        r"""AllocateInitialized(self)"""
        return _itkImagePython.itkImageBase3_AllocateInitialized(self)

    def SetLargestPossibleRegion(self, region):
        r"""
        SetLargestPossibleRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImagePython.itkImageBase3_SetLargestPossibleRegion(self, region)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetLargestPossibleRegion_orig__(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImagePython.itkImageBase3_SetBufferedRegion(self, region)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetBufferedRegion_orig__(self)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        """
        return _itkImagePython.itkImageBase3_SetRequestedRegion(self, *args)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImagePython.itkImageBase3___GetRequestedRegion_orig__(self)

    def SetRegions(self, *args):
        r"""
        SetRegions(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        SetRegions(self, size)

        Parameters
        ----------
        size: itkSize3 const &

        """
        return _itkImagePython.itkImageBase3_SetRegions(self, *args)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long long const *"""
        return _itkImagePython.itkImageBase3_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkImagePython.itkImageBase3_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long long

        """
        return _itkImagePython.itkImageBase3_ComputeIndex(self, offset)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: itkVectorD3 const &

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkImagePython.itkImageBase3_SetSpacing(self, *args)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _itkImagePython.itkImageBase3_Graft(self, image)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase3_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase3_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImagePython.itkImageBase3_GetNumberOfComponentsPerPixel(self)

    def SetNumberOfComponentsPerPixel(self, arg0):
        r"""
        SetNumberOfComponentsPerPixel(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkImagePython.itkImageBase3_SetNumberOfComponentsPerPixel(self, arg0)
    __swig_destroy__ = _itkImagePython.delete_itkImageBase3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageBase3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageBase3_cast(obj)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point):
        r"""
        TransformPhysicalPointToIndex(self, point) -> itkIndex3

        Parameters
        ----------
        point: itkPointD3 &

        """
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""
        TransformPhysicalPointToContinuousIndex(self, point) -> itkContinuousIndexD3

        Parameters
        ----------
        point: itkPointD3 &

        """
        return _itkImagePython.itkImageBase3_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, idx):
        r"""
        TransformContinuousIndexToPhysicalPoint(self, idx) -> itkPointD3

        Parameters
        ----------
        idx: itkContinuousIndexD3 &

        """
        return _itkImagePython.itkImageBase3_TransformContinuousIndexToPhysicalPoint(self, idx)

    def TransformIndexToPhysicalPoint(self, idx):
        r"""
        TransformIndexToPhysicalPoint(self, idx) -> itkPointD3

        Parameters
        ----------
        idx: itkIndex3 &

        """
        return _itkImagePython.itkImageBase3_TransformIndexToPhysicalPoint(self, idx)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalent to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalent to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
#ITK is C-order. The shape needs to be reversed unless we are a view on
#a NumPy array that is Fortran-order.
        reverse = True
        base = self
        while hasattr(base, 'base'):
            if hasattr(base, 'flags'):
                reverse = not base.flags.f_contiguous
                break
            base = base.base
        if reverse:
            result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalent to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def astype(self, pixel_type):
        """Cast the image to the provided itk pixel type or equivalent NumPy dtype."""
        import itk
        import numpy as np
        from itk.support import types

#Convert numpy type to dtype object for consistency
#i.e. <np.float32> -> np.dtype('float32')
        if type(pixel_type) is type:
            pixel_type = np.dtype(pixel_type)

#if both a numpy dtype and an ITK ctype exist, use the latter.
        if issubclass(type(pixel_type), np.dtype):
            c_pixel_type = types.itkCType.GetCTypeForDType(pixel_type)
            if c_pixel_type is not None:
                pixel_type = c_pixel_type

#input_image_template is Image or VectorImage
        (input_image_template, (input_pixel_type, input_image_dimension)) = itk.template(self)

        if input_pixel_type is pixel_type:
            return self
        OutputImageType = input_image_template[pixel_type, input_image_dimension]
        cast = itk.cast_image_filter(self, ttype=(type(self), OutputImageType))
        return cast

    def SetDirection(self, direction):
        from itk.support import helpers
        if helpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)

    def keys(self):
        """Return keys related to the image's metadata.

        These keys are used in the dictionary resulting from dict(image).

        These keys include MetaDataDictionary keys along with
        'origin', 'spacing', and 'direction' keys, which
        correspond to the image's Origin, Spacing, and Direction. However,
        they are in (z, y, x) order as opposed to (x, y, z) order to
        correspond to the indexing of the shape of the pixel buffer
        array resulting from np.array(image).
        """
        meta_keys = self.GetMetaDataDictionary().GetKeys()
#Ignore deprecated, legacy members that cause issues
        result = list(filter(lambda k: not k.startswith('ITK_original'), meta_keys))
        result.extend(['origin', 'spacing', 'direction'])
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        import itk
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                return np.flip(np.asarray(self.GetOrigin()), axis=None)
            elif key == 'spacing':
                return np.flip(np.asarray(self.GetSpacing()), axis=None)
            elif key == 'direction':
                return np.flip(itk.array_from_matrix(self.GetDirection()), axis=None)
            else:
                return self.GetMetaDataDictionary()[key]
        else:
            return itk.array_view_from_image(self).__getitem__(key)

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                self.SetOrigin(np.flip(value, axis=None))
            elif key == 'spacing':
                self.SetSpacing(np.flip(value, axis=None))
            elif key == 'direction':
                self.SetDirection(np.flip(value, axis=None))
            else:
                self.GetMetaDataDictionary()[key] = value
        else:
            import itk
            itk.array_view_from_image(self).__setitem__(key, value)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_image(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.image_from_dict(state)
        self.__dict__['this'] = deserialized
        self.SetOrigin(state['origin'])
        self.SetSpacing(state['spacing'])
        direction = np.asarray(self.GetDirection())
        self.SetDirection(direction)



    def New(*args, **kargs):
        """New() -> itkImageBase3

        Create a new object of the class itkImageBase3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase3 in _itkImagePython:
_itkImagePython.itkImageBase3_swigregister(itkImageBase3)

def itkImageBase4_New():
    return itkImageBase4.New()

class itkImageBase4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageBase4_Pointer"""
        return _itkImagePython.itkImageBase4_Clone(self)

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetImageDimension()

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkImagePython.itkImageBase4_SetOrigin(self, *args)

    def __SetDirection_orig__(self, direction):
        r"""
        __SetDirection_orig__(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImagePython.itkImageBase4___SetDirection_orig__(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImagePython.itkImageBase4_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImagePython.itkImageBase4_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImagePython.itkImageBase4_GetOrigin(self)

    def Allocate(self, arg0=False):
        r"""
        Allocate(self, arg0=False)

        Parameters
        ----------
        arg0: bool

        """
        return _itkImagePython.itkImageBase4_Allocate(self, arg0)

    def AllocateInitialized(self):
        r"""AllocateInitialized(self)"""
        return _itkImagePython.itkImageBase4_AllocateInitialized(self)

    def SetLargestPossibleRegion(self, region):
        r"""
        SetLargestPossibleRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImagePython.itkImageBase4_SetLargestPossibleRegion(self, region)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImagePython.itkImageBase4___GetLargestPossibleRegion_orig__(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImagePython.itkImageBase4_SetBufferedRegion(self, region)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImagePython.itkImageBase4___GetBufferedRegion_orig__(self)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        """
        return _itkImagePython.itkImageBase4_SetRequestedRegion(self, *args)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImagePython.itkImageBase4___GetRequestedRegion_orig__(self)

    def SetRegions(self, *args):
        r"""
        SetRegions(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        SetRegions(self, size)

        Parameters
        ----------
        size: itkSize4 const &

        """
        return _itkImagePython.itkImageBase4_SetRegions(self, *args)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long long const *"""
        return _itkImagePython.itkImageBase4_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImagePython.itkImageBase4_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long long

        """
        return _itkImagePython.itkImageBase4_ComputeIndex(self, offset)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: itkVectorD4 const &

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkImagePython.itkImageBase4_SetSpacing(self, *args)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _itkImagePython.itkImageBase4_Graft(self, image)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase4_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase4_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImagePython.itkImageBase4_GetNumberOfComponentsPerPixel(self)

    def SetNumberOfComponentsPerPixel(self, arg0):
        r"""
        SetNumberOfComponentsPerPixel(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkImagePython.itkImageBase4_SetNumberOfComponentsPerPixel(self, arg0)
    __swig_destroy__ = _itkImagePython.delete_itkImageBase4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageBase4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageBase4_cast(obj)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point):
        r"""
        TransformPhysicalPointToIndex(self, point) -> itkIndex4

        Parameters
        ----------
        point: itkPointD4 &

        """
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""
        TransformPhysicalPointToContinuousIndex(self, point) -> itkContinuousIndexD4

        Parameters
        ----------
        point: itkPointD4 &

        """
        return _itkImagePython.itkImageBase4_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, idx):
        r"""
        TransformContinuousIndexToPhysicalPoint(self, idx) -> itkPointD4

        Parameters
        ----------
        idx: itkContinuousIndexD4 &

        """
        return _itkImagePython.itkImageBase4_TransformContinuousIndexToPhysicalPoint(self, idx)

    def TransformIndexToPhysicalPoint(self, idx):
        r"""
        TransformIndexToPhysicalPoint(self, idx) -> itkPointD4

        Parameters
        ----------
        idx: itkIndex4 &

        """
        return _itkImagePython.itkImageBase4_TransformIndexToPhysicalPoint(self, idx)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalent to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalent to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
#ITK is C-order. The shape needs to be reversed unless we are a view on
#a NumPy array that is Fortran-order.
        reverse = True
        base = self
        while hasattr(base, 'base'):
            if hasattr(base, 'flags'):
                reverse = not base.flags.f_contiguous
                break
            base = base.base
        if reverse:
            result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalent to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def astype(self, pixel_type):
        """Cast the image to the provided itk pixel type or equivalent NumPy dtype."""
        import itk
        import numpy as np
        from itk.support import types

#Convert numpy type to dtype object for consistency
#i.e. <np.float32> -> np.dtype('float32')
        if type(pixel_type) is type:
            pixel_type = np.dtype(pixel_type)

#if both a numpy dtype and an ITK ctype exist, use the latter.
        if issubclass(type(pixel_type), np.dtype):
            c_pixel_type = types.itkCType.GetCTypeForDType(pixel_type)
            if c_pixel_type is not None:
                pixel_type = c_pixel_type

#input_image_template is Image or VectorImage
        (input_image_template, (input_pixel_type, input_image_dimension)) = itk.template(self)

        if input_pixel_type is pixel_type:
            return self
        OutputImageType = input_image_template[pixel_type, input_image_dimension]
        cast = itk.cast_image_filter(self, ttype=(type(self), OutputImageType))
        return cast

    def SetDirection(self, direction):
        from itk.support import helpers
        if helpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)

    def keys(self):
        """Return keys related to the image's metadata.

        These keys are used in the dictionary resulting from dict(image).

        These keys include MetaDataDictionary keys along with
        'origin', 'spacing', and 'direction' keys, which
        correspond to the image's Origin, Spacing, and Direction. However,
        they are in (z, y, x) order as opposed to (x, y, z) order to
        correspond to the indexing of the shape of the pixel buffer
        array resulting from np.array(image).
        """
        meta_keys = self.GetMetaDataDictionary().GetKeys()
#Ignore deprecated, legacy members that cause issues
        result = list(filter(lambda k: not k.startswith('ITK_original'), meta_keys))
        result.extend(['origin', 'spacing', 'direction'])
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        import itk
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                return np.flip(np.asarray(self.GetOrigin()), axis=None)
            elif key == 'spacing':
                return np.flip(np.asarray(self.GetSpacing()), axis=None)
            elif key == 'direction':
                return np.flip(itk.array_from_matrix(self.GetDirection()), axis=None)
            else:
                return self.GetMetaDataDictionary()[key]
        else:
            return itk.array_view_from_image(self).__getitem__(key)

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                self.SetOrigin(np.flip(value, axis=None))
            elif key == 'spacing':
                self.SetSpacing(np.flip(value, axis=None))
            elif key == 'direction':
                self.SetDirection(np.flip(value, axis=None))
            else:
                self.GetMetaDataDictionary()[key] = value
        else:
            import itk
            itk.array_view_from_image(self).__setitem__(key, value)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_image(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.image_from_dict(state)
        self.__dict__['this'] = deserialized
        self.SetOrigin(state['origin'])
        self.SetSpacing(state['spacing'])
        direction = np.asarray(self.GetDirection())
        self.SetDirection(direction)



    def New(*args, **kargs):
        """New() -> itkImageBase4

        Create a new object of the class itkImageBase4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase4 in _itkImagePython:
_itkImagePython.itkImageBase4_swigregister(itkImageBase4)

def itkImageBase5_New():
    return itkImageBase5.New()

class itkImageBase5(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageBase5_Pointer"""
        return _itkImagePython.itkImageBase5___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageBase5_Pointer"""
        return _itkImagePython.itkImageBase5_Clone(self)

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImagePython.itkImageBase5_GetImageDimension()

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD5

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkImagePython.itkImageBase5_SetOrigin(self, *args)

    def __SetDirection_orig__(self, direction):
        r"""
        __SetDirection_orig__(self, direction)

        Parameters
        ----------
        direction: itkMatrixD55 const &

        """
        return _itkImagePython.itkImageBase5___SetDirection_orig__(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD55"""
        return _itkImagePython.itkImageBase5_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD55"""
        return _itkImagePython.itkImageBase5_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD5"""
        return _itkImagePython.itkImageBase5_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD5"""
        return _itkImagePython.itkImageBase5_GetOrigin(self)

    def Allocate(self, arg0=False):
        r"""
        Allocate(self, arg0=False)

        Parameters
        ----------
        arg0: bool

        """
        return _itkImagePython.itkImageBase5_Allocate(self, arg0)

    def AllocateInitialized(self):
        r"""AllocateInitialized(self)"""
        return _itkImagePython.itkImageBase5_AllocateInitialized(self)

    def SetLargestPossibleRegion(self, region):
        r"""
        SetLargestPossibleRegion(self, region)

        Parameters
        ----------
        region: itk::ImageRegion< 5 > const &

        """
        return _itkImagePython.itkImageBase5_SetLargestPossibleRegion(self, region)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itk::ImageRegion< 5 > const &"""
        return _itkImagePython.itkImageBase5___GetLargestPossibleRegion_orig__(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: itk::ImageRegion< 5 > const &

        """
        return _itkImagePython.itkImageBase5_SetBufferedRegion(self, region)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itk::ImageRegion< 5 > const &"""
        return _itkImagePython.itkImageBase5___GetBufferedRegion_orig__(self)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: itk::ImageRegion< 5 > const &

        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        """
        return _itkImagePython.itkImageBase5_SetRequestedRegion(self, *args)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itk::ImageRegion< 5 > const &"""
        return _itkImagePython.itkImageBase5___GetRequestedRegion_orig__(self)

    def SetRegions(self, *args):
        r"""
        SetRegions(self, region)

        Parameters
        ----------
        region: itk::ImageRegion< 5 > const &

        SetRegions(self, size)

        Parameters
        ----------
        size: itkSize5 const &

        """
        return _itkImagePython.itkImageBase5_SetRegions(self, *args)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long long const *"""
        return _itkImagePython.itkImageBase5_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long long

        Parameters
        ----------
        ind: itkIndex5 const &

        """
        return _itkImagePython.itkImageBase5_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex5

        Parameters
        ----------
        offset: long long

        """
        return _itkImagePython.itkImageBase5_ComputeIndex(self, offset)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: itkVectorD5 const &

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkImagePython.itkImageBase5_SetSpacing(self, *args)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageBase5 const *

        """
        return _itkImagePython.itkImageBase5_Graft(self, image)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase5 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase5_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase5 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImagePython.itkImageBase5_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImagePython.itkImageBase5_GetNumberOfComponentsPerPixel(self)

    def SetNumberOfComponentsPerPixel(self, arg0):
        r"""
        SetNumberOfComponentsPerPixel(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkImagePython.itkImageBase5_SetNumberOfComponentsPerPixel(self, arg0)
    __swig_destroy__ = _itkImagePython.delete_itkImageBase5

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageBase5

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageBase5_cast(obj)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point):
        r"""
        TransformPhysicalPointToIndex(self, point) -> itkIndex5

        Parameters
        ----------
        point: itkPointD5 &

        """
        return _itkImagePython.itkImageBase5_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""
        TransformPhysicalPointToContinuousIndex(self, point) -> itkContinuousIndexD5

        Parameters
        ----------
        point: itkPointD5 &

        """
        return _itkImagePython.itkImageBase5_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, idx):
        r"""
        TransformContinuousIndexToPhysicalPoint(self, idx) -> itkPointD5

        Parameters
        ----------
        idx: itkContinuousIndexD5 &

        """
        return _itkImagePython.itkImageBase5_TransformContinuousIndexToPhysicalPoint(self, idx)

    def TransformIndexToPhysicalPoint(self, idx):
        r"""
        TransformIndexToPhysicalPoint(self, idx) -> itkPointD5

        Parameters
        ----------
        idx: itkIndex5 &

        """
        return _itkImagePython.itkImageBase5_TransformIndexToPhysicalPoint(self, idx)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalent to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalent to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
#ITK is C-order. The shape needs to be reversed unless we are a view on
#a NumPy array that is Fortran-order.
        reverse = True
        base = self
        while hasattr(base, 'base'):
            if hasattr(base, 'flags'):
                reverse = not base.flags.f_contiguous
                break
            base = base.base
        if reverse:
            result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalent to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def astype(self, pixel_type):
        """Cast the image to the provided itk pixel type or equivalent NumPy dtype."""
        import itk
        import numpy as np
        from itk.support import types

#Convert numpy type to dtype object for consistency
#i.e. <np.float32> -> np.dtype('float32')
        if type(pixel_type) is type:
            pixel_type = np.dtype(pixel_type)

#if both a numpy dtype and an ITK ctype exist, use the latter.
        if issubclass(type(pixel_type), np.dtype):
            c_pixel_type = types.itkCType.GetCTypeForDType(pixel_type)
            if c_pixel_type is not None:
                pixel_type = c_pixel_type

#input_image_template is Image or VectorImage
        (input_image_template, (input_pixel_type, input_image_dimension)) = itk.template(self)

        if input_pixel_type is pixel_type:
            return self
        OutputImageType = input_image_template[pixel_type, input_image_dimension]
        cast = itk.cast_image_filter(self, ttype=(type(self), OutputImageType))
        return cast

    def SetDirection(self, direction):
        from itk.support import helpers
        if helpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)

    def keys(self):
        """Return keys related to the image's metadata.

        These keys are used in the dictionary resulting from dict(image).

        These keys include MetaDataDictionary keys along with
        'origin', 'spacing', and 'direction' keys, which
        correspond to the image's Origin, Spacing, and Direction. However,
        they are in (z, y, x) order as opposed to (x, y, z) order to
        correspond to the indexing of the shape of the pixel buffer
        array resulting from np.array(image).
        """
        meta_keys = self.GetMetaDataDictionary().GetKeys()
#Ignore deprecated, legacy members that cause issues
        result = list(filter(lambda k: not k.startswith('ITK_original'), meta_keys))
        result.extend(['origin', 'spacing', 'direction'])
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        import itk
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                return np.flip(np.asarray(self.GetOrigin()), axis=None)
            elif key == 'spacing':
                return np.flip(np.asarray(self.GetSpacing()), axis=None)
            elif key == 'direction':
                return np.flip(itk.array_from_matrix(self.GetDirection()), axis=None)
            else:
                return self.GetMetaDataDictionary()[key]
        else:
            return itk.array_view_from_image(self).__getitem__(key)

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                self.SetOrigin(np.flip(value, axis=None))
            elif key == 'spacing':
                self.SetSpacing(np.flip(value, axis=None))
            elif key == 'direction':
                self.SetDirection(np.flip(value, axis=None))
            else:
                self.GetMetaDataDictionary()[key] = value
        else:
            import itk
            itk.array_view_from_image(self).__setitem__(key, value)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_image(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.image_from_dict(state)
        self.__dict__['this'] = deserialized
        self.SetOrigin(state['origin'])
        self.SetSpacing(state['spacing'])
        direction = np.asarray(self.GetDirection())
        self.SetDirection(direction)



    def New(*args, **kargs):
        """New() -> itkImageBase5

        Create a new object of the class itkImageBase5 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase5.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase5.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase5.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase5 in _itkImagePython:
_itkImagePython.itkImageBase5_swigregister(itkImageBase5)

def itkImageCD2_New():
    return itkImageCD2.New()

class itkImageCD2(itkImageBase2):
    r"""Proxy of C++ itkImageCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCD2_Pointer"""
        return _itkImagePython.itkImageCD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCD2_Pointer"""
        return _itkImagePython.itkImageCD2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCD2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkImagePython.itkImageCD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > > const *
        """
        return _itkImagePython.itkImageCD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< double > > *

        """
        return _itkImagePython.itkImageCD2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCD2 const *

        """
        return _itkImagePython.itkImageCD2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkImagePython.itkImageCD2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double > > > const
        """
        return _itkImagePython.itkImageCD2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCD2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCD2

        Create a new object of the class itkImageCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCD2 in _itkImagePython:
_itkImagePython.itkImageCD2_swigregister(itkImageCD2)

def itkImageCD3_New():
    return itkImageCD3.New()

class itkImageCD3(itkImageBase3):
    r"""Proxy of C++ itkImageCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCD3_Pointer"""
        return _itkImagePython.itkImageCD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCD3_Pointer"""
        return _itkImagePython.itkImageCD3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCD3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkImagePython.itkImageCD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > > const *
        """
        return _itkImagePython.itkImageCD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< double > > *

        """
        return _itkImagePython.itkImageCD3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCD3 const *

        """
        return _itkImagePython.itkImageCD3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkImagePython.itkImageCD3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,3 > > const
        """
        return _itkImagePython.itkImageCD3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCD3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCD3

        Create a new object of the class itkImageCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCD3 in _itkImagePython:
_itkImagePython.itkImageCD3_swigregister(itkImageCD3)

def itkImageCD4_New():
    return itkImageCD4.New()

class itkImageCD4(itkImageBase4):
    r"""Proxy of C++ itkImageCD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCD4_Pointer"""
        return _itkImagePython.itkImageCD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCD4_Pointer"""
        return _itkImagePython.itkImageCD4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCD4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: stdcomplexD const &

        """
        return _itkImagePython.itkImageCD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkImagePython.itkImageCD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< double > > const *
        """
        return _itkImagePython.itkImageCD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< double > > *

        """
        return _itkImagePython.itkImageCD4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCD4 const *

        """
        return _itkImagePython.itkImageCD4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkImagePython.itkImageCD4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,4 > > const
        """
        return _itkImagePython.itkImageCD4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCD4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCD4

        Create a new object of the class itkImageCD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCD4 in _itkImagePython:
_itkImagePython.itkImageCD4_swigregister(itkImageCD4)

def itkImageCF2_New():
    return itkImageCF2.New()

class itkImageCF2(itkImageBase2):
    r"""Proxy of C++ itkImageCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCF2_Pointer"""
        return _itkImagePython.itkImageCF2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCF2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< float > > *

        """
        return _itkImagePython.itkImageCF2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCF2 const *

        """
        return _itkImagePython.itkImageCF2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float > > > const
        """
        return _itkImagePython.itkImageCF2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCF2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCF2

        Create a new object of the class itkImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCF2 in _itkImagePython:
_itkImagePython.itkImageCF2_swigregister(itkImageCF2)

def itkImageCF3_New():
    return itkImageCF3.New()

class itkImageCF3(itkImageBase3):
    r"""Proxy of C++ itkImageCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCF3_Pointer"""
        return _itkImagePython.itkImageCF3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCF3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< float > > *

        """
        return _itkImagePython.itkImageCF3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCF3 const *

        """
        return _itkImagePython.itkImageCF3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,3 > > const
        """
        return _itkImagePython.itkImageCF3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCF3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCF3

        Create a new object of the class itkImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCF3 in _itkImagePython:
_itkImagePython.itkImageCF3_swigregister(itkImageCF3)

def itkImageCF4_New():
    return itkImageCF4.New()

class itkImageCF4(itkImageBase4):
    r"""Proxy of C++ itkImageCF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCF4_Pointer"""
        return _itkImagePython.itkImageCF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCF4_Pointer"""
        return _itkImagePython.itkImageCF4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCF4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: stdcomplexF const &

        """
        return _itkImagePython.itkImageCF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkImagePython.itkImageCF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,std::complex< float > > const *
        """
        return _itkImagePython.itkImageCF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,std::complex< float > > *

        """
        return _itkImagePython.itkImageCF4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCF4 const *

        """
        return _itkImagePython.itkImageCF4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkImagePython.itkImageCF4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >,4 > > const
        """
        return _itkImagePython.itkImageCF4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCF4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCF4

        Create a new object of the class itkImageCF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCF4 in _itkImagePython:
_itkImagePython.itkImageCF4_swigregister(itkImageCF4)

def itkImageCVD22_New():
    return itkImageCVD22.New()

class itkImageCVD22(itkImageBase2):
    r"""Proxy of C++ itkImageCVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD22_Pointer"""
        return _itkImagePython.itkImageCVD22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVD22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD2
        GetBufferPointer(self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > *

        """
        return _itkImagePython.itkImageCVD22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD22 const *

        """
        return _itkImagePython.itkImageCVD22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 > > > const
        """
        return _itkImagePython.itkImageCVD22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD22

        Create a new object of the class itkImageCVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD22 in _itkImagePython:
_itkImagePython.itkImageCVD22_swigregister(itkImageCVD22)

def itkImageCVD23_New():
    return itkImageCVD23.New()

class itkImageCVD23(itkImageBase3):
    r"""Proxy of C++ itkImageCVD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD23_Pointer"""
        return _itkImagePython.itkImageCVD23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVD23_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD2
        GetBufferPointer(self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD23_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD23_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > *

        """
        return _itkImagePython.itkImageCVD23_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD23 const *

        """
        return _itkImagePython.itkImageCVD23_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVD23_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD23_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD23

        Create a new object of the class itkImageCVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD23 in _itkImagePython:
_itkImagePython.itkImageCVD23_swigregister(itkImageCVD23)

def itkImageCVD24_New():
    return itkImageCVD24.New()

class itkImageCVD24(itkImageBase4):
    r"""Proxy of C++ itkImageCVD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD24_Pointer"""
        return _itkImagePython.itkImageCVD24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD24_Pointer"""
        return _itkImagePython.itkImageCVD24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorD2 const &

        """
        return _itkImagePython.itkImageCVD24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVD24_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD2
        GetBufferPointer(self) -> itkCovariantVectorD2
        """
        return _itkImagePython.itkImageCVD24_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > const *
        """
        return _itkImagePython.itkImageCVD24_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,2 > > *

        """
        return _itkImagePython.itkImageCVD24_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD24 const *

        """
        return _itkImagePython.itkImageCVD24_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,2 > > const
        """
        return _itkImagePython.itkImageCVD24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,2 >,4 > > const
        """
        return _itkImagePython.itkImageCVD24_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD24_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD24

        Create a new object of the class itkImageCVD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD24 in _itkImagePython:
_itkImagePython.itkImageCVD24_swigregister(itkImageCVD24)

def itkImageCVD32_New():
    return itkImageCVD32.New()

class itkImageCVD32(itkImageBase2):
    r"""Proxy of C++ itkImageCVD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD32_Pointer"""
        return _itkImagePython.itkImageCVD32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVD32_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD3
        GetBufferPointer(self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD32_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > const *
        """
        return _itkImagePython.itkImageCVD32_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > *

        """
        return _itkImagePython.itkImageCVD32_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD32 const *

        """
        return _itkImagePython.itkImageCVD32_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > > const
        """
        return _itkImagePython.itkImageCVD32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double > > > const
        """
        return _itkImagePython.itkImageCVD32_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD32_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD32

        Create a new object of the class itkImageCVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD32 in _itkImagePython:
_itkImagePython.itkImageCVD32_swigregister(itkImageCVD32)

def itkImageCVD33_New():
    return itkImageCVD33.New()

class itkImageCVD33(itkImageBase3):
    r"""Proxy of C++ itkImageCVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD33_Pointer"""
        return _itkImagePython.itkImageCVD33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVD33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD3
        GetBufferPointer(self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > const *
        """
        return _itkImagePython.itkImageCVD33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > *

        """
        return _itkImagePython.itkImageCVD33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD33 const *

        """
        return _itkImagePython.itkImageCVD33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > > const
        """
        return _itkImagePython.itkImageCVD33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double >,3 > > const
        """
        return _itkImagePython.itkImageCVD33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD33

        Create a new object of the class itkImageCVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD33 in _itkImagePython:
_itkImagePython.itkImageCVD33_swigregister(itkImageCVD33)

def itkImageCVD34_New():
    return itkImageCVD34.New()

class itkImageCVD34(itkImageBase4):
    r"""Proxy of C++ itkImageCVD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD34_Pointer"""
        return _itkImagePython.itkImageCVD34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD34_Pointer"""
        return _itkImagePython.itkImageCVD34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorD3 const &

        """
        return _itkImagePython.itkImageCVD34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVD34_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD3
        GetBufferPointer(self) -> itkCovariantVectorD3
        """
        return _itkImagePython.itkImageCVD34_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > const *
        """
        return _itkImagePython.itkImageCVD34_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double > > *

        """
        return _itkImagePython.itkImageCVD34_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD34 const *

        """
        return _itkImagePython.itkImageCVD34_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double > > const
        """
        return _itkImagePython.itkImageCVD34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double >,4 > > const
        """
        return _itkImagePython.itkImageCVD34_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD34_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD34

        Create a new object of the class itkImageCVD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD34 in _itkImagePython:
_itkImagePython.itkImageCVD34_swigregister(itkImageCVD34)

def itkImageCVD42_New():
    return itkImageCVD42.New()

class itkImageCVD42(itkImageBase2):
    r"""Proxy of C++ itkImageCVD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD42_Pointer"""
        return _itkImagePython.itkImageCVD42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVD42_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD4
        GetBufferPointer(self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD42_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD42_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > *

        """
        return _itkImagePython.itkImageCVD42_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD42 const *

        """
        return _itkImagePython.itkImageCVD42_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 > > > const
        """
        return _itkImagePython.itkImageCVD42_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD42_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD42

        Create a new object of the class itkImageCVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD42 in _itkImagePython:
_itkImagePython.itkImageCVD42_swigregister(itkImageCVD42)

def itkImageCVD43_New():
    return itkImageCVD43.New()

class itkImageCVD43(itkImageBase3):
    r"""Proxy of C++ itkImageCVD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD43_Pointer"""
        return _itkImagePython.itkImageCVD43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVD43_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD4
        GetBufferPointer(self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD43_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD43_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > *

        """
        return _itkImagePython.itkImageCVD43_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD43 const *

        """
        return _itkImagePython.itkImageCVD43_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVD43_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD43_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD43

        Create a new object of the class itkImageCVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD43 in _itkImagePython:
_itkImagePython.itkImageCVD43_swigregister(itkImageCVD43)

def itkImageCVD44_New():
    return itkImageCVD44.New()

class itkImageCVD44(itkImageBase4):
    r"""Proxy of C++ itkImageCVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD44_Pointer"""
        return _itkImagePython.itkImageCVD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD44_Pointer"""
        return _itkImagePython.itkImageCVD44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVD44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorD4 const &

        """
        return _itkImagePython.itkImageCVD44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVD44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD4
        GetBufferPointer(self) -> itkCovariantVectorD4
        """
        return _itkImagePython.itkImageCVD44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > const *
        """
        return _itkImagePython.itkImageCVD44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< double,4 > > *

        """
        return _itkImagePython.itkImageCVD44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD44 const *

        """
        return _itkImagePython.itkImageCVD44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,4 > > const
        """
        return _itkImagePython.itkImageCVD44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageCVD44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVD44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD44

        Create a new object of the class itkImageCVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD44 in _itkImagePython:
_itkImagePython.itkImageCVD44_swigregister(itkImageCVD44)

def itkImageCVF22_New():
    return itkImageCVF22.New()

class itkImageCVF22(itkImageBase2):
    r"""Proxy of C++ itkImageCVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF22_Pointer"""
        return _itkImagePython.itkImageCVF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVF22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > *

        """
        return _itkImagePython.itkImageCVF22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF22 const *

        """
        return _itkImagePython.itkImageCVF22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 > > > const
        """
        return _itkImagePython.itkImageCVF22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF22

        Create a new object of the class itkImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF22 in _itkImagePython:
_itkImagePython.itkImageCVF22_swigregister(itkImageCVF22)

def itkImageCVF23_New():
    return itkImageCVF23.New()

class itkImageCVF23(itkImageBase3):
    r"""Proxy of C++ itkImageCVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF23_Pointer"""
        return _itkImagePython.itkImageCVF23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVF23_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF23_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF23_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > *

        """
        return _itkImagePython.itkImageCVF23_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF23 const *

        """
        return _itkImagePython.itkImageCVF23_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageCVF23_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF23_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF23

        Create a new object of the class itkImageCVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF23 in _itkImagePython:
_itkImagePython.itkImageCVF23_swigregister(itkImageCVF23)

def itkImageCVF24_New():
    return itkImageCVF24.New()

class itkImageCVF24(itkImageBase4):
    r"""Proxy of C++ itkImageCVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF24_Pointer"""
        return _itkImagePython.itkImageCVF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF24_Pointer"""
        return _itkImagePython.itkImageCVF24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkImagePython.itkImageCVF24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVF24_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkImagePython.itkImageCVF24_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImagePython.itkImageCVF24_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,2 > > *

        """
        return _itkImagePython.itkImageCVF24_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF24 const *

        """
        return _itkImagePython.itkImageCVF24_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImagePython.itkImageCVF24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,4 > > const
        """
        return _itkImagePython.itkImageCVF24_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF24_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF24

        Create a new object of the class itkImageCVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF24 in _itkImagePython:
_itkImagePython.itkImageCVF24_swigregister(itkImageCVF24)

def itkImageCVF32_New():
    return itkImageCVF32.New()

class itkImageCVF32(itkImageBase2):
    r"""Proxy of C++ itkImageCVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF32_Pointer"""
        return _itkImagePython.itkImageCVF32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVF32_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF32_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > const *
        """
        return _itkImagePython.itkImageCVF32_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > *

        """
        return _itkImagePython.itkImageCVF32_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF32 const *

        """
        return _itkImagePython.itkImageCVF32_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkImagePython.itkImageCVF32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float > > > const
        """
        return _itkImagePython.itkImageCVF32_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF32_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF32

        Create a new object of the class itkImageCVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF32 in _itkImagePython:
_itkImagePython.itkImageCVF32_swigregister(itkImageCVF32)

def itkImageCVF33_New():
    return itkImageCVF33.New()

class itkImageCVF33(itkImageBase3):
    r"""Proxy of C++ itkImageCVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF33_Pointer"""
        return _itkImagePython.itkImageCVF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVF33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > const *
        """
        return _itkImagePython.itkImageCVF33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > *

        """
        return _itkImagePython.itkImageCVF33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF33 const *

        """
        return _itkImagePython.itkImageCVF33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkImagePython.itkImageCVF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,3 > > const
        """
        return _itkImagePython.itkImageCVF33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF33

        Create a new object of the class itkImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF33 in _itkImagePython:
_itkImagePython.itkImageCVF33_swigregister(itkImageCVF33)

def itkImageCVF34_New():
    return itkImageCVF34.New()

class itkImageCVF34(itkImageBase4):
    r"""Proxy of C++ itkImageCVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF34_Pointer"""
        return _itkImagePython.itkImageCVF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF34_Pointer"""
        return _itkImagePython.itkImageCVF34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkImagePython.itkImageCVF34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVF34_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkImagePython.itkImageCVF34_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > const *
        """
        return _itkImagePython.itkImageCVF34_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float > > *

        """
        return _itkImagePython.itkImageCVF34_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF34 const *

        """
        return _itkImagePython.itkImageCVF34_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkImagePython.itkImageCVF34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,4 > > const
        """
        return _itkImagePython.itkImageCVF34_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF34_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF34

        Create a new object of the class itkImageCVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF34 in _itkImagePython:
_itkImagePython.itkImageCVF34_swigregister(itkImageCVF34)

def itkImageCVF42_New():
    return itkImageCVF42.New()

class itkImageCVF42(itkImageBase2):
    r"""Proxy of C++ itkImageCVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF42_Pointer"""
        return _itkImagePython.itkImageCVF42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageCVF42_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF42_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF42_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > *

        """
        return _itkImagePython.itkImageCVF42_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF42 const *

        """
        return _itkImagePython.itkImageCVF42_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 > > > const
        """
        return _itkImagePython.itkImageCVF42_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF42_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF42

        Create a new object of the class itkImageCVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF42 in _itkImagePython:
_itkImagePython.itkImageCVF42_swigregister(itkImageCVF42)

def itkImageCVF43_New():
    return itkImageCVF43.New()

class itkImageCVF43(itkImageBase3):
    r"""Proxy of C++ itkImageCVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF43_Pointer"""
        return _itkImagePython.itkImageCVF43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageCVF43_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF43_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF43_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > *

        """
        return _itkImagePython.itkImageCVF43_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF43 const *

        """
        return _itkImagePython.itkImageCVF43_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageCVF43_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF43_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF43

        Create a new object of the class itkImageCVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF43 in _itkImagePython:
_itkImagePython.itkImageCVF43_swigregister(itkImageCVF43)

def itkImageCVF44_New():
    return itkImageCVF44.New()

class itkImageCVF44(itkImageBase4):
    r"""Proxy of C++ itkImageCVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF44_Pointer"""
        return _itkImagePython.itkImageCVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF44_Pointer"""
        return _itkImagePython.itkImageCVF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageCVF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkImagePython.itkImageCVF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageCVF44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkImagePython.itkImageCVF44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImagePython.itkImageCVF44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::CovariantVector< float,4 > > *

        """
        return _itkImagePython.itkImageCVF44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF44 const *

        """
        return _itkImagePython.itkImageCVF44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImagePython.itkImageCVF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,4 > > const
        """
        return _itkImagePython.itkImageCVF44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageCVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageCVF44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF44

        Create a new object of the class itkImageCVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF44 in _itkImagePython:
_itkImagePython.itkImageCVF44_swigregister(itkImageCVF44)

def itkImageD2_New():
    return itkImageD2.New()

class itkImageD2(itkImageBase2):
    r"""Proxy of C++ itkImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageD2_Pointer"""
        return _itkImagePython.itkImageD2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageD2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkImagePython.itkImageD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: double const &

        """
        return _itkImagePython.itkImageD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImagePython.itkImageD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,double > *

        """
        return _itkImagePython.itkImageD2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkImagePython.itkImageD2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double > > const
        """
        return _itkImagePython.itkImageD2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageD2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD2

        Create a new object of the class itkImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD2 in _itkImagePython:
_itkImagePython.itkImageD2_swigregister(itkImageD2)

def itkImageD3_New():
    return itkImageD3.New()

class itkImageD3(itkImageBase3):
    r"""Proxy of C++ itkImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageD3_Pointer"""
        return _itkImagePython.itkImageD3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageD3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkImagePython.itkImageD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: double const &

        """
        return _itkImagePython.itkImageD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImagePython.itkImageD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,double > *

        """
        return _itkImagePython.itkImageD3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkImagePython.itkImageD3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const
        """
        return _itkImagePython.itkImageD3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageD3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD3

        Create a new object of the class itkImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD3 in _itkImagePython:
_itkImagePython.itkImageD3_swigregister(itkImageD3)

def itkImageD4_New():
    return itkImageD4.New()

class itkImageD4(itkImageBase4):
    r"""Proxy of C++ itkImageD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageD4_Pointer"""
        return _itkImagePython.itkImageD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageD4_Pointer"""
        return _itkImagePython.itkImageD4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageD4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkImagePython.itkImageD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: double const &

        """
        return _itkImagePython.itkImageD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImagePython.itkImageD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,double > const *
        """
        return _itkImagePython.itkImageD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,double > *

        """
        return _itkImagePython.itkImageD4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkImagePython.itkImageD4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImagePython.itkImageD4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,4 > > const
        """
        return _itkImagePython.itkImageD4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageD4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD4

        Create a new object of the class itkImageD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD4 in _itkImagePython:
_itkImagePython.itkImageD4_swigregister(itkImageD4)

def itkImageF2_New():
    return itkImageF2.New()

class itkImageF2(itkImageBase2):
    r"""Proxy of C++ itkImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageF2_Pointer"""
        return _itkImagePython.itkImageF2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageF2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkImagePython.itkImageF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: float const &

        """
        return _itkImagePython.itkImageF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImagePython.itkImageF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,float > *

        """
        return _itkImagePython.itkImageF2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkImagePython.itkImageF2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float > > const
        """
        return _itkImagePython.itkImageF2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageF2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF2

        Create a new object of the class itkImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF2 in _itkImagePython:
_itkImagePython.itkImageF2_swigregister(itkImageF2)

def itkImageF3_New():
    return itkImageF3.New()

class itkImageF3(itkImageBase3):
    r"""Proxy of C++ itkImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageF3_Pointer"""
        return _itkImagePython.itkImageF3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageF3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkImagePython.itkImageF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: float const &

        """
        return _itkImagePython.itkImageF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImagePython.itkImageF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,float > *

        """
        return _itkImagePython.itkImageF3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkImagePython.itkImageF3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const
        """
        return _itkImagePython.itkImageF3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageF3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF3

        Create a new object of the class itkImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF3 in _itkImagePython:
_itkImagePython.itkImageF3_swigregister(itkImageF3)

def itkImageF4_New():
    return itkImageF4.New()

class itkImageF4(itkImageBase4):
    r"""Proxy of C++ itkImageF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageF4_Pointer"""
        return _itkImagePython.itkImageF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageF4_Pointer"""
        return _itkImagePython.itkImageF4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageF4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkImagePython.itkImageF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: float const &

        """
        return _itkImagePython.itkImageF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImagePython.itkImageF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,float > const *
        """
        return _itkImagePython.itkImageF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,float > *

        """
        return _itkImagePython.itkImageF4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkImagePython.itkImageF4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImagePython.itkImageF4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const
        """
        return _itkImagePython.itkImageF4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageF4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF4

        Create a new object of the class itkImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF4 in _itkImagePython:
_itkImagePython.itkImageF4_swigregister(itkImageF4)

def itkImageFAD22_New():
    return itkImageFAD22.New()

class itkImageFAD22(itkImageBase2):
    r"""Proxy of C++ itkImageFAD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAD22_Pointer"""
        return _itkImagePython.itkImageFAD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAD22_Pointer"""
        return _itkImagePython.itkImageFAD22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAD22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayD2 const &

        """
        return _itkImagePython.itkImageFAD22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkFixedArrayD2 const &

        """
        return _itkImagePython.itkImageFAD22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayD2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkFixedArrayD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageFAD22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayD2
        GetBufferPointer(self) -> itkFixedArrayD2
        """
        return _itkImagePython.itkImageFAD22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,2 > > const *
        """
        return _itkImagePython.itkImageFAD22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,2 > > *

        """
        return _itkImagePython.itkImageFAD22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAD22 const *

        """
        return _itkImagePython.itkImageFAD22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double,2 > > const
        """
        return _itkImagePython.itkImageFAD22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double,2 > > > const
        """
        return _itkImagePython.itkImageFAD22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAD22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAD22

        Create a new object of the class itkImageFAD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAD22 in _itkImagePython:
_itkImagePython.itkImageFAD22_swigregister(itkImageFAD22)

def itkImageFAD33_New():
    return itkImageFAD33.New()

class itkImageFAD33(itkImageBase3):
    r"""Proxy of C++ itkImageFAD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAD33_Pointer"""
        return _itkImagePython.itkImageFAD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAD33_Pointer"""
        return _itkImagePython.itkImageFAD33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAD33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayD3 const &

        """
        return _itkImagePython.itkImageFAD33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkFixedArrayD3 const &

        """
        return _itkImagePython.itkImageFAD33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayD3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkFixedArrayD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageFAD33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayD3
        GetBufferPointer(self) -> itkFixedArrayD3
        """
        return _itkImagePython.itkImageFAD33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double > > const *
        """
        return _itkImagePython.itkImageFAD33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< double > > *

        """
        return _itkImagePython.itkImageFAD33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAD33 const *

        """
        return _itkImagePython.itkImageFAD33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double > > const
        """
        return _itkImagePython.itkImageFAD33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double >,3 > > const
        """
        return _itkImagePython.itkImageFAD33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAD33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAD33

        Create a new object of the class itkImageFAD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAD33 in _itkImagePython:
_itkImagePython.itkImageFAD33_swigregister(itkImageFAD33)

def itkImageFAD44_New():
    return itkImageFAD44.New()

class itkImageFAD44(itkImageBase4):
    r"""Proxy of C++ itkImageFAD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAD44_Pointer"""
        return _itkImagePython.itkImageFAD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAD44_Pointer"""
        return _itkImagePython.itkImageFAD44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAD44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayD4 const &

        """
        return _itkImagePython.itkImageFAD44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkFixedArrayD4 const &

        """
        return _itkImagePython.itkImageFAD44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayD4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkFixedArrayD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageFAD44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayD4
        GetBufferPointer(self) -> itkFixedArrayD4
        """
        return _itkImagePython.itkImageFAD44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,4 > > const *
        """
        return _itkImagePython.itkImageFAD44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< double,4 > > *

        """
        return _itkImagePython.itkImageFAD44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAD44 const *

        """
        return _itkImagePython.itkImageFAD44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< double,4 > > const
        """
        return _itkImagePython.itkImageFAD44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageFAD44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAD44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAD44

        Create a new object of the class itkImageFAD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAD44 in _itkImagePython:
_itkImagePython.itkImageFAD44_swigregister(itkImageFAD44)

def itkImageFAF22_New():
    return itkImageFAF22.New()

class itkImageFAF22(itkImageBase2):
    r"""Proxy of C++ itkImageFAF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAF22_Pointer"""
        return _itkImagePython.itkImageFAF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayF2 const &

        """
        return _itkImagePython.itkImageFAF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkFixedArrayF2 const &

        """
        return _itkImagePython.itkImageFAF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkFixedArrayF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageFAF22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayF2
        GetBufferPointer(self) -> itkFixedArrayF2
        """
        return _itkImagePython.itkImageFAF22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > const *
        """
        return _itkImagePython.itkImageFAF22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,2 > > *

        """
        return _itkImagePython.itkImageFAF22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAF22 const *

        """
        return _itkImagePython.itkImageFAF22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,2 > > const
        """
        return _itkImagePython.itkImageFAF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,2 > > > const
        """
        return _itkImagePython.itkImageFAF22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAF22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAF22

        Create a new object of the class itkImageFAF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAF22 in _itkImagePython:
_itkImagePython.itkImageFAF22_swigregister(itkImageFAF22)

def itkImageFAF33_New():
    return itkImageFAF33.New()

class itkImageFAF33(itkImageBase3):
    r"""Proxy of C++ itkImageFAF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAF33_Pointer"""
        return _itkImagePython.itkImageFAF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayF3 const &

        """
        return _itkImagePython.itkImageFAF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkFixedArrayF3 const &

        """
        return _itkImagePython.itkImageFAF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkFixedArrayF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageFAF33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayF3
        GetBufferPointer(self) -> itkFixedArrayF3
        """
        return _itkImagePython.itkImageFAF33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float > > const *
        """
        return _itkImagePython.itkImageFAF33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< float > > *

        """
        return _itkImagePython.itkImageFAF33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAF33 const *

        """
        return _itkImagePython.itkImageFAF33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float > > const
        """
        return _itkImagePython.itkImageFAF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float >,3 > > const
        """
        return _itkImagePython.itkImageFAF33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAF33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAF33

        Create a new object of the class itkImageFAF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAF33 in _itkImagePython:
_itkImagePython.itkImageFAF33_swigregister(itkImageFAF33)

def itkImageFAF44_New():
    return itkImageFAF44.New()

class itkImageFAF44(itkImageBase4):
    r"""Proxy of C++ itkImageFAF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFAF44_Pointer"""
        return _itkImagePython.itkImageFAF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFAF44_Pointer"""
        return _itkImagePython.itkImageFAF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageFAF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkFixedArrayF4 const &

        """
        return _itkImagePython.itkImageFAF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkFixedArrayF4 const &

        """
        return _itkImagePython.itkImageFAF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkFixedArrayF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkFixedArrayF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageFAF44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkFixedArrayF4
        GetBufferPointer(self) -> itkFixedArrayF4
        """
        return _itkImagePython.itkImageFAF44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,4 > > const *
        """
        return _itkImagePython.itkImageFAF44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::FixedArray< float,4 > > *

        """
        return _itkImagePython.itkImageFAF44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageFAF44 const *

        """
        return _itkImagePython.itkImageFAF44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::FixedArray< float,4 > > const
        """
        return _itkImagePython.itkImageFAF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float,4 >,4 > > const
        """
        return _itkImagePython.itkImageFAF44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageFAF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFAF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageFAF44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageFAF44

        Create a new object of the class itkImageFAF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFAF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFAF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFAF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFAF44 in _itkImagePython:
_itkImagePython.itkImageFAF44_swigregister(itkImageFAF44)

def itkImageO22_New():
    return itkImageO22.New()

class itkImageO22(itkImageBase2):
    r"""Proxy of C++ itkImageO22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageO22_Pointer"""
        return _itkImagePython.itkImageO22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageO22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkOffset2 const &

        """
        return _itkImagePython.itkImageO22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkOffset2 const &

        """
        return _itkImagePython.itkImageO22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkOffset2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkOffset2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageO22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkOffset2
        GetBufferPointer(self) -> itkOffset2
        """
        return _itkImagePython.itkImageO22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< > > const *
        """
        return _itkImagePython.itkImageO22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Offset< > > *

        """
        return _itkImagePython.itkImageO22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageO22 const *

        """
        return _itkImagePython.itkImageO22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< > > const
        """
        return _itkImagePython.itkImageO22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< > > > const
        """
        return _itkImagePython.itkImageO22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageO22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageO22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageO22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageO22

        Create a new object of the class itkImageO22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageO22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageO22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageO22 in _itkImagePython:
_itkImagePython.itkImageO22_swigregister(itkImageO22)

def itkImageO33_New():
    return itkImageO33.New()

class itkImageO33(itkImageBase3):
    r"""Proxy of C++ itkImageO33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageO33_Pointer"""
        return _itkImagePython.itkImageO33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageO33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkOffset3 const &

        """
        return _itkImagePython.itkImageO33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkOffset3 const &

        """
        return _itkImagePython.itkImageO33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkOffset3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkOffset3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageO33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkOffset3
        GetBufferPointer(self) -> itkOffset3
        """
        return _itkImagePython.itkImageO33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > const *
        """
        return _itkImagePython.itkImageO33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Offset< 3 > > *

        """
        return _itkImagePython.itkImageO33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageO33 const *

        """
        return _itkImagePython.itkImageO33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< 3 > > const
        """
        return _itkImagePython.itkImageO33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3 >,3 > > const
        """
        return _itkImagePython.itkImageO33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageO33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageO33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageO33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageO33

        Create a new object of the class itkImageO33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageO33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageO33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageO33 in _itkImagePython:
_itkImagePython.itkImageO33_swigregister(itkImageO33)

def itkImageO44_New():
    return itkImageO44.New()

class itkImageO44(itkImageBase4):
    r"""Proxy of C++ itkImageO44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageO44_Pointer"""
        return _itkImagePython.itkImageO44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageO44_Pointer"""
        return _itkImagePython.itkImageO44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageO44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkOffset4 const &

        """
        return _itkImagePython.itkImageO44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkOffset4 const &

        """
        return _itkImagePython.itkImageO44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkOffset4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkOffset4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageO44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkOffset4
        GetBufferPointer(self) -> itkOffset4
        """
        return _itkImagePython.itkImageO44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Offset< 4 > > const *
        """
        return _itkImagePython.itkImageO44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Offset< 4 > > *

        """
        return _itkImagePython.itkImageO44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageO44 const *

        """
        return _itkImagePython.itkImageO44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< 4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Offset< 4 > > const
        """
        return _itkImagePython.itkImageO44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 4 >,4 > > const
        """
        return _itkImagePython.itkImageO44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageO44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageO44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageO44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageO44

        Create a new object of the class itkImageO44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageO44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageO44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageO44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageO44 in _itkImagePython:
_itkImagePython.itkImageO44_swigregister(itkImageO44)

def itkImageRGBAUC2_New():
    return itkImageRGBAUC2.New()

class itkImageRGBAUC2(itkImageBase2):
    r"""Proxy of C++ itkImageRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBAUC2_Pointer"""
        return _itkImagePython.itkImageRGBAUC2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBAUC2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageRGBAUC2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBAPixelUC
        GetBufferPointer(self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBAUC2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBAUC2 const *

        """
        return _itkImagePython.itkImageRGBAUC2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char > > > const
        """
        return _itkImagePython.itkImageRGBAUC2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBAUC2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC2

        Create a new object of the class itkImageRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBAUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBAUC2 in _itkImagePython:
_itkImagePython.itkImageRGBAUC2_swigregister(itkImageRGBAUC2)

def itkImageRGBAUC3_New():
    return itkImageRGBAUC3.New()

class itkImageRGBAUC3(itkImageBase3):
    r"""Proxy of C++ itkImageRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBAUC3_Pointer"""
        return _itkImagePython.itkImageRGBAUC3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBAUC3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageRGBAUC3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBAPixelUC
        GetBufferPointer(self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBAUC3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBAUC3 const *

        """
        return _itkImagePython.itkImageRGBAUC3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBAUC3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBAUC3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC3

        Create a new object of the class itkImageRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBAUC3 in _itkImagePython:
_itkImagePython.itkImageRGBAUC3_swigregister(itkImageRGBAUC3)

def itkImageRGBAUC4_New():
    return itkImageRGBAUC4.New()

class itkImageRGBAUC4(itkImageBase4):
    r"""Proxy of C++ itkImageRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBAUC4_Pointer"""
        return _itkImagePython.itkImageRGBAUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBAUC4_Pointer"""
        return _itkImagePython.itkImageRGBAUC4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBAUC4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkRGBAPixelUC const &

        """
        return _itkImagePython.itkImageRGBAUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageRGBAUC4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBAPixelUC
        GetBufferPointer(self) -> itkRGBAPixelUC
        """
        return _itkImagePython.itkImageRGBAUC4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBAUC4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBAPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBAUC4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBAUC4 const *

        """
        return _itkImagePython.itkImageRGBAUC4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBAUC4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >,4 > > const
        """
        return _itkImagePython.itkImageRGBAUC4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBAUC4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBAUC4

        Create a new object of the class itkImageRGBAUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBAUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBAUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBAUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBAUC4 in _itkImagePython:
_itkImagePython.itkImageRGBAUC4_swigregister(itkImageRGBAUC4)

def itkImageRGBUC2_New():
    return itkImageRGBUC2.New()

class itkImageRGBUC2(itkImageBase2):
    r"""Proxy of C++ itkImageRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBUC2_Pointer"""
        return _itkImagePython.itkImageRGBUC2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBUC2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageRGBUC2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBPixelUC
        GetBufferPointer(self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBUC2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBUC2 const *

        """
        return _itkImagePython.itkImageRGBUC2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char > > > const
        """
        return _itkImagePython.itkImageRGBUC2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBUC2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC2

        Create a new object of the class itkImageRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBUC2 in _itkImagePython:
_itkImagePython.itkImageRGBUC2_swigregister(itkImageRGBUC2)

def itkImageRGBUC3_New():
    return itkImageRGBUC3.New()

class itkImageRGBUC3(itkImageBase3):
    r"""Proxy of C++ itkImageRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBUC3_Pointer"""
        return _itkImagePython.itkImageRGBUC3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBUC3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageRGBUC3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBPixelUC
        GetBufferPointer(self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBUC3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBUC3 const *

        """
        return _itkImagePython.itkImageRGBUC3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,3 > > const
        """
        return _itkImagePython.itkImageRGBUC3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBUC3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC3

        Create a new object of the class itkImageRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBUC3 in _itkImagePython:
_itkImagePython.itkImageRGBUC3_swigregister(itkImageRGBUC3)

def itkImageRGBUC4_New():
    return itkImageRGBUC4.New()

class itkImageRGBUC4(itkImageBase4):
    r"""Proxy of C++ itkImageRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRGBUC4_Pointer"""
        return _itkImagePython.itkImageRGBUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRGBUC4_Pointer"""
        return _itkImagePython.itkImageRGBUC4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageRGBUC4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkRGBPixelUC const &

        """
        return _itkImagePython.itkImageRGBUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageRGBUC4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkRGBPixelUC
        GetBufferPointer(self) -> itkRGBPixelUC
        """
        return _itkImagePython.itkImageRGBUC4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > const *
        """
        return _itkImagePython.itkImageRGBUC4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::RGBPixel< unsigned char > > *

        """
        return _itkImagePython.itkImageRGBUC4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageRGBUC4 const *

        """
        return _itkImagePython.itkImageRGBUC4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const
        """
        return _itkImagePython.itkImageRGBUC4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >,4 > > const
        """
        return _itkImagePython.itkImageRGBUC4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageRGBUC4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageRGBUC4

        Create a new object of the class itkImageRGBUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRGBUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRGBUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRGBUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRGBUC4 in _itkImagePython:
_itkImagePython.itkImageRGBUC4_swigregister(itkImageRGBUC4)

def itkImageSI2_New():
    return itkImageSI2.New()

class itkImageSI2(itkImageBase2):
    r"""Proxy of C++ itkImageSI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSI2_Pointer"""
        return _itkImagePython.itkImageSI2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSI2_Pointer"""
        return _itkImagePython.itkImageSI2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSI2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: int const &

        """
        return _itkImagePython.itkImageSI2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: int const &

        """
        return _itkImagePython.itkImageSI2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> int const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> int &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageSI2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> int
        GetBufferPointer(self) -> int const *
        """
        return _itkImagePython.itkImageSI2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int > const *
        """
        return _itkImagePython.itkImageSI2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,int > *

        """
        return _itkImagePython.itkImageSI2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSI2 const *

        """
        return _itkImagePython.itkImageSI2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int > const
        """
        return _itkImagePython.itkImageSI2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int > > const
        """
        return _itkImagePython.itkImageSI2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSI2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSI2

        Create a new object of the class itkImageSI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSI2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSI2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSI2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSI2 in _itkImagePython:
_itkImagePython.itkImageSI2_swigregister(itkImageSI2)

def itkImageSI3_New():
    return itkImageSI3.New()

class itkImageSI3(itkImageBase3):
    r"""Proxy of C++ itkImageSI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSI3_Pointer"""
        return _itkImagePython.itkImageSI3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSI3_Pointer"""
        return _itkImagePython.itkImageSI3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSI3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: int const &

        """
        return _itkImagePython.itkImageSI3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: int const &

        """
        return _itkImagePython.itkImageSI3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> int const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> int &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageSI3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> int
        GetBufferPointer(self) -> int const *
        """
        return _itkImagePython.itkImageSI3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int > const *
        """
        return _itkImagePython.itkImageSI3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,int > *

        """
        return _itkImagePython.itkImageSI3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSI3 const *

        """
        return _itkImagePython.itkImageSI3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int > const
        """
        return _itkImagePython.itkImageSI3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int,3 > > const
        """
        return _itkImagePython.itkImageSI3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSI3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSI3

        Create a new object of the class itkImageSI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSI3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSI3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSI3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSI3 in _itkImagePython:
_itkImagePython.itkImageSI3_swigregister(itkImageSI3)

def itkImageSI4_New():
    return itkImageSI4.New()

class itkImageSI4(itkImageBase4):
    r"""Proxy of C++ itkImageSI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSI4_Pointer"""
        return _itkImagePython.itkImageSI4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSI4_Pointer"""
        return _itkImagePython.itkImageSI4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSI4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: int const &

        """
        return _itkImagePython.itkImageSI4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: int const &

        """
        return _itkImagePython.itkImageSI4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> int const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> int &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageSI4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> int
        GetBufferPointer(self) -> int const *
        """
        return _itkImagePython.itkImageSI4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,int > const *
        """
        return _itkImagePython.itkImageSI4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,int > *

        """
        return _itkImagePython.itkImageSI4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSI4 const *

        """
        return _itkImagePython.itkImageSI4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< int > const
        """
        return _itkImagePython.itkImageSI4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< int,4 > > const
        """
        return _itkImagePython.itkImageSI4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSI4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSI4

        Create a new object of the class itkImageSI4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSI4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSI4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSI4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSI4 in _itkImagePython:
_itkImagePython.itkImageSI4_swigregister(itkImageSI4)

def itkImageSS2_New():
    return itkImageSS2.New()

class itkImageSS2(itkImageBase2):
    r"""Proxy of C++ itkImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSS2_Pointer"""
        return _itkImagePython.itkImageSS2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSS2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkImagePython.itkImageSS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: short const &

        """
        return _itkImagePython.itkImageSS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageSS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkImagePython.itkImageSS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,short > *

        """
        return _itkImagePython.itkImageSS2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkImagePython.itkImageSS2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short > > const
        """
        return _itkImagePython.itkImageSS2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSS2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSS2

        Create a new object of the class itkImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSS2 in _itkImagePython:
_itkImagePython.itkImageSS2_swigregister(itkImageSS2)

def itkImageSS3_New():
    return itkImageSS3.New()

class itkImageSS3(itkImageBase3):
    r"""Proxy of C++ itkImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSS3_Pointer"""
        return _itkImagePython.itkImageSS3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSS3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkImagePython.itkImageSS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: short const &

        """
        return _itkImagePython.itkImageSS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageSS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkImagePython.itkImageSS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,short > *

        """
        return _itkImagePython.itkImageSS3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkImagePython.itkImageSS3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,3 > > const
        """
        return _itkImagePython.itkImageSS3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSS3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSS3

        Create a new object of the class itkImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSS3 in _itkImagePython:
_itkImagePython.itkImageSS3_swigregister(itkImageSS3)

def itkImageSS4_New():
    return itkImageSS4.New()

class itkImageSS4(itkImageBase4):
    r"""Proxy of C++ itkImageSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSS4_Pointer"""
        return _itkImagePython.itkImageSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSS4_Pointer"""
        return _itkImagePython.itkImageSS4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSS4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkImagePython.itkImageSS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: short const &

        """
        return _itkImagePython.itkImageSS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageSS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkImagePython.itkImageSS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,short > const *
        """
        return _itkImagePython.itkImageSS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,short > *

        """
        return _itkImagePython.itkImageSS4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkImagePython.itkImageSS4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkImagePython.itkImageSS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< short,4 > > const
        """
        return _itkImagePython.itkImageSS4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSS4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSS4

        Create a new object of the class itkImageSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSS4 in _itkImagePython:
_itkImagePython.itkImageSS4_swigregister(itkImageSS4)

def itkImageSSRTD22_New():
    return itkImageSSRTD22.New()

class itkImageSSRTD22(itkImageBase2):
    r"""Proxy of C++ itkImageSSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTD22_Pointer"""
        return _itkImagePython.itkImageSSRTD22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTD22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkImagePython.itkImageSSRTD22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkImagePython.itkImageSSRTD22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageSSRTD22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD2
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD2
        """
        return _itkImagePython.itkImageSSRTD22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > const *
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,2 > > *

        """
        return _itkImagePython.itkImageSSRTD22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTD22 const *

        """
        return _itkImagePython.itkImageSSRTD22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,2 > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,2 > > > const
        """
        return _itkImagePython.itkImageSSRTD22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTD22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD22

        Create a new object of the class itkImageSSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTD22 in _itkImagePython:
_itkImagePython.itkImageSSRTD22_swigregister(itkImageSSRTD22)

def itkImageSSRTD33_New():
    return itkImageSSRTD33.New()

class itkImageSSRTD33(itkImageBase3):
    r"""Proxy of C++ itkImageSSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTD33_Pointer"""
        return _itkImagePython.itkImageSSRTD33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTD33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkImagePython.itkImageSSRTD33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkImagePython.itkImageSSRTD33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageSSRTD33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD3
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD3
        """
        return _itkImagePython.itkImageSSRTD33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double > > const *
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double > > *

        """
        return _itkImagePython.itkImageSSRTD33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTD33 const *

        """
        return _itkImagePython.itkImageSSRTD33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double >,3 > > const
        """
        return _itkImagePython.itkImageSSRTD33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTD33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD33

        Create a new object of the class itkImageSSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTD33 in _itkImagePython:
_itkImagePython.itkImageSSRTD33_swigregister(itkImageSSRTD33)

def itkImageSSRTD44_New():
    return itkImageSSRTD44.New()

class itkImageSSRTD44(itkImageBase4):
    r"""Proxy of C++ itkImageSSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTD44_Pointer"""
        return _itkImagePython.itkImageSSRTD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTD44_Pointer"""
        return _itkImagePython.itkImageSSRTD44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTD44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkImagePython.itkImageSSRTD44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkImagePython.itkImageSSRTD44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageSSRTD44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD4
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorD4
        """
        return _itkImagePython.itkImageSSRTD44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,4 > > const *
        """
        return _itkImagePython.itkImageSSRTD44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< double,4 > > *

        """
        return _itkImagePython.itkImageSSRTD44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTD44 const *

        """
        return _itkImagePython.itkImageSSRTD44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double,4 > > const
        """
        return _itkImagePython.itkImageSSRTD44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageSSRTD44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTD44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTD44

        Create a new object of the class itkImageSSRTD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTD44 in _itkImagePython:
_itkImagePython.itkImageSSRTD44_swigregister(itkImageSSRTD44)

def itkImageSSRTF22_New():
    return itkImageSSRTF22.New()

class itkImageSSRTF22(itkImageBase2):
    r"""Proxy of C++ itkImageSSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTF22_Pointer"""
        return _itkImagePython.itkImageSSRTF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTF22_Pointer"""
        return _itkImagePython.itkImageSSRTF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkImagePython.itkImageSSRTF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkImagePython.itkImageSSRTF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageSSRTF22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF2
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF2
        """
        return _itkImagePython.itkImageSSRTF22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,2 > > const *
        """
        return _itkImagePython.itkImageSSRTF22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,2 > > *

        """
        return _itkImagePython.itkImageSSRTF22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTF22 const *

        """
        return _itkImagePython.itkImageSSRTF22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float,2 > > const
        """
        return _itkImagePython.itkImageSSRTF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float,2 > > > const
        """
        return _itkImagePython.itkImageSSRTF22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTF22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTF22

        Create a new object of the class itkImageSSRTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTF22 in _itkImagePython:
_itkImagePython.itkImageSSRTF22_swigregister(itkImageSSRTF22)

def itkImageSSRTF33_New():
    return itkImageSSRTF33.New()

class itkImageSSRTF33(itkImageBase3):
    r"""Proxy of C++ itkImageSSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTF33_Pointer"""
        return _itkImagePython.itkImageSSRTF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTF33_Pointer"""
        return _itkImagePython.itkImageSSRTF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkImagePython.itkImageSSRTF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkImagePython.itkImageSSRTF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageSSRTF33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF3
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF3
        """
        return _itkImagePython.itkImageSSRTF33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float > > const *
        """
        return _itkImagePython.itkImageSSRTF33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float > > *

        """
        return _itkImagePython.itkImageSSRTF33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTF33 const *

        """
        return _itkImagePython.itkImageSSRTF33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float > > const
        """
        return _itkImagePython.itkImageSSRTF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float >,3 > > const
        """
        return _itkImagePython.itkImageSSRTF33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTF33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTF33

        Create a new object of the class itkImageSSRTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTF33 in _itkImagePython:
_itkImagePython.itkImageSSRTF33_swigregister(itkImageSSRTF33)

def itkImageSSRTF44_New():
    return itkImageSSRTF44.New()

class itkImageSSRTF44(itkImageBase4):
    r"""Proxy of C++ itkImageSSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageSSRTF44_Pointer"""
        return _itkImagePython.itkImageSSRTF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageSSRTF44_Pointer"""
        return _itkImagePython.itkImageSSRTF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageSSRTF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkImagePython.itkImageSSRTF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkImagePython.itkImageSSRTF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageSSRTF44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF4
        GetBufferPointer(self) -> itkSymmetricSecondRankTensorF4
        """
        return _itkImagePython.itkImageSSRTF44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,4 > > const *
        """
        return _itkImagePython.itkImageSSRTF44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::SymmetricSecondRankTensor< float,4 > > *

        """
        return _itkImagePython.itkImageSSRTF44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageSSRTF44 const *

        """
        return _itkImagePython.itkImageSSRTF44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< float,4 > > const
        """
        return _itkImagePython.itkImageSSRTF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< float,4 >,4 > > const
        """
        return _itkImagePython.itkImageSSRTF44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageSSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageSSRTF44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageSSRTF44

        Create a new object of the class itkImageSSRTF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSSRTF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageSSRTF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageSSRTF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSSRTF44 in _itkImagePython:
_itkImagePython.itkImageSSRTF44_swigregister(itkImageSSRTF44)

def itkImageUC2_New():
    return itkImageUC2.New()

class itkImageUC2(itkImageBase2):
    r"""Proxy of C++ itkImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUC2_Pointer"""
        return _itkImagePython.itkImageUC2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUC2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageUC2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned char > *

        """
        return _itkImagePython.itkImageUC2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkImagePython.itkImageUC2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char > > const
        """
        return _itkImagePython.itkImageUC2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUC2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC2

        Create a new object of the class itkImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC2 in _itkImagePython:
_itkImagePython.itkImageUC2_swigregister(itkImageUC2)

def itkImageUC3_New():
    return itkImageUC3.New()

class itkImageUC3(itkImageBase3):
    r"""Proxy of C++ itkImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUC3_Pointer"""
        return _itkImagePython.itkImageUC3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUC3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageUC3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned char > *

        """
        return _itkImagePython.itkImageUC3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkImagePython.itkImageUC3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,3 > > const
        """
        return _itkImagePython.itkImageUC3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUC3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC3

        Create a new object of the class itkImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC3 in _itkImagePython:
_itkImagePython.itkImageUC3_swigregister(itkImageUC3)

def itkImageUC4_New():
    return itkImageUC4.New()

class itkImageUC4(itkImageBase4):
    r"""Proxy of C++ itkImageUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUC4_Pointer"""
        return _itkImagePython.itkImageUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUC4_Pointer"""
        return _itkImagePython.itkImageUC4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUC4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned char const &

        """
        return _itkImagePython.itkImageUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageUC4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkImagePython.itkImageUC4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned char > const *
        """
        return _itkImagePython.itkImageUC4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned char > *

        """
        return _itkImagePython.itkImageUC4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkImagePython.itkImageUC4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImagePython.itkImageUC4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,4 > > const
        """
        return _itkImagePython.itkImageUC4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUC4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC4

        Create a new object of the class itkImageUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC4 in _itkImagePython:
_itkImagePython.itkImageUC4_swigregister(itkImageUC4)

def itkImageUI2_New():
    return itkImageUI2.New()

class itkImageUI2(itkImageBase2):
    r"""Proxy of C++ itkImageUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUI2_Pointer"""
        return _itkImagePython.itkImageUI2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUI2_Pointer"""
        return _itkImagePython.itkImageUI2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUI2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned int const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned int &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageUI2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned int
        GetBufferPointer(self) -> unsigned int const *
        """
        return _itkImagePython.itkImageUI2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int > const *
        """
        return _itkImagePython.itkImageUI2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned int > *

        """
        return _itkImagePython.itkImageUI2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUI2 const *

        """
        return _itkImagePython.itkImageUI2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int > const
        """
        return _itkImagePython.itkImageUI2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int > > const
        """
        return _itkImagePython.itkImageUI2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUI2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUI2

        Create a new object of the class itkImageUI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUI2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUI2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUI2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUI2 in _itkImagePython:
_itkImagePython.itkImageUI2_swigregister(itkImageUI2)

def itkImageUI3_New():
    return itkImageUI3.New()

class itkImageUI3(itkImageBase3):
    r"""Proxy of C++ itkImageUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUI3_Pointer"""
        return _itkImagePython.itkImageUI3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUI3_Pointer"""
        return _itkImagePython.itkImageUI3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUI3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned int const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned int &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageUI3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned int
        GetBufferPointer(self) -> unsigned int const *
        """
        return _itkImagePython.itkImageUI3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int > const *
        """
        return _itkImagePython.itkImageUI3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned int > *

        """
        return _itkImagePython.itkImageUI3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUI3 const *

        """
        return _itkImagePython.itkImageUI3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int > const
        """
        return _itkImagePython.itkImageUI3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int,3 > > const
        """
        return _itkImagePython.itkImageUI3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUI3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUI3

        Create a new object of the class itkImageUI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUI3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUI3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUI3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUI3 in _itkImagePython:
_itkImagePython.itkImageUI3_swigregister(itkImageUI3)

def itkImageUI4_New():
    return itkImageUI4.New()

class itkImageUI4(itkImageBase4):
    r"""Proxy of C++ itkImageUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUI4_Pointer"""
        return _itkImagePython.itkImageUI4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUI4_Pointer"""
        return _itkImagePython.itkImageUI4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUI4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned int const &

        """
        return _itkImagePython.itkImageUI4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned int const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned int &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageUI4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned int
        GetBufferPointer(self) -> unsigned int const *
        """
        return _itkImagePython.itkImageUI4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned int > const *
        """
        return _itkImagePython.itkImageUI4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned int > *

        """
        return _itkImagePython.itkImageUI4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUI4 const *

        """
        return _itkImagePython.itkImageUI4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned int > const
        """
        return _itkImagePython.itkImageUI4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned int,4 > > const
        """
        return _itkImagePython.itkImageUI4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUI4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUI4

        Create a new object of the class itkImageUI4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUI4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUI4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUI4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUI4 in _itkImagePython:
_itkImagePython.itkImageUI4_swigregister(itkImageUI4)

def itkImageUL2_New():
    return itkImageUL2.New()

class itkImageUL2(itkImageBase2):
    r"""Proxy of C++ itkImageUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUL2_Pointer"""
        return _itkImagePython.itkImageUL2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUL2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageUL2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long > *

        """
        return _itkImagePython.itkImageUL2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUL2 const *

        """
        return _itkImagePython.itkImageUL2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long > > const
        """
        return _itkImagePython.itkImageUL2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUL2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUL2

        Create a new object of the class itkImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUL2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUL2 in _itkImagePython:
_itkImagePython.itkImageUL2_swigregister(itkImageUL2)

def itkImageUL3_New():
    return itkImageUL3.New()

class itkImageUL3(itkImageBase3):
    r"""Proxy of C++ itkImageUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUL3_Pointer"""
        return _itkImagePython.itkImageUL3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUL3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageUL3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long > *

        """
        return _itkImagePython.itkImageUL3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUL3 const *

        """
        return _itkImagePython.itkImageUL3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,3 > > const
        """
        return _itkImagePython.itkImageUL3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUL3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUL3

        Create a new object of the class itkImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUL3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUL3 in _itkImagePython:
_itkImagePython.itkImageUL3_swigregister(itkImageUL3)

def itkImageUL4_New():
    return itkImageUL4.New()

class itkImageUL4(itkImageBase4):
    r"""Proxy of C++ itkImageUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUL4_Pointer"""
        return _itkImagePython.itkImageUL4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUL4_Pointer"""
        return _itkImagePython.itkImageUL4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUL4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned long const &

        """
        return _itkImagePython.itkImageUL4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageUL4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkImagePython.itkImageUL4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long > const *
        """
        return _itkImagePython.itkImageUL4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long > *

        """
        return _itkImagePython.itkImageUL4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUL4 const *

        """
        return _itkImagePython.itkImageUL4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkImagePython.itkImageUL4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long,4 > > const
        """
        return _itkImagePython.itkImageUL4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUL4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUL4

        Create a new object of the class itkImageUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUL4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUL4 in _itkImagePython:
_itkImagePython.itkImageUL4_swigregister(itkImageUL4)

def itkImageULL2_New():
    return itkImageULL2.New()

class itkImageULL2(itkImageBase2):
    r"""Proxy of C++ itkImageULL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageULL2_Pointer"""
        return _itkImagePython.itkImageULL2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageULL2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long long const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned long long &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageULL2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long long
        GetBufferPointer(self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long long > *

        """
        return _itkImagePython.itkImageULL2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageULL2 const *

        """
        return _itkImagePython.itkImageULL2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long > > const
        """
        return _itkImagePython.itkImageULL2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageULL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageULL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageULL2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageULL2

        Create a new object of the class itkImageULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageULL2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageULL2 in _itkImagePython:
_itkImagePython.itkImageULL2_swigregister(itkImageULL2)

def itkImageULL3_New():
    return itkImageULL3.New()

class itkImageULL3(itkImageBase3):
    r"""Proxy of C++ itkImageULL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageULL3_Pointer"""
        return _itkImagePython.itkImageULL3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageULL3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long long const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned long long &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageULL3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long long
        GetBufferPointer(self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long long > *

        """
        return _itkImagePython.itkImageULL3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageULL3 const *

        """
        return _itkImagePython.itkImageULL3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,3 > > const
        """
        return _itkImagePython.itkImageULL3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageULL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageULL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageULL3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageULL3

        Create a new object of the class itkImageULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageULL3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageULL3 in _itkImagePython:
_itkImagePython.itkImageULL3_swigregister(itkImageULL3)

def itkImageULL4_New():
    return itkImageULL4.New()

class itkImageULL4(itkImageBase4):
    r"""Proxy of C++ itkImageULL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageULL4_Pointer"""
        return _itkImagePython.itkImageULL4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageULL4_Pointer"""
        return _itkImagePython.itkImageULL4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageULL4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned long long const &

        """
        return _itkImagePython.itkImageULL4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long long const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned long long &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageULL4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long long
        GetBufferPointer(self) -> unsigned long long const *
        """
        return _itkImagePython.itkImageULL4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned long long > const *
        """
        return _itkImagePython.itkImageULL4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned long long > *

        """
        return _itkImagePython.itkImageULL4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageULL4 const *

        """
        return _itkImagePython.itkImageULL4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long long > const
        """
        return _itkImagePython.itkImageULL4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long long,4 > > const
        """
        return _itkImagePython.itkImageULL4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageULL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageULL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageULL4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageULL4

        Create a new object of the class itkImageULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageULL4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageULL4 in _itkImagePython:
_itkImagePython.itkImageULL4_swigregister(itkImageULL4)

def itkImageUS2_New():
    return itkImageUS2.New()

class itkImageUS2(itkImageBase2):
    r"""Proxy of C++ itkImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUS2_Pointer"""
        return _itkImagePython.itkImageUS2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUS2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageUS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned short > *

        """
        return _itkImagePython.itkImageUS2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkImagePython.itkImageUS2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short > > const
        """
        return _itkImagePython.itkImageUS2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUS2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS2

        Create a new object of the class itkImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS2 in _itkImagePython:
_itkImagePython.itkImageUS2_swigregister(itkImageUS2)

def itkImageUS3_New():
    return itkImageUS3.New()

class itkImageUS3(itkImageBase3):
    r"""Proxy of C++ itkImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUS3_Pointer"""
        return _itkImagePython.itkImageUS3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUS3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageUS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned short > *

        """
        return _itkImagePython.itkImageUS3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkImagePython.itkImageUS3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,3 > > const
        """
        return _itkImagePython.itkImageUS3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUS3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS3

        Create a new object of the class itkImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS3 in _itkImagePython:
_itkImagePython.itkImageUS3_swigregister(itkImageUS3)

def itkImageUS4_New():
    return itkImageUS4.New()

class itkImageUS4(itkImageBase4):
    r"""Proxy of C++ itkImageUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUS4_Pointer"""
        return _itkImagePython.itkImageUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUS4_Pointer"""
        return _itkImagePython.itkImageUS4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageUS4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned short const &

        """
        return _itkImagePython.itkImageUS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageUS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkImagePython.itkImageUS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,unsigned short > const *
        """
        return _itkImagePython.itkImageUS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,unsigned short > *

        """
        return _itkImagePython.itkImageUS4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkImagePython.itkImageUS4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImagePython.itkImageUS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,4 > > const
        """
        return _itkImagePython.itkImageUS4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageUS4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS4

        Create a new object of the class itkImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS4 in _itkImagePython:
_itkImagePython.itkImageUS4_swigregister(itkImageUS4)

def itkImageVD22_New():
    return itkImageVD22.New()

class itkImageVD22(itkImageBase2):
    r"""Proxy of C++ itkImageVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD22_Pointer"""
        return _itkImagePython.itkImageVD22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVD22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD2
        GetBufferPointer(self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *

        """
        return _itkImagePython.itkImageVD22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD22 const *

        """
        return _itkImagePython.itkImageVD22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 > > > const
        """
        return _itkImagePython.itkImageVD22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD22

        Create a new object of the class itkImageVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD22 in _itkImagePython:
_itkImagePython.itkImageVD22_swigregister(itkImageVD22)

def itkImageVD23_New():
    return itkImageVD23.New()

class itkImageVD23(itkImageBase3):
    r"""Proxy of C++ itkImageVD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD23_Pointer"""
        return _itkImagePython.itkImageVD23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVD23_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD2
        GetBufferPointer(self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD23_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD23_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *

        """
        return _itkImagePython.itkImageVD23_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD23 const *

        """
        return _itkImagePython.itkImageVD23_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,3 > > const
        """
        return _itkImagePython.itkImageVD23_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD23_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD23

        Create a new object of the class itkImageVD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD23 in _itkImagePython:
_itkImagePython.itkImageVD23_swigregister(itkImageVD23)

def itkImageVD24_New():
    return itkImageVD24.New()

class itkImageVD24(itkImageBase4):
    r"""Proxy of C++ itkImageVD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD24_Pointer"""
        return _itkImagePython.itkImageVD24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVD24_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD2
        GetBufferPointer(self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD24_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD24_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *

        """
        return _itkImagePython.itkImageVD24_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD24 const *

        """
        return _itkImagePython.itkImageVD24_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,4 > > const
        """
        return _itkImagePython.itkImageVD24_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD24_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD24

        Create a new object of the class itkImageVD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD24 in _itkImagePython:
_itkImagePython.itkImageVD24_swigregister(itkImageVD24)

def itkImageVD25_New():
    return itkImageVD25.New()

class itkImageVD25(itkImageBase5):
    r"""Proxy of C++ itkImageVD25 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD25_Pointer"""
        return _itkImagePython.itkImageVD25___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD25_Pointer"""
        return _itkImagePython.itkImageVD25_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD25_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD25_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex5 const &
        value: itkVectorD2 const &

        """
        return _itkImagePython.itkImageVD25_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex5 const &

        GetPixel(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex5 const &

        """
        return _itkImagePython.itkImageVD25_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD2
        GetBufferPointer(self) -> itkVectorD2
        """
        return _itkImagePython.itkImageVD25_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > const *
        """
        return _itkImagePython.itkImageVD25_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,2 > > *

        """
        return _itkImagePython.itkImageVD25_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD25 const *

        """
        return _itkImagePython.itkImageVD25_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,2 > > const
        """
        return _itkImagePython.itkImageVD25_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,5 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,2 >,5 > > const
        """
        return _itkImagePython.itkImageVD25_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD25

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD25

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD25_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD25

        Create a new object of the class itkImageVD25 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD25.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD25.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD25.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD25 in _itkImagePython:
_itkImagePython.itkImageVD25_swigregister(itkImageVD25)

def itkImageVD32_New():
    return itkImageVD32.New()

class itkImageVD32(itkImageBase2):
    r"""Proxy of C++ itkImageVD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD32_Pointer"""
        return _itkImagePython.itkImageVD32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVD32_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD3
        GetBufferPointer(self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD32_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > > const *
        """
        return _itkImagePython.itkImageVD32_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double > > *

        """
        return _itkImagePython.itkImageVD32_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD32 const *

        """
        return _itkImagePython.itkImageVD32_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > > const
        """
        return _itkImagePython.itkImageVD32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double > > > const
        """
        return _itkImagePython.itkImageVD32_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD32_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD32

        Create a new object of the class itkImageVD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD32 in _itkImagePython:
_itkImagePython.itkImageVD32_swigregister(itkImageVD32)

def itkImageVD33_New():
    return itkImageVD33.New()

class itkImageVD33(itkImageBase3):
    r"""Proxy of C++ itkImageVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD33_Pointer"""
        return _itkImagePython.itkImageVD33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVD33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD3
        GetBufferPointer(self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > > const *
        """
        return _itkImagePython.itkImageVD33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double > > *

        """
        return _itkImagePython.itkImageVD33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD33 const *

        """
        return _itkImagePython.itkImageVD33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > > const
        """
        return _itkImagePython.itkImageVD33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,3 > > const
        """
        return _itkImagePython.itkImageVD33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD33

        Create a new object of the class itkImageVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD33 in _itkImagePython:
_itkImagePython.itkImageVD33_swigregister(itkImageVD33)

def itkImageVD34_New():
    return itkImageVD34.New()

class itkImageVD34(itkImageBase4):
    r"""Proxy of C++ itkImageVD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD34_Pointer"""
        return _itkImagePython.itkImageVD34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVD34_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD3
        GetBufferPointer(self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD34_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > > const *
        """
        return _itkImagePython.itkImageVD34_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double > > *

        """
        return _itkImagePython.itkImageVD34_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD34 const *

        """
        return _itkImagePython.itkImageVD34_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > > const
        """
        return _itkImagePython.itkImageVD34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,4 > > const
        """
        return _itkImagePython.itkImageVD34_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD34_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD34

        Create a new object of the class itkImageVD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD34 in _itkImagePython:
_itkImagePython.itkImageVD34_swigregister(itkImageVD34)

def itkImageVD35_New():
    return itkImageVD35.New()

class itkImageVD35(itkImageBase5):
    r"""Proxy of C++ itkImageVD35 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD35_Pointer"""
        return _itkImagePython.itkImageVD35___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD35_Pointer"""
        return _itkImagePython.itkImageVD35_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD35_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD35_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex5 const &
        value: itkVectorD3 const &

        """
        return _itkImagePython.itkImageVD35_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex5 const &

        GetPixel(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex5 const &

        """
        return _itkImagePython.itkImageVD35_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD3
        GetBufferPointer(self) -> itkVectorD3
        """
        return _itkImagePython.itkImageVD35_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double > > const *
        """
        return _itkImagePython.itkImageVD35_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double > > *

        """
        return _itkImagePython.itkImageVD35_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD35 const *

        """
        return _itkImagePython.itkImageVD35_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double > > const
        """
        return _itkImagePython.itkImageVD35_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,5 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double >,5 > > const
        """
        return _itkImagePython.itkImageVD35_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD35

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD35

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD35_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD35

        Create a new object of the class itkImageVD35 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD35.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD35.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD35.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD35 in _itkImagePython:
_itkImagePython.itkImageVD35_swigregister(itkImageVD35)

def itkImageVD42_New():
    return itkImageVD42.New()

class itkImageVD42(itkImageBase2):
    r"""Proxy of C++ itkImageVD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD42_Pointer"""
        return _itkImagePython.itkImageVD42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVD42_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD4
        GetBufferPointer(self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD42_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD42_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *

        """
        return _itkImagePython.itkImageVD42_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD42 const *

        """
        return _itkImagePython.itkImageVD42_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 > > > const
        """
        return _itkImagePython.itkImageVD42_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD42_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD42

        Create a new object of the class itkImageVD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD42 in _itkImagePython:
_itkImagePython.itkImageVD42_swigregister(itkImageVD42)

def itkImageVD43_New():
    return itkImageVD43.New()

class itkImageVD43(itkImageBase3):
    r"""Proxy of C++ itkImageVD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD43_Pointer"""
        return _itkImagePython.itkImageVD43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVD43_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD4
        GetBufferPointer(self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD43_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD43_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *

        """
        return _itkImagePython.itkImageVD43_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD43 const *

        """
        return _itkImagePython.itkImageVD43_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,3 > > const
        """
        return _itkImagePython.itkImageVD43_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD43_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD43

        Create a new object of the class itkImageVD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD43 in _itkImagePython:
_itkImagePython.itkImageVD43_swigregister(itkImageVD43)

def itkImageVD44_New():
    return itkImageVD44.New()

class itkImageVD44(itkImageBase4):
    r"""Proxy of C++ itkImageVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD44_Pointer"""
        return _itkImagePython.itkImageVD44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVD44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD4
        GetBufferPointer(self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *

        """
        return _itkImagePython.itkImageVD44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD44 const *

        """
        return _itkImagePython.itkImageVD44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,4 > > const
        """
        return _itkImagePython.itkImageVD44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD44

        Create a new object of the class itkImageVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD44 in _itkImagePython:
_itkImagePython.itkImageVD44_swigregister(itkImageVD44)

def itkImageVD45_New():
    return itkImageVD45.New()

class itkImageVD45(itkImageBase5):
    r"""Proxy of C++ itkImageVD45 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVD45_Pointer"""
        return _itkImagePython.itkImageVD45___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVD45_Pointer"""
        return _itkImagePython.itkImageVD45_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVD45_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD45_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex5 const &
        value: itkVectorD4 const &

        """
        return _itkImagePython.itkImageVD45_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex5 const &

        GetPixel(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex5 const &

        """
        return _itkImagePython.itkImageVD45_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorD4
        GetBufferPointer(self) -> itkVectorD4
        """
        return _itkImagePython.itkImageVD45_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > const *
        """
        return _itkImagePython.itkImageVD45_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< double,4 > > *

        """
        return _itkImagePython.itkImageVD45_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVD45 const *

        """
        return _itkImagePython.itkImageVD45_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< double,4 > > const
        """
        return _itkImagePython.itkImageVD45_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,5 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< double,4 >,5 > > const
        """
        return _itkImagePython.itkImageVD45_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVD45

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVD45

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVD45_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVD45

        Create a new object of the class itkImageVD45 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVD45.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVD45.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVD45.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVD45 in _itkImagePython:
_itkImagePython.itkImageVD45_swigregister(itkImageVD45)

def itkImageVF12_New():
    return itkImageVF12.New()

class itkImageVF12(itkImageBase2):
    r"""Proxy of C++ itkImageVF12 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF12_Pointer"""
        return _itkImagePython.itkImageVF12_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF12_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF12_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF12_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVF12_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF1
        GetBufferPointer(self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF12_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF12_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > *

        """
        return _itkImagePython.itkImageVF12_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF12 const *

        """
        return _itkImagePython.itkImageVF12_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF12_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 > > > const
        """
        return _itkImagePython.itkImageVF12_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF12

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF12

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF12_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF12

        Create a new object of the class itkImageVF12 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF12.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF12.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF12.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF12 in _itkImagePython:
_itkImagePython.itkImageVF12_swigregister(itkImageVF12)

def itkImageVF13_New():
    return itkImageVF13.New()

class itkImageVF13(itkImageBase3):
    r"""Proxy of C++ itkImageVF13 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF13_Pointer"""
        return _itkImagePython.itkImageVF13_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF13_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF13_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF13_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVF13_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF1
        GetBufferPointer(self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF13_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF13_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > *

        """
        return _itkImagePython.itkImageVF13_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF13 const *

        """
        return _itkImagePython.itkImageVF13_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF13_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,3 > > const
        """
        return _itkImagePython.itkImageVF13_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF13

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF13

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF13_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF13

        Create a new object of the class itkImageVF13 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF13.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF13.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF13.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF13 in _itkImagePython:
_itkImagePython.itkImageVF13_swigregister(itkImageVF13)

def itkImageVF14_New():
    return itkImageVF14.New()

class itkImageVF14(itkImageBase4):
    r"""Proxy of C++ itkImageVF14 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF14_Pointer"""
        return _itkImagePython.itkImageVF14___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF14_Pointer"""
        return _itkImagePython.itkImageVF14_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF14_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF14_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF1 const &

        """
        return _itkImagePython.itkImageVF14_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF1

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVF14_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF1
        GetBufferPointer(self) -> itkVectorF1
        """
        return _itkImagePython.itkImageVF14_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > const *
        """
        return _itkImagePython.itkImageVF14_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,1 > > *

        """
        return _itkImagePython.itkImageVF14_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF14 const *

        """
        return _itkImagePython.itkImageVF14_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,1 > > const
        """
        return _itkImagePython.itkImageVF14_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,1 >,4 > > const
        """
        return _itkImagePython.itkImageVF14_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF14

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF14

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF14_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF14

        Create a new object of the class itkImageVF14 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF14.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF14.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF14.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF14 in _itkImagePython:
_itkImagePython.itkImageVF14_swigregister(itkImageVF14)

def itkImageVF22_New():
    return itkImageVF22.New()

class itkImageVF22(itkImageBase2):
    r"""Proxy of C++ itkImageVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF22_Pointer"""
        return _itkImagePython.itkImageVF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVF22_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF22_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF22_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > *

        """
        return _itkImagePython.itkImageVF22_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF22 const *

        """
        return _itkImagePython.itkImageVF22_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 > > > const
        """
        return _itkImagePython.itkImageVF22_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF22_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF22

        Create a new object of the class itkImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF22 in _itkImagePython:
_itkImagePython.itkImageVF22_swigregister(itkImageVF22)

def itkImageVF23_New():
    return itkImageVF23.New()

class itkImageVF23(itkImageBase3):
    r"""Proxy of C++ itkImageVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF23_Pointer"""
        return _itkImagePython.itkImageVF23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVF23_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF23_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF23_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > *

        """
        return _itkImagePython.itkImageVF23_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF23 const *

        """
        return _itkImagePython.itkImageVF23_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,3 > > const
        """
        return _itkImagePython.itkImageVF23_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF23_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF23

        Create a new object of the class itkImageVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF23 in _itkImagePython:
_itkImagePython.itkImageVF23_swigregister(itkImageVF23)

def itkImageVF24_New():
    return itkImageVF24.New()

class itkImageVF24(itkImageBase4):
    r"""Proxy of C++ itkImageVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF24_Pointer"""
        return _itkImagePython.itkImageVF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF24_Pointer"""
        return _itkImagePython.itkImageVF24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF2 const &

        """
        return _itkImagePython.itkImageVF24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVF24_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkImagePython.itkImageVF24_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > const *
        """
        return _itkImagePython.itkImageVF24_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,2 > > *

        """
        return _itkImagePython.itkImageVF24_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF24 const *

        """
        return _itkImagePython.itkImageVF24_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkImagePython.itkImageVF24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,2 >,4 > > const
        """
        return _itkImagePython.itkImageVF24_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF24_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF24

        Create a new object of the class itkImageVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF24 in _itkImagePython:
_itkImagePython.itkImageVF24_swigregister(itkImageVF24)

def itkImageVF32_New():
    return itkImageVF32.New()

class itkImageVF32(itkImageBase2):
    r"""Proxy of C++ itkImageVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF32_Pointer"""
        return _itkImagePython.itkImageVF32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVF32_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF32_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > > const *
        """
        return _itkImagePython.itkImageVF32_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float > > *

        """
        return _itkImagePython.itkImageVF32_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF32 const *

        """
        return _itkImagePython.itkImageVF32_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkImagePython.itkImageVF32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float > > > const
        """
        return _itkImagePython.itkImageVF32_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF32_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF32

        Create a new object of the class itkImageVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF32 in _itkImagePython:
_itkImagePython.itkImageVF32_swigregister(itkImageVF32)

def itkImageVF33_New():
    return itkImageVF33.New()

class itkImageVF33(itkImageBase3):
    r"""Proxy of C++ itkImageVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF33_Pointer"""
        return _itkImagePython.itkImageVF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVF33_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF33_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > > const *
        """
        return _itkImagePython.itkImageVF33_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float > > *

        """
        return _itkImagePython.itkImageVF33_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF33 const *

        """
        return _itkImagePython.itkImageVF33_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkImagePython.itkImageVF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float >,3 > > const
        """
        return _itkImagePython.itkImageVF33_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF33_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF33

        Create a new object of the class itkImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF33 in _itkImagePython:
_itkImagePython.itkImageVF33_swigregister(itkImageVF33)

def itkImageVF34_New():
    return itkImageVF34.New()

class itkImageVF34(itkImageBase4):
    r"""Proxy of C++ itkImageVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF34_Pointer"""
        return _itkImagePython.itkImageVF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF34_Pointer"""
        return _itkImagePython.itkImageVF34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF3 const &

        """
        return _itkImagePython.itkImageVF34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVF34_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkImagePython.itkImageVF34_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float > > const *
        """
        return _itkImagePython.itkImageVF34_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float > > *

        """
        return _itkImagePython.itkImageVF34_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF34 const *

        """
        return _itkImagePython.itkImageVF34_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkImagePython.itkImageVF34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float >,4 > > const
        """
        return _itkImagePython.itkImageVF34_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF34_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF34

        Create a new object of the class itkImageVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF34 in _itkImagePython:
_itkImagePython.itkImageVF34_swigregister(itkImageVF34)

def itkImageVF42_New():
    return itkImageVF42.New()

class itkImageVF42(itkImageBase2):
    r"""Proxy of C++ itkImageVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF42_Pointer"""
        return _itkImagePython.itkImageVF42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageVF42_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF42_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF42_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > *

        """
        return _itkImagePython.itkImageVF42_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF42 const *

        """
        return _itkImagePython.itkImageVF42_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 > > > const
        """
        return _itkImagePython.itkImageVF42_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF42_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF42

        Create a new object of the class itkImageVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF42 in _itkImagePython:
_itkImagePython.itkImageVF42_swigregister(itkImageVF42)

def itkImageVF43_New():
    return itkImageVF43.New()

class itkImageVF43(itkImageBase3):
    r"""Proxy of C++ itkImageVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF43_Pointer"""
        return _itkImagePython.itkImageVF43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageVF43_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF43_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF43_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > *

        """
        return _itkImagePython.itkImageVF43_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF43 const *

        """
        return _itkImagePython.itkImageVF43_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,3 > > const
        """
        return _itkImagePython.itkImageVF43_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF43_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF43

        Create a new object of the class itkImageVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF43 in _itkImagePython:
_itkImagePython.itkImageVF43_swigregister(itkImageVF43)

def itkImageVF44_New():
    return itkImageVF44.New()

class itkImageVF44(itkImageBase4):
    r"""Proxy of C++ itkImageVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF44_Pointer"""
        return _itkImagePython.itkImageVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF44_Pointer"""
        return _itkImagePython.itkImageVF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageVF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF4 const &

        """
        return _itkImagePython.itkImageVF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageVF44_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkImagePython.itkImageVF44_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > const *
        """
        return _itkImagePython.itkImageVF44_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,itk::Vector< float,4 > > *

        """
        return _itkImagePython.itkImageVF44_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF44 const *

        """
        return _itkImagePython.itkImageVF44_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkImagePython.itkImageVF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,4 >,4 > > const
        """
        return _itkImagePython.itkImageVF44_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageVF44_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF44

        Create a new object of the class itkImageVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF44 in _itkImagePython:
_itkImagePython.itkImageVF44_swigregister(itkImageVF44)

def itkImageB2_New():
    return itkImageB2.New()

class itkImageB2(itkImageBase2):
    r"""Proxy of C++ itkImageB2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageB2_Pointer"""
        return _itkImagePython.itkImageB2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageB2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: bool const &

        """
        return _itkImagePython.itkImageB2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: bool const &

        """
        return _itkImagePython.itkImageB2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> bool const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> bool &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImagePython.itkImageB2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> bool
        GetBufferPointer(self) -> bool const *
        """
        return _itkImagePython.itkImageB2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,bool > *

        """
        return _itkImagePython.itkImageB2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageB2 const *

        """
        return _itkImagePython.itkImageB2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool > > const
        """
        return _itkImagePython.itkImageB2_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageB2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageB2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageB2_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageB2

        Create a new object of the class itkImageB2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageB2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageB2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageB2 in _itkImagePython:
_itkImagePython.itkImageB2_swigregister(itkImageB2)

def itkImageB3_New():
    return itkImageB3.New()

class itkImageB3(itkImageBase3):
    r"""Proxy of C++ itkImageB3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageB3_Pointer"""
        return _itkImagePython.itkImageB3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageB3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: bool const &

        """
        return _itkImagePython.itkImageB3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: bool const &

        """
        return _itkImagePython.itkImageB3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> bool const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> bool &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImagePython.itkImageB3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> bool
        GetBufferPointer(self) -> bool const *
        """
        return _itkImagePython.itkImageB3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,bool > *

        """
        return _itkImagePython.itkImageB3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageB3 const *

        """
        return _itkImagePython.itkImageB3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,3 > > const
        """
        return _itkImagePython.itkImageB3_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageB3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageB3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageB3_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageB3

        Create a new object of the class itkImageB3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageB3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageB3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageB3 in _itkImagePython:
_itkImagePython.itkImageB3_swigregister(itkImageB3)

def itkImageB4_New():
    return itkImageB4.New()

class itkImageB4(itkImageBase4):
    r"""Proxy of C++ itkImageB4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageB4_Pointer"""
        return _itkImagePython.itkImageB4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageB4_Pointer"""
        return _itkImagePython.itkImageB4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImagePython.itkImageB4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: bool const &

        """
        return _itkImagePython.itkImageB4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: bool const &

        """
        return _itkImagePython.itkImageB4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> bool const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> bool &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImagePython.itkImageB4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> bool
        GetBufferPointer(self) -> bool const *
        """
        return _itkImagePython.itkImageB4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long long,bool > const *
        """
        return _itkImagePython.itkImageB4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long long,bool > *

        """
        return _itkImagePython.itkImageB4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageB4 const *

        """
        return _itkImagePython.itkImageB4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< bool > const
        """
        return _itkImagePython.itkImageB4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< bool,4 > > const
        """
        return _itkImagePython.itkImageB4_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImagePython.delete_itkImageB4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageB4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImagePython.itkImageB4_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageB4

        Create a new object of the class itkImageB4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageB4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageB4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageB4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageB4 in _itkImagePython:
_itkImagePython.itkImageB4_swigregister(itkImageB4)

