# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_matrix_refPython
else:
    import _vnl_matrix_refPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
class vnl_matrix_refD(itk.vnl_matrixPython.vnl_matrixD):
    r"""Proxy of C++ vnl_matrix_refD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, row, col, datablck) -> vnl_matrix_refD

        Parameters
        ----------
        row: unsigned int
        col: unsigned int
        datablck: double const *

        __init__(self, other) -> vnl_matrix_refD

        Parameters
        ----------
        other: vnl_matrix_refD const &

        """
        _vnl_matrix_refPython.vnl_matrix_refD_swiginit(self, _vnl_matrix_refPython.new_vnl_matrix_refD(*args))
    __swig_destroy__ = _vnl_matrix_refPython.delete_vnl_matrix_refD

    def non_const(self):
        r"""non_const(self) -> vnl_matrix_refD"""
        return _vnl_matrix_refPython.vnl_matrix_refD_non_const(self)

# Register vnl_matrix_refD in _vnl_matrix_refPython:
_vnl_matrix_refPython.vnl_matrix_refD_swigregister(vnl_matrix_refD)
class vnl_matrix_refF(itk.vnl_matrixPython.vnl_matrixF):
    r"""Proxy of C++ vnl_matrix_refF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, row, col, datablck) -> vnl_matrix_refF

        Parameters
        ----------
        row: unsigned int
        col: unsigned int
        datablck: float const *

        __init__(self, other) -> vnl_matrix_refF

        Parameters
        ----------
        other: vnl_matrix_refF const &

        """
        _vnl_matrix_refPython.vnl_matrix_refF_swiginit(self, _vnl_matrix_refPython.new_vnl_matrix_refF(*args))
    __swig_destroy__ = _vnl_matrix_refPython.delete_vnl_matrix_refF

    def non_const(self):
        r"""non_const(self) -> vnl_matrix_refF"""
        return _vnl_matrix_refPython.vnl_matrix_refF_non_const(self)

# Register vnl_matrix_refF in _vnl_matrix_refPython:
_vnl_matrix_refPython.vnl_matrix_refF_swigregister(vnl_matrix_refF)

