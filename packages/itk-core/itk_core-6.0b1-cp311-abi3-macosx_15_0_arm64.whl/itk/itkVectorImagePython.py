# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorImagePython
else:
    import _itkVectorImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def itkVectorImageCD2_New():
    return itkVectorImageCD2.New()

class itkVectorImageCD2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCD2_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCD2_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCD2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageCD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkVectorImagePython.itkVectorImageCD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkVectorImagePython.itkVectorImageCD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkVectorImagePython.itkVectorImageCD2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCD2 const *

        """
        return _itkVectorImagePython.itkVectorImageCD2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > > const
        """
        return _itkVectorImagePython.itkVectorImageCD2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double >,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double >,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageCD2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCD2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCD2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCD2

        Create a new object of the class itkVectorImageCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCD2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCD2_swigregister(itkVectorImageCD2)

def itkVectorImageCD3_New():
    return itkVectorImageCD3.New()

class itkVectorImageCD3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCD3_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCD3_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCD3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageCD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkVectorImagePython.itkVectorImageCD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkVectorImagePython.itkVectorImageCD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkVectorImagePython.itkVectorImageCD3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCD3 const *

        """
        return _itkVectorImagePython.itkVectorImageCD3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > > const
        """
        return _itkVectorImagePython.itkVectorImageCD3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double > > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double > > > const
        """
        return _itkVectorImagePython.itkVectorImageCD3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCD3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCD3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCD3

        Create a new object of the class itkVectorImageCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCD3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCD3_swigregister(itkVectorImageCD3)

def itkVectorImageCD4_New():
    return itkVectorImageCD4.New()

class itkVectorImageCD4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageCD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCD4_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCD4_Pointer"""
        return _itkVectorImagePython.itkVectorImageCD4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCD4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorCD const &

        """
        return _itkVectorImagePython.itkVectorImageCD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorCD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageCD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkVectorImagePython.itkVectorImageCD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkVectorImagePython.itkVectorImageCD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkVectorImagePython.itkVectorImageCD4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCD4 const *

        """
        return _itkVectorImagePython.itkVectorImageCD4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< double > > const
        """
        return _itkVectorImagePython.itkVectorImageCD4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double >,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< double >,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageCD4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCD4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCD4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCD4

        Create a new object of the class itkVectorImageCD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCD4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCD4_swigregister(itkVectorImageCD4)

def itkVectorImageCF2_New():
    return itkVectorImageCF2.New()

class itkVectorImageCF2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCF2_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCF2_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCF2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageCF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkVectorImagePython.itkVectorImageCF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkVectorImagePython.itkVectorImageCF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkVectorImagePython.itkVectorImageCF2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCF2 const *

        """
        return _itkVectorImagePython.itkVectorImageCF2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > > const
        """
        return _itkVectorImagePython.itkVectorImageCF2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float >,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float >,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageCF2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCF2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCF2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCF2

        Create a new object of the class itkVectorImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCF2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCF2_swigregister(itkVectorImageCF2)

def itkVectorImageCF3_New():
    return itkVectorImageCF3.New()

class itkVectorImageCF3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCF3_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCF3_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCF3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageCF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkVectorImagePython.itkVectorImageCF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkVectorImagePython.itkVectorImageCF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkVectorImagePython.itkVectorImageCF3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCF3 const *

        """
        return _itkVectorImagePython.itkVectorImageCF3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > > const
        """
        return _itkVectorImagePython.itkVectorImageCF3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float > > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float > > > const
        """
        return _itkVectorImagePython.itkVectorImageCF3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCF3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCF3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCF3

        Create a new object of the class itkVectorImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCF3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCF3_swigregister(itkVectorImageCF3)

def itkVectorImageCF4_New():
    return itkVectorImageCF4.New()

class itkVectorImageCF4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageCF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageCF4_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageCF4_Pointer"""
        return _itkVectorImagePython.itkVectorImageCF4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageCF4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorCF const &

        """
        return _itkVectorImagePython.itkVectorImageCF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorCF

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageCF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkVectorImagePython.itkVectorImageCF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkVectorImagePython.itkVectorImageCF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkVectorImagePython.itkVectorImageCF4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageCF4 const *

        """
        return _itkVectorImagePython.itkVectorImageCF4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< std::complex< float > > const
        """
        return _itkVectorImagePython.itkVectorImageCF4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< std::complex< float >,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageCF4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageCF4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageCF4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageCF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageCF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageCF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageCF4

        Create a new object of the class itkVectorImageCF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageCF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageCF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageCF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageCF4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageCF4_swigregister(itkVectorImageCF4)

def itkVectorImageD2_New():
    return itkVectorImageD2.New()

class itkVectorImageD2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageD2_Pointer"""
        return _itkVectorImagePython.itkVectorImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageD2_Pointer"""
        return _itkVectorImagePython.itkVectorImageD2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageD2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkVectorImagePython.itkVectorImageD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkVectorImagePython.itkVectorImageD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkVectorImagePython.itkVectorImageD2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageD2 const *

        """
        return _itkVectorImagePython.itkVectorImageD2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double > const
        """
        return _itkVectorImagePython.itkVectorImageD2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageD2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageD2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageD2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageD2

        Create a new object of the class itkVectorImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageD2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageD2_swigregister(itkVectorImageD2)

def itkVectorImageD3_New():
    return itkVectorImageD3.New()

class itkVectorImageD3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageD3_Pointer"""
        return _itkVectorImagePython.itkVectorImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageD3_Pointer"""
        return _itkVectorImagePython.itkVectorImageD3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageD3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkVectorImagePython.itkVectorImageD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkVectorImagePython.itkVectorImageD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkVectorImagePython.itkVectorImageD3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageD3 const *

        """
        return _itkVectorImagePython.itkVectorImageD3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double > const
        """
        return _itkVectorImagePython.itkVectorImageD3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double > > const
        """
        return _itkVectorImagePython.itkVectorImageD3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageD3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageD3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageD3

        Create a new object of the class itkVectorImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageD3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageD3_swigregister(itkVectorImageD3)

def itkVectorImageD4_New():
    return itkVectorImageD4.New()

class itkVectorImageD4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageD4_Pointer"""
        return _itkVectorImagePython.itkVectorImageD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageD4_Pointer"""
        return _itkVectorImagePython.itkVectorImageD4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageD4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorD const &

        """
        return _itkVectorImagePython.itkVectorImageD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkVectorImagePython.itkVectorImageD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkVectorImagePython.itkVectorImageD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkVectorImagePython.itkVectorImageD4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageD4 const *

        """
        return _itkVectorImagePython.itkVectorImageD4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< double > const
        """
        return _itkVectorImagePython.itkVectorImageD4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< double,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageD4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageD4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageD4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageD4

        Create a new object of the class itkVectorImageD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageD4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageD4_swigregister(itkVectorImageD4)

def itkVectorImageF2_New():
    return itkVectorImageF2.New()

class itkVectorImageF2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageF2_Pointer"""
        return _itkVectorImagePython.itkVectorImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageF2_Pointer"""
        return _itkVectorImagePython.itkVectorImageF2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageF2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkVectorImagePython.itkVectorImageF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkVectorImagePython.itkVectorImageF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkVectorImagePython.itkVectorImageF2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageF2 const *

        """
        return _itkVectorImagePython.itkVectorImageF2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float > const
        """
        return _itkVectorImagePython.itkVectorImageF2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageF2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageF2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageF2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageF2

        Create a new object of the class itkVectorImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageF2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageF2_swigregister(itkVectorImageF2)

def itkVectorImageF3_New():
    return itkVectorImageF3.New()

class itkVectorImageF3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageF3_Pointer"""
        return _itkVectorImagePython.itkVectorImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageF3_Pointer"""
        return _itkVectorImagePython.itkVectorImageF3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageF3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkVectorImagePython.itkVectorImageF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkVectorImagePython.itkVectorImageF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkVectorImagePython.itkVectorImageF3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageF3 const *

        """
        return _itkVectorImagePython.itkVectorImageF3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float > const
        """
        return _itkVectorImagePython.itkVectorImageF3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float > > const
        """
        return _itkVectorImagePython.itkVectorImageF3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageF3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageF3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageF3

        Create a new object of the class itkVectorImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageF3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageF3_swigregister(itkVectorImageF3)

def itkVectorImageF4_New():
    return itkVectorImageF4.New()

class itkVectorImageF4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageF4_Pointer"""
        return _itkVectorImagePython.itkVectorImageF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageF4_Pointer"""
        return _itkVectorImagePython.itkVectorImageF4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageF4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorF const &

        """
        return _itkVectorImagePython.itkVectorImageF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorF

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkVectorImagePython.itkVectorImageF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkVectorImagePython.itkVectorImageF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkVectorImagePython.itkVectorImageF4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageF4 const *

        """
        return _itkVectorImagePython.itkVectorImageF4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< float > const
        """
        return _itkVectorImagePython.itkVectorImageF4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageF4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageF4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageF4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageF4

        Create a new object of the class itkVectorImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageF4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageF4_swigregister(itkVectorImageF4)

def itkVectorImageSS2_New():
    return itkVectorImageSS2.New()

class itkVectorImageSS2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageSS2_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageSS2_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageSS2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageSS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkVectorImagePython.itkVectorImageSS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkVectorImagePython.itkVectorImageSS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkVectorImagePython.itkVectorImageSS2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageSS2 const *

        """
        return _itkVectorImagePython.itkVectorImageSS2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short > const
        """
        return _itkVectorImagePython.itkVectorImageSS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageSS2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageSS2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageSS2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageSS2

        Create a new object of the class itkVectorImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageSS2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageSS2_swigregister(itkVectorImageSS2)

def itkVectorImageSS3_New():
    return itkVectorImageSS3.New()

class itkVectorImageSS3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageSS3_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageSS3_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageSS3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageSS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkVectorImagePython.itkVectorImageSS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkVectorImagePython.itkVectorImageSS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkVectorImagePython.itkVectorImageSS3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageSS3 const *

        """
        return _itkVectorImagePython.itkVectorImageSS3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short > const
        """
        return _itkVectorImagePython.itkVectorImageSS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short > > const
        """
        return _itkVectorImagePython.itkVectorImageSS3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageSS3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageSS3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageSS3

        Create a new object of the class itkVectorImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageSS3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageSS3_swigregister(itkVectorImageSS3)

def itkVectorImageSS4_New():
    return itkVectorImageSS4.New()

class itkVectorImageSS4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageSS4_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageSS4_Pointer"""
        return _itkVectorImagePython.itkVectorImageSS4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageSS4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorSS const &

        """
        return _itkVectorImagePython.itkVectorImageSS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorSS

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageSS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkVectorImagePython.itkVectorImageSS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkVectorImagePython.itkVectorImageSS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkVectorImagePython.itkVectorImageSS4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageSS4 const *

        """
        return _itkVectorImagePython.itkVectorImageSS4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< short > const
        """
        return _itkVectorImagePython.itkVectorImageSS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< short,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageSS4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageSS4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageSS4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageSS4

        Create a new object of the class itkVectorImageSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageSS4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageSS4_swigregister(itkVectorImageSS4)

def itkVectorImageUC2_New():
    return itkVectorImageUC2.New()

class itkVectorImageUC2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUC2_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUC2_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUC2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageUC2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkVectorImagePython.itkVectorImageUC2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkVectorImagePython.itkVectorImageUC2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkVectorImagePython.itkVectorImageUC2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUC2 const *

        """
        return _itkVectorImagePython.itkVectorImageUC2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char > const
        """
        return _itkVectorImagePython.itkVectorImageUC2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageUC2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUC2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUC2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUC2

        Create a new object of the class itkVectorImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUC2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUC2_swigregister(itkVectorImageUC2)

def itkVectorImageUC3_New():
    return itkVectorImageUC3.New()

class itkVectorImageUC3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUC3_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUC3_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUC3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageUC3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkVectorImagePython.itkVectorImageUC3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkVectorImagePython.itkVectorImageUC3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkVectorImagePython.itkVectorImageUC3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUC3 const *

        """
        return _itkVectorImagePython.itkVectorImageUC3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char > const
        """
        return _itkVectorImagePython.itkVectorImageUC3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char > > const
        """
        return _itkVectorImagePython.itkVectorImageUC3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUC3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUC3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUC3

        Create a new object of the class itkVectorImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUC3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUC3_swigregister(itkVectorImageUC3)

def itkVectorImageUC4_New():
    return itkVectorImageUC4.New()

class itkVectorImageUC4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUC4_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUC4_Pointer"""
        return _itkVectorImagePython.itkVectorImageUC4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUC4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorUC const &

        """
        return _itkVectorImagePython.itkVectorImageUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorUC

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageUC4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkVectorImagePython.itkVectorImageUC4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkVectorImagePython.itkVectorImageUC4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkVectorImagePython.itkVectorImageUC4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUC4 const *

        """
        return _itkVectorImagePython.itkVectorImageUC4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned char > const
        """
        return _itkVectorImagePython.itkVectorImageUC4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned char,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageUC4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUC4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUC4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUC4

        Create a new object of the class itkVectorImageUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUC4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUC4_swigregister(itkVectorImageUC4)

def itkVectorImageUS2_New():
    return itkVectorImageUS2.New()

class itkVectorImageUS2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkVectorImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUS2_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUS2_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS2_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUS2_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkVectorImagePython.itkVectorImageUS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkVectorImagePython.itkVectorImageUS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkVectorImagePython.itkVectorImageUS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkVectorImagePython.itkVectorImageUS2_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUS2 const *

        """
        return _itkVectorImagePython.itkVectorImageUS2_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short > const
        """
        return _itkVectorImagePython.itkVectorImageUS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short,2 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short,2 > > const
        """
        return _itkVectorImagePython.itkVectorImageUS2_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUS2_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUS2_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUS2

        Create a new object of the class itkVectorImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUS2 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUS2_swigregister(itkVectorImageUS2)

def itkVectorImageUS3_New():
    return itkVectorImageUS3.New()

class itkVectorImageUS3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkVectorImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUS3_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUS3_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS3_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUS3_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkVectorImagePython.itkVectorImageUS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkVectorImagePython.itkVectorImageUS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkVectorImagePython.itkVectorImageUS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkVectorImagePython.itkVectorImageUS3_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUS3 const *

        """
        return _itkVectorImagePython.itkVectorImageUS3_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short > const
        """
        return _itkVectorImagePython.itkVectorImageUS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short > > const
        """
        return _itkVectorImagePython.itkVectorImageUS3_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUS3_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUS3_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUS3

        Create a new object of the class itkVectorImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUS3 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUS3_swigregister(itkVectorImageUS3)

def itkVectorImageUS4_New():
    return itkVectorImageUS4.New()

class itkVectorImageUS4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkVectorImageUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorImageUS4_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorImageUS4_Pointer"""
        return _itkVectorImagePython.itkVectorImageUS4_Clone(self)

    def Allocate(self, UseValueInitialization=False):
        r"""
        Allocate(self, UseValueInitialization=False)

        Parameters
        ----------
        UseValueInitialization: bool

        """
        return _itkVectorImagePython.itkVectorImageUS4_Allocate(self, UseValueInitialization)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVariableLengthVectorUS const &

        """
        return _itkVectorImagePython.itkVectorImageUS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVariableLengthVectorUS

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkVectorImagePython.itkVectorImageUS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkVectorImagePython.itkVectorImageUS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkVectorImagePython.itkVectorImageUS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkVectorImagePython.itkVectorImageUS4_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkVectorImageUS4 const *

        """
        return _itkVectorImagePython.itkVectorImageUS4_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultVectorPixelAccessor< unsigned short > const
        """
        return _itkVectorImagePython.itkVectorImageUS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short,4 > >
        GetNeighborhoodAccessor(self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< unsigned short,4 > > const
        """
        return _itkVectorImagePython.itkVectorImageUS4_GetNeighborhoodAccessor(self, *args)

    def SetVectorLength(self, _arg):
        r"""
        SetVectorLength(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVectorImagePython.itkVectorImageUS4_SetVectorLength(self, _arg)

    def GetVectorLength(self):
        r"""GetVectorLength(self) -> unsigned int const &"""
        return _itkVectorImagePython.itkVectorImageUS4_GetVectorLength(self)
    __swig_destroy__ = _itkVectorImagePython.delete_itkVectorImageUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorImageUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorImagePython.itkVectorImageUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorImageUS4

        Create a new object of the class itkVectorImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorImageUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorImageUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorImageUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorImageUS4 in _itkVectorImagePython:
_itkVectorImagePython.itkVectorImageUS4_swigregister(itkVectorImageUS4)

