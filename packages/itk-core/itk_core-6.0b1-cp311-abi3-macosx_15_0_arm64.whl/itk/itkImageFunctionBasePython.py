# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageFunctionBasePython
else:
    import _itkImageFunctionBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
class itkImageFunctionICVF22CVD2D(itk.itkFunctionBasePython.itkFunctionBasePD2CVD2):
    r"""Proxy of C++ itkImageFunctionICVF22CVD2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22CVD2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF22CVD2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_cast(obj)

# Register itkImageFunctionICVF22CVD2D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF22CVD2D_swigregister(itkImageFunctionICVF22CVD2D)
class itkImageFunctionICVF22DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionICVF22DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF22DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22DD_cast(obj)

# Register itkImageFunctionICVF22DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF22DD_swigregister(itkImageFunctionICVF22DD)
class itkImageFunctionICVF22VD2D(itk.itkFunctionBasePython.itkFunctionBasePD2VD2):
    r"""Proxy of C++ itkImageFunctionICVF22VD2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF22VD2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF22VD2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_cast(obj)

# Register itkImageFunctionICVF22VD2D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF22VD2D_swigregister(itkImageFunctionICVF22VD2D)
class itkImageFunctionICVF33CVD3D(itk.itkFunctionBasePython.itkFunctionBasePD3CVD3):
    r"""Proxy of C++ itkImageFunctionICVF33CVD3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33CVD3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF33CVD3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_cast(obj)

# Register itkImageFunctionICVF33CVD3D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF33CVD3D_swigregister(itkImageFunctionICVF33CVD3D)
class itkImageFunctionICVF33DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionICVF33DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF33DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33DD_cast(obj)

# Register itkImageFunctionICVF33DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF33DD_swigregister(itkImageFunctionICVF33DD)
class itkImageFunctionICVF33VD3D(itk.itkFunctionBasePython.itkFunctionBasePD3VD3):
    r"""Proxy of C++ itkImageFunctionICVF33VD3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF33VD3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF33VD3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_cast(obj)

# Register itkImageFunctionICVF33VD3D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF33VD3D_swigregister(itkImageFunctionICVF33VD3D)
class itkImageFunctionICVF44CVD4D(itk.itkFunctionBasePython.itkFunctionBasePD4CVD4):
    r"""Proxy of C++ itkImageFunctionICVF44CVD4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF44CVD4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF44CVD4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_cast(obj)

# Register itkImageFunctionICVF44CVD4D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF44CVD4D_swigregister(itkImageFunctionICVF44CVD4D)
class itkImageFunctionICVF44DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionICVF44DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF44DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF44DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44DD_cast(obj)

# Register itkImageFunctionICVF44DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF44DD_swigregister(itkImageFunctionICVF44DD)
class itkImageFunctionICVF44VD4D(itk.itkFunctionBasePython.itkFunctionBasePD4VD4):
    r"""Proxy of C++ itkImageFunctionICVF44VD4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageCVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageCVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionICVF44VD4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionICVF44VD4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_cast(obj)

# Register itkImageFunctionICVF44VD4D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionICVF44VD4D_swigregister(itkImageFunctionICVF44VD4D)
class itkImageFunctionID2DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionID2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DD_cast(obj)

# Register itkImageFunctionID2DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID2DD_swigregister(itkImageFunctionID2DD)
class itkImageFunctionID2DF(itk.itkFunctionBasePython.itkFunctionBasePF2D):
    r"""Proxy of C++ itkImageFunctionID2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID2DF_cast(obj)

# Register itkImageFunctionID2DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID2DF_swigregister(itkImageFunctionID2DF)
class itkImageFunctionID3DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionID3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DD_cast(obj)

# Register itkImageFunctionID3DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID3DD_swigregister(itkImageFunctionID3DD)
class itkImageFunctionID3DF(itk.itkFunctionBasePython.itkFunctionBasePF3D):
    r"""Proxy of C++ itkImageFunctionID3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID3DF_cast(obj)

# Register itkImageFunctionID3DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID3DF_swigregister(itkImageFunctionID3DF)
class itkImageFunctionID4DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionID4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DD_cast(obj)

# Register itkImageFunctionID4DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID4DD_swigregister(itkImageFunctionID4DD)
class itkImageFunctionID4DF(itk.itkFunctionBasePython.itkFunctionBasePF4D):
    r"""Proxy of C++ itkImageFunctionID4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionID4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionID4DF_cast(obj)

# Register itkImageFunctionID4DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionID4DF_swigregister(itkImageFunctionID4DF)
class itkImageFunctionIF2DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionIF2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DD_cast(obj)

# Register itkImageFunctionIF2DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF2DD_swigregister(itkImageFunctionIF2DD)
class itkImageFunctionIF2DF(itk.itkFunctionBasePython.itkFunctionBasePF2D):
    r"""Proxy of C++ itkImageFunctionIF2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF2DF_cast(obj)

# Register itkImageFunctionIF2DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF2DF_swigregister(itkImageFunctionIF2DF)
class itkImageFunctionIF3DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionIF3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DD_cast(obj)

# Register itkImageFunctionIF3DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF3DD_swigregister(itkImageFunctionIF3DD)
class itkImageFunctionIF3DF(itk.itkFunctionBasePython.itkFunctionBasePF3D):
    r"""Proxy of C++ itkImageFunctionIF3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF3DF_cast(obj)

# Register itkImageFunctionIF3DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF3DF_swigregister(itkImageFunctionIF3DF)
class itkImageFunctionIF4DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionIF4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DD_cast(obj)

# Register itkImageFunctionIF4DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF4DD_swigregister(itkImageFunctionIF4DD)
class itkImageFunctionIF4DF(itk.itkFunctionBasePython.itkFunctionBasePF4D):
    r"""Proxy of C++ itkImageFunctionIF4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIF4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIF4DF_cast(obj)

# Register itkImageFunctionIF4DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIF4DF_swigregister(itkImageFunctionIF4DF)
class itkImageFunctionIRGBAUC2RGBADD(itk.itkFunctionBasePython.itkFunctionBasePD2RGBAD):
    r"""Proxy of C++ itkImageFunctionIRGBAUC2RGBADD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC2RGBADD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC2RGBADD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_cast(obj)

# Register itkImageFunctionIRGBAUC2RGBADD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBADD_swigregister(itkImageFunctionIRGBAUC2RGBADD)
class itkImageFunctionIRGBAUC2RGBAUCD(itk.itkFunctionBasePython.itkFunctionBasePD2RGBAUC):
    r"""Proxy of C++ itkImageFunctionIRGBAUC2RGBAUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC2RGBAUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC2RGBAUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_cast(obj)

# Register itkImageFunctionIRGBAUC2RGBAUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC2RGBAUCD_swigregister(itkImageFunctionIRGBAUC2RGBAUCD)
class itkImageFunctionIRGBAUC3RGBADD(itk.itkFunctionBasePython.itkFunctionBasePD3RGBAD):
    r"""Proxy of C++ itkImageFunctionIRGBAUC3RGBADD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC3RGBADD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC3RGBADD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_cast(obj)

# Register itkImageFunctionIRGBAUC3RGBADD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBADD_swigregister(itkImageFunctionIRGBAUC3RGBADD)
class itkImageFunctionIRGBAUC3RGBAUCD(itk.itkFunctionBasePython.itkFunctionBasePD3RGBAUC):
    r"""Proxy of C++ itkImageFunctionIRGBAUC3RGBAUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC3RGBAUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC3RGBAUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_cast(obj)

# Register itkImageFunctionIRGBAUC3RGBAUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC3RGBAUCD_swigregister(itkImageFunctionIRGBAUC3RGBAUCD)
class itkImageFunctionIRGBAUC4RGBADD(itk.itkFunctionBasePython.itkFunctionBasePD4RGBAD):
    r"""Proxy of C++ itkImageFunctionIRGBAUC4RGBADD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelD

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC4RGBADD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC4RGBADD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_cast(obj)

# Register itkImageFunctionIRGBAUC4RGBADD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBADD_swigregister(itkImageFunctionIRGBAUC4RGBADD)
class itkImageFunctionIRGBAUC4RGBAUCD(itk.itkFunctionBasePython.itkFunctionBasePD4RGBAUC):
    r"""Proxy of C++ itkImageFunctionIRGBAUC4RGBAUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBAUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBAUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBAPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBAUC4RGBAUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBAUC4RGBAUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_cast(obj)

# Register itkImageFunctionIRGBAUC4RGBAUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBAUC4RGBAUCD_swigregister(itkImageFunctionIRGBAUC4RGBAUCD)
class itkImageFunctionIRGBUC2RGBDD(itk.itkFunctionBasePython.itkFunctionBasePD2RGBD):
    r"""Proxy of C++ itkImageFunctionIRGBUC2RGBDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC2RGBDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC2RGBDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_cast(obj)

# Register itkImageFunctionIRGBUC2RGBDD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBDD_swigregister(itkImageFunctionIRGBUC2RGBDD)
class itkImageFunctionIRGBUC2RGBUCD(itk.itkFunctionBasePython.itkFunctionBasePD2RGBUC):
    r"""Proxy of C++ itkImageFunctionIRGBUC2RGBUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC2RGBUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC2RGBUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_cast(obj)

# Register itkImageFunctionIRGBUC2RGBUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC2RGBUCD_swigregister(itkImageFunctionIRGBUC2RGBUCD)
class itkImageFunctionIRGBUC3RGBDD(itk.itkFunctionBasePython.itkFunctionBasePD3RGBD):
    r"""Proxy of C++ itkImageFunctionIRGBUC3RGBDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC3RGBDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC3RGBDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_cast(obj)

# Register itkImageFunctionIRGBUC3RGBDD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBDD_swigregister(itkImageFunctionIRGBUC3RGBDD)
class itkImageFunctionIRGBUC3RGBUCD(itk.itkFunctionBasePython.itkFunctionBasePD3RGBUC):
    r"""Proxy of C++ itkImageFunctionIRGBUC3RGBUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC3RGBUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC3RGBUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_cast(obj)

# Register itkImageFunctionIRGBUC3RGBUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC3RGBUCD_swigregister(itkImageFunctionIRGBUC3RGBUCD)
class itkImageFunctionIRGBUC4RGBDD(itk.itkFunctionBasePython.itkFunctionBasePD4RGBD):
    r"""Proxy of C++ itkImageFunctionIRGBUC4RGBDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelD

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC4RGBDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC4RGBDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_cast(obj)

# Register itkImageFunctionIRGBUC4RGBDD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBDD_swigregister(itkImageFunctionIRGBUC4RGBDD)
class itkImageFunctionIRGBUC4RGBUCD(itk.itkFunctionBasePython.itkFunctionBasePD4RGBUC):
    r"""Proxy of C++ itkImageFunctionIRGBUC4RGBUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageRGBUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageRGBUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkRGBPixelUC

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIRGBUC4RGBUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIRGBUC4RGBUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_cast(obj)

# Register itkImageFunctionIRGBUC4RGBUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIRGBUC4RGBUCD_swigregister(itkImageFunctionIRGBUC4RGBUCD)
class itkImageFunctionISS2DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionISS2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DD_cast(obj)

# Register itkImageFunctionISS2DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS2DD_swigregister(itkImageFunctionISS2DD)
class itkImageFunctionISS2DF(itk.itkFunctionBasePython.itkFunctionBasePF2D):
    r"""Proxy of C++ itkImageFunctionISS2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS2DF_cast(obj)

# Register itkImageFunctionISS2DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS2DF_swigregister(itkImageFunctionISS2DF)
class itkImageFunctionISS3DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionISS3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DD_cast(obj)

# Register itkImageFunctionISS3DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS3DD_swigregister(itkImageFunctionISS3DD)
class itkImageFunctionISS3DF(itk.itkFunctionBasePython.itkFunctionBasePF3D):
    r"""Proxy of C++ itkImageFunctionISS3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS3DF_cast(obj)

# Register itkImageFunctionISS3DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS3DF_swigregister(itkImageFunctionISS3DF)
class itkImageFunctionISS4DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionISS4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DD_cast(obj)

# Register itkImageFunctionISS4DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS4DD_swigregister(itkImageFunctionISS4DD)
class itkImageFunctionISS4DF(itk.itkFunctionBasePython.itkFunctionBasePF4D):
    r"""Proxy of C++ itkImageFunctionISS4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionISS4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionISS4DF_cast(obj)

# Register itkImageFunctionISS4DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionISS4DF_swigregister(itkImageFunctionISS4DF)
class itkImageFunctionIUC2DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionIUC2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DD_cast(obj)

# Register itkImageFunctionIUC2DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC2DD_swigregister(itkImageFunctionIUC2DD)
class itkImageFunctionIUC2DF(itk.itkFunctionBasePython.itkFunctionBasePF2D):
    r"""Proxy of C++ itkImageFunctionIUC2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC2DF_cast(obj)

# Register itkImageFunctionIUC2DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC2DF_swigregister(itkImageFunctionIUC2DF)
class itkImageFunctionIUC3DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionIUC3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DD_cast(obj)

# Register itkImageFunctionIUC3DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC3DD_swigregister(itkImageFunctionIUC3DD)
class itkImageFunctionIUC3DF(itk.itkFunctionBasePython.itkFunctionBasePF3D):
    r"""Proxy of C++ itkImageFunctionIUC3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC3DF_cast(obj)

# Register itkImageFunctionIUC3DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC3DF_swigregister(itkImageFunctionIUC3DF)
class itkImageFunctionIUC4DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionIUC4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DD_cast(obj)

# Register itkImageFunctionIUC4DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC4DD_swigregister(itkImageFunctionIUC4DD)
class itkImageFunctionIUC4DF(itk.itkFunctionBasePython.itkFunctionBasePF4D):
    r"""Proxy of C++ itkImageFunctionIUC4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUC4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUC4DF_cast(obj)

# Register itkImageFunctionIUC4DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUC4DF_swigregister(itkImageFunctionIUC4DF)
class itkImageFunctionIUS2DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionIUS2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DD_cast(obj)

# Register itkImageFunctionIUS2DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS2DD_swigregister(itkImageFunctionIUS2DD)
class itkImageFunctionIUS2DF(itk.itkFunctionBasePython.itkFunctionBasePF2D):
    r"""Proxy of C++ itkImageFunctionIUS2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS2 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS2DF_cast(obj)

# Register itkImageFunctionIUS2DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS2DF_swigregister(itkImageFunctionIUS2DF)
class itkImageFunctionIUS3DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionIUS3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DD_cast(obj)

# Register itkImageFunctionIUS3DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS3DD_swigregister(itkImageFunctionIUS3DD)
class itkImageFunctionIUS3DF(itk.itkFunctionBasePython.itkFunctionBasePF3D):
    r"""Proxy of C++ itkImageFunctionIUS3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS3 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS3DF_cast(obj)

# Register itkImageFunctionIUS3DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS3DF_swigregister(itkImageFunctionIUS3DF)
class itkImageFunctionIUS4DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionIUS4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DD_cast(obj)

# Register itkImageFunctionIUS4DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS4DD_swigregister(itkImageFunctionIUS4DD)
class itkImageFunctionIUS4DF(itk.itkFunctionBasePython.itkFunctionBasePF4D):
    r"""Proxy of C++ itkImageFunctionIUS4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS4 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIUS4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIUS4DF_cast(obj)

# Register itkImageFunctionIUS4DF in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIUS4DF_swigregister(itkImageFunctionIUS4DF)
class itkImageFunctionIVF22CVD2D(itk.itkFunctionBasePython.itkFunctionBasePD2CVD2):
    r"""Proxy of C++ itkImageFunctionIVF22CVD2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22CVD2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF22CVD2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_cast(obj)

# Register itkImageFunctionIVF22CVD2D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF22CVD2D_swigregister(itkImageFunctionIVF22CVD2D)
class itkImageFunctionIVF22DD(itk.itkFunctionBasePython.itkFunctionBasePD2D):
    r"""Proxy of C++ itkImageFunctionIVF22DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF22DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22DD_cast(obj)

# Register itkImageFunctionIVF22DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF22DD_swigregister(itkImageFunctionIVF22DD)
class itkImageFunctionIVF22VD2D(itk.itkFunctionBasePython.itkFunctionBasePD2VD2):
    r"""Proxy of C++ itkImageFunctionIVF22VD2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF22 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF22"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD2

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD2 const &
        cindex: itkContinuousIndexD2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD2 const &
        index: itkIndex2 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD2"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF22VD2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF22VD2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_cast(obj)

# Register itkImageFunctionIVF22VD2D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF22VD2D_swigregister(itkImageFunctionIVF22VD2D)
class itkImageFunctionIVF33CVD3D(itk.itkFunctionBasePython.itkFunctionBasePD3CVD3):
    r"""Proxy of C++ itkImageFunctionIVF33CVD3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33CVD3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF33CVD3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_cast(obj)

# Register itkImageFunctionIVF33CVD3D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF33CVD3D_swigregister(itkImageFunctionIVF33CVD3D)
class itkImageFunctionIVF33DD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionIVF33DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF33DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33DD_cast(obj)

# Register itkImageFunctionIVF33DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF33DD_swigregister(itkImageFunctionIVF33DD)
class itkImageFunctionIVF33VD3D(itk.itkFunctionBasePython.itkFunctionBasePD3VD3):
    r"""Proxy of C++ itkImageFunctionIVF33VD3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF33 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF33"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD3

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF33VD3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF33VD3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_cast(obj)

# Register itkImageFunctionIVF33VD3D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF33VD3D_swigregister(itkImageFunctionIVF33VD3D)
class itkImageFunctionIVF44CVD4D(itk.itkFunctionBasePython.itkFunctionBasePD4CVD4):
    r"""Proxy of C++ itkImageFunctionIVF44CVD4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF44CVD4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF44CVD4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_cast(obj)

# Register itkImageFunctionIVF44CVD4D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF44CVD4D_swigregister(itkImageFunctionIVF44CVD4D)
class itkImageFunctionIVF44DD(itk.itkFunctionBasePython.itkFunctionBasePD4D):
    r"""Proxy of C++ itkImageFunctionIVF44DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF44DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF44DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44DD_cast(obj)

# Register itkImageFunctionIVF44DD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF44DD_swigregister(itkImageFunctionIVF44DD)
class itkImageFunctionIVF44VD4D(itk.itkFunctionBasePython.itkFunctionBasePD4VD4):
    r"""Proxy of C++ itkImageFunctionIVF44VD4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageVF44 const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageVF44"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkVectorD4

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD4 const &
        cindex: itkContinuousIndexD4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD4 const &
        index: itkIndex4 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD4"""
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionIVF44VD4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIVF44VD4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_cast(obj)

# Register itkImageFunctionIVF44VD4D in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionIVF44VD4D_swigregister(itkImageFunctionIVF44VD4D)
class itkImageFunctionPA3DSCIFD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionPA3DSCIFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkPhasedArray3DSpecialCoordinatesImageF"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionPA3DSCIFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionPA3DSCIFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_cast(obj)

# Register itkImageFunctionPA3DSCIFD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionPA3DSCIFD_swigregister(itkImageFunctionPA3DSCIFD)
class itkImageFunctionPA3DSCIUCD(itk.itkFunctionBasePython.itkFunctionBasePD3D):
    r"""Proxy of C++ itkImageFunctionPA3DSCIUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkPhasedArray3DSpecialCoordinatesImageUC"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> double

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointD3 const &
        cindex: itkContinuousIndexD3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexD3 const &
        index: itkIndex3 &

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexD3"""
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkImageFunctionBasePython.delete_itkImageFunctionPA3DSCIUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionPA3DSCIUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_cast(obj)

# Register itkImageFunctionPA3DSCIUCD in _itkImageFunctionBasePython:
_itkImageFunctionBasePython.itkImageFunctionPA3DSCIUCD_swigregister(itkImageFunctionPA3DSCIUCD)

