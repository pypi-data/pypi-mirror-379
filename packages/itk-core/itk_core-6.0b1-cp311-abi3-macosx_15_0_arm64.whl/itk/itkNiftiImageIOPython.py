# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIONIFTIPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNiftiImageIOPython
else:
    import _itkNiftiImageIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKIOImageBaseBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython

def itkNiftiImageIO_New():
    return itkNiftiImageIO.New()

class itkNiftiImageIO(itk.ITKIOImageBaseBasePython.itkImageIOBase):
    r"""Proxy of C++ itkNiftiImageIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNiftiImageIO_Pointer"""
        return _itkNiftiImageIOPython.itkNiftiImageIO___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNiftiImageIO_Pointer"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_Clone(self)

    def DetermineFileType(self, FileNameToRead):
        r"""
        DetermineFileType(self, FileNameToRead) -> itkNiftiImageIOEnums::NiftiFileEnum

        Parameters
        ----------
        FileNameToRead: char const *

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_DetermineFileType(self, FileNameToRead)

    def SetRescaleSlope(self, _arg):
        r"""
        SetRescaleSlope(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetRescaleSlope(self, _arg)

    def SetRescaleIntercept(self, _arg):
        r"""
        SetRescaleIntercept(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetRescaleIntercept(self, _arg)

    def SetLegacyAnalyze75Mode(self, _arg):
        r"""
        SetLegacyAnalyze75Mode(self, _arg)

        Parameters
        ----------
        _arg: enum itkNiftiImageIOEnums::Analyze75Flavor

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetLegacyAnalyze75Mode(self, _arg)

    def GetLegacyAnalyze75Mode(self):
        r"""GetLegacyAnalyze75Mode(self) -> itkNiftiImageIOEnums::Analyze75Flavor"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_GetLegacyAnalyze75Mode(self)

    def SetConvertRASVectors(self, _arg):
        r"""
        SetConvertRASVectors(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetConvertRASVectors(self, _arg)

    def GetConvertRASVectors(self):
        r"""GetConvertRASVectors(self) -> bool"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_GetConvertRASVectors(self)

    def ConvertRASVectorsOn(self):
        r"""ConvertRASVectorsOn(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_ConvertRASVectorsOn(self)

    def ConvertRASVectorsOff(self):
        r"""ConvertRASVectorsOff(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_ConvertRASVectorsOff(self)

    def SetConvertRASDisplacementVectors(self, _arg):
        r"""
        SetConvertRASDisplacementVectors(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetConvertRASDisplacementVectors(self, _arg)

    def GetConvertRASDisplacementVectors(self):
        r"""GetConvertRASDisplacementVectors(self) -> bool"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_GetConvertRASDisplacementVectors(self)

    def ConvertRASDisplacementVectorsOn(self):
        r"""ConvertRASDisplacementVectorsOn(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_ConvertRASDisplacementVectorsOn(self)

    def ConvertRASDisplacementVectorsOff(self):
        r"""ConvertRASDisplacementVectorsOff(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_ConvertRASDisplacementVectorsOff(self)

    def SetSFORM_Permissive(self, _arg):
        r"""
        SetSFORM_Permissive(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_SetSFORM_Permissive(self, _arg)

    def GetSFORM_Permissive(self):
        r"""GetSFORM_Permissive(self) -> bool"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_GetSFORM_Permissive(self)

    def SFORM_PermissiveOn(self):
        r"""SFORM_PermissiveOn(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_SFORM_PermissiveOn(self)

    def SFORM_PermissiveOff(self):
        r"""SFORM_PermissiveOff(self)"""
        return _itkNiftiImageIOPython.itkNiftiImageIO_SFORM_PermissiveOff(self)
    __swig_destroy__ = _itkNiftiImageIOPython.delete_itkNiftiImageIO

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNiftiImageIO

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNiftiImageIOPython.itkNiftiImageIO_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNiftiImageIO

        Create a new object of the class itkNiftiImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNiftiImageIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNiftiImageIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNiftiImageIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNiftiImageIO in _itkNiftiImageIOPython:
_itkNiftiImageIOPython.itkNiftiImageIO_swigregister(itkNiftiImageIO)
class itkNiftiImageIOEnums(object):
    r"""Proxy of C++ itkNiftiImageIOEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Analyze75Flavor_AnalyzeITK4 = _itkNiftiImageIOPython.itkNiftiImageIOEnums_Analyze75Flavor_AnalyzeITK4
    
    Analyze75Flavor_AnalyzeFSL = _itkNiftiImageIOPython.itkNiftiImageIOEnums_Analyze75Flavor_AnalyzeFSL
    
    Analyze75Flavor_AnalyzeSPM = _itkNiftiImageIOPython.itkNiftiImageIOEnums_Analyze75Flavor_AnalyzeSPM
    
    Analyze75Flavor_AnalyzeITK4Warning = _itkNiftiImageIOPython.itkNiftiImageIOEnums_Analyze75Flavor_AnalyzeITK4Warning
    
    Analyze75Flavor_AnalyzeReject = _itkNiftiImageIOPython.itkNiftiImageIOEnums_Analyze75Flavor_AnalyzeReject
    
    NiftiFileEnum_TwoFileNifti = _itkNiftiImageIOPython.itkNiftiImageIOEnums_NiftiFileEnum_TwoFileNifti
    
    NiftiFileEnum_OneFileNifti = _itkNiftiImageIOPython.itkNiftiImageIOEnums_NiftiFileEnum_OneFileNifti
    
    NiftiFileEnum_Analyze75 = _itkNiftiImageIOPython.itkNiftiImageIOEnums_NiftiFileEnum_Analyze75
    
    NiftiFileEnum_OtherOrError = _itkNiftiImageIOPython.itkNiftiImageIOEnums_NiftiFileEnum_OtherOrError
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkNiftiImageIOEnums
        __init__(self, arg0) -> itkNiftiImageIOEnums

        Parameters
        ----------
        arg0: itkNiftiImageIOEnums const &

        """
        _itkNiftiImageIOPython.itkNiftiImageIOEnums_swiginit(self, _itkNiftiImageIOPython.new_itkNiftiImageIOEnums(*args))
    __swig_destroy__ = _itkNiftiImageIOPython.delete_itkNiftiImageIOEnums

# Register itkNiftiImageIOEnums in _itkNiftiImageIOPython:
_itkNiftiImageIOPython.itkNiftiImageIOEnums_swigregister(itkNiftiImageIOEnums)

def itkNiftiImageIOFactory_New():
    return itkNiftiImageIOFactory.New()

class itkNiftiImageIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkNiftiImageIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNiftiImageIOFactory_Pointer"""
        return _itkNiftiImageIOPython.itkNiftiImageIOFactory___New_orig__()

    @staticmethod
    def RegisterOneFactory():
        r"""RegisterOneFactory()"""
        return _itkNiftiImageIOPython.itkNiftiImageIOFactory_RegisterOneFactory()
    __swig_destroy__ = _itkNiftiImageIOPython.delete_itkNiftiImageIOFactory

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNiftiImageIOFactory

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNiftiImageIOPython.itkNiftiImageIOFactory_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNiftiImageIOFactory

        Create a new object of the class itkNiftiImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNiftiImageIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNiftiImageIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNiftiImageIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNiftiImageIOFactory in _itkNiftiImageIOPython:
_itkNiftiImageIOPython.itkNiftiImageIOFactory_swigregister(itkNiftiImageIOFactory)

