# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformBasePython
else:
    import _itkTransformBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
class listitkTransformBaseTemplateD_Pointer(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::list< itkTransformBaseTemplateD_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::list< itkTransformBaseTemplateD_Pointer >::size_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateD_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateD_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        v: std::list< itkTransformBaseTemplateD_Pointer,std::allocator< itkTransformBaseTemplateD_Pointer > > const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateD_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::list< itkTransformBaseTemplateD_Pointer,std::allocator< itkTransformBaseTemplateD_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateD_Pointer >::difference_type
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::list< itkTransformBaseTemplateD_Pointer >::value_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_empty(self)

    def size(self):
        r"""size(self) -> std::list< itkTransformBaseTemplateD_Pointer >::size_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::list< itkTransformBaseTemplateD_Pointer > &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::list< itkTransformBaseTemplateD_Pointer >::iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_begin(self)

    def end(self):
        r"""end(self) -> std::list< itkTransformBaseTemplateD_Pointer >::iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::list< itkTransformBaseTemplateD_Pointer >::reverse_iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::list< itkTransformBaseTemplateD_Pointer >::reverse_iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::list< itkTransformBaseTemplateD_Pointer >::allocator_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::list< itkTransformBaseTemplateD_Pointer >::iterator

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateD_Pointer >::iterator

        erase(self, first, last) -> std::list< itkTransformBaseTemplateD_Pointer >::iterator

        Parameters
        ----------
        first: std::list< itkTransformBaseTemplateD_Pointer >::iterator
        last: std::list< itkTransformBaseTemplateD_Pointer >::iterator

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> listitkTransformBaseTemplateD_Pointer
        __init__(self, other) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        other: std::list< itkTransformBaseTemplateD_Pointer > const &

        __init__(self, size) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateD_Pointer >::size_type

        __init__(self, size, value) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateD_Pointer >::size_type
        value: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swiginit(self, _itkTransformBasePython.new_listitkTransformBaseTemplateD_Pointer(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_push_back(self, x)

    def front(self):
        r"""front(self) -> std::list< itkTransformBaseTemplateD_Pointer >::value_type const &"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_front(self)

    def back(self):
        r"""back(self) -> std::list< itkTransformBaseTemplateD_Pointer >::value_type const &"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::list< itkTransformBaseTemplateD_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::list< itkTransformBaseTemplateD_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::list< itkTransformBaseTemplateD_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::list< itkTransformBaseTemplateD_Pointer >::iterator

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateD_Pointer >::iterator
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateD_Pointer >::iterator
        n: std::list< itkTransformBaseTemplateD_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_insert(self, *args)

    def pop_front(self):
        r"""pop_front(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_push_front(self, x)

    def reverse(self):
        r"""reverse(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_reverse(self)
    __swig_destroy__ = _itkTransformBasePython.delete_listitkTransformBaseTemplateD_Pointer

# Register listitkTransformBaseTemplateD_Pointer in _itkTransformBasePython:
_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swigregister(listitkTransformBaseTemplateD_Pointer)
class listitkTransformBaseTemplateF_Pointer(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::list< itkTransformBaseTemplateF_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::list< itkTransformBaseTemplateF_Pointer >::size_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateF_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateF_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        v: std::list< itkTransformBaseTemplateF_Pointer,std::allocator< itkTransformBaseTemplateF_Pointer > > const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        j: std::list< itkTransformBaseTemplateF_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::list< itkTransformBaseTemplateF_Pointer,std::allocator< itkTransformBaseTemplateF_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::list< itkTransformBaseTemplateF_Pointer >::difference_type
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::list< itkTransformBaseTemplateF_Pointer >::value_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_empty(self)

    def size(self):
        r"""size(self) -> std::list< itkTransformBaseTemplateF_Pointer >::size_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::list< itkTransformBaseTemplateF_Pointer > &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::list< itkTransformBaseTemplateF_Pointer >::iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_begin(self)

    def end(self):
        r"""end(self) -> std::list< itkTransformBaseTemplateF_Pointer >::iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::list< itkTransformBaseTemplateF_Pointer >::reverse_iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::list< itkTransformBaseTemplateF_Pointer >::reverse_iterator"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::list< itkTransformBaseTemplateF_Pointer >::allocator_type"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::list< itkTransformBaseTemplateF_Pointer >::iterator

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateF_Pointer >::iterator

        erase(self, first, last) -> std::list< itkTransformBaseTemplateF_Pointer >::iterator

        Parameters
        ----------
        first: std::list< itkTransformBaseTemplateF_Pointer >::iterator
        last: std::list< itkTransformBaseTemplateF_Pointer >::iterator

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> listitkTransformBaseTemplateF_Pointer
        __init__(self, other) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        other: std::list< itkTransformBaseTemplateF_Pointer > const &

        __init__(self, size) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateF_Pointer >::size_type

        __init__(self, size, value) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateF_Pointer >::size_type
        value: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swiginit(self, _itkTransformBasePython.new_listitkTransformBaseTemplateF_Pointer(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_push_back(self, x)

    def front(self):
        r"""front(self) -> std::list< itkTransformBaseTemplateF_Pointer >::value_type const &"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_front(self)

    def back(self):
        r"""back(self) -> std::list< itkTransformBaseTemplateF_Pointer >::value_type const &"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::list< itkTransformBaseTemplateF_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::list< itkTransformBaseTemplateF_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::list< itkTransformBaseTemplateF_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::list< itkTransformBaseTemplateF_Pointer >::iterator

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateF_Pointer >::iterator
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::list< itkTransformBaseTemplateF_Pointer >::iterator
        n: std::list< itkTransformBaseTemplateF_Pointer >::size_type
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_insert(self, *args)

    def pop_front(self):
        r"""pop_front(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(self, x)

        Parameters
        ----------
        x: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_push_front(self, x)

    def reverse(self):
        r"""reverse(self)"""
        return _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_reverse(self)
    __swig_destroy__ = _itkTransformBasePython.delete_listitkTransformBaseTemplateF_Pointer

# Register listitkTransformBaseTemplateF_Pointer in _itkTransformBasePython:
_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swigregister(listitkTransformBaseTemplateF_Pointer)

def itkDataObjectDecoratorTD22_New():
    return itkDataObjectDecoratorTD22.New()

class itkDataObjectDecoratorTD22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD22_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD22_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD22 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD22"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD22"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD22 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD22

        Create a new object of the class itkDataObjectDecoratorTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD22 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD22_swigregister(itkDataObjectDecoratorTD22)

def itkDataObjectDecoratorTD23_New():
    return itkDataObjectDecoratorTD23.New()

class itkDataObjectDecoratorTD23(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD23_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD23_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD23 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD23"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD23"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD23 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD23

        Create a new object of the class itkDataObjectDecoratorTD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD23 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD23_swigregister(itkDataObjectDecoratorTD23)

def itkDataObjectDecoratorTD24_New():
    return itkDataObjectDecoratorTD24.New()

class itkDataObjectDecoratorTD24(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD24_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD24_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD24 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD24"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD24"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD24 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD24_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD24

        Create a new object of the class itkDataObjectDecoratorTD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD24 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD24_swigregister(itkDataObjectDecoratorTD24)

def itkDataObjectDecoratorTD32_New():
    return itkDataObjectDecoratorTD32.New()

class itkDataObjectDecoratorTD32(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD32_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD32_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD32 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD32"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD32"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD32 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD32

        Create a new object of the class itkDataObjectDecoratorTD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD32 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD32_swigregister(itkDataObjectDecoratorTD32)

def itkDataObjectDecoratorTD33_New():
    return itkDataObjectDecoratorTD33.New()

class itkDataObjectDecoratorTD33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD33_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD33_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD33 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD33"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD33"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD33

        Create a new object of the class itkDataObjectDecoratorTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD33 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD33_swigregister(itkDataObjectDecoratorTD33)

def itkDataObjectDecoratorTD34_New():
    return itkDataObjectDecoratorTD34.New()

class itkDataObjectDecoratorTD34(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD34_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD34_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD34 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD34"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD34"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD34 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD34_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD34

        Create a new object of the class itkDataObjectDecoratorTD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD34 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD34_swigregister(itkDataObjectDecoratorTD34)

def itkDataObjectDecoratorTD42_New():
    return itkDataObjectDecoratorTD42.New()

class itkDataObjectDecoratorTD42(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD42_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD42_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD42 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD42"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD42"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD42 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD42

        Create a new object of the class itkDataObjectDecoratorTD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD42 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD42_swigregister(itkDataObjectDecoratorTD42)

def itkDataObjectDecoratorTD43_New():
    return itkDataObjectDecoratorTD43.New()

class itkDataObjectDecoratorTD43(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD43_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD43_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD43 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD43"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD43"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD43 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD43

        Create a new object of the class itkDataObjectDecoratorTD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD43 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD43_swigregister(itkDataObjectDecoratorTD43)

def itkDataObjectDecoratorTD44_New():
    return itkDataObjectDecoratorTD44.New()

class itkDataObjectDecoratorTD44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTD44_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTD44_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformD44 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformD44"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformD44"""
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTD44 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTD44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD44

        Create a new object of the class itkDataObjectDecoratorTD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD44 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD44_swigregister(itkDataObjectDecoratorTD44)

def itkDataObjectDecoratorTF22_New():
    return itkDataObjectDecoratorTF22.New()

class itkDataObjectDecoratorTF22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF22_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF22_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF22 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF22"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF22"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF22 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF22

        Create a new object of the class itkDataObjectDecoratorTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF22 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF22_swigregister(itkDataObjectDecoratorTF22)

def itkDataObjectDecoratorTF23_New():
    return itkDataObjectDecoratorTF23.New()

class itkDataObjectDecoratorTF23(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF23_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF23_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF23 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF23"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF23"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF23 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF23

        Create a new object of the class itkDataObjectDecoratorTF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF23 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF23_swigregister(itkDataObjectDecoratorTF23)

def itkDataObjectDecoratorTF24_New():
    return itkDataObjectDecoratorTF24.New()

class itkDataObjectDecoratorTF24(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF24_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF24_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF24 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF24"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF24"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF24 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF24_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF24

        Create a new object of the class itkDataObjectDecoratorTF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF24 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF24_swigregister(itkDataObjectDecoratorTF24)

def itkDataObjectDecoratorTF32_New():
    return itkDataObjectDecoratorTF32.New()

class itkDataObjectDecoratorTF32(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF32_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF32_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF32 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF32"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF32"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF32 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF32

        Create a new object of the class itkDataObjectDecoratorTF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF32 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF32_swigregister(itkDataObjectDecoratorTF32)

def itkDataObjectDecoratorTF33_New():
    return itkDataObjectDecoratorTF33.New()

class itkDataObjectDecoratorTF33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF33_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF33_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF33 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF33"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF33"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF33 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF33

        Create a new object of the class itkDataObjectDecoratorTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF33 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF33_swigregister(itkDataObjectDecoratorTF33)

def itkDataObjectDecoratorTF34_New():
    return itkDataObjectDecoratorTF34.New()

class itkDataObjectDecoratorTF34(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF34_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF34_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF34 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF34"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF34"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF34 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF34_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF34

        Create a new object of the class itkDataObjectDecoratorTF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF34 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF34_swigregister(itkDataObjectDecoratorTF34)

def itkDataObjectDecoratorTF42_New():
    return itkDataObjectDecoratorTF42.New()

class itkDataObjectDecoratorTF42(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF42_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF42_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF42 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF42"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF42"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF42 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF42

        Create a new object of the class itkDataObjectDecoratorTF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF42 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF42_swigregister(itkDataObjectDecoratorTF42)

def itkDataObjectDecoratorTF43_New():
    return itkDataObjectDecoratorTF43.New()

class itkDataObjectDecoratorTF43(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF43_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF43_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF43 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF43"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF43"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF43 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF43

        Create a new object of the class itkDataObjectDecoratorTF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF43 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF43_swigregister(itkDataObjectDecoratorTF43)

def itkDataObjectDecoratorTF44_New():
    return itkDataObjectDecoratorTF44.New()

class itkDataObjectDecoratorTF44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDataObjectDecoratorTF44_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDataObjectDecoratorTF44_Pointer"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_Clone(self)

    def Set(self, val):
        r"""
        Set(self, val)

        Parameters
        ----------
        val: itkTransformF44 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_Set(self, val)

    def Get(self):
        r"""Get(self) -> itkTransformF44"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_Get(self)

    def GetModifiable(self):
        r"""GetModifiable(self) -> itkTransformF44"""
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_GetModifiable(self)

    def Graft(self, *args):
        r"""
        Graft(self, arg0)

        Parameters
        ----------
        arg0: itkDataObject const *

        Graft(self, data)

        Parameters
        ----------
        data: itkDataObjectDecoratorTF44 const *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_Graft(self, *args)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDataObjectDecoratorTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkDataObjectDecoratorTF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF44

        Create a new object of the class itkDataObjectDecoratorTF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF44 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF44_swigregister(itkDataObjectDecoratorTF44)
class itkTransformBaseTemplateD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformBaseTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputSpaceName(self, _arg):
        r"""
        SetInputSpaceName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_SetInputSpaceName(self, _arg)

    def GetInputSpaceName(self):
        r"""GetInputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetInputSpaceName(self)

    def SetOutputSpaceName(self, _arg):
        r"""
        SetOutputSpaceName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_SetOutputSpaceName(self, _arg)

    def GetOutputSpaceName(self):
        r"""GetOutputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetOutputSpaceName(self)

    def GetNumberOfParameters(self):
        r"""GetNumberOfParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetNumberOfParameters(self)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetParameters(self)

    def GetInputSpaceDimension(self):
        r"""GetInputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetInputSpaceDimension(self)

    def GetOutputSpaceDimension(self):
        r"""GetOutputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetOutputSpaceDimension(self)

    def SetParameters(self, arg0):
        r"""
        SetParameters(self, arg0)

        Parameters
        ----------
        arg0: itkOptimizerParametersD const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_SetParameters(self, arg0)

    def SetParametersByValue(self, p):
        r"""
        SetParametersByValue(self, p)

        Parameters
        ----------
        p: itkOptimizerParametersD const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_SetParametersByValue(self, p)

    def SetFixedParameters(self, arg0):
        r"""
        SetFixedParameters(self, arg0)

        Parameters
        ----------
        arg0: itkOptimizerParametersD const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_SetFixedParameters(self, arg0)

    def CopyInParameters(self, begin, end):
        r"""
        CopyInParameters(self, begin, end)

        Parameters
        ----------
        begin: double const *const
        end: double const *const

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_CopyInParameters(self, begin, end)

    def CopyInFixedParameters(self, begin, end):
        r"""
        CopyInFixedParameters(self, begin, end)

        Parameters
        ----------
        begin: double const *const
        end: double const *const

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_CopyInFixedParameters(self, begin, end)

    def GetFixedParameters(self):
        r"""GetFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetFixedParameters(self)

    def GetTransformTypeAsString(self):
        r"""GetTransformTypeAsString(self) -> std::string"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetTransformTypeAsString(self)

    def GetTransformCategory(self):
        r"""GetTransformCategory(self) -> itkTransformBaseTemplateEnums::TransformCategory"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_GetTransformCategory(self)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformBaseTemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_cast(obj)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['transformType', 'name', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


# Register itkTransformBaseTemplateD in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateD_swigregister(itkTransformBaseTemplateD)
class itkTransformBaseTemplateD_ConstPointer(object):
    r"""Proxy of C++ itkTransformBaseTemplateD_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateD_ConstPointer
        __init__(self, p) -> itkTransformBaseTemplateD_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateD_ConstPointer const &

        __init__(self, p) -> itkTransformBaseTemplateD_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateD const *

        """
        _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateD_ConstPointer(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateD_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkTransformBaseTemplateD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkTransformBaseTemplateD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkTransformBaseTemplateD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkTransformBaseTemplateD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkTransformBaseTemplateD

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkTransformBaseTemplateD_ConstPointer &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Swap(self, other)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['transformType', 'name', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


    def GetInputSpaceName(self):
        r"""GetInputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetInputSpaceName(self)

    def GetOutputSpaceName(self):
        r"""GetOutputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetOutputSpaceName(self)

    def GetNumberOfParameters(self):
        r"""GetNumberOfParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetNumberOfParameters(self)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetParameters(self)

    def GetInputSpaceDimension(self):
        r"""GetInputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetInputSpaceDimension(self)

    def GetOutputSpaceDimension(self):
        r"""GetOutputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetOutputSpaceDimension(self)

    def GetFixedParameters(self):
        r"""GetFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetFixedParameters(self)

    def GetTransformTypeAsString(self):
        r"""GetTransformTypeAsString(self) -> std::string"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTransformTypeAsString(self)

    def GetTransformCategory(self):
        r"""GetTransformCategory(self) -> itkTransformBaseTemplateEnums::TransformCategory"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTransformCategory(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Modified(self)

    def AddObserver(self, event, cmd):
        r"""
        AddObserver(self, event, cmd) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        cmd: itkCommand *

        """

        import itk
        if not issubclass(cmd.__class__, itk.Command) and callable(cmd):
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( cmd )
            cmd = pycommand


        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_AddObserver(self, event, cmd)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_InvokeEvent(self, *args)

    def RemoveObserver(self, tag):
        r"""
        RemoveObserver(self, tag)

        Parameters
        ----------
        tag: unsigned long

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_RemoveObserver(self, tag)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_CreateAnother(self)

    def Clone(self):
        r"""Clone(self) -> itkLightObject_Pointer"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Clone(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetReferenceCount(self)

# Register itkTransformBaseTemplateD_ConstPointer in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_swigregister(itkTransformBaseTemplateD_ConstPointer)
class itkTransformBaseTemplateEnums(object):
    r"""Proxy of C++ itkTransformBaseTemplateEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TransformCategory_UnknownTransformCategory = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_UnknownTransformCategory
    
    TransformCategory_Linear = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_Linear
    
    TransformCategory_BSpline = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_BSpline
    
    TransformCategory_Spline = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_Spline
    
    TransformCategory_DisplacementField = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_DisplacementField
    
    TransformCategory_VelocityField = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_VelocityField
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateEnums
        __init__(self, arg0) -> itkTransformBaseTemplateEnums

        Parameters
        ----------
        arg0: itkTransformBaseTemplateEnums const &

        """
        _itkTransformBasePython.itkTransformBaseTemplateEnums_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateEnums(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateEnums

# Register itkTransformBaseTemplateEnums in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateEnums_swigregister(itkTransformBaseTemplateEnums)
class itkTransformBaseTemplateF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformBaseTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputSpaceName(self, _arg):
        r"""
        SetInputSpaceName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_SetInputSpaceName(self, _arg)

    def GetInputSpaceName(self):
        r"""GetInputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetInputSpaceName(self)

    def SetOutputSpaceName(self, _arg):
        r"""
        SetOutputSpaceName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_SetOutputSpaceName(self, _arg)

    def GetOutputSpaceName(self):
        r"""GetOutputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetOutputSpaceName(self)

    def GetNumberOfParameters(self):
        r"""GetNumberOfParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetNumberOfParameters(self)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetParameters(self)

    def GetInputSpaceDimension(self):
        r"""GetInputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetInputSpaceDimension(self)

    def GetOutputSpaceDimension(self):
        r"""GetOutputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetOutputSpaceDimension(self)

    def SetParameters(self, arg0):
        r"""
        SetParameters(self, arg0)

        Parameters
        ----------
        arg0: itkOptimizerParametersF const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_SetParameters(self, arg0)

    def SetParametersByValue(self, p):
        r"""
        SetParametersByValue(self, p)

        Parameters
        ----------
        p: itkOptimizerParametersF const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_SetParametersByValue(self, p)

    def SetFixedParameters(self, arg0):
        r"""
        SetFixedParameters(self, arg0)

        Parameters
        ----------
        arg0: itkOptimizerParametersD const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_SetFixedParameters(self, arg0)

    def CopyInParameters(self, begin, end):
        r"""
        CopyInParameters(self, begin, end)

        Parameters
        ----------
        begin: float const *const
        end: float const *const

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_CopyInParameters(self, begin, end)

    def CopyInFixedParameters(self, begin, end):
        r"""
        CopyInFixedParameters(self, begin, end)

        Parameters
        ----------
        begin: double const *const
        end: double const *const

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_CopyInFixedParameters(self, begin, end)

    def GetFixedParameters(self):
        r"""GetFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetFixedParameters(self)

    def GetTransformTypeAsString(self):
        r"""GetTransformTypeAsString(self) -> std::string"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetTransformTypeAsString(self)

    def GetTransformCategory(self):
        r"""GetTransformCategory(self) -> itkTransformBaseTemplateEnums::TransformCategory"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_GetTransformCategory(self)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformBaseTemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_cast(obj)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['transformType', 'name', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


# Register itkTransformBaseTemplateF in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateF_swigregister(itkTransformBaseTemplateF)
class itkTransformBaseTemplateF_ConstPointer(object):
    r"""Proxy of C++ itkTransformBaseTemplateF_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateF_ConstPointer
        __init__(self, p) -> itkTransformBaseTemplateF_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateF_ConstPointer const &

        __init__(self, p) -> itkTransformBaseTemplateF_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateF const *

        """
        _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateF_ConstPointer(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateF_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkTransformBaseTemplateF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkTransformBaseTemplateF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkTransformBaseTemplateF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkTransformBaseTemplateF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkTransformBaseTemplateF

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkTransformBaseTemplateF_ConstPointer &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Swap(self, other)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['transformType', 'name', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


    def GetInputSpaceName(self):
        r"""GetInputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetInputSpaceName(self)

    def GetOutputSpaceName(self):
        r"""GetOutputSpaceName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetOutputSpaceName(self)

    def GetNumberOfParameters(self):
        r"""GetNumberOfParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetNumberOfParameters(self)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersF"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetParameters(self)

    def GetInputSpaceDimension(self):
        r"""GetInputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetInputSpaceDimension(self)

    def GetOutputSpaceDimension(self):
        r"""GetOutputSpaceDimension(self) -> unsigned int"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetOutputSpaceDimension(self)

    def GetFixedParameters(self):
        r"""GetFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetFixedParameters(self)

    def GetTransformTypeAsString(self):
        r"""GetTransformTypeAsString(self) -> std::string"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTransformTypeAsString(self)

    def GetTransformCategory(self):
        r"""GetTransformCategory(self) -> itkTransformBaseTemplateEnums::TransformCategory"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTransformCategory(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Modified(self)

    def AddObserver(self, event, cmd):
        r"""
        AddObserver(self, event, cmd) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        cmd: itkCommand *

        """

        import itk
        if not issubclass(cmd.__class__, itk.Command) and callable(cmd):
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( cmd )
            cmd = pycommand


        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_AddObserver(self, event, cmd)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_InvokeEvent(self, *args)

    def RemoveObserver(self, tag):
        r"""
        RemoveObserver(self, tag)

        Parameters
        ----------
        tag: unsigned long

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_RemoveObserver(self, tag)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_CreateAnother(self)

    def Clone(self):
        r"""Clone(self) -> itkLightObject_Pointer"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Clone(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetReferenceCount(self)

# Register itkTransformBaseTemplateF_ConstPointer in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_swigregister(itkTransformBaseTemplateF_ConstPointer)
class itkTransformD2(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD23_Pointer"""
        return _itkTransformBasePython.itkTransformD2_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD2_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD2 const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,2 > const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD2_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD2 const &
        point: itkPointD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD2_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD2_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &
        point: itkPointD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD2_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD2_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD2_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD2_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD23 *

        """
        return _itkTransformBasePython.itkTransformD2_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD32_Pointer"""
        return _itkTransformBasePython.itkTransformD2_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD2_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD2 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: vnl_matrix_fixed< double,3,2 > &

        """
        return _itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD2 const &
        jacobian: vnl_matrix_fixedD_2_3 &

        """
        return _itkTransformBasePython.itkTransformD2_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD2_cast(obj)

# Register itkTransformD2 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD2_swigregister(itkTransformD2)
class itkTransformD22(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD22_Pointer"""
        return _itkTransformBasePython.itkTransformD22_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD22_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, vector, point) -> itkVectorD2

        Parameters
        ----------
        vector: itkVectorD2 const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,2 > const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD22_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD2

        Parameters
        ----------
        vector: itkCovariantVectorD2 const &
        point: itkPointD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD22_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD22_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &
        point: itkPointD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD22_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD22_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD22_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD22_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD22 *

        """
        return _itkTransformBasePython.itkTransformD22_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD22_Pointer"""
        return _itkTransformBasePython.itkTransformD22_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD22_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD2 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: vnl_matrix_fixedD_2_2 &

        """
        return _itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD2 const &
        jacobian: vnl_matrix_fixedD_2_2 &

        """
        return _itkTransformBasePython.itkTransformD22_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD22_cast(obj)

# Register itkTransformD22 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD22_swigregister(itkTransformD22)
class itkTransformD23(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD23_Pointer"""
        return _itkTransformBasePython.itkTransformD23_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD23_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD2 const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,2 > const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD23_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD2 const &
        point: itkPointD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD23_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD23_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &
        point: itkPointD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD23_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD23_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD23_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD23_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD23 *

        """
        return _itkTransformBasePython.itkTransformD23_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD32_Pointer"""
        return _itkTransformBasePython.itkTransformD23_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD23_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD2 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: vnl_matrix_fixed< double,3,2 > &

        """
        return _itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD2 const &
        jacobian: vnl_matrix_fixedD_2_3 &

        """
        return _itkTransformBasePython.itkTransformD23_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD23_cast(obj)

# Register itkTransformD23 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD23_swigregister(itkTransformD23)
class itkTransformD24(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD24_Pointer"""
        return _itkTransformBasePython.itkTransformD24_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD24_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, vector, point) -> itkVectorD4

        Parameters
        ----------
        vector: itkVectorD2 const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,2 > const &
        point: itkPointD2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD24_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD4

        Parameters
        ----------
        vector: itkCovariantVectorD2 const &
        point: itkPointD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD24_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD24_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &
        point: itkPointD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD2 const &

        """
        return _itkTransformBasePython.itkTransformD24_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD24_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD24_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD24_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD24 *

        """
        return _itkTransformBasePython.itkTransformD24_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD42_Pointer"""
        return _itkTransformBasePython.itkTransformD24_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD24_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD2 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: vnl_matrix_fixed< double,4,2 > &

        """
        return _itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD2 const &
        jacobian: vnl_matrix_fixed< double,2,4 > &

        """
        return _itkTransformBasePython.itkTransformD24_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD24_cast(obj)

# Register itkTransformD24 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD24_swigregister(itkTransformD24)
class itkTransformD3(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD33_Pointer"""
        return _itkTransformBasePython.itkTransformD3_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD3_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD3 const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,3 > const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD3_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD3 const &
        point: itkPointD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD3_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD3_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &
        point: itkPointD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD3_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD3_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD3_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD3_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD33 *

        """
        return _itkTransformBasePython.itkTransformD3_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD33_Pointer"""
        return _itkTransformBasePython.itkTransformD3_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD3_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD3 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: vnl_matrix_fixedD_3_3 &

        """
        return _itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD3 const &
        jacobian: vnl_matrix_fixedD_3_3 &

        """
        return _itkTransformBasePython.itkTransformD3_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD3_cast(obj)

# Register itkTransformD3 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD3_swigregister(itkTransformD3)
class itkTransformD32(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD32_Pointer"""
        return _itkTransformBasePython.itkTransformD32_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD32_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, vector, point) -> itkVectorD2

        Parameters
        ----------
        vector: itkVectorD3 const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,3 > const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD32_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD2

        Parameters
        ----------
        vector: itkCovariantVectorD3 const &
        point: itkPointD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD32_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD32_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &
        point: itkPointD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD32_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD32_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD32_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD32_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD32 *

        """
        return _itkTransformBasePython.itkTransformD32_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD23_Pointer"""
        return _itkTransformBasePython.itkTransformD32_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD32_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD3 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: vnl_matrix_fixedD_2_3 &

        """
        return _itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD3 const &
        jacobian: vnl_matrix_fixed< double,3,2 > &

        """
        return _itkTransformBasePython.itkTransformD32_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD32_cast(obj)

# Register itkTransformD32 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD32_swigregister(itkTransformD32)
class itkTransformD33(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD33_Pointer"""
        return _itkTransformBasePython.itkTransformD33_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD33_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD3 const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,3 > const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD33_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD3 const &
        point: itkPointD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD33_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD33_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &
        point: itkPointD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD33_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD33_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD33_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD33_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD33 *

        """
        return _itkTransformBasePython.itkTransformD33_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD33_Pointer"""
        return _itkTransformBasePython.itkTransformD33_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD33_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD3 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: vnl_matrix_fixedD_3_3 &

        """
        return _itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD3 const &
        jacobian: vnl_matrix_fixedD_3_3 &

        """
        return _itkTransformBasePython.itkTransformD33_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD33_cast(obj)

# Register itkTransformD33 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD33_swigregister(itkTransformD33)
class itkTransformD34(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD34_Pointer"""
        return _itkTransformBasePython.itkTransformD34_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD34_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, vector, point) -> itkVectorD4

        Parameters
        ----------
        vector: itkVectorD3 const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,3 > const &
        point: itkPointD3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD34_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD4

        Parameters
        ----------
        vector: itkCovariantVectorD3 const &
        point: itkPointD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD34_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD34_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &
        point: itkPointD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD3 const &

        """
        return _itkTransformBasePython.itkTransformD34_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD34_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD34_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD34_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD34 *

        """
        return _itkTransformBasePython.itkTransformD34_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD43_Pointer"""
        return _itkTransformBasePython.itkTransformD34_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD34_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD3 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: vnl_matrix_fixedD_4_3 &

        """
        return _itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD3 const &
        jacobian: vnl_matrix_fixedD_3_4 &

        """
        return _itkTransformBasePython.itkTransformD34_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD34_cast(obj)

# Register itkTransformD34 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD34_swigregister(itkTransformD34)
class itkTransformD4(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD43_Pointer"""
        return _itkTransformBasePython.itkTransformD4_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD4_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD4 const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,4 > const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD4_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD4 const &
        point: itkPointD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD4_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD4_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &
        point: itkPointD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD4_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD4_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD4_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD4_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD43 *

        """
        return _itkTransformBasePython.itkTransformD4_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD34_Pointer"""
        return _itkTransformBasePython.itkTransformD4_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD4_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD4 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: vnl_matrix_fixedD_3_4 &

        """
        return _itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD4 const &
        jacobian: vnl_matrix_fixedD_4_3 &

        """
        return _itkTransformBasePython.itkTransformD4_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD4_cast(obj)

# Register itkTransformD4 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD4_swigregister(itkTransformD4)
class itkTransformD42(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD42_Pointer"""
        return _itkTransformBasePython.itkTransformD42_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD42_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, vector, point) -> itkVectorD2

        Parameters
        ----------
        vector: itkVectorD4 const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,4 > const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD42_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD2

        Parameters
        ----------
        vector: itkCovariantVectorD4 const &
        point: itkPointD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD42_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD42_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &
        point: itkPointD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD42_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD42_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD42_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD42_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD42 *

        """
        return _itkTransformBasePython.itkTransformD42_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD24_Pointer"""
        return _itkTransformBasePython.itkTransformD42_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD42_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD4 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: vnl_matrix_fixed< double,2,4 > &

        """
        return _itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD4 const &
        jacobian: vnl_matrix_fixed< double,4,2 > &

        """
        return _itkTransformBasePython.itkTransformD42_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD42_cast(obj)

# Register itkTransformD42 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD42_swigregister(itkTransformD42)
class itkTransformD43(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD43_Pointer"""
        return _itkTransformBasePython.itkTransformD43_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD43_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, vector, point) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD4 const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,4 > const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD43_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD3

        Parameters
        ----------
        vector: itkCovariantVectorD4 const &
        point: itkPointD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD43_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD43_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &
        point: itkPointD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD43_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD43_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD43_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD43_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD43 *

        """
        return _itkTransformBasePython.itkTransformD43_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD34_Pointer"""
        return _itkTransformBasePython.itkTransformD43_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD43_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD4 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: vnl_matrix_fixedD_3_4 &

        """
        return _itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD4 const &
        jacobian: vnl_matrix_fixedD_4_3 &

        """
        return _itkTransformBasePython.itkTransformD43_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD43_cast(obj)

# Register itkTransformD43 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD43_swigregister(itkTransformD43)
class itkTransformD44(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformD44_Pointer"""
        return _itkTransformBasePython.itkTransformD44_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD44_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, vector, point) -> itkVectorD4

        Parameters
        ----------
        vector: itkVectorD4 const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,4 > const &
        point: itkPointD4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD44_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorD4

        Parameters
        ----------
        vector: itkCovariantVectorD4 const &
        point: itkPointD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        vector: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD44_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        point: itkPointD4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD44_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &
        point: itkPointD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        point: itkPointD4 const &

        """
        return _itkTransformBasePython.itkTransformD44_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkTransformBasePython.itkTransformD44_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD44_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformD44_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformD44 *

        """
        return _itkTransformBasePython.itkTransformD44_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformD44_Pointer"""
        return _itkTransformBasePython.itkTransformD44_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformD44_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointD4 const &
        jacobian: itkArray2DD &
        arg2: itkArray2DD &

        """
        return _itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: vnl_matrix_fixedD_4_4 &

        """
        return _itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointD4 const &
        jacobian: vnl_matrix_fixedD_4_4 &

        """
        return _itkTransformBasePython.itkTransformD44_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformD44_cast(obj)

# Register itkTransformD44 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD44_swigregister(itkTransformD44)
class itkTransformF2(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF23_Pointer"""
        return _itkTransformBasePython.itkTransformF2_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF2_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF2 const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,2 > const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF2_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF2 const &
        point: itkPointF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF2_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF2_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &
        point: itkPointF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF2_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF2_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF2_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF2_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF23 *

        """
        return _itkTransformBasePython.itkTransformF2_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF32_Pointer"""
        return _itkTransformBasePython.itkTransformF2_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF2_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF2 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: vnl_matrix_fixed< float,3,2 > &

        """
        return _itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF2 const &
        jacobian: vnl_matrix_fixedF_2_3 &

        """
        return _itkTransformBasePython.itkTransformF2_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF2_cast(obj)

# Register itkTransformF2 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF2_swigregister(itkTransformF2)
class itkTransformF22(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF22_Pointer"""
        return _itkTransformBasePython.itkTransformF22_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF22_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, vector, point) -> itkVectorF2

        Parameters
        ----------
        vector: itkVectorF2 const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,2 > const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF22_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF2

        Parameters
        ----------
        vector: itkCovariantVectorF2 const &
        point: itkPointF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF22_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF22_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &
        point: itkPointF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF22_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF22_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF22_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF22_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF22 *

        """
        return _itkTransformBasePython.itkTransformF22_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF22_Pointer"""
        return _itkTransformBasePython.itkTransformF22_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF22_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF2 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: vnl_matrix_fixedF_2_2 &

        """
        return _itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF2 const &
        jacobian: vnl_matrix_fixedF_2_2 &

        """
        return _itkTransformBasePython.itkTransformF22_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF22_cast(obj)

# Register itkTransformF22 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF22_swigregister(itkTransformF22)
class itkTransformF23(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF23_Pointer"""
        return _itkTransformBasePython.itkTransformF23_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF23_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF2 const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,2 > const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF23_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF2 const &
        point: itkPointF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF23_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF23_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &
        point: itkPointF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF23_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF23_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF23_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF23_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF23 *

        """
        return _itkTransformBasePython.itkTransformF23_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF32_Pointer"""
        return _itkTransformBasePython.itkTransformF23_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF23_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF2 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: vnl_matrix_fixed< float,3,2 > &

        """
        return _itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF2 const &
        jacobian: vnl_matrix_fixedF_2_3 &

        """
        return _itkTransformBasePython.itkTransformF23_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF23_cast(obj)

# Register itkTransformF23 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF23_swigregister(itkTransformF23)
class itkTransformF24(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF24_Pointer"""
        return _itkTransformBasePython.itkTransformF24_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF24_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, vector, point) -> itkVectorF4

        Parameters
        ----------
        vector: itkVectorF2 const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,2 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,2 > const &
        point: itkPointF2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF24_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF4

        Parameters
        ----------
        vector: itkCovariantVectorF2 const &
        point: itkPointF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF24_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF2 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF24_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &
        point: itkPointF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF2 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF2 const &

        """
        return _itkTransformBasePython.itkTransformF24_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF24_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF24_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF24_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF24 *

        """
        return _itkTransformBasePython.itkTransformF24_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF42_Pointer"""
        return _itkTransformBasePython.itkTransformF24_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF24_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF2 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: vnl_matrix_fixed< float,4,2 > &

        """
        return _itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF2 const &
        jacobian: vnl_matrix_fixed< float,2,4 > &

        """
        return _itkTransformBasePython.itkTransformF24_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF24_cast(obj)

# Register itkTransformF24 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF24_swigregister(itkTransformF24)
class itkTransformF3(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF33_Pointer"""
        return _itkTransformBasePython.itkTransformF3_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF3_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF3 const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,3 > const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF3_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF3 const &
        point: itkPointF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF3_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF3_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &
        point: itkPointF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF3_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF3_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF3_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF3_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF33 *

        """
        return _itkTransformBasePython.itkTransformF3_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF33_Pointer"""
        return _itkTransformBasePython.itkTransformF3_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF3_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF3 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: vnl_matrix_fixedF_3_3 &

        """
        return _itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF3 const &
        jacobian: vnl_matrix_fixedF_3_3 &

        """
        return _itkTransformBasePython.itkTransformF3_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF3_cast(obj)

# Register itkTransformF3 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF3_swigregister(itkTransformF3)
class itkTransformF32(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF32_Pointer"""
        return _itkTransformBasePython.itkTransformF32_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF32_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, vector, point) -> itkVectorF2

        Parameters
        ----------
        vector: itkVectorF3 const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,3 > const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF32_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF2

        Parameters
        ----------
        vector: itkCovariantVectorF3 const &
        point: itkPointF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF32_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF32_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &
        point: itkPointF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF32_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF32_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF32_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF32_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF32 *

        """
        return _itkTransformBasePython.itkTransformF32_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF23_Pointer"""
        return _itkTransformBasePython.itkTransformF32_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF32_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF3 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: vnl_matrix_fixedF_2_3 &

        """
        return _itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF3 const &
        jacobian: vnl_matrix_fixed< float,3,2 > &

        """
        return _itkTransformBasePython.itkTransformF32_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF32_cast(obj)

# Register itkTransformF32 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF32_swigregister(itkTransformF32)
class itkTransformF33(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF33_Pointer"""
        return _itkTransformBasePython.itkTransformF33_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF33_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF3 const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,3 > const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF33_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF3 const &
        point: itkPointF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF33_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF33_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &
        point: itkPointF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF33_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF33_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF33_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF33_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF33 *

        """
        return _itkTransformBasePython.itkTransformF33_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF33_Pointer"""
        return _itkTransformBasePython.itkTransformF33_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF33_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF3 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: vnl_matrix_fixedF_3_3 &

        """
        return _itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF3 const &
        jacobian: vnl_matrix_fixedF_3_3 &

        """
        return _itkTransformBasePython.itkTransformF33_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF33_cast(obj)

# Register itkTransformF33 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF33_swigregister(itkTransformF33)
class itkTransformF34(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF34_Pointer"""
        return _itkTransformBasePython.itkTransformF34_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF34_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, vector, point) -> itkVectorF4

        Parameters
        ----------
        vector: itkVectorF3 const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,3 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,3 > const &
        point: itkPointF3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF34_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF4

        Parameters
        ----------
        vector: itkCovariantVectorF3 const &
        point: itkPointF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF34_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF3 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF34_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &
        point: itkPointF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF3 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF3 const &

        """
        return _itkTransformBasePython.itkTransformF34_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF34_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF34_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF34_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF34 *

        """
        return _itkTransformBasePython.itkTransformF34_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF43_Pointer"""
        return _itkTransformBasePython.itkTransformF34_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF34_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF3 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: vnl_matrix_fixedF_4_3 &

        """
        return _itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF3 const &
        jacobian: vnl_matrix_fixedF_3_4 &

        """
        return _itkTransformBasePython.itkTransformF34_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF34_cast(obj)

# Register itkTransformF34 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF34_swigregister(itkTransformF34)
class itkTransformF4(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF43_Pointer"""
        return _itkTransformBasePython.itkTransformF4_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF4_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF4 const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,4 > const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF4_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF4 const &
        point: itkPointF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF4_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF4_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &
        point: itkPointF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF4_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF4_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF4_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF4_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF43 *

        """
        return _itkTransformBasePython.itkTransformF4_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF34_Pointer"""
        return _itkTransformBasePython.itkTransformF4_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF4_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF4 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: vnl_matrix_fixedF_3_4 &

        """
        return _itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF4 const &
        jacobian: vnl_matrix_fixedF_4_3 &

        """
        return _itkTransformBasePython.itkTransformF4_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF4_cast(obj)

# Register itkTransformF4 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF4_swigregister(itkTransformF4)
class itkTransformF42(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF42_Pointer"""
        return _itkTransformBasePython.itkTransformF42_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF42_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, vector, point) -> itkVectorF2

        Parameters
        ----------
        vector: itkVectorF4 const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,4 > const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF42_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF2

        Parameters
        ----------
        vector: itkCovariantVectorF4 const &
        point: itkPointF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF42_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF42_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &
        point: itkPointF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF42_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF42_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF42_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF42_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF42 *

        """
        return _itkTransformBasePython.itkTransformF42_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF24_Pointer"""
        return _itkTransformBasePython.itkTransformF42_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF42_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF4 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: vnl_matrix_fixed< float,2,4 > &

        """
        return _itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF4 const &
        jacobian: vnl_matrix_fixed< float,4,2 > &

        """
        return _itkTransformBasePython.itkTransformF42_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF42_cast(obj)

# Register itkTransformF42 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF42_swigregister(itkTransformF42)
class itkTransformF43(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF43_Pointer"""
        return _itkTransformBasePython.itkTransformF43_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF43_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, vector, point) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF4 const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,4 > const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF43_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF3

        Parameters
        ----------
        vector: itkCovariantVectorF4 const &
        point: itkPointF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF43_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF43_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &
        point: itkPointF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF43_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF43_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF43_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF43_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF43 *

        """
        return _itkTransformBasePython.itkTransformF43_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF34_Pointer"""
        return _itkTransformBasePython.itkTransformF43_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF43_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF4 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: vnl_matrix_fixedF_3_4 &

        """
        return _itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF4 const &
        jacobian: vnl_matrix_fixedF_4_3 &

        """
        return _itkTransformBasePython.itkTransformF43_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF43_cast(obj)

# Register itkTransformF43 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF43_swigregister(itkTransformF43)
class itkTransformF44(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkTransformF44_Pointer"""
        return _itkTransformBasePython.itkTransformF44_Clone(self)

    def TransformPoint(self, arg0):
        r"""
        TransformPoint(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF44_TransformPoint(self, arg0)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, vector, point) -> itkVectorF4

        Parameters
        ----------
        vector: itkVectorF4 const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,4 > const &

        TransformVector(self, vector, point) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,4 > const &
        point: itkPointF4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF44_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, vector, point) -> itkCovariantVectorF4

        Parameters
        ----------
        vector: itkCovariantVectorF4 const &
        point: itkPointF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, vector, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        vector: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF44_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        point: itkPointF4 const &

        TransformDiffusionTensor3D(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF44_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &
        point: itkPointF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF4 const &

        TransformSymmetricSecondRankTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, point) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        point: itkPointF4 const &

        """
        return _itkTransformBasePython.itkTransformF44_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkTransformBasePython.itkTransformF44_UpdateTransformParameters(self, update, factor)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF44_GetNumberOfLocalParameters(self)

    def GetNumberOfFixedParameters(self):
        r"""GetNumberOfFixedParameters(self) -> unsigned long"""
        return _itkTransformBasePython.itkTransformF44_GetNumberOfFixedParameters(self)

    def GetInverse(self, arg0):
        r"""
        GetInverse(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkTransformF44 *

        """
        return _itkTransformBasePython.itkTransformF44_GetInverse(self, arg0)

    def GetInverseTransform(self):
        r"""GetInverseTransform(self) -> itkTransformF44_Pointer"""
        return _itkTransformBasePython.itkTransformF44_GetInverseTransform(self)

    def IsLinear(self):
        r"""IsLinear(self) -> bool"""
        return _itkTransformBasePython.itkTransformF44_IsLinear(self)

    def ComputeJacobianWithRespectToParameters(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToParameters(self, arg0, arg1)

    def ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2):
        r"""
        ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

        Parameters
        ----------
        p: itkPointF4 const &
        jacobian: itkArray2DF &
        arg2: itkArray2DF &

        """
        return _itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToParametersCachedTemporaries(self, p, jacobian, arg2)

    def ComputeJacobianWithRespectToPosition(self, arg0, arg1):
        r"""
        ComputeJacobianWithRespectToPosition(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: vnl_matrix_fixedF_4_4 &

        """
        return _itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToPosition(self, arg0, arg1)

    def ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian):
        r"""
        ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)

        Parameters
        ----------
        pnt: itkPointF4 const &
        jacobian: vnl_matrix_fixedF_4_4 &

        """
        return _itkTransformBasePython.itkTransformF44_ComputeInverseJacobianWithRespectToPosition(self, pnt, jacobian)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformBasePython.itkTransformF44_cast(obj)

# Register itkTransformF44 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF44_swigregister(itkTransformF44)

