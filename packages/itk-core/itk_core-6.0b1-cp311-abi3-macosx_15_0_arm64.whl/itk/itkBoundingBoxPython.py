# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBoundingBoxPython
else:
    import _itkBoundingBoxPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkMapContainerPython

def itkBoundingBoxUL2DMCULPD2_New():
    return itkBoundingBoxUL2DMCULPD2.New()

class itkBoundingBoxUL2DMCULPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL2DMCULPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL2DMCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL2DMCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPD2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL2DMCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2DMCULPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL2DMCULPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2DMCULPD2

        Create a new object of the class itkBoundingBoxUL2DMCULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2DMCULPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2DMCULPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL2DMCULPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL2DMCULPD2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL2DMCULPD2_swigregister(itkBoundingBoxUL2DMCULPD2)

def itkBoundingBoxUL2DVCULPD2_New():
    return itkBoundingBoxUL2DVCULPD2.New()

class itkBoundingBoxUL2DVCULPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL2DVCULPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL2DVCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL2DVCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPD2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL2DVCULPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2DVCULPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL2DVCULPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2DVCULPD2

        Create a new object of the class itkBoundingBoxUL2DVCULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2DVCULPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2DVCULPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL2DVCULPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL2DVCULPD2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL2DVCULPD2_swigregister(itkBoundingBoxUL2DVCULPD2)

def itkBoundingBoxUL2FMCULPF2_New():
    return itkBoundingBoxUL2FMCULPF2.New()

class itkBoundingBoxUL2FMCULPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL2FMCULPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL2FMCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL2FMCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL2FMCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2FMCULPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL2FMCULPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2FMCULPF2

        Create a new object of the class itkBoundingBoxUL2FMCULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2FMCULPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2FMCULPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL2FMCULPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL2FMCULPF2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL2FMCULPF2_swigregister(itkBoundingBoxUL2FMCULPF2)

def itkBoundingBoxUL2FVCULPF2_New():
    return itkBoundingBoxUL2FVCULPF2.New()

class itkBoundingBoxUL2FVCULPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL2FVCULPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL2FVCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL2FVCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL2FVCULPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL2FVCULPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL2FVCULPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL2FVCULPF2

        Create a new object of the class itkBoundingBoxUL2FVCULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL2FVCULPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL2FVCULPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL2FVCULPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL2FVCULPF2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL2FVCULPF2_swigregister(itkBoundingBoxUL2FVCULPF2)

def itkBoundingBoxUL3DMCULPD3_New():
    return itkBoundingBoxUL3DMCULPD3.New()

class itkBoundingBoxUL3DMCULPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL3DMCULPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL3DMCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL3DMCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPD3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD6"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL3DMCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3DMCULPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL3DMCULPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3DMCULPD3

        Create a new object of the class itkBoundingBoxUL3DMCULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3DMCULPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3DMCULPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL3DMCULPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL3DMCULPD3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL3DMCULPD3_swigregister(itkBoundingBoxUL3DMCULPD3)

def itkBoundingBoxUL3DVCULPD3_New():
    return itkBoundingBoxUL3DVCULPD3.New()

class itkBoundingBoxUL3DVCULPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL3DVCULPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL3DVCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL3DVCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPD3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD6"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL3DVCULPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3DVCULPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL3DVCULPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3DVCULPD3

        Create a new object of the class itkBoundingBoxUL3DVCULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3DVCULPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3DVCULPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL3DVCULPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL3DVCULPD3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL3DVCULPD3_swigregister(itkBoundingBoxUL3DVCULPD3)

def itkBoundingBoxUL3FMCULPF3_New():
    return itkBoundingBoxUL3FMCULPF3.New()

class itkBoundingBoxUL3FMCULPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL3FMCULPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL3FMCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL3FMCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF6"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL3FMCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3FMCULPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL3FMCULPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3FMCULPF3

        Create a new object of the class itkBoundingBoxUL3FMCULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3FMCULPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3FMCULPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL3FMCULPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL3FMCULPF3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL3FMCULPF3_swigregister(itkBoundingBoxUL3FMCULPF3)

def itkBoundingBoxUL3FVCULPF3_New():
    return itkBoundingBoxUL3FVCULPF3.New()

class itkBoundingBoxUL3FVCULPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL3FVCULPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL3FVCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL3FVCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF6"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL3FVCULPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL3FVCULPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL3FVCULPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL3FVCULPF3

        Create a new object of the class itkBoundingBoxUL3FVCULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL3FVCULPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL3FVCULPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL3FVCULPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL3FVCULPF3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL3FVCULPF3_swigregister(itkBoundingBoxUL3FVCULPF3)

def itkBoundingBoxUL4DMCULPD4_New():
    return itkBoundingBoxUL4DMCULPD4.New()

class itkBoundingBoxUL4DMCULPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL4DMCULPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL4DMCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL4DMCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPD4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD8"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL4DMCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL4DMCULPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL4DMCULPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL4DMCULPD4

        Create a new object of the class itkBoundingBoxUL4DMCULPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL4DMCULPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL4DMCULPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL4DMCULPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL4DMCULPD4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL4DMCULPD4_swigregister(itkBoundingBoxUL4DMCULPD4)

def itkBoundingBoxUL4DVCULPD4_New():
    return itkBoundingBoxUL4DVCULPD4.New()

class itkBoundingBoxUL4DVCULPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL4DVCULPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL4DVCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL4DVCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPD4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD8"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL4DVCULPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL4DVCULPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL4DVCULPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL4DVCULPD4

        Create a new object of the class itkBoundingBoxUL4DVCULPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL4DVCULPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL4DVCULPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL4DVCULPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL4DVCULPD4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL4DVCULPD4_swigregister(itkBoundingBoxUL4DVCULPD4)

def itkBoundingBoxUL4FMCULPF4_New():
    return itkBoundingBoxUL4FMCULPF4.New()

class itkBoundingBoxUL4FMCULPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL4FMCULPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL4FMCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL4FMCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULPF4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULPF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF8"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL4FMCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL4FMCULPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL4FMCULPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL4FMCULPF4

        Create a new object of the class itkBoundingBoxUL4FMCULPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL4FMCULPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL4FMCULPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL4FMCULPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL4FMCULPF4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL4FMCULPF4_swigregister(itkBoundingBoxUL4FMCULPF4)

def itkBoundingBoxUL4FVCULPF4_New():
    return itkBoundingBoxUL4FVCULPF4.New()

class itkBoundingBoxUL4FVCULPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxUL4FVCULPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxUL4FVCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxUL4FVCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULPF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF8"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxUL4FVCULPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxUL4FVCULPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxUL4FVCULPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxUL4FVCULPF4

        Create a new object of the class itkBoundingBoxUL4FVCULPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxUL4FVCULPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxUL4FVCULPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxUL4FVCULPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxUL4FVCULPF4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxUL4FVCULPF4_swigregister(itkBoundingBoxUL4FVCULPF4)

