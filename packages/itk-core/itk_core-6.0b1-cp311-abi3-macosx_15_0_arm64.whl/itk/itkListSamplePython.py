# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkListSamplePython
else:
    import _itkListSamplePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSamplePython
import itk.itkArrayPython

def itkListSampleVF2_New():
    return itkListSampleVF2.New()

class itkListSampleVF2(itk.itkSamplePython.itkSampleVF2):
    r"""Proxy of C++ itkListSampleVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkListSampleVF2_Pointer"""
        return _itkListSamplePython.itkListSampleVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkListSampleVF2_Pointer"""
        return _itkListSamplePython.itkListSampleVF2_Clone(self)

    def Resize(self, newsize):
        r"""
        Resize(self, newsize)

        Parameters
        ----------
        newsize: unsigned long

        """
        return _itkListSamplePython.itkListSampleVF2_Resize(self, newsize)

    def Clear(self):
        r"""Clear(self)"""
        return _itkListSamplePython.itkListSampleVF2_Clear(self)

    def PushBack(self, mv):
        r"""
        PushBack(self, mv)

        Parameters
        ----------
        mv: itkVectorF2 const &

        """
        return _itkListSamplePython.itkListSampleVF2_PushBack(self, mv)

    def SetMeasurement(self, instanceId, dim, value):
        r"""
        SetMeasurement(self, instanceId, dim, value)

        Parameters
        ----------
        instanceId: unsigned long
        dim: unsigned int
        value: float const &

        """
        return _itkListSamplePython.itkListSampleVF2_SetMeasurement(self, instanceId, dim, value)

    def SetMeasurementVector(self, instanceId, mv):
        r"""
        SetMeasurementVector(self, instanceId, mv)

        Parameters
        ----------
        instanceId: unsigned long
        mv: itkVectorF2 const &

        """
        return _itkListSamplePython.itkListSampleVF2_SetMeasurementVector(self, instanceId, mv)
    __swig_destroy__ = _itkListSamplePython.delete_itkListSampleVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkListSampleVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkListSamplePython.itkListSampleVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkListSampleVF2

        Create a new object of the class itkListSampleVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkListSampleVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkListSampleVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkListSampleVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkListSampleVF2 in _itkListSamplePython:
_itkListSamplePython.itkListSampleVF2_swigregister(itkListSampleVF2)

def itkListSampleVF3_New():
    return itkListSampleVF3.New()

class itkListSampleVF3(itk.itkSamplePython.itkSampleVF3):
    r"""Proxy of C++ itkListSampleVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkListSampleVF3_Pointer"""
        return _itkListSamplePython.itkListSampleVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkListSampleVF3_Pointer"""
        return _itkListSamplePython.itkListSampleVF3_Clone(self)

    def Resize(self, newsize):
        r"""
        Resize(self, newsize)

        Parameters
        ----------
        newsize: unsigned long

        """
        return _itkListSamplePython.itkListSampleVF3_Resize(self, newsize)

    def Clear(self):
        r"""Clear(self)"""
        return _itkListSamplePython.itkListSampleVF3_Clear(self)

    def PushBack(self, mv):
        r"""
        PushBack(self, mv)

        Parameters
        ----------
        mv: itkVectorF3 const &

        """
        return _itkListSamplePython.itkListSampleVF3_PushBack(self, mv)

    def SetMeasurement(self, instanceId, dim, value):
        r"""
        SetMeasurement(self, instanceId, dim, value)

        Parameters
        ----------
        instanceId: unsigned long
        dim: unsigned int
        value: float const &

        """
        return _itkListSamplePython.itkListSampleVF3_SetMeasurement(self, instanceId, dim, value)

    def SetMeasurementVector(self, instanceId, mv):
        r"""
        SetMeasurementVector(self, instanceId, mv)

        Parameters
        ----------
        instanceId: unsigned long
        mv: itkVectorF3 const &

        """
        return _itkListSamplePython.itkListSampleVF3_SetMeasurementVector(self, instanceId, mv)
    __swig_destroy__ = _itkListSamplePython.delete_itkListSampleVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkListSampleVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkListSamplePython.itkListSampleVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkListSampleVF3

        Create a new object of the class itkListSampleVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkListSampleVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkListSampleVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkListSampleVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkListSampleVF3 in _itkListSamplePython:
_itkListSamplePython.itkListSampleVF3_swigregister(itkListSampleVF3)

def itkListSampleVF4_New():
    return itkListSampleVF4.New()

class itkListSampleVF4(itk.itkSamplePython.itkSampleVF4):
    r"""Proxy of C++ itkListSampleVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkListSampleVF4_Pointer"""
        return _itkListSamplePython.itkListSampleVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkListSampleVF4_Pointer"""
        return _itkListSamplePython.itkListSampleVF4_Clone(self)

    def Resize(self, newsize):
        r"""
        Resize(self, newsize)

        Parameters
        ----------
        newsize: unsigned long

        """
        return _itkListSamplePython.itkListSampleVF4_Resize(self, newsize)

    def Clear(self):
        r"""Clear(self)"""
        return _itkListSamplePython.itkListSampleVF4_Clear(self)

    def PushBack(self, mv):
        r"""
        PushBack(self, mv)

        Parameters
        ----------
        mv: itkVectorF4 const &

        """
        return _itkListSamplePython.itkListSampleVF4_PushBack(self, mv)

    def SetMeasurement(self, instanceId, dim, value):
        r"""
        SetMeasurement(self, instanceId, dim, value)

        Parameters
        ----------
        instanceId: unsigned long
        dim: unsigned int
        value: float const &

        """
        return _itkListSamplePython.itkListSampleVF4_SetMeasurement(self, instanceId, dim, value)

    def SetMeasurementVector(self, instanceId, mv):
        r"""
        SetMeasurementVector(self, instanceId, mv)

        Parameters
        ----------
        instanceId: unsigned long
        mv: itkVectorF4 const &

        """
        return _itkListSamplePython.itkListSampleVF4_SetMeasurementVector(self, instanceId, mv)
    __swig_destroy__ = _itkListSamplePython.delete_itkListSampleVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkListSampleVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkListSamplePython.itkListSampleVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkListSampleVF4

        Create a new object of the class itkListSampleVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkListSampleVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkListSampleVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkListSampleVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkListSampleVF4 in _itkListSamplePython:
_itkListSamplePython.itkListSampleVF4_swigregister(itkListSampleVF4)

