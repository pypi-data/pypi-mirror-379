# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineBaseTransformPython
else:
    import _itkBSplineBaseTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkBSplineInterpolationWeightFunctionPython
import itk.itkFunctionBasePython
import itk.itkRGBPixelPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
class itkBSplineBaseTransformD23(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkBSplineBaseTransformD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkBSplineBaseTransformD23_Pointer"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_Clone(self)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_SetIdentity(self)

    def SetCoefficientImages(self, images):
        r"""
        SetCoefficientImages(self, images)

        Parameters
        ----------
        images: itk::FixedArray< itk::SmartPointer< itk::Image< double > >,2 > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_SetCoefficientImages(self, images)

    def GetCoefficientImages(self):
        r"""GetCoefficientImages(self) -> itk::FixedArray< itk::SmartPointer< itk::Image< double > >,2 > const"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_GetCoefficientImages(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_UpdateTransformParameters(self, update, factor)

    def TransformPoint(self, *args):
        r"""
        TransformPoint(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        TransformPoint(self, inputPoint, outputPoint, weights, indices, inside)

        Parameters
        ----------
        inputPoint: itkPointD2 const &
        outputPoint: itkPointD2 &
        weights: itkFixedArrayD16 &
        indices: itkFixedArrayUL16 &
        inside: bool &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_TransformPoint(self, *args)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_TransformVector(self, *args)

    def ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2):
        r"""
        ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: itkFixedArrayD16 &
        arg2: itkFixedArrayUL16 &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

    def GetNumberOfParametersPerDimension(self):
        r"""GetNumberOfParametersPerDimension(self) -> unsigned long"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_GetNumberOfParametersPerDimension(self)

    def GetNumberOfAffectedWeights(self):
        r"""GetNumberOfAffectedWeights(self) -> unsigned int"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_GetNumberOfAffectedWeights(self)
    __swig_destroy__ = _itkBSplineBaseTransformPython.delete_itkBSplineBaseTransformD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineBaseTransformD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_cast(obj)

# Register itkBSplineBaseTransformD23 in _itkBSplineBaseTransformPython:
_itkBSplineBaseTransformPython.itkBSplineBaseTransformD23_swigregister(itkBSplineBaseTransformD23)
class itkBSplineBaseTransformD33(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkBSplineBaseTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkBSplineBaseTransformD33_Pointer"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_Clone(self)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_SetIdentity(self)

    def SetCoefficientImages(self, images):
        r"""
        SetCoefficientImages(self, images)

        Parameters
        ----------
        images: itk::FixedArray< itk::SmartPointer< itk::Image< double,3 > > > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_SetCoefficientImages(self, images)

    def GetCoefficientImages(self):
        r"""GetCoefficientImages(self) -> itk::FixedArray< itk::SmartPointer< itk::Image< double,3 > > > const"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_GetCoefficientImages(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_UpdateTransformParameters(self, update, factor)

    def TransformPoint(self, *args):
        r"""
        TransformPoint(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        TransformPoint(self, inputPoint, outputPoint, weights, indices, inside)

        Parameters
        ----------
        inputPoint: itkPointD3 const &
        outputPoint: itkPointD3 &
        weights: itkFixedArrayD64 &
        indices: itkFixedArrayUL64 &
        inside: bool &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_TransformPoint(self, *args)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_TransformVector(self, *args)

    def ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2):
        r"""
        ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: itkFixedArrayD64 &
        arg2: itkFixedArrayUL64 &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

    def GetNumberOfParametersPerDimension(self):
        r"""GetNumberOfParametersPerDimension(self) -> unsigned long"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_GetNumberOfParametersPerDimension(self)

    def GetNumberOfAffectedWeights(self):
        r"""GetNumberOfAffectedWeights(self) -> unsigned int"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_GetNumberOfAffectedWeights(self)
    __swig_destroy__ = _itkBSplineBaseTransformPython.delete_itkBSplineBaseTransformD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineBaseTransformD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_cast(obj)

# Register itkBSplineBaseTransformD33 in _itkBSplineBaseTransformPython:
_itkBSplineBaseTransformPython.itkBSplineBaseTransformD33_swigregister(itkBSplineBaseTransformD33)
class itkBSplineBaseTransformD43(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkBSplineBaseTransformD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Clone(self):
        r"""Clone(self) -> itkBSplineBaseTransformD43_Pointer"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_Clone(self)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_SetIdentity(self)

    def SetCoefficientImages(self, images):
        r"""
        SetCoefficientImages(self, images)

        Parameters
        ----------
        images: itk::FixedArray< itk::SmartPointer< itk::Image< double,4 > >,4 > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_SetCoefficientImages(self, images)

    def GetCoefficientImages(self):
        r"""GetCoefficientImages(self) -> itk::FixedArray< itk::SmartPointer< itk::Image< double,4 > >,4 > const"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_GetCoefficientImages(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_UpdateTransformParameters(self, update, factor)

    def TransformPoint(self, *args):
        r"""
        TransformPoint(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        TransformPoint(self, inputPoint, outputPoint, weights, indices, inside)

        Parameters
        ----------
        inputPoint: itkPointD4 const &
        outputPoint: itkPointD4 &
        weights: itkFixedArrayD256 &
        indices: itkFixedArrayUL256 &
        inside: bool &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_TransformPoint(self, *args)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_TransformVector(self, *args)

    def ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2):
        r"""
        ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: itkFixedArrayD256 &
        arg2: itkFixedArrayUL256 &

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_ComputeJacobianFromBSplineWeightsWithRespectToPosition(self, arg0, arg1, arg2)

    def GetNumberOfParametersPerDimension(self):
        r"""GetNumberOfParametersPerDimension(self) -> unsigned long"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_GetNumberOfParametersPerDimension(self)

    def GetNumberOfAffectedWeights(self):
        r"""GetNumberOfAffectedWeights(self) -> unsigned int"""
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_GetNumberOfAffectedWeights(self)
    __swig_destroy__ = _itkBSplineBaseTransformPython.delete_itkBSplineBaseTransformD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineBaseTransformD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_cast(obj)

# Register itkBSplineBaseTransformD43 in _itkBSplineBaseTransformPython:
_itkBSplineBaseTransformPython.itkBSplineBaseTransformD43_swigregister(itkBSplineBaseTransformD43)

