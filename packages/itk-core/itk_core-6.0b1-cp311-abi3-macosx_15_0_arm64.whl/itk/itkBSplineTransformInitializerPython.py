# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineTransformInitializerPython
else:
    import _itkBSplineTransformInitializerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkBSplineTransformPython
import itk.itkContinuousIndexPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkBSplineBaseTransformPython
import itk.itkBSplineInterpolationWeightFunctionPython
import itk.itkFunctionBasePython
import itk.itkArray2DPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython

def itkBSplineTransformInitializerBSTD23ID2_New():
    return itkBSplineTransformInitializerBSTD23ID2.New()

class itkBSplineTransformInitializerBSTD23ID2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD23ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD23ID2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD23ID2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD23"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD23 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageD2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD23ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD23ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD23ID2

        Create a new object of the class itkBSplineTransformInitializerBSTD23ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD23ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD23ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD23ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD23ID2 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ID2_swigregister(itkBSplineTransformInitializerBSTD23ID2)

def itkBSplineTransformInitializerBSTD23IF2_New():
    return itkBSplineTransformInitializerBSTD23IF2.New()

class itkBSplineTransformInitializerBSTD23IF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD23IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD23IF2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD23IF2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD23"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD23 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageF2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD23IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD23IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD23IF2

        Create a new object of the class itkBSplineTransformInitializerBSTD23IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD23IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD23IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD23IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD23IF2 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IF2_swigregister(itkBSplineTransformInitializerBSTD23IF2)

def itkBSplineTransformInitializerBSTD23ISS2_New():
    return itkBSplineTransformInitializerBSTD23ISS2.New()

class itkBSplineTransformInitializerBSTD23ISS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD23ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD23ISS2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD23ISS2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD23"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD23 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageSS2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS2 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD23ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD23ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD23ISS2

        Create a new object of the class itkBSplineTransformInitializerBSTD23ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD23ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD23ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD23ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD23ISS2 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23ISS2_swigregister(itkBSplineTransformInitializerBSTD23ISS2)

def itkBSplineTransformInitializerBSTD23IUC2_New():
    return itkBSplineTransformInitializerBSTD23IUC2.New()

class itkBSplineTransformInitializerBSTD23IUC2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD23IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD23IUC2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD23IUC2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD23"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD23 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUC2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD23IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD23IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD23IUC2

        Create a new object of the class itkBSplineTransformInitializerBSTD23IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD23IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD23IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD23IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD23IUC2 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUC2_swigregister(itkBSplineTransformInitializerBSTD23IUC2)

def itkBSplineTransformInitializerBSTD23IUS2_New():
    return itkBSplineTransformInitializerBSTD23IUS2.New()

class itkBSplineTransformInitializerBSTD23IUS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD23IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD23IUS2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD23IUS2_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD23"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD23 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUS2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS2 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD23IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD23IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD23IUS2

        Create a new object of the class itkBSplineTransformInitializerBSTD23IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD23IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD23IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD23IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD23IUS2 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD23IUS2_swigregister(itkBSplineTransformInitializerBSTD23IUS2)

def itkBSplineTransformInitializerBSTD33ID3_New():
    return itkBSplineTransformInitializerBSTD33ID3.New()

class itkBSplineTransformInitializerBSTD33ID3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD33ID3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD33ID3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD33"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD33 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageD3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD33ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD33ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD33ID3

        Create a new object of the class itkBSplineTransformInitializerBSTD33ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD33ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD33ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD33ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD33ID3 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ID3_swigregister(itkBSplineTransformInitializerBSTD33ID3)

def itkBSplineTransformInitializerBSTD33IF3_New():
    return itkBSplineTransformInitializerBSTD33IF3.New()

class itkBSplineTransformInitializerBSTD33IF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD33IF3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD33IF3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD33"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD33 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageF3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD33IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD33IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD33IF3

        Create a new object of the class itkBSplineTransformInitializerBSTD33IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD33IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD33IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD33IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD33IF3 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IF3_swigregister(itkBSplineTransformInitializerBSTD33IF3)

def itkBSplineTransformInitializerBSTD33ISS3_New():
    return itkBSplineTransformInitializerBSTD33ISS3.New()

class itkBSplineTransformInitializerBSTD33ISS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD33ISS3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD33ISS3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD33"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD33 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageSS3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS3 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD33ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD33ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD33ISS3

        Create a new object of the class itkBSplineTransformInitializerBSTD33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD33ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD33ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD33ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD33ISS3 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33ISS3_swigregister(itkBSplineTransformInitializerBSTD33ISS3)

def itkBSplineTransformInitializerBSTD33IUC3_New():
    return itkBSplineTransformInitializerBSTD33IUC3.New()

class itkBSplineTransformInitializerBSTD33IUC3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD33IUC3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD33IUC3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD33"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD33 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUC3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD33IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD33IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD33IUC3

        Create a new object of the class itkBSplineTransformInitializerBSTD33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD33IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD33IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD33IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD33IUC3 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUC3_swigregister(itkBSplineTransformInitializerBSTD33IUC3)

def itkBSplineTransformInitializerBSTD33IUS3_New():
    return itkBSplineTransformInitializerBSTD33IUS3.New()

class itkBSplineTransformInitializerBSTD33IUS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD33IUS3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD33IUS3_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD33"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD33 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUS3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS3 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD33IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD33IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD33IUS3

        Create a new object of the class itkBSplineTransformInitializerBSTD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD33IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD33IUS3 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD33IUS3_swigregister(itkBSplineTransformInitializerBSTD33IUS3)

def itkBSplineTransformInitializerBSTD43ID4_New():
    return itkBSplineTransformInitializerBSTD43ID4.New()

class itkBSplineTransformInitializerBSTD43ID4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD43ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD43ID4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD43ID4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD43"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD43 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageD4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD43ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD43ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD43ID4

        Create a new object of the class itkBSplineTransformInitializerBSTD43ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD43ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD43ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD43ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD43ID4 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ID4_swigregister(itkBSplineTransformInitializerBSTD43ID4)

def itkBSplineTransformInitializerBSTD43IF4_New():
    return itkBSplineTransformInitializerBSTD43IF4.New()

class itkBSplineTransformInitializerBSTD43IF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD43IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD43IF4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD43IF4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD43"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD43 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageF4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD43IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD43IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD43IF4

        Create a new object of the class itkBSplineTransformInitializerBSTD43IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD43IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD43IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD43IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD43IF4 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IF4_swigregister(itkBSplineTransformInitializerBSTD43IF4)

def itkBSplineTransformInitializerBSTD43ISS4_New():
    return itkBSplineTransformInitializerBSTD43ISS4.New()

class itkBSplineTransformInitializerBSTD43ISS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD43ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD43ISS4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD43ISS4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD43"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD43 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageSS4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS4 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD43ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD43ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD43ISS4

        Create a new object of the class itkBSplineTransformInitializerBSTD43ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD43ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD43ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD43ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD43ISS4 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43ISS4_swigregister(itkBSplineTransformInitializerBSTD43ISS4)

def itkBSplineTransformInitializerBSTD43IUC4_New():
    return itkBSplineTransformInitializerBSTD43IUC4.New()

class itkBSplineTransformInitializerBSTD43IUC4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD43IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD43IUC4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD43IUC4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD43"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD43 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUC4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD43IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD43IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD43IUC4

        Create a new object of the class itkBSplineTransformInitializerBSTD43IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD43IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD43IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD43IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD43IUC4 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUC4_swigregister(itkBSplineTransformInitializerBSTD43IUC4)

def itkBSplineTransformInitializerBSTD43IUS4_New():
    return itkBSplineTransformInitializerBSTD43IUS4.New()

class itkBSplineTransformInitializerBSTD43IUS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBSplineTransformInitializerBSTD43IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformInitializerBSTD43IUS4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformInitializerBSTD43IUS4_Pointer"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_Clone(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkBSplineTransformD43"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_GetTransform(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkBSplineTransformD43 *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_SetTransform(self, _arg)

    def GetImage(self):
        r"""GetImage(self) -> itkImageUS4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_GetImage(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS4 const *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_SetImage(self, _arg)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_GetTransformDomainMeshSize(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_SetTransformDomainMeshSize(self, arg0)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_InitializeTransform(self)
    __swig_destroy__ = _itkBSplineTransformInitializerPython.delete_itkBSplineTransformInitializerBSTD43IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformInitializerBSTD43IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformInitializerBSTD43IUS4

        Create a new object of the class itkBSplineTransformInitializerBSTD43IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformInitializerBSTD43IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformInitializerBSTD43IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformInitializerBSTD43IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformInitializerBSTD43IUS4 in _itkBSplineTransformInitializerPython:
_itkBSplineTransformInitializerPython.itkBSplineTransformInitializerBSTD43IUS4_swigregister(itkBSplineTransformInitializerBSTD43IUS4)

