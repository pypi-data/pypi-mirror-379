# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_cost_functionPython
else:
    import _vnl_cost_functionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_unary_functionPython
class vnl_cost_function(itk.vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD):
    r"""Proxy of C++ vnl_cost_function class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_cost_functionPython.delete_vnl_cost_function

    def compute(self, x, f, g):
        r"""
        compute(self, x, f, g)

        Parameters
        ----------
        x: vnl_vectorD const &
        f: double *
        g: vnl_vectorD *

        """
        return _vnl_cost_functionPython.vnl_cost_function_compute(self, x, f, g)

    def get_number_of_unknowns(self):
        r"""get_number_of_unknowns(self) -> int"""
        return _vnl_cost_functionPython.vnl_cost_function_get_number_of_unknowns(self)

    def reported_error(self, f_value):
        r"""
        reported_error(self, f_value) -> double

        Parameters
        ----------
        f_value: double

        """
        return _vnl_cost_functionPython.vnl_cost_function_reported_error(self, f_value)

    def gradf(self, *args):
        r"""
        gradf(self, x, gradient)

        Parameters
        ----------
        x: vnl_vectorD const &
        gradient: vnl_vectorD &

        gradf(self, x) -> vnl_vectorD

        Parameters
        ----------
        x: vnl_vectorD const &

        """
        return _vnl_cost_functionPython.vnl_cost_function_gradf(self, *args)

    def fdgradf(self, *args):
        r"""
        fdgradf(self, x, gradient, stepsize=1.0000000000000001E-5)

        Parameters
        ----------
        x: vnl_vectorD const &
        gradient: vnl_vectorD &
        stepsize: double

        fdgradf(self, x) -> vnl_vectorD

        Parameters
        ----------
        x: vnl_vectorD const &

        """
        return _vnl_cost_functionPython.vnl_cost_function_fdgradf(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_cost_function
        __init__(self, arg0) -> vnl_cost_function

        Parameters
        ----------
        arg0: vnl_cost_function const &

        """
        _vnl_cost_functionPython.vnl_cost_function_swiginit(self, _vnl_cost_functionPython.new_vnl_cost_function(*args))

# Register vnl_cost_function in _vnl_cost_functionPython:
_vnl_cost_functionPython.vnl_cost_function_swigregister(vnl_cost_function)

