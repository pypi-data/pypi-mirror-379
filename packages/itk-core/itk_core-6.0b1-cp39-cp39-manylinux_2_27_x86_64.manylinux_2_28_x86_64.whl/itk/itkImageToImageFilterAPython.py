# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterAPython
else:
    import _itkImageToImageFilterAPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkImageToImageFilterICVF22ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterICVF22ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF22ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_cast(obj)

# Register itkImageToImageFilterICVF22ICVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF22ICVF22_swigregister(itkImageToImageFilterICVF22ICVF22)
class itkImageToImageFilterICVF22IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterICVF22IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF22IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_cast(obj)

# Register itkImageToImageFilterICVF22IVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF22IVF22_swigregister(itkImageToImageFilterICVF22IVF22)
class itkImageToImageFilterICVF22VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF22VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF22VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_cast(obj)

# Register itkImageToImageFilterICVF22VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF22VIF2_swigregister(itkImageToImageFilterICVF22VIF2)
class itkImageToImageFilterICVF23ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterICVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF23ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_cast(obj)

# Register itkImageToImageFilterICVF23ICVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23_swigregister(itkImageToImageFilterICVF23ICVF23)
class itkImageToImageFilterICVF23IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterICVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_cast(obj)

# Register itkImageToImageFilterICVF23IVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF23IVF23_swigregister(itkImageToImageFilterICVF23IVF23)
class itkImageToImageFilterICVF23VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF23VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF23VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_cast(obj)

# Register itkImageToImageFilterICVF23VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF23VIF3_swigregister(itkImageToImageFilterICVF23VIF3)
class itkImageToImageFilterICVF24ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterICVF24ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF24ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_cast(obj)

# Register itkImageToImageFilterICVF24ICVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF24ICVF24_swigregister(itkImageToImageFilterICVF24ICVF24)
class itkImageToImageFilterICVF24IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterICVF24IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF24IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_cast(obj)

# Register itkImageToImageFilterICVF24IVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF24IVF24_swigregister(itkImageToImageFilterICVF24IVF24)
class itkImageToImageFilterICVF24VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF24VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF24VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_cast(obj)

# Register itkImageToImageFilterICVF24VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF24VIF4_swigregister(itkImageToImageFilterICVF24VIF4)
class itkImageToImageFilterICVF32ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterICVF32ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF32ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_cast(obj)

# Register itkImageToImageFilterICVF32ICVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF32ICVF32_swigregister(itkImageToImageFilterICVF32ICVF32)
class itkImageToImageFilterICVF32IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterICVF32IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF32IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_cast(obj)

# Register itkImageToImageFilterICVF32IVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF32IVF32_swigregister(itkImageToImageFilterICVF32IVF32)
class itkImageToImageFilterICVF32VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF32VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF32VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_cast(obj)

# Register itkImageToImageFilterICVF32VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF32VIF2_swigregister(itkImageToImageFilterICVF32VIF2)
class itkImageToImageFilterICVF33ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterICVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF33ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_cast(obj)

# Register itkImageToImageFilterICVF33ICVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33_swigregister(itkImageToImageFilterICVF33ICVF33)
class itkImageToImageFilterICVF33IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterICVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_cast(obj)

# Register itkImageToImageFilterICVF33IVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF33IVF33_swigregister(itkImageToImageFilterICVF33IVF33)
class itkImageToImageFilterICVF33VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF33VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF33VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_cast(obj)

# Register itkImageToImageFilterICVF33VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF33VIF3_swigregister(itkImageToImageFilterICVF33VIF3)
class itkImageToImageFilterICVF34ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterICVF34ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF34ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_cast(obj)

# Register itkImageToImageFilterICVF34ICVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF34ICVF34_swigregister(itkImageToImageFilterICVF34ICVF34)
class itkImageToImageFilterICVF34IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterICVF34IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF34IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_cast(obj)

# Register itkImageToImageFilterICVF34IVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF34IVF34_swigregister(itkImageToImageFilterICVF34IVF34)
class itkImageToImageFilterICVF34VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF34VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF34VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_cast(obj)

# Register itkImageToImageFilterICVF34VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF34VIF4_swigregister(itkImageToImageFilterICVF34VIF4)
class itkImageToImageFilterICVF42ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterICVF42ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF42ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_cast(obj)

# Register itkImageToImageFilterICVF42ICVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF42ICVF42_swigregister(itkImageToImageFilterICVF42ICVF42)
class itkImageToImageFilterICVF42IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterICVF42IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF42IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_cast(obj)

# Register itkImageToImageFilterICVF42IVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF42IVF42_swigregister(itkImageToImageFilterICVF42IVF42)
class itkImageToImageFilterICVF42VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF42VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF42VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_cast(obj)

# Register itkImageToImageFilterICVF42VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF42VIF2_swigregister(itkImageToImageFilterICVF42VIF2)
class itkImageToImageFilterICVF43ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterICVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF43ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_cast(obj)

# Register itkImageToImageFilterICVF43ICVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43_swigregister(itkImageToImageFilterICVF43ICVF43)
class itkImageToImageFilterICVF43IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterICVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_cast(obj)

# Register itkImageToImageFilterICVF43IVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF43IVF43_swigregister(itkImageToImageFilterICVF43IVF43)
class itkImageToImageFilterICVF43VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF43VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF43VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_cast(obj)

# Register itkImageToImageFilterICVF43VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF43VIF3_swigregister(itkImageToImageFilterICVF43VIF3)
class itkImageToImageFilterICVF44ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterICVF44ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF44ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_cast(obj)

# Register itkImageToImageFilterICVF44ICVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF44ICVF44_swigregister(itkImageToImageFilterICVF44ICVF44)
class itkImageToImageFilterICVF44IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterICVF44IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF44IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_cast(obj)

# Register itkImageToImageFilterICVF44IVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF44IVF44_swigregister(itkImageToImageFilterICVF44IVF44)
class itkImageToImageFilterICVF44VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF44VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterICVF44VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_cast(obj)

# Register itkImageToImageFilterICVF44VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterICVF44VIF4_swigregister(itkImageToImageFilterICVF44VIF4)
class itkImageToImageFilterID2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_cast(obj)

# Register itkImageToImageFilterID2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2ID2_swigregister(itkImageToImageFilterID2ID2)
class itkImageToImageFilterID2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterID2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_cast(obj)

# Register itkImageToImageFilterID2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2IF2_swigregister(itkImageToImageFilterID2IF2)
class itkImageToImageFilterID2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterID2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_cast(obj)

# Register itkImageToImageFilterID2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2ISI2_swigregister(itkImageToImageFilterID2ISI2)
class itkImageToImageFilterID2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_cast(obj)

# Register itkImageToImageFilterID2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2_swigregister(itkImageToImageFilterID2ISS2)
class itkImageToImageFilterID2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_cast(obj)

# Register itkImageToImageFilterID2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2_swigregister(itkImageToImageFilterID2IUC2)
class itkImageToImageFilterID2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterID2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_cast(obj)

# Register itkImageToImageFilterID2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2IUI2_swigregister(itkImageToImageFilterID2IUI2)
class itkImageToImageFilterID2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterID2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_cast(obj)

# Register itkImageToImageFilterID2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2IUL2_swigregister(itkImageToImageFilterID2IUL2)
class itkImageToImageFilterID2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_cast(obj)

# Register itkImageToImageFilterID2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2_swigregister(itkImageToImageFilterID2IUS2)
class itkImageToImageFilterID3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_cast(obj)

# Register itkImageToImageFilterID3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3ID3_swigregister(itkImageToImageFilterID3ID3)
class itkImageToImageFilterID3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_cast(obj)

# Register itkImageToImageFilterID3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3IF3_swigregister(itkImageToImageFilterID3IF3)
class itkImageToImageFilterID3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterID3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_cast(obj)

# Register itkImageToImageFilterID3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3ISI3_swigregister(itkImageToImageFilterID3ISI3)
class itkImageToImageFilterID3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_cast(obj)

# Register itkImageToImageFilterID3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3_swigregister(itkImageToImageFilterID3ISS3)
class itkImageToImageFilterID3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_cast(obj)

# Register itkImageToImageFilterID3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3_swigregister(itkImageToImageFilterID3IUC3)
class itkImageToImageFilterID3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterID3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_cast(obj)

# Register itkImageToImageFilterID3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3IUI3_swigregister(itkImageToImageFilterID3IUI3)
class itkImageToImageFilterID3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterID3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_cast(obj)

# Register itkImageToImageFilterID3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3IUL3_swigregister(itkImageToImageFilterID3IUL3)
class itkImageToImageFilterID3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_cast(obj)

# Register itkImageToImageFilterID3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3_swigregister(itkImageToImageFilterID3IUS3)
class itkImageToImageFilterID4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_cast(obj)

# Register itkImageToImageFilterID4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4ID4_swigregister(itkImageToImageFilterID4ID4)
class itkImageToImageFilterID4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterID4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_cast(obj)

# Register itkImageToImageFilterID4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4IF4_swigregister(itkImageToImageFilterID4IF4)
class itkImageToImageFilterID4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterID4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_cast(obj)

# Register itkImageToImageFilterID4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4ISI4_swigregister(itkImageToImageFilterID4ISI4)
class itkImageToImageFilterID4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_cast(obj)

# Register itkImageToImageFilterID4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4_swigregister(itkImageToImageFilterID4ISS4)
class itkImageToImageFilterID4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_cast(obj)

# Register itkImageToImageFilterID4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4_swigregister(itkImageToImageFilterID4IUC4)
class itkImageToImageFilterID4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterID4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_cast(obj)

# Register itkImageToImageFilterID4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4IUI4_swigregister(itkImageToImageFilterID4IUI4)
class itkImageToImageFilterID4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterID4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_cast(obj)

# Register itkImageToImageFilterID4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4IUL4_swigregister(itkImageToImageFilterID4IUL4)
class itkImageToImageFilterID4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_cast(obj)

# Register itkImageToImageFilterID4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4_swigregister(itkImageToImageFilterID4IUS4)
class itkImageToImageFilterIF2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_cast(obj)

# Register itkImageToImageFilterIF2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2_swigregister(itkImageToImageFilterIF2ID2)
class itkImageToImageFilterIF2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_cast(obj)

# Register itkImageToImageFilterIF2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2_swigregister(itkImageToImageFilterIF2IF2)
class itkImageToImageFilterIF2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIF2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_cast(obj)

# Register itkImageToImageFilterIF2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2ISI2_swigregister(itkImageToImageFilterIF2ISI2)
class itkImageToImageFilterIF2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_cast(obj)

# Register itkImageToImageFilterIF2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2_swigregister(itkImageToImageFilterIF2ISS2)
class itkImageToImageFilterIF2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_cast(obj)

# Register itkImageToImageFilterIF2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2_swigregister(itkImageToImageFilterIF2IUC2)
class itkImageToImageFilterIF2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIF2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_cast(obj)

# Register itkImageToImageFilterIF2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2IUI2_swigregister(itkImageToImageFilterIF2IUI2)
class itkImageToImageFilterIF2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIF2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_cast(obj)

# Register itkImageToImageFilterIF2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2IUL2_swigregister(itkImageToImageFilterIF2IUL2)
class itkImageToImageFilterIF2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_cast(obj)

# Register itkImageToImageFilterIF2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2_swigregister(itkImageToImageFilterIF2IUS2)
class itkImageToImageFilterIF3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_cast(obj)

# Register itkImageToImageFilterIF3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3_swigregister(itkImageToImageFilterIF3ID3)
class itkImageToImageFilterIF3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_cast(obj)

# Register itkImageToImageFilterIF3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3_swigregister(itkImageToImageFilterIF3IF3)
class itkImageToImageFilterIF3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIF3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_cast(obj)

# Register itkImageToImageFilterIF3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3ISI3_swigregister(itkImageToImageFilterIF3ISI3)
class itkImageToImageFilterIF3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_cast(obj)

# Register itkImageToImageFilterIF3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3_swigregister(itkImageToImageFilterIF3ISS3)
class itkImageToImageFilterIF3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_cast(obj)

# Register itkImageToImageFilterIF3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3_swigregister(itkImageToImageFilterIF3IUC3)
class itkImageToImageFilterIF3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIF3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_cast(obj)

# Register itkImageToImageFilterIF3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3IUI3_swigregister(itkImageToImageFilterIF3IUI3)
class itkImageToImageFilterIF3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIF3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_cast(obj)

# Register itkImageToImageFilterIF3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3IUL3_swigregister(itkImageToImageFilterIF3IUL3)
class itkImageToImageFilterIF3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_cast(obj)

# Register itkImageToImageFilterIF3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3_swigregister(itkImageToImageFilterIF3IUS3)
class itkImageToImageFilterIF4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIF4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_cast(obj)

# Register itkImageToImageFilterIF4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4ID4_swigregister(itkImageToImageFilterIF4ID4)
class itkImageToImageFilterIF4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_cast(obj)

# Register itkImageToImageFilterIF4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4_swigregister(itkImageToImageFilterIF4IF4)
class itkImageToImageFilterIF4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIF4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_cast(obj)

# Register itkImageToImageFilterIF4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4ISI4_swigregister(itkImageToImageFilterIF4ISI4)
class itkImageToImageFilterIF4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_cast(obj)

# Register itkImageToImageFilterIF4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4_swigregister(itkImageToImageFilterIF4ISS4)
class itkImageToImageFilterIF4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_cast(obj)

# Register itkImageToImageFilterIF4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4_swigregister(itkImageToImageFilterIF4IUC4)
class itkImageToImageFilterIF4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIF4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_cast(obj)

# Register itkImageToImageFilterIF4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4IUI4_swigregister(itkImageToImageFilterIF4IUI4)
class itkImageToImageFilterIF4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIF4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_cast(obj)

# Register itkImageToImageFilterIF4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4IUL4_swigregister(itkImageToImageFilterIF4IUL4)
class itkImageToImageFilterIF4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_cast(obj)

# Register itkImageToImageFilterIF4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4_swigregister(itkImageToImageFilterIF4IUS4)
class itkImageToImageFilterIRGBAUC2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBAUC2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2IRGBAUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC2IRGBAUC2_swigregister(itkImageToImageFilterIRGBAUC2IRGBAUC2)
class itkImageToImageFilterIRGBAUC3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBAUC3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3IRGBAUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3_swigregister(itkImageToImageFilterIRGBAUC3IRGBAUC3)
class itkImageToImageFilterIRGBAUC4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBAUC4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4IRGBAUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC4IRGBAUC4_swigregister(itkImageToImageFilterIRGBAUC4IRGBAUC4)
class itkImageToImageFilterIRGBUC2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBUC2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_cast(obj)

# Register itkImageToImageFilterIRGBUC2IRGBUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC2IRGBUC2_swigregister(itkImageToImageFilterIRGBUC2IRGBUC2)
class itkImageToImageFilterIRGBUC3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_cast(obj)

# Register itkImageToImageFilterIRGBUC3IRGBUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3_swigregister(itkImageToImageFilterIRGBUC3IRGBUC3)
class itkImageToImageFilterIRGBUC4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIRGBUC4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_cast(obj)

# Register itkImageToImageFilterIRGBUC4IRGBUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4_swigregister(itkImageToImageFilterIRGBUC4IRGBUC4)
class itkImageToImageFilterISI2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterISI2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_cast(obj)

# Register itkImageToImageFilterISI2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2ID2_swigregister(itkImageToImageFilterISI2ID2)
class itkImageToImageFilterISI2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterISI2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_cast(obj)

# Register itkImageToImageFilterISI2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2IF2_swigregister(itkImageToImageFilterISI2IF2)
class itkImageToImageFilterISI2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterISI2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_cast(obj)

# Register itkImageToImageFilterISI2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2ISI2_swigregister(itkImageToImageFilterISI2ISI2)
class itkImageToImageFilterISI2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISI2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_cast(obj)

# Register itkImageToImageFilterISI2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2ISS2_swigregister(itkImageToImageFilterISI2ISS2)
class itkImageToImageFilterISI2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterISI2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_cast(obj)

# Register itkImageToImageFilterISI2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2IUC2_swigregister(itkImageToImageFilterISI2IUC2)
class itkImageToImageFilterISI2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterISI2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_cast(obj)

# Register itkImageToImageFilterISI2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2IUI2_swigregister(itkImageToImageFilterISI2IUI2)
class itkImageToImageFilterISI2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterISI2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_cast(obj)

# Register itkImageToImageFilterISI2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2IUL2_swigregister(itkImageToImageFilterISI2IUL2)
class itkImageToImageFilterISI2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterISI2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI2
        GetInput(self, idx) -> itkImageSI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_cast(obj)

# Register itkImageToImageFilterISI2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI2IUS2_swigregister(itkImageToImageFilterISI2IUS2)
class itkImageToImageFilterISI3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterISI3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_cast(obj)

# Register itkImageToImageFilterISI3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3ID3_swigregister(itkImageToImageFilterISI3ID3)
class itkImageToImageFilterISI3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterISI3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_cast(obj)

# Register itkImageToImageFilterISI3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3IF3_swigregister(itkImageToImageFilterISI3IF3)
class itkImageToImageFilterISI3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterISI3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_cast(obj)

# Register itkImageToImageFilterISI3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3ISI3_swigregister(itkImageToImageFilterISI3ISI3)
class itkImageToImageFilterISI3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISI3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_cast(obj)

# Register itkImageToImageFilterISI3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3ISS3_swigregister(itkImageToImageFilterISI3ISS3)
class itkImageToImageFilterISI3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterISI3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_cast(obj)

# Register itkImageToImageFilterISI3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3IUC3_swigregister(itkImageToImageFilterISI3IUC3)
class itkImageToImageFilterISI3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterISI3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_cast(obj)

# Register itkImageToImageFilterISI3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3IUI3_swigregister(itkImageToImageFilterISI3IUI3)
class itkImageToImageFilterISI3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterISI3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_cast(obj)

# Register itkImageToImageFilterISI3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3IUL3_swigregister(itkImageToImageFilterISI3IUL3)
class itkImageToImageFilterISI3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterISI3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI3
        GetInput(self, idx) -> itkImageSI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_cast(obj)

# Register itkImageToImageFilterISI3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI3IUS3_swigregister(itkImageToImageFilterISI3IUS3)
class itkImageToImageFilterISI4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterISI4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_cast(obj)

# Register itkImageToImageFilterISI4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4ID4_swigregister(itkImageToImageFilterISI4ID4)
class itkImageToImageFilterISI4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterISI4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_cast(obj)

# Register itkImageToImageFilterISI4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4IF4_swigregister(itkImageToImageFilterISI4IF4)
class itkImageToImageFilterISI4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterISI4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_cast(obj)

# Register itkImageToImageFilterISI4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4ISI4_swigregister(itkImageToImageFilterISI4ISI4)
class itkImageToImageFilterISI4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISI4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_cast(obj)

# Register itkImageToImageFilterISI4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4ISS4_swigregister(itkImageToImageFilterISI4ISS4)
class itkImageToImageFilterISI4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterISI4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_cast(obj)

# Register itkImageToImageFilterISI4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4IUC4_swigregister(itkImageToImageFilterISI4IUC4)
class itkImageToImageFilterISI4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterISI4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_cast(obj)

# Register itkImageToImageFilterISI4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4IUI4_swigregister(itkImageToImageFilterISI4IUI4)
class itkImageToImageFilterISI4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterISI4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_cast(obj)

# Register itkImageToImageFilterISI4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4IUL4_swigregister(itkImageToImageFilterISI4IUL4)
class itkImageToImageFilterISI4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterISI4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSI4
        GetInput(self, idx) -> itkImageSI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISI4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISI4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_cast(obj)

# Register itkImageToImageFilterISI4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISI4IUS4_swigregister(itkImageToImageFilterISI4IUS4)
class itkImageToImageFilterISS2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterISS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_cast(obj)

# Register itkImageToImageFilterISS2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2_swigregister(itkImageToImageFilterISS2ID2)
class itkImageToImageFilterISS2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterISS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_cast(obj)

# Register itkImageToImageFilterISS2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2_swigregister(itkImageToImageFilterISS2IF2)
class itkImageToImageFilterISS2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterISS2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_cast(obj)

# Register itkImageToImageFilterISS2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2ISI2_swigregister(itkImageToImageFilterISS2ISI2)
class itkImageToImageFilterISS2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_cast(obj)

# Register itkImageToImageFilterISS2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2_swigregister(itkImageToImageFilterISS2ISS2)
class itkImageToImageFilterISS2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_cast(obj)

# Register itkImageToImageFilterISS2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2_swigregister(itkImageToImageFilterISS2IUC2)
class itkImageToImageFilterISS2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterISS2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_cast(obj)

# Register itkImageToImageFilterISS2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2IUI2_swigregister(itkImageToImageFilterISS2IUI2)
class itkImageToImageFilterISS2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterISS2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_cast(obj)

# Register itkImageToImageFilterISS2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2_swigregister(itkImageToImageFilterISS2IUL2)
class itkImageToImageFilterISS2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_cast(obj)

# Register itkImageToImageFilterISS2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2_swigregister(itkImageToImageFilterISS2IUS2)
class itkImageToImageFilterISS3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_cast(obj)

# Register itkImageToImageFilterISS3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3_swigregister(itkImageToImageFilterISS3ID3)
class itkImageToImageFilterISS3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_cast(obj)

# Register itkImageToImageFilterISS3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3_swigregister(itkImageToImageFilterISS3IF3)
class itkImageToImageFilterISS3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterISS3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_cast(obj)

# Register itkImageToImageFilterISS3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3ISI3_swigregister(itkImageToImageFilterISS3ISI3)
class itkImageToImageFilterISS3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_cast(obj)

# Register itkImageToImageFilterISS3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3_swigregister(itkImageToImageFilterISS3ISS3)
class itkImageToImageFilterISS3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_cast(obj)

# Register itkImageToImageFilterISS3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3_swigregister(itkImageToImageFilterISS3IUC3)
class itkImageToImageFilterISS3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterISS3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_cast(obj)

# Register itkImageToImageFilterISS3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3IUI3_swigregister(itkImageToImageFilterISS3IUI3)
class itkImageToImageFilterISS3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterISS3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_cast(obj)

# Register itkImageToImageFilterISS3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3_swigregister(itkImageToImageFilterISS3IUL3)
class itkImageToImageFilterISS3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_cast(obj)

# Register itkImageToImageFilterISS3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3_swigregister(itkImageToImageFilterISS3IUS3)
class itkImageToImageFilterISS4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterISS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_cast(obj)

# Register itkImageToImageFilterISS4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4ID4_swigregister(itkImageToImageFilterISS4ID4)
class itkImageToImageFilterISS4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterISS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_cast(obj)

# Register itkImageToImageFilterISS4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4IF4_swigregister(itkImageToImageFilterISS4IF4)
class itkImageToImageFilterISS4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterISS4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_cast(obj)

# Register itkImageToImageFilterISS4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4ISI4_swigregister(itkImageToImageFilterISS4ISI4)
class itkImageToImageFilterISS4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_cast(obj)

# Register itkImageToImageFilterISS4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4_swigregister(itkImageToImageFilterISS4ISS4)
class itkImageToImageFilterISS4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_cast(obj)

# Register itkImageToImageFilterISS4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4_swigregister(itkImageToImageFilterISS4IUC4)
class itkImageToImageFilterISS4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterISS4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_cast(obj)

# Register itkImageToImageFilterISS4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4IUI4_swigregister(itkImageToImageFilterISS4IUI4)
class itkImageToImageFilterISS4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterISS4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_cast(obj)

# Register itkImageToImageFilterISS4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4IUL4_swigregister(itkImageToImageFilterISS4IUL4)
class itkImageToImageFilterISS4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_cast(obj)

# Register itkImageToImageFilterISS4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4_swigregister(itkImageToImageFilterISS4IUS4)
class itkImageToImageFilterIUC2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_cast(obj)

# Register itkImageToImageFilterIUC2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2_swigregister(itkImageToImageFilterIUC2ID2)
class itkImageToImageFilterIUC2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_cast(obj)

# Register itkImageToImageFilterIUC2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2_swigregister(itkImageToImageFilterIUC2IF2)
class itkImageToImageFilterIUC2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_cast(obj)

# Register itkImageToImageFilterIUC2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISI2_swigregister(itkImageToImageFilterIUC2ISI2)
class itkImageToImageFilterIUC2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_cast(obj)

# Register itkImageToImageFilterIUC2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2_swigregister(itkImageToImageFilterIUC2ISS2)
class itkImageToImageFilterIUC2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_cast(obj)

# Register itkImageToImageFilterIUC2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2_swigregister(itkImageToImageFilterIUC2IUC2)
class itkImageToImageFilterIUC2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_cast(obj)

# Register itkImageToImageFilterIUC2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUI2_swigregister(itkImageToImageFilterIUC2IUI2)
class itkImageToImageFilterIUC2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_cast(obj)

# Register itkImageToImageFilterIUC2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2_swigregister(itkImageToImageFilterIUC2IUL2)
class itkImageToImageFilterIUC2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_cast(obj)

# Register itkImageToImageFilterIUC2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2_swigregister(itkImageToImageFilterIUC2IUS2)
class itkImageToImageFilterIUC3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_cast(obj)

# Register itkImageToImageFilterIUC3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3_swigregister(itkImageToImageFilterIUC3ID3)
class itkImageToImageFilterIUC3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_cast(obj)

# Register itkImageToImageFilterIUC3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3_swigregister(itkImageToImageFilterIUC3IF3)
class itkImageToImageFilterIUC3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_cast(obj)

# Register itkImageToImageFilterIUC3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISI3_swigregister(itkImageToImageFilterIUC3ISI3)
class itkImageToImageFilterIUC3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_cast(obj)

# Register itkImageToImageFilterIUC3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3_swigregister(itkImageToImageFilterIUC3ISS3)
class itkImageToImageFilterIUC3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_cast(obj)

# Register itkImageToImageFilterIUC3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3_swigregister(itkImageToImageFilterIUC3IUC3)
class itkImageToImageFilterIUC3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_cast(obj)

# Register itkImageToImageFilterIUC3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUI3_swigregister(itkImageToImageFilterIUC3IUI3)
class itkImageToImageFilterIUC3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_cast(obj)

# Register itkImageToImageFilterIUC3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3_swigregister(itkImageToImageFilterIUC3IUL3)
class itkImageToImageFilterIUC3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_cast(obj)

# Register itkImageToImageFilterIUC3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3_swigregister(itkImageToImageFilterIUC3IUS3)
class itkImageToImageFilterIUC4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_cast(obj)

# Register itkImageToImageFilterIUC4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4_swigregister(itkImageToImageFilterIUC4ID4)
class itkImageToImageFilterIUC4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_cast(obj)

# Register itkImageToImageFilterIUC4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4_swigregister(itkImageToImageFilterIUC4IF4)
class itkImageToImageFilterIUC4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIUC4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_cast(obj)

# Register itkImageToImageFilterIUC4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISI4_swigregister(itkImageToImageFilterIUC4ISI4)
class itkImageToImageFilterIUC4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_cast(obj)

# Register itkImageToImageFilterIUC4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4_swigregister(itkImageToImageFilterIUC4ISS4)
class itkImageToImageFilterIUC4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_cast(obj)

# Register itkImageToImageFilterIUC4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4_swigregister(itkImageToImageFilterIUC4IUC4)
class itkImageToImageFilterIUC4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_cast(obj)

# Register itkImageToImageFilterIUC4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUI4_swigregister(itkImageToImageFilterIUC4IUI4)
class itkImageToImageFilterIUC4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_cast(obj)

# Register itkImageToImageFilterIUC4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUL4_swigregister(itkImageToImageFilterIUC4IUL4)
class itkImageToImageFilterIUC4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_cast(obj)

# Register itkImageToImageFilterIUC4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4_swigregister(itkImageToImageFilterIUC4IUS4)
class itkImageToImageFilterIUI2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIUI2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_cast(obj)

# Register itkImageToImageFilterIUI2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2ID2_swigregister(itkImageToImageFilterIUI2ID2)
class itkImageToImageFilterIUI2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIUI2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_cast(obj)

# Register itkImageToImageFilterIUI2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2IF2_swigregister(itkImageToImageFilterIUI2IF2)
class itkImageToImageFilterIUI2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIUI2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_cast(obj)

# Register itkImageToImageFilterIUI2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISI2_swigregister(itkImageToImageFilterIUI2ISI2)
class itkImageToImageFilterIUI2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIUI2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_cast(obj)

# Register itkImageToImageFilterIUI2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2ISS2_swigregister(itkImageToImageFilterIUI2ISS2)
class itkImageToImageFilterIUI2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUI2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_cast(obj)

# Register itkImageToImageFilterIUI2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUC2_swigregister(itkImageToImageFilterIUI2IUC2)
class itkImageToImageFilterIUI2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIUI2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_cast(obj)

# Register itkImageToImageFilterIUI2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUI2_swigregister(itkImageToImageFilterIUI2IUI2)
class itkImageToImageFilterIUI2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIUI2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_cast(obj)

# Register itkImageToImageFilterIUI2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUL2_swigregister(itkImageToImageFilterIUI2IUL2)
class itkImageToImageFilterIUI2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUI2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI2
        GetInput(self, idx) -> itkImageUI2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_cast(obj)

# Register itkImageToImageFilterIUI2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI2IUS2_swigregister(itkImageToImageFilterIUI2IUS2)
class itkImageToImageFilterIUI3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIUI3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_cast(obj)

# Register itkImageToImageFilterIUI3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3ID3_swigregister(itkImageToImageFilterIUI3ID3)
class itkImageToImageFilterIUI3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIUI3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_cast(obj)

# Register itkImageToImageFilterIUI3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3IF3_swigregister(itkImageToImageFilterIUI3IF3)
class itkImageToImageFilterIUI3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIUI3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_cast(obj)

# Register itkImageToImageFilterIUI3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISI3_swigregister(itkImageToImageFilterIUI3ISI3)
class itkImageToImageFilterIUI3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIUI3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_cast(obj)

# Register itkImageToImageFilterIUI3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3ISS3_swigregister(itkImageToImageFilterIUI3ISS3)
class itkImageToImageFilterIUI3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUI3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_cast(obj)

# Register itkImageToImageFilterIUI3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUC3_swigregister(itkImageToImageFilterIUI3IUC3)
class itkImageToImageFilterIUI3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIUI3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_cast(obj)

# Register itkImageToImageFilterIUI3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUI3_swigregister(itkImageToImageFilterIUI3IUI3)
class itkImageToImageFilterIUI3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIUI3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_cast(obj)

# Register itkImageToImageFilterIUI3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUL3_swigregister(itkImageToImageFilterIUI3IUL3)
class itkImageToImageFilterIUI3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUI3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI3
        GetInput(self, idx) -> itkImageUI3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_cast(obj)

# Register itkImageToImageFilterIUI3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI3IUS3_swigregister(itkImageToImageFilterIUI3IUS3)
class itkImageToImageFilterIUI4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIUI4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_cast(obj)

# Register itkImageToImageFilterIUI4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4ID4_swigregister(itkImageToImageFilterIUI4ID4)
class itkImageToImageFilterIUI4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIUI4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_cast(obj)

# Register itkImageToImageFilterIUI4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4IF4_swigregister(itkImageToImageFilterIUI4IF4)
class itkImageToImageFilterIUI4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIUI4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_cast(obj)

# Register itkImageToImageFilterIUI4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISI4_swigregister(itkImageToImageFilterIUI4ISI4)
class itkImageToImageFilterIUI4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIUI4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_cast(obj)

# Register itkImageToImageFilterIUI4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4ISS4_swigregister(itkImageToImageFilterIUI4ISS4)
class itkImageToImageFilterIUI4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUI4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_cast(obj)

# Register itkImageToImageFilterIUI4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUC4_swigregister(itkImageToImageFilterIUI4IUC4)
class itkImageToImageFilterIUI4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIUI4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_cast(obj)

# Register itkImageToImageFilterIUI4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUI4_swigregister(itkImageToImageFilterIUI4IUI4)
class itkImageToImageFilterIUI4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIUI4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_cast(obj)

# Register itkImageToImageFilterIUI4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUL4_swigregister(itkImageToImageFilterIUI4IUL4)
class itkImageToImageFilterIUI4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUI4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUI4
        GetInput(self, idx) -> itkImageUI4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUI4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUI4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUI4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_cast(obj)

# Register itkImageToImageFilterIUI4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUI4IUS4_swigregister(itkImageToImageFilterIUI4IUS4)
class itkImageToImageFilterIUL2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIUL2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_cast(obj)

# Register itkImageToImageFilterIUL2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2ID2_swigregister(itkImageToImageFilterIUL2ID2)
class itkImageToImageFilterIUL2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_cast(obj)

# Register itkImageToImageFilterIUL2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2IF2_swigregister(itkImageToImageFilterIUL2IF2)
class itkImageToImageFilterIUL2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIUL2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_cast(obj)

# Register itkImageToImageFilterIUL2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISI2_swigregister(itkImageToImageFilterIUL2ISI2)
class itkImageToImageFilterIUL2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIUL2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_cast(obj)

# Register itkImageToImageFilterIUL2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2ISS2_swigregister(itkImageToImageFilterIUL2ISS2)
class itkImageToImageFilterIUL2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_cast(obj)

# Register itkImageToImageFilterIUL2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUC2_swigregister(itkImageToImageFilterIUL2IUC2)
class itkImageToImageFilterIUL2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_cast(obj)

# Register itkImageToImageFilterIUL2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUI2_swigregister(itkImageToImageFilterIUL2IUI2)
class itkImageToImageFilterIUL2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_cast(obj)

# Register itkImageToImageFilterIUL2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2_swigregister(itkImageToImageFilterIUL2IUL2)
class itkImageToImageFilterIUL2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_cast(obj)

# Register itkImageToImageFilterIUL2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUS2_swigregister(itkImageToImageFilterIUL2IUS2)
class itkImageToImageFilterIUL3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIUL3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_cast(obj)

# Register itkImageToImageFilterIUL3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3ID3_swigregister(itkImageToImageFilterIUL3ID3)
class itkImageToImageFilterIUL3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_cast(obj)

# Register itkImageToImageFilterIUL3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3IF3_swigregister(itkImageToImageFilterIUL3IF3)
class itkImageToImageFilterIUL3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIUL3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_cast(obj)

# Register itkImageToImageFilterIUL3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISI3_swigregister(itkImageToImageFilterIUL3ISI3)
class itkImageToImageFilterIUL3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIUL3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_cast(obj)

# Register itkImageToImageFilterIUL3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3ISS3_swigregister(itkImageToImageFilterIUL3ISS3)
class itkImageToImageFilterIUL3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_cast(obj)

# Register itkImageToImageFilterIUL3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUC3_swigregister(itkImageToImageFilterIUL3IUC3)
class itkImageToImageFilterIUL3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_cast(obj)

# Register itkImageToImageFilterIUL3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUI3_swigregister(itkImageToImageFilterIUL3IUI3)
class itkImageToImageFilterIUL3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_cast(obj)

# Register itkImageToImageFilterIUL3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3_swigregister(itkImageToImageFilterIUL3IUL3)
class itkImageToImageFilterIUL3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_cast(obj)

# Register itkImageToImageFilterIUL3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUS3_swigregister(itkImageToImageFilterIUL3IUS3)
class itkImageToImageFilterIUL4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIUL4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_cast(obj)

# Register itkImageToImageFilterIUL4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4ID4_swigregister(itkImageToImageFilterIUL4ID4)
class itkImageToImageFilterIUL4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_cast(obj)

# Register itkImageToImageFilterIUL4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4IF4_swigregister(itkImageToImageFilterIUL4IF4)
class itkImageToImageFilterIUL4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIUL4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_cast(obj)

# Register itkImageToImageFilterIUL4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISI4_swigregister(itkImageToImageFilterIUL4ISI4)
class itkImageToImageFilterIUL4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIUL4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_cast(obj)

# Register itkImageToImageFilterIUL4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4ISS4_swigregister(itkImageToImageFilterIUL4ISS4)
class itkImageToImageFilterIUL4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_cast(obj)

# Register itkImageToImageFilterIUL4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUC4_swigregister(itkImageToImageFilterIUL4IUC4)
class itkImageToImageFilterIUL4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_cast(obj)

# Register itkImageToImageFilterIUL4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUI4_swigregister(itkImageToImageFilterIUL4IUI4)
class itkImageToImageFilterIUL4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_cast(obj)

# Register itkImageToImageFilterIUL4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUL4_swigregister(itkImageToImageFilterIUL4IUL4)
class itkImageToImageFilterIUL4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUL4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_cast(obj)

# Register itkImageToImageFilterIUL4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUL4IUS4_swigregister(itkImageToImageFilterIUL4IUS4)
class itkImageToImageFilterIULL2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIULL2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_cast(obj)

# Register itkImageToImageFilterIULL2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2ID2_swigregister(itkImageToImageFilterIULL2ID2)
class itkImageToImageFilterIULL2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_cast(obj)

# Register itkImageToImageFilterIULL2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2IF2_swigregister(itkImageToImageFilterIULL2IF2)
class itkImageToImageFilterIULL2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIULL2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_cast(obj)

# Register itkImageToImageFilterIULL2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISI2_swigregister(itkImageToImageFilterIULL2ISI2)
class itkImageToImageFilterIULL2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIULL2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_cast(obj)

# Register itkImageToImageFilterIULL2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2ISS2_swigregister(itkImageToImageFilterIULL2ISS2)
class itkImageToImageFilterIULL2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_cast(obj)

# Register itkImageToImageFilterIULL2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUC2_swigregister(itkImageToImageFilterIULL2IUC2)
class itkImageToImageFilterIULL2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_cast(obj)

# Register itkImageToImageFilterIULL2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUI2_swigregister(itkImageToImageFilterIULL2IUI2)
class itkImageToImageFilterIULL2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_cast(obj)

# Register itkImageToImageFilterIULL2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUL2_swigregister(itkImageToImageFilterIULL2IUL2)
class itkImageToImageFilterIULL2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIULL2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL2
        GetInput(self, idx) -> itkImageULL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_cast(obj)

# Register itkImageToImageFilterIULL2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL2IUS2_swigregister(itkImageToImageFilterIULL2IUS2)
class itkImageToImageFilterIULL3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIULL3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_cast(obj)

# Register itkImageToImageFilterIULL3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3ID3_swigregister(itkImageToImageFilterIULL3ID3)
class itkImageToImageFilterIULL3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_cast(obj)

# Register itkImageToImageFilterIULL3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3IF3_swigregister(itkImageToImageFilterIULL3IF3)
class itkImageToImageFilterIULL3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIULL3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_cast(obj)

# Register itkImageToImageFilterIULL3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISI3_swigregister(itkImageToImageFilterIULL3ISI3)
class itkImageToImageFilterIULL3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIULL3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_cast(obj)

# Register itkImageToImageFilterIULL3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3ISS3_swigregister(itkImageToImageFilterIULL3ISS3)
class itkImageToImageFilterIULL3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_cast(obj)

# Register itkImageToImageFilterIULL3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUC3_swigregister(itkImageToImageFilterIULL3IUC3)
class itkImageToImageFilterIULL3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_cast(obj)

# Register itkImageToImageFilterIULL3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUI3_swigregister(itkImageToImageFilterIULL3IUI3)
class itkImageToImageFilterIULL3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_cast(obj)

# Register itkImageToImageFilterIULL3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUL3_swigregister(itkImageToImageFilterIULL3IUL3)
class itkImageToImageFilterIULL3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIULL3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL3
        GetInput(self, idx) -> itkImageULL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_cast(obj)

# Register itkImageToImageFilterIULL3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL3IUS3_swigregister(itkImageToImageFilterIULL3IUS3)
class itkImageToImageFilterIULL4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIULL4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_cast(obj)

# Register itkImageToImageFilterIULL4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4ID4_swigregister(itkImageToImageFilterIULL4ID4)
class itkImageToImageFilterIULL4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIULL4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_cast(obj)

# Register itkImageToImageFilterIULL4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4IF4_swigregister(itkImageToImageFilterIULL4IF4)
class itkImageToImageFilterIULL4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIULL4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_cast(obj)

# Register itkImageToImageFilterIULL4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISI4_swigregister(itkImageToImageFilterIULL4ISI4)
class itkImageToImageFilterIULL4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIULL4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_cast(obj)

# Register itkImageToImageFilterIULL4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4ISS4_swigregister(itkImageToImageFilterIULL4ISS4)
class itkImageToImageFilterIULL4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIULL4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_cast(obj)

# Register itkImageToImageFilterIULL4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUC4_swigregister(itkImageToImageFilterIULL4IUC4)
class itkImageToImageFilterIULL4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIULL4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_cast(obj)

# Register itkImageToImageFilterIULL4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUI4_swigregister(itkImageToImageFilterIULL4IUI4)
class itkImageToImageFilterIULL4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIULL4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_cast(obj)

# Register itkImageToImageFilterIULL4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUL4_swigregister(itkImageToImageFilterIULL4IUL4)
class itkImageToImageFilterIULL4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIULL4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageULL4
        GetInput(self, idx) -> itkImageULL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageULL4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIULL4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIULL4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_cast(obj)

# Register itkImageToImageFilterIULL4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIULL4IUS4_swigregister(itkImageToImageFilterIULL4IUS4)
class itkImageToImageFilterIUS2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_cast(obj)

# Register itkImageToImageFilterIUS2ID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2_swigregister(itkImageToImageFilterIUS2ID2)
class itkImageToImageFilterIUS2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_cast(obj)

# Register itkImageToImageFilterIUS2IF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2_swigregister(itkImageToImageFilterIUS2IF2)
class itkImageToImageFilterIUS2ISI2(itk.itkImageSourcePython.itkImageSourceISI2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ISI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2ISI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ISI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_cast(obj)

# Register itkImageToImageFilterIUS2ISI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISI2_swigregister(itkImageToImageFilterIUS2ISI2)
class itkImageToImageFilterIUS2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_cast(obj)

# Register itkImageToImageFilterIUS2ISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2_swigregister(itkImageToImageFilterIUS2ISS2)
class itkImageToImageFilterIUS2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_cast(obj)

# Register itkImageToImageFilterIUS2IUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2_swigregister(itkImageToImageFilterIUS2IUC2)
class itkImageToImageFilterIUS2IUI2(itk.itkImageSourcePython.itkImageSourceIUI2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUI2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2IUI2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUI2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_cast(obj)

# Register itkImageToImageFilterIUS2IUI2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUI2_swigregister(itkImageToImageFilterIUS2IUI2)
class itkImageToImageFilterIUS2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_cast(obj)

# Register itkImageToImageFilterIUS2IUL2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2_swigregister(itkImageToImageFilterIUS2IUL2)
class itkImageToImageFilterIUS2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_cast(obj)

# Register itkImageToImageFilterIUS2IUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2_swigregister(itkImageToImageFilterIUS2IUS2)
class itkImageToImageFilterIUS3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_cast(obj)

# Register itkImageToImageFilterIUS3ID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3_swigregister(itkImageToImageFilterIUS3ID3)
class itkImageToImageFilterIUS3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_cast(obj)

# Register itkImageToImageFilterIUS3IF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3_swigregister(itkImageToImageFilterIUS3IF3)
class itkImageToImageFilterIUS3ISI3(itk.itkImageSourcePython.itkImageSourceISI3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ISI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3ISI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ISI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_cast(obj)

# Register itkImageToImageFilterIUS3ISI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISI3_swigregister(itkImageToImageFilterIUS3ISI3)
class itkImageToImageFilterIUS3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_cast(obj)

# Register itkImageToImageFilterIUS3ISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3_swigregister(itkImageToImageFilterIUS3ISS3)
class itkImageToImageFilterIUS3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_cast(obj)

# Register itkImageToImageFilterIUS3IUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3_swigregister(itkImageToImageFilterIUS3IUC3)
class itkImageToImageFilterIUS3IUI3(itk.itkImageSourcePython.itkImageSourceIUI3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUI3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3IUI3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUI3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_cast(obj)

# Register itkImageToImageFilterIUS3IUI3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUI3_swigregister(itkImageToImageFilterIUS3IUI3)
class itkImageToImageFilterIUS3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_cast(obj)

# Register itkImageToImageFilterIUS3IUL3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3_swigregister(itkImageToImageFilterIUS3IUL3)
class itkImageToImageFilterIUS3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_cast(obj)

# Register itkImageToImageFilterIUS3IUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3_swigregister(itkImageToImageFilterIUS3IUS3)
class itkImageToImageFilterIUS4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_cast(obj)

# Register itkImageToImageFilterIUS4ID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4_swigregister(itkImageToImageFilterIUS4ID4)
class itkImageToImageFilterIUS4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_cast(obj)

# Register itkImageToImageFilterIUS4IF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4_swigregister(itkImageToImageFilterIUS4IF4)
class itkImageToImageFilterIUS4ISI4(itk.itkImageSourcePython.itkImageSourceISI4):
    r"""Proxy of C++ itkImageToImageFilterIUS4ISI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4ISI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ISI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_cast(obj)

# Register itkImageToImageFilterIUS4ISI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISI4_swigregister(itkImageToImageFilterIUS4ISI4)
class itkImageToImageFilterIUS4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_cast(obj)

# Register itkImageToImageFilterIUS4ISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4_swigregister(itkImageToImageFilterIUS4ISS4)
class itkImageToImageFilterIUS4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_cast(obj)

# Register itkImageToImageFilterIUS4IUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4_swigregister(itkImageToImageFilterIUS4IUC4)
class itkImageToImageFilterIUS4IUI4(itk.itkImageSourcePython.itkImageSourceIUI4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUI4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4IUI4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUI4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_cast(obj)

# Register itkImageToImageFilterIUS4IUI4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUI4_swigregister(itkImageToImageFilterIUS4IUI4)
class itkImageToImageFilterIUS4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_cast(obj)

# Register itkImageToImageFilterIUS4IUL4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUL4_swigregister(itkImageToImageFilterIUS4IUL4)
class itkImageToImageFilterIUS4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_cast(obj)

# Register itkImageToImageFilterIUS4IUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4_swigregister(itkImageToImageFilterIUS4IUS4)
class itkImageToImageFilterIVF22ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIVF22ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF22ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_cast(obj)

# Register itkImageToImageFilterIVF22ICVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF22_swigregister(itkImageToImageFilterIVF22ICVF22)
class itkImageToImageFilterIVF22ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIVF22ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF22ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_cast(obj)

# Register itkImageToImageFilterIVF22ICVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF22ICVF42_swigregister(itkImageToImageFilterIVF22ICVF42)
class itkImageToImageFilterIVF22IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIVF22IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF22IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_cast(obj)

# Register itkImageToImageFilterIVF22IVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22_swigregister(itkImageToImageFilterIVF22IVF22)
class itkImageToImageFilterIVF22VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF22VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF22VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_cast(obj)

# Register itkImageToImageFilterIVF22VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF22VIF2_swigregister(itkImageToImageFilterIVF22VIF2)
class itkImageToImageFilterIVF23ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF23ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_cast(obj)

# Register itkImageToImageFilterIVF23ICVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF23_swigregister(itkImageToImageFilterIVF23ICVF23)
class itkImageToImageFilterIVF23ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIVF23ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF23ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_cast(obj)

# Register itkImageToImageFilterIVF23ICVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF23ICVF43_swigregister(itkImageToImageFilterIVF23ICVF43)
class itkImageToImageFilterIVF23IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_cast(obj)

# Register itkImageToImageFilterIVF23IVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23_swigregister(itkImageToImageFilterIVF23IVF23)
class itkImageToImageFilterIVF23VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF23VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF23VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_cast(obj)

# Register itkImageToImageFilterIVF23VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF23VIF3_swigregister(itkImageToImageFilterIVF23VIF3)
class itkImageToImageFilterIVF24ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterIVF24ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF24ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_cast(obj)

# Register itkImageToImageFilterIVF24ICVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF24_swigregister(itkImageToImageFilterIVF24ICVF24)
class itkImageToImageFilterIVF24ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterIVF24ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF24ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_cast(obj)

# Register itkImageToImageFilterIVF24ICVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF24ICVF44_swigregister(itkImageToImageFilterIVF24ICVF44)
class itkImageToImageFilterIVF24IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterIVF24IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF24IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_cast(obj)

# Register itkImageToImageFilterIVF24IVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF24IVF24_swigregister(itkImageToImageFilterIVF24IVF24)
class itkImageToImageFilterIVF24VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF24VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF24VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_cast(obj)

# Register itkImageToImageFilterIVF24VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF24VIF4_swigregister(itkImageToImageFilterIVF24VIF4)
class itkImageToImageFilterIVF32ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIVF32ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF32ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_cast(obj)

# Register itkImageToImageFilterIVF32ICVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF32ICVF32_swigregister(itkImageToImageFilterIVF32ICVF32)
class itkImageToImageFilterIVF32IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIVF32IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF32IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_cast(obj)

# Register itkImageToImageFilterIVF32IVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32_swigregister(itkImageToImageFilterIVF32IVF32)
class itkImageToImageFilterIVF32VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF32VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF32VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_cast(obj)

# Register itkImageToImageFilterIVF32VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF32VIF2_swigregister(itkImageToImageFilterIVF32VIF2)
class itkImageToImageFilterIVF33ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF33ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_cast(obj)

# Register itkImageToImageFilterIVF33ICVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF33ICVF33_swigregister(itkImageToImageFilterIVF33ICVF33)
class itkImageToImageFilterIVF33IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_cast(obj)

# Register itkImageToImageFilterIVF33IVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33_swigregister(itkImageToImageFilterIVF33IVF33)
class itkImageToImageFilterIVF33VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF33VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF33VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_cast(obj)

# Register itkImageToImageFilterIVF33VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF33VIF3_swigregister(itkImageToImageFilterIVF33VIF3)
class itkImageToImageFilterIVF34ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterIVF34ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF34ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_cast(obj)

# Register itkImageToImageFilterIVF34ICVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF34ICVF34_swigregister(itkImageToImageFilterIVF34ICVF34)
class itkImageToImageFilterIVF34IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterIVF34IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF34IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_cast(obj)

# Register itkImageToImageFilterIVF34IVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF34IVF34_swigregister(itkImageToImageFilterIVF34IVF34)
class itkImageToImageFilterIVF34VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF34VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF34VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_cast(obj)

# Register itkImageToImageFilterIVF34VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF34VIF4_swigregister(itkImageToImageFilterIVF34VIF4)
class itkImageToImageFilterIVF42ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIVF42ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF42ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_cast(obj)

# Register itkImageToImageFilterIVF42ICVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF42ICVF42_swigregister(itkImageToImageFilterIVF42ICVF42)
class itkImageToImageFilterIVF42IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIVF42IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF42IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_cast(obj)

# Register itkImageToImageFilterIVF42IVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42_swigregister(itkImageToImageFilterIVF42IVF42)
class itkImageToImageFilterIVF42VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF42VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF42VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_cast(obj)

# Register itkImageToImageFilterIVF42VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF42VIF2_swigregister(itkImageToImageFilterIVF42VIF2)
class itkImageToImageFilterIVF43ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF43ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_cast(obj)

# Register itkImageToImageFilterIVF43ICVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF43ICVF43_swigregister(itkImageToImageFilterIVF43ICVF43)
class itkImageToImageFilterIVF43IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_cast(obj)

# Register itkImageToImageFilterIVF43IVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43_swigregister(itkImageToImageFilterIVF43IVF43)
class itkImageToImageFilterIVF43VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF43VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF43VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_cast(obj)

# Register itkImageToImageFilterIVF43VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF43VIF3_swigregister(itkImageToImageFilterIVF43VIF3)
class itkImageToImageFilterIVF44ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterIVF44ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF44ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_cast(obj)

# Register itkImageToImageFilterIVF44ICVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF44ICVF44_swigregister(itkImageToImageFilterIVF44ICVF44)
class itkImageToImageFilterIVF44IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterIVF44IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF44IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_cast(obj)

# Register itkImageToImageFilterIVF44IVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44_swigregister(itkImageToImageFilterIVF44IVF44)
class itkImageToImageFilterIVF44VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF44VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterIVF44VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_cast(obj)

# Register itkImageToImageFilterIVF44VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterIVF44VIF4_swigregister(itkImageToImageFilterIVF44VIF4)
class itkImageToImageFilterVID2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterVID2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVID2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_cast(obj)

# Register itkImageToImageFilterVID2VID2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2_swigregister(itkImageToImageFilterVID2VID2)
class itkImageToImageFilterVID3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterVID3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVID3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_cast(obj)

# Register itkImageToImageFilterVID3VID3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3_swigregister(itkImageToImageFilterVID3VID3)
class itkImageToImageFilterVID4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterVID4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVID4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_cast(obj)

# Register itkImageToImageFilterVID4VID4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVID4VID4_swigregister(itkImageToImageFilterVID4VID4)
class itkImageToImageFilterVIF2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterVIF2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_cast(obj)

# Register itkImageToImageFilterVIF2ICVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF22_swigregister(itkImageToImageFilterVIF2ICVF22)
class itkImageToImageFilterVIF2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterVIF2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_cast(obj)

# Register itkImageToImageFilterVIF2ICVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF32_swigregister(itkImageToImageFilterVIF2ICVF32)
class itkImageToImageFilterVIF2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterVIF2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_cast(obj)

# Register itkImageToImageFilterVIF2ICVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2ICVF42_swigregister(itkImageToImageFilterVIF2ICVF42)
class itkImageToImageFilterVIF2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterVIF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_cast(obj)

# Register itkImageToImageFilterVIF2IVF22 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF22_swigregister(itkImageToImageFilterVIF2IVF22)
class itkImageToImageFilterVIF2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterVIF2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_cast(obj)

# Register itkImageToImageFilterVIF2IVF32 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF32_swigregister(itkImageToImageFilterVIF2IVF32)
class itkImageToImageFilterVIF2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterVIF2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_cast(obj)

# Register itkImageToImageFilterVIF2IVF42 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2IVF42_swigregister(itkImageToImageFilterVIF2IVF42)
class itkImageToImageFilterVIF2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterVIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_cast(obj)

# Register itkImageToImageFilterVIF2VIF2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2_swigregister(itkImageToImageFilterVIF2VIF2)
class itkImageToImageFilterVIF3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterVIF3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_cast(obj)

# Register itkImageToImageFilterVIF3ICVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF23_swigregister(itkImageToImageFilterVIF3ICVF23)
class itkImageToImageFilterVIF3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterVIF3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_cast(obj)

# Register itkImageToImageFilterVIF3ICVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF33_swigregister(itkImageToImageFilterVIF3ICVF33)
class itkImageToImageFilterVIF3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterVIF3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_cast(obj)

# Register itkImageToImageFilterVIF3ICVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3ICVF43_swigregister(itkImageToImageFilterVIF3ICVF43)
class itkImageToImageFilterVIF3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterVIF3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_cast(obj)

# Register itkImageToImageFilterVIF3IVF23 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF23_swigregister(itkImageToImageFilterVIF3IVF23)
class itkImageToImageFilterVIF3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterVIF3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_cast(obj)

# Register itkImageToImageFilterVIF3IVF33 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF33_swigregister(itkImageToImageFilterVIF3IVF33)
class itkImageToImageFilterVIF3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterVIF3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_cast(obj)

# Register itkImageToImageFilterVIF3IVF43 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3IVF43_swigregister(itkImageToImageFilterVIF3IVF43)
class itkImageToImageFilterVIF3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterVIF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_cast(obj)

# Register itkImageToImageFilterVIF3VIF3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3_swigregister(itkImageToImageFilterVIF3VIF3)
class itkImageToImageFilterVIF4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterVIF4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_cast(obj)

# Register itkImageToImageFilterVIF4ICVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF24_swigregister(itkImageToImageFilterVIF4ICVF24)
class itkImageToImageFilterVIF4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterVIF4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_cast(obj)

# Register itkImageToImageFilterVIF4ICVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF34_swigregister(itkImageToImageFilterVIF4ICVF34)
class itkImageToImageFilterVIF4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterVIF4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_cast(obj)

# Register itkImageToImageFilterVIF4ICVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4ICVF44_swigregister(itkImageToImageFilterVIF4ICVF44)
class itkImageToImageFilterVIF4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterVIF4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_cast(obj)

# Register itkImageToImageFilterVIF4IVF24 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF24_swigregister(itkImageToImageFilterVIF4IVF24)
class itkImageToImageFilterVIF4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterVIF4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_cast(obj)

# Register itkImageToImageFilterVIF4IVF34 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF34_swigregister(itkImageToImageFilterVIF4IVF34)
class itkImageToImageFilterVIF4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterVIF4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_cast(obj)

# Register itkImageToImageFilterVIF4IVF44 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4IVF44_swigregister(itkImageToImageFilterVIF4IVF44)
class itkImageToImageFilterVIF4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterVIF4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIF4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_cast(obj)

# Register itkImageToImageFilterVIF4VIF4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIF4VIF4_swigregister(itkImageToImageFilterVIF4VIF4)
class itkImageToImageFilterVISS2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterVISS2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVISS2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_cast(obj)

# Register itkImageToImageFilterVISS2VISS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2_swigregister(itkImageToImageFilterVISS2VISS2)
class itkImageToImageFilterVISS3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterVISS3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVISS3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_cast(obj)

# Register itkImageToImageFilterVISS3VISS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3_swigregister(itkImageToImageFilterVISS3VISS3)
class itkImageToImageFilterVISS4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterVISS4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVISS4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_cast(obj)

# Register itkImageToImageFilterVISS4VISS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVISS4VISS4_swigregister(itkImageToImageFilterVISS4VISS4)
class itkImageToImageFilterVIUC2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUC2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_cast(obj)

# Register itkImageToImageFilterVIUC2VIUC2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2_swigregister(itkImageToImageFilterVIUC2VIUC2)
class itkImageToImageFilterVIUC3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUC3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_cast(obj)

# Register itkImageToImageFilterVIUC3VIUC3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3_swigregister(itkImageToImageFilterVIUC3VIUC3)
class itkImageToImageFilterVIUC4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUC4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_cast(obj)

# Register itkImageToImageFilterVIUC4VIUC4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUC4VIUC4_swigregister(itkImageToImageFilterVIUC4VIUC4)
class itkImageToImageFilterVIUS2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUS2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_cast(obj)

# Register itkImageToImageFilterVIUS2VIUS2 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2_swigregister(itkImageToImageFilterVIUS2VIUS2)
class itkImageToImageFilterVIUS3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUS3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_cast(obj)

# Register itkImageToImageFilterVIUS3VIUS3 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3_swigregister(itkImageToImageFilterVIUS3VIUS3)
class itkImageToImageFilterVIUS4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterAPython.delete_itkImageToImageFilterVIUS4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_cast(obj)

# Register itkImageToImageFilterVIUS4VIUS4 in _itkImageToImageFilterAPython:
_itkImageToImageFilterAPython.itkImageToImageFilterVIUS4VIUS4_swigregister(itkImageToImageFilterVIUS4VIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKCommon.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__



