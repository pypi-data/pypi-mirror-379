# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVersorPython
else:
    import _itkVersorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
class itkVersorD(object):
    r"""Proxy of C++ itkVersorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetVnlQuaternion(self):
        r"""GetVnlQuaternion(self) -> vnl_quaternion< double >"""
        return _itkVersorPython.itkVersorD_GetVnlQuaternion(self)

    def __imul__(self, v):
        r"""
        __imul__(self, v) -> itkVersorD

        Parameters
        ----------
        v: itkVersorD const &

        """
        return _itkVersorPython.itkVersorD___imul__(self, v)

    def __itruediv__(self, *args):
        return _itkVersorPython.itkVersorD___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def GetTensor(self):
        r"""GetTensor(self) -> double"""
        return _itkVersorPython.itkVersorD_GetTensor(self)

    def Normalize(self):
        r"""Normalize(self)"""
        return _itkVersorPython.itkVersorD_Normalize(self)

    def GetConjugate(self):
        r"""GetConjugate(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_GetConjugate(self)

    def GetReciprocal(self):
        r"""GetReciprocal(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_GetReciprocal(self)

    def __mul__(self, v):
        r"""
        __mul__(self, v) -> itkVersorD

        Parameters
        ----------
        v: itkVersorD const &

        """
        return _itkVersorPython.itkVersorD___mul__(self, v)

    def __truediv__(self, *args):
        return _itkVersorPython.itkVersorD___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVersorD const &

        """
        return _itkVersorPython.itkVersorD___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVersorD const &

        """
        return _itkVersorPython.itkVersorD___ne__(self, other)

    def GetScalar(self):
        r"""GetScalar(self) -> double"""
        return _itkVersorPython.itkVersorD_GetScalar(self)

    def GetX(self):
        r"""GetX(self) -> double"""
        return _itkVersorPython.itkVersorD_GetX(self)

    def GetY(self):
        r"""GetY(self) -> double"""
        return _itkVersorPython.itkVersorD_GetY(self)

    def GetZ(self):
        r"""GetZ(self) -> double"""
        return _itkVersorPython.itkVersorD_GetZ(self)

    def GetW(self):
        r"""GetW(self) -> double"""
        return _itkVersorPython.itkVersorD_GetW(self)

    def GetAngle(self):
        r"""GetAngle(self) -> double"""
        return _itkVersorPython.itkVersorD_GetAngle(self)

    def GetAxis(self):
        r"""GetAxis(self) -> itkVectorD3"""
        return _itkVersorPython.itkVersorD_GetAxis(self)

    def GetRight(self):
        r"""GetRight(self) -> itkVectorD3"""
        return _itkVersorPython.itkVersorD_GetRight(self)

    def Set(self, *args):
        r"""
        Set(self, arg0)

        Parameters
        ----------
        arg0: vnl_quaternion< double > const &

        Set(self, x, y, z, w)

        Parameters
        ----------
        x: double
        y: double
        z: double
        w: double

        Set(self, axis, angle)

        Parameters
        ----------
        axis: itkVectorD3 const &
        angle: double

        Set(self, mat)

        Parameters
        ----------
        mat: itkMatrixD33 const &

        Set(self, axis)

        Parameters
        ----------
        axis: itkVectorD3 const &

        """
        return _itkVersorPython.itkVersorD_Set(self, *args)

    def SetRotationAroundX(self, angle):
        r"""
        SetRotationAroundX(self, angle)

        Parameters
        ----------
        angle: double

        """
        return _itkVersorPython.itkVersorD_SetRotationAroundX(self, angle)

    def SetRotationAroundY(self, angle):
        r"""
        SetRotationAroundY(self, angle)

        Parameters
        ----------
        angle: double

        """
        return _itkVersorPython.itkVersorD_SetRotationAroundY(self, angle)

    def SetRotationAroundZ(self, angle):
        r"""
        SetRotationAroundZ(self, angle)

        Parameters
        ----------
        angle: double

        """
        return _itkVersorPython.itkVersorD_SetRotationAroundZ(self, angle)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkVersorPython.itkVersorD_SetIdentity(self)

    def Transform(self, *args):
        r"""
        Transform(self, v) -> itkVectorD3

        Parameters
        ----------
        v: itkVectorD3 const &

        Transform(self, v) -> itkCovariantVectorD3

        Parameters
        ----------
        v: itkCovariantVectorD3 const &

        Transform(self, v) -> itkPointD3

        Parameters
        ----------
        v: itkPointD3 const &

        Transform(self, v) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        v: vnl_vector_fixed< double,3 > const &

        """
        return _itkVersorPython.itkVersorD_Transform(self, *args)

    def GetMatrix(self):
        r"""GetMatrix(self) -> itkMatrixD33"""
        return _itkVersorPython.itkVersorD_GetMatrix(self)

    def SquareRoot(self):
        r"""SquareRoot(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_SquareRoot(self)

    def Exponential(self, exponent):
        r"""
        Exponential(self, exponent) -> itkVersorD

        Parameters
        ----------
        exponent: double

        """
        return _itkVersorPython.itkVersorD_Exponential(self, exponent)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVersorD
        __init__(self, arg0) -> itkVersorD

        Parameters
        ----------
        arg0: itkVersorD const &

        """
        _itkVersorPython.itkVersorD_swiginit(self, _itkVersorPython.new_itkVersorD(*args))
    __swig_destroy__ = _itkVersorPython.delete_itkVersorD

# Register itkVersorD in _itkVersorPython:
_itkVersorPython.itkVersorD_swigregister(itkVersorD)

