# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRayCastInterpolateImageFunctionPython
else:
    import _itkRayCastInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkContinuousIndexPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
class RayCastHelperEnums(object):
    r"""Proxy of C++ RayCastHelperEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TraversalDirection_UNDEFINED_DIRECTION = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_UNDEFINED_DIRECTION
    
    TraversalDirection_TRANSVERSE_IN_X = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_X
    
    TraversalDirection_TRANSVERSE_IN_Y = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_Y
    
    TraversalDirection_TRANSVERSE_IN_Z = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_TRANSVERSE_IN_Z
    
    TraversalDirection_LAST_DIRECTION = _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_TraversalDirection_LAST_DIRECTION
    

    def __init__(self, *args):
        r"""
        __init__(self) -> RayCastHelperEnums
        __init__(self, arg0) -> RayCastHelperEnums

        Parameters
        ----------
        arg0: RayCastHelperEnums const &

        """
        _itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_swiginit(self, _itkRayCastInterpolateImageFunctionPython.new_RayCastHelperEnums(*args))
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_RayCastHelperEnums

# Register RayCastHelperEnums in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.RayCastHelperEnums_swigregister(RayCastHelperEnums)

def itkRayCastInterpolateImageFunctionID3D_New():
    return itkRayCastInterpolateImageFunctionID3D.New()

class itkRayCastInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionID3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionID3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3D *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID3D"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointD3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionID3D

        Create a new object of the class itkRayCastInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionID3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3D_swigregister(itkRayCastInterpolateImageFunctionID3D)

def itkRayCastInterpolateImageFunctionID3F_New():
    return itkRayCastInterpolateImageFunctionID3F.New()

class itkRayCastInterpolateImageFunctionID3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionID3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionID3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionID3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformF33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformF33
        GetTransform(self) -> itkTransformF33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3F *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID3F"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID3F
        GetInterpolator(self) -> itkInterpolateImageFunctionID3F
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointF3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionID3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionID3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionID3F

        Create a new object of the class itkRayCastInterpolateImageFunctionID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionID3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionID3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionID3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionID3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionID3F_swigregister(itkRayCastInterpolateImageFunctionID3F)

def itkRayCastInterpolateImageFunctionIF3D_New():
    return itkRayCastInterpolateImageFunctionIF3D.New()

class itkRayCastInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIF3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIF3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3D *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointD3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIF3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIF3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIF3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIF3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIF3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3D_swigregister(itkRayCastInterpolateImageFunctionIF3D)

def itkRayCastInterpolateImageFunctionIF3F_New():
    return itkRayCastInterpolateImageFunctionIF3F.New()

class itkRayCastInterpolateImageFunctionIF3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIF3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIF3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformF33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformF33
        GetTransform(self) -> itkTransformF33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3F *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF3F"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3F
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3F
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointF3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIF3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIF3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIF3F_swigregister(itkRayCastInterpolateImageFunctionIF3F)

def itkRayCastInterpolateImageFunctionISS3D_New():
    return itkRayCastInterpolateImageFunctionISS3D.New()

class itkRayCastInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionISS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionISS3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionISS3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS3D *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS3D"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointD3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionISS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionISS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionISS3D

        Create a new object of the class itkRayCastInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionISS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionISS3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3D_swigregister(itkRayCastInterpolateImageFunctionISS3D)

def itkRayCastInterpolateImageFunctionISS3F_New():
    return itkRayCastInterpolateImageFunctionISS3F.New()

class itkRayCastInterpolateImageFunctionISS3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3F):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionISS3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionISS3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionISS3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformF33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformF33
        GetTransform(self) -> itkTransformF33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS3F *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS3F"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3F
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3F
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointF3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionISS3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionISS3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionISS3F

        Create a new object of the class itkRayCastInterpolateImageFunctionISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionISS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionISS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionISS3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionISS3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionISS3F_swigregister(itkRayCastInterpolateImageFunctionISS3F)

def itkRayCastInterpolateImageFunctionIUC3D_New():
    return itkRayCastInterpolateImageFunctionIUC3D.New()

class itkRayCastInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIUC3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIUC3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC3D *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointD3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUC3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUC3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3D_swigregister(itkRayCastInterpolateImageFunctionIUC3D)

def itkRayCastInterpolateImageFunctionIUC3F_New():
    return itkRayCastInterpolateImageFunctionIUC3F.New()

class itkRayCastInterpolateImageFunctionIUC3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIUC3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIUC3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIUC3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformF33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformF33
        GetTransform(self) -> itkTransformF33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC3F *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC3F"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3F
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3F
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointF3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUC3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIUC3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUC3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUC3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUC3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUC3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUC3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUC3F_swigregister(itkRayCastInterpolateImageFunctionIUC3F)

def itkRayCastInterpolateImageFunctionIUS3D_New():
    return itkRayCastInterpolateImageFunctionIUS3D.New()

class itkRayCastInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIUS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIUS3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIUS3D_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS3D *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointD3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIUS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUS3D

        Create a new object of the class itkRayCastInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUS3D in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3D_swigregister(itkRayCastInterpolateImageFunctionIUS3D)

def itkRayCastInterpolateImageFunctionIUS3F_New():
    return itkRayCastInterpolateImageFunctionIUS3F.New()

class itkRayCastInterpolateImageFunctionIUS3F(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F):
    r"""Proxy of C++ itkRayCastInterpolateImageFunctionIUS3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRayCastInterpolateImageFunctionIUS3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRayCastInterpolateImageFunctionIUS3F_Pointer"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformF33"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformF33
        GetTransform(self) -> itkTransformF33
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS3F *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS3F"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3F
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3F
        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetInterpolator(self, *args)

    def SetFocalPoint(self, _arg):
        r"""
        SetFocalPoint(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetFocalPoint(self, _arg)

    def GetFocalPoint(self):
        r"""GetFocalPoint(self) -> itkPointF3"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetFocalPoint(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_GetThreshold(self)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        IsInsideBuffer(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_IsInsideBuffer(self, *args)
    __swig_destroy__ = _itkRayCastInterpolateImageFunctionPython.delete_itkRayCastInterpolateImageFunctionIUS3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRayCastInterpolateImageFunctionIUS3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRayCastInterpolateImageFunctionIUS3F

        Create a new object of the class itkRayCastInterpolateImageFunctionIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRayCastInterpolateImageFunctionIUS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRayCastInterpolateImageFunctionIUS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRayCastInterpolateImageFunctionIUS3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRayCastInterpolateImageFunctionIUS3F in _itkRayCastInterpolateImageFunctionPython:
_itkRayCastInterpolateImageFunctionPython.itkRayCastInterpolateImageFunctionIUS3F_swigregister(itkRayCastInterpolateImageFunctionIUS3F)

