# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKQuadEdgeMeshPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkQuadEdgePython
else:
    import _itkQuadEdgePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.pyBasePython
class itkQuadEdge(object):
    r"""Proxy of C++ itkQuadEdge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BeginOnext(self, *args):
        r"""
        BeginOnext(self) -> itk::QuadEdgeMeshIterator< itk::QuadEdge >
        BeginOnext(self) -> itk::QuadEdgeMeshConstIterator< itk::QuadEdge >
        """
        return _itkQuadEdgePython.itkQuadEdge_BeginOnext(self, *args)

    def EndOnext(self, *args):
        r"""
        EndOnext(self) -> itk::QuadEdgeMeshIterator< itk::QuadEdge >
        EndOnext(self) -> itk::QuadEdgeMeshConstIterator< itk::QuadEdge >
        """
        return _itkQuadEdgePython.itkQuadEdge_EndOnext(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkQuadEdge
        __init__(self, arg0) -> itkQuadEdge

        Parameters
        ----------
        arg0: itkQuadEdge const &

        """
        _itkQuadEdgePython.itkQuadEdge_swiginit(self, _itkQuadEdgePython.new_itkQuadEdge(*args))
    __swig_destroy__ = _itkQuadEdgePython.delete_itkQuadEdge

    def SetOnext(self, onext):
        r"""
        SetOnext(self, onext)

        Parameters
        ----------
        onext: itkQuadEdge *

        """
        return _itkQuadEdgePython.itkQuadEdge_SetOnext(self, onext)

    def SetRot(self, rot):
        r"""
        SetRot(self, rot)

        Parameters
        ----------
        rot: itkQuadEdge *

        """
        return _itkQuadEdgePython.itkQuadEdge_SetRot(self, rot)

    def GetOnext(self, *args):
        r"""
        GetOnext(self) -> itkQuadEdge
        GetOnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetOnext(self, *args)

    def GetRot(self, *args):
        r"""
        GetRot(self) -> itkQuadEdge
        GetRot(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetRot(self, *args)

    def Splice(self, b):
        r"""
        Splice(self, b)

        Parameters
        ----------
        b: itkQuadEdge *

        """
        return _itkQuadEdgePython.itkQuadEdge_Splice(self, b)

    def GetSym(self, *args):
        r"""
        GetSym(self) -> itkQuadEdge
        GetSym(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetSym(self, *args)

    def GetLnext(self, *args):
        r"""
        GetLnext(self) -> itkQuadEdge
        GetLnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetLnext(self, *args)

    def GetRnext(self, *args):
        r"""
        GetRnext(self) -> itkQuadEdge
        GetRnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetRnext(self, *args)

    def GetDnext(self, *args):
        r"""
        GetDnext(self) -> itkQuadEdge
        GetDnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetDnext(self, *args)

    def GetOprev(self, *args):
        r"""
        GetOprev(self) -> itkQuadEdge
        GetOprev(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetOprev(self, *args)

    def GetLprev(self, *args):
        r"""
        GetLprev(self) -> itkQuadEdge
        GetLprev(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetLprev(self, *args)

    def GetRprev(self, *args):
        r"""
        GetRprev(self) -> itkQuadEdge
        GetRprev(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetRprev(self, *args)

    def GetDprev(self, *args):
        r"""
        GetDprev(self) -> itkQuadEdge
        GetDprev(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetDprev(self, *args)

    def GetInvRot(self, *args):
        r"""
        GetInvRot(self) -> itkQuadEdge
        GetInvRot(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetInvRot(self, *args)

    def GetInvOnext(self, *args):
        r"""
        GetInvOnext(self) -> itkQuadEdge
        GetInvOnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetInvOnext(self, *args)

    def GetInvLnext(self, *args):
        r"""
        GetInvLnext(self) -> itkQuadEdge
        GetInvLnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetInvLnext(self, *args)

    def GetInvRnext(self, *args):
        r"""
        GetInvRnext(self) -> itkQuadEdge
        GetInvRnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetInvRnext(self, *args)

    def GetInvDnext(self, *args):
        r"""
        GetInvDnext(self) -> itkQuadEdge
        GetInvDnext(self) -> itkQuadEdge
        """
        return _itkQuadEdgePython.itkQuadEdge_GetInvDnext(self, *args)

    def IsHalfEdge(self):
        r"""IsHalfEdge(self) -> bool"""
        return _itkQuadEdgePython.itkQuadEdge_IsHalfEdge(self)

    def IsIsolated(self):
        r"""IsIsolated(self) -> bool"""
        return _itkQuadEdgePython.itkQuadEdge_IsIsolated(self)

    def IsEdgeInOnextRing(self, testEdge):
        r"""
        IsEdgeInOnextRing(self, testEdge) -> bool

        Parameters
        ----------
        testEdge: itkQuadEdge *

        """
        return _itkQuadEdgePython.itkQuadEdge_IsEdgeInOnextRing(self, testEdge)

    def IsLnextGivenSizeCyclic(self, size):
        r"""
        IsLnextGivenSizeCyclic(self, size) -> bool

        Parameters
        ----------
        size: int const

        """
        return _itkQuadEdgePython.itkQuadEdge_IsLnextGivenSizeCyclic(self, size)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkQuadEdgePython.itkQuadEdge_GetOrder(self)

# Register itkQuadEdge in _itkQuadEdgePython:
_itkQuadEdgePython.itkQuadEdge_swigregister(itkQuadEdge)

