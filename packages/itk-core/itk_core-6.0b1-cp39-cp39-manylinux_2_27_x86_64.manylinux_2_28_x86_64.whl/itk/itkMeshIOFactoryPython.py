# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOMeshBasePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeshIOFactoryPython
else:
    import _itkMeshIOFactoryPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkMeshIOBasePython

def itkMeshIOFactory_New():
    return itkMeshIOFactory.New()

class itkMeshIOFactory(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMeshIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshIOFactory_Pointer"""
        return _itkMeshIOFactoryPython.itkMeshIOFactory___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshIOFactory_Pointer"""
        return _itkMeshIOFactoryPython.itkMeshIOFactory_Clone(self)

    @staticmethod
    def CreateMeshIO(path, mode):
        r"""
        CreateMeshIO(path, mode) -> itkMeshIOBase_Pointer

        Parameters
        ----------
        path: char const *
        mode: enum itkCommonEnums::IOFileMode

        """
        return _itkMeshIOFactoryPython.itkMeshIOFactory_CreateMeshIO(path, mode)
    __swig_destroy__ = _itkMeshIOFactoryPython.delete_itkMeshIOFactory

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshIOFactory

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshIOFactoryPython.itkMeshIOFactory_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshIOFactory

        Create a new object of the class itkMeshIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshIOFactory in _itkMeshIOFactoryPython:
_itkMeshIOFactoryPython.itkMeshIOFactory_swigregister(itkMeshIOFactory)

