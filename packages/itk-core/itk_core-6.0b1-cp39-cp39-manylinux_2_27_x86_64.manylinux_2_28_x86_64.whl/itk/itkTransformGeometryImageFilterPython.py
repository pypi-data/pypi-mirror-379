# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformGeometryImageFilterPython
else:
    import _itkTransformGeometryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython

def itkTransformGeometryImageFilterID3ID3_New():
    return itkTransformGeometryImageFilterID3ID3.New()

class itkTransformGeometryImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkTransformGeometryImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformGeometryImageFilterID3ID3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformGeometryImageFilterID3ID3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_Clone(self)
    SameDimensionCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_InputConvertibleToOutputCheck
    

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_GetTransform(self)

    def SetInputImage(self, _arg):
        r"""
        SetInputImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_SetInputImage(self, _arg)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_GetInputImage(self)
    __swig_destroy__ = _itkTransformGeometryImageFilterPython.delete_itkTransformGeometryImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformGeometryImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformGeometryImageFilterID3ID3

        Create a new object of the class itkTransformGeometryImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformGeometryImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformGeometryImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformGeometryImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformGeometryImageFilterID3ID3 in _itkTransformGeometryImageFilterPython:
_itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterID3ID3_swigregister(itkTransformGeometryImageFilterID3ID3)

def itkTransformGeometryImageFilterIF3IF3_New():
    return itkTransformGeometryImageFilterIF3IF3.New()

class itkTransformGeometryImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkTransformGeometryImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformGeometryImageFilterIF3IF3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformGeometryImageFilterIF3IF3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_Clone(self)
    SameDimensionCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_InputConvertibleToOutputCheck
    

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_GetTransform(self)

    def SetInputImage(self, _arg):
        r"""
        SetInputImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_SetInputImage(self, _arg)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_GetInputImage(self)
    __swig_destroy__ = _itkTransformGeometryImageFilterPython.delete_itkTransformGeometryImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformGeometryImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformGeometryImageFilterIF3IF3

        Create a new object of the class itkTransformGeometryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformGeometryImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformGeometryImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformGeometryImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformGeometryImageFilterIF3IF3 in _itkTransformGeometryImageFilterPython:
_itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIF3IF3_swigregister(itkTransformGeometryImageFilterIF3IF3)

def itkTransformGeometryImageFilterISS3ISS3_New():
    return itkTransformGeometryImageFilterISS3ISS3.New()

class itkTransformGeometryImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkTransformGeometryImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformGeometryImageFilterISS3ISS3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformGeometryImageFilterISS3ISS3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_Clone(self)
    SameDimensionCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_InputConvertibleToOutputCheck
    

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_GetTransform(self)

    def SetInputImage(self, _arg):
        r"""
        SetInputImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS3 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_SetInputImage(self, _arg)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_GetInputImage(self)
    __swig_destroy__ = _itkTransformGeometryImageFilterPython.delete_itkTransformGeometryImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformGeometryImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformGeometryImageFilterISS3ISS3

        Create a new object of the class itkTransformGeometryImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformGeometryImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformGeometryImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformGeometryImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformGeometryImageFilterISS3ISS3 in _itkTransformGeometryImageFilterPython:
_itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterISS3ISS3_swigregister(itkTransformGeometryImageFilterISS3ISS3)

def itkTransformGeometryImageFilterIUC3IUC3_New():
    return itkTransformGeometryImageFilterIUC3IUC3.New()

class itkTransformGeometryImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkTransformGeometryImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformGeometryImageFilterIUC3IUC3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformGeometryImageFilterIUC3IUC3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_Clone(self)
    SameDimensionCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_GetTransform(self)

    def SetInputImage(self, _arg):
        r"""
        SetInputImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_SetInputImage(self, _arg)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_GetInputImage(self)
    __swig_destroy__ = _itkTransformGeometryImageFilterPython.delete_itkTransformGeometryImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformGeometryImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformGeometryImageFilterIUC3IUC3

        Create a new object of the class itkTransformGeometryImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformGeometryImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformGeometryImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformGeometryImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformGeometryImageFilterIUC3IUC3 in _itkTransformGeometryImageFilterPython:
_itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUC3IUC3_swigregister(itkTransformGeometryImageFilterIUC3IUC3)

def itkTransformGeometryImageFilterIUS3IUS3_New():
    return itkTransformGeometryImageFilterIUS3IUS3.New()

class itkTransformGeometryImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkTransformGeometryImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformGeometryImageFilterIUS3IUS3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformGeometryImageFilterIUS3IUS3_Pointer"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_Clone(self)
    SameDimensionCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_GetTransform(self)

    def SetInputImage(self, _arg):
        r"""
        SetInputImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS3 const *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_SetInputImage(self, _arg)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_GetInputImage(self)
    __swig_destroy__ = _itkTransformGeometryImageFilterPython.delete_itkTransformGeometryImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformGeometryImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformGeometryImageFilterIUS3IUS3

        Create a new object of the class itkTransformGeometryImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformGeometryImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformGeometryImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformGeometryImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformGeometryImageFilterIUS3IUS3 in _itkTransformGeometryImageFilterPython:
_itkTransformGeometryImageFilterPython.itkTransformGeometryImageFilterIUS3IUS3_swigregister(itkTransformGeometryImageFilterIUS3IUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def transform_geometry_image_filter(*args: itkt.ImageLike,  transform_input=..., transform: itkt.Transform=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for TransformGeometryImageFilter"""
    import itk

    kwarg_typehints = { 'transform_input':transform_input,'transform':transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TransformGeometryImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def transform_geometry_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKTransform.TransformGeometryImageFilter
    transform_geometry_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    transform_geometry_image_filter.__doc__ = filter_object.__doc__



