# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVolumeSplineKernelTransformPython
else:
    import _itkVolumeSplineKernelTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkKernelTransformPython
import itk.itkArray2DPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkPointSetPython

def itkVolumeSplineKernelTransformD2_New():
    return itkVolumeSplineKernelTransformD2.New()

class itkVolumeSplineKernelTransformD2(itk.itkKernelTransformPython.itkKernelTransformD2):
    r"""Proxy of C++ itkVolumeSplineKernelTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVolumeSplineKernelTransformD2_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVolumeSplineKernelTransformD2_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD2_Clone(self)
    __swig_destroy__ = _itkVolumeSplineKernelTransformPython.delete_itkVolumeSplineKernelTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVolumeSplineKernelTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVolumeSplineKernelTransformD2

        Create a new object of the class itkVolumeSplineKernelTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVolumeSplineKernelTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVolumeSplineKernelTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVolumeSplineKernelTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVolumeSplineKernelTransformD2 in _itkVolumeSplineKernelTransformPython:
_itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD2_swigregister(itkVolumeSplineKernelTransformD2)

def itkVolumeSplineKernelTransformD3_New():
    return itkVolumeSplineKernelTransformD3.New()

class itkVolumeSplineKernelTransformD3(itk.itkKernelTransformPython.itkKernelTransformD3):
    r"""Proxy of C++ itkVolumeSplineKernelTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVolumeSplineKernelTransformD3_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVolumeSplineKernelTransformD3_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD3_Clone(self)
    __swig_destroy__ = _itkVolumeSplineKernelTransformPython.delete_itkVolumeSplineKernelTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVolumeSplineKernelTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVolumeSplineKernelTransformD3

        Create a new object of the class itkVolumeSplineKernelTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVolumeSplineKernelTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVolumeSplineKernelTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVolumeSplineKernelTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVolumeSplineKernelTransformD3 in _itkVolumeSplineKernelTransformPython:
_itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD3_swigregister(itkVolumeSplineKernelTransformD3)

def itkVolumeSplineKernelTransformD4_New():
    return itkVolumeSplineKernelTransformD4.New()

class itkVolumeSplineKernelTransformD4(itk.itkKernelTransformPython.itkKernelTransformD4):
    r"""Proxy of C++ itkVolumeSplineKernelTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVolumeSplineKernelTransformD4_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVolumeSplineKernelTransformD4_Pointer"""
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD4_Clone(self)
    __swig_destroy__ = _itkVolumeSplineKernelTransformPython.delete_itkVolumeSplineKernelTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVolumeSplineKernelTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVolumeSplineKernelTransformD4

        Create a new object of the class itkVolumeSplineKernelTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVolumeSplineKernelTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVolumeSplineKernelTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVolumeSplineKernelTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVolumeSplineKernelTransformD4 in _itkVolumeSplineKernelTransformPython:
_itkVolumeSplineKernelTransformPython.itkVolumeSplineKernelTransformD4_swigregister(itkVolumeSplineKernelTransformD4)

