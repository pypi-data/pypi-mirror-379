# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianOperatorPython
else:
    import _itkGaussianOperatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkNeighborhoodOperatorPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkNeighborhoodPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
class itkGaussianOperatorD2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    r"""Proxy of C++ itkGaussianOperatorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD2_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorD2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorD2
        __init__(self, arg0) -> itkGaussianOperatorD2

        Parameters
        ----------
        arg0: itkGaussianOperatorD2 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorD2_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorD2(*args))

# Register itkGaussianOperatorD2 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorD2_swigregister(itkGaussianOperatorD2)
class itkGaussianOperatorD3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    r"""Proxy of C++ itkGaussianOperatorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD3_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorD3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorD3
        __init__(self, arg0) -> itkGaussianOperatorD3

        Parameters
        ----------
        arg0: itkGaussianOperatorD3 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorD3_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorD3(*args))

# Register itkGaussianOperatorD3 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorD3_swigregister(itkGaussianOperatorD3)
class itkGaussianOperatorD4(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD4):
    r"""Proxy of C++ itkGaussianOperatorD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorD4_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorD4

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorD4
        __init__(self, arg0) -> itkGaussianOperatorD4

        Parameters
        ----------
        arg0: itkGaussianOperatorD4 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorD4_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorD4(*args))

# Register itkGaussianOperatorD4 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorD4_swigregister(itkGaussianOperatorD4)
class itkGaussianOperatorF2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    r"""Proxy of C++ itkGaussianOperatorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF2_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorF2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorF2
        __init__(self, arg0) -> itkGaussianOperatorF2

        Parameters
        ----------
        arg0: itkGaussianOperatorF2 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorF2_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorF2(*args))

# Register itkGaussianOperatorF2 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorF2_swigregister(itkGaussianOperatorF2)
class itkGaussianOperatorF3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    r"""Proxy of C++ itkGaussianOperatorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF3_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorF3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorF3
        __init__(self, arg0) -> itkGaussianOperatorF3

        Parameters
        ----------
        arg0: itkGaussianOperatorF3 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorF3_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorF3(*args))

# Register itkGaussianOperatorF3 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorF3_swigregister(itkGaussianOperatorF3)
class itkGaussianOperatorF4(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF4):
    r"""Proxy of C++ itkGaussianOperatorF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetVariance(self, variance):
        r"""
        SetVariance(self, variance)

        Parameters
        ----------
        variance: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_SetVariance(self, variance)

    def SetMaximumError(self, max_error):
        r"""
        SetMaximumError(self, max_error)

        Parameters
        ----------
        max_error: double const

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_SetMaximumError(self, max_error)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_GetVariance(self)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_GetMaximumError(self)

    def SetMaximumKernelWidth(self, n):
        r"""
        SetMaximumKernelWidth(self, n)

        Parameters
        ----------
        n: unsigned int

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_SetMaximumKernelWidth(self, n)

    def GetMaximumKernelWidth(self):
        r"""GetMaximumKernelWidth(self) -> unsigned int"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_GetMaximumKernelWidth(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_GetDebug(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_DebugOff(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_SetDebug(self, debugFlag)

    def ModifiedBesselI0(self, arg0):
        r"""
        ModifiedBesselI0(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_ModifiedBesselI0(self, arg0)

    def ModifiedBesselI1(self, arg0):
        r"""
        ModifiedBesselI1(self, arg0) -> double

        Parameters
        ----------
        arg0: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_ModifiedBesselI1(self, arg0)

    def ModifiedBesselI(self, arg0, arg1):
        r"""
        ModifiedBesselI(self, arg0, arg1) -> double

        Parameters
        ----------
        arg0: int
        arg1: double

        """
        return _itkGaussianOperatorPython.itkGaussianOperatorF4_ModifiedBesselI(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianOperatorPython.delete_itkGaussianOperatorF4

    def __init__(self, *args):
        r"""
        __init__(self) -> itkGaussianOperatorF4
        __init__(self, arg0) -> itkGaussianOperatorF4

        Parameters
        ----------
        arg0: itkGaussianOperatorF4 const &

        """
        _itkGaussianOperatorPython.itkGaussianOperatorF4_swiginit(self, _itkGaussianOperatorPython.new_itkGaussianOperatorF4(*args))

# Register itkGaussianOperatorF4 in _itkGaussianOperatorPython:
_itkGaussianOperatorPython.itkGaussianOperatorF4_swigregister(itkGaussianOperatorF4)

