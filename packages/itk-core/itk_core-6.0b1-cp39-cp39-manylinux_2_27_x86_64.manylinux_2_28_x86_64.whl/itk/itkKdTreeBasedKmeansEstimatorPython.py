# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkKdTreeBasedKmeansEstimatorPython
else:
    import _itkKdTreeBasedKmeansEstimatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkKdTreePython
import itk.itkListSamplePython
import itk.itkSamplePython
import itk.itkEuclideanDistanceMetricPython
import itk.itkDistanceMetricPython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_New():
    return itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New()

class itkKdTreeBasedKmeansEstimatorKdTreeLSVF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_Clone(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,2 > > const > > > > const *"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetOutput(self)

    def SetParameters(self, _arg):
        r"""
        SetParameters(self, _arg)

        Parameters
        ----------
        _arg: itkArrayD

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetParameters(self, _arg)

    def GetParameters(self):
        r"""GetParameters(self) -> itkArrayD"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetParameters(self)

    def SetMaximumIteration(self, _arg):
        r"""
        SetMaximumIteration(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetMaximumIteration(self, _arg)

    def GetMaximumIteration(self):
        r"""GetMaximumIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMaximumIteration(self)

    def SetCentroidPositionChangesThreshold(self, _arg):
        r"""
        SetCentroidPositionChangesThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetCentroidPositionChangesThreshold(self, _arg)

    def GetCentroidPositionChangesThreshold(self):
        r"""GetCentroidPositionChangesThreshold(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChangesThreshold(self)

    def SetKdTree(self, tree):
        r"""
        SetKdTree(self, tree)

        Parameters
        ----------
        tree: itkKdTreeLSVF2 *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetKdTree(self, tree)

    def GetKdTree(self):
        r"""GetKdTree(self) -> itkKdTreeLSVF2"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetKdTree(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetMeasurementVectorSize(self)

    def GetCurrentIteration(self):
        r"""GetCurrentIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCurrentIteration(self)

    def GetCentroidPositionChanges(self):
        r"""GetCentroidPositionChanges(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetCentroidPositionChanges(self)

    def StartOptimization(self):
        r"""StartOptimization(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_StartOptimization(self)

    def SetUseClusterLabels(self, _arg):
        r"""
        SetUseClusterLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_SetUseClusterLabels(self, _arg)

    def GetUseClusterLabels(self):
        r"""GetUseClusterLabels(self) -> bool"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_GetUseClusterLabels(self)

    def UseClusterLabelsOn(self):
        r"""UseClusterLabelsOn(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_UseClusterLabelsOn(self)

    def UseClusterLabelsOff(self):
        r"""UseClusterLabelsOff(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_UseClusterLabelsOff(self)
    __swig_destroy__ = _itkKdTreeBasedKmeansEstimatorPython.delete_itkKdTreeBasedKmeansEstimatorKdTreeLSVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF2

        Create a new object of the class itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeBasedKmeansEstimatorKdTreeLSVF2 in _itkKdTreeBasedKmeansEstimatorPython:
_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF2_swigregister(itkKdTreeBasedKmeansEstimatorKdTreeLSVF2)

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_New():
    return itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New()

class itkKdTreeBasedKmeansEstimatorKdTreeLSVF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_Clone(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float > > const > > > > const *"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetOutput(self)

    def SetParameters(self, _arg):
        r"""
        SetParameters(self, _arg)

        Parameters
        ----------
        _arg: itkArrayD

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetParameters(self, _arg)

    def GetParameters(self):
        r"""GetParameters(self) -> itkArrayD"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetParameters(self)

    def SetMaximumIteration(self, _arg):
        r"""
        SetMaximumIteration(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetMaximumIteration(self, _arg)

    def GetMaximumIteration(self):
        r"""GetMaximumIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMaximumIteration(self)

    def SetCentroidPositionChangesThreshold(self, _arg):
        r"""
        SetCentroidPositionChangesThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetCentroidPositionChangesThreshold(self, _arg)

    def GetCentroidPositionChangesThreshold(self):
        r"""GetCentroidPositionChangesThreshold(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChangesThreshold(self)

    def SetKdTree(self, tree):
        r"""
        SetKdTree(self, tree)

        Parameters
        ----------
        tree: itkKdTreeLSVF3 *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetKdTree(self, tree)

    def GetKdTree(self):
        r"""GetKdTree(self) -> itkKdTreeLSVF3"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetKdTree(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetMeasurementVectorSize(self)

    def GetCurrentIteration(self):
        r"""GetCurrentIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCurrentIteration(self)

    def GetCentroidPositionChanges(self):
        r"""GetCentroidPositionChanges(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetCentroidPositionChanges(self)

    def StartOptimization(self):
        r"""StartOptimization(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_StartOptimization(self)

    def SetUseClusterLabels(self, _arg):
        r"""
        SetUseClusterLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_SetUseClusterLabels(self, _arg)

    def GetUseClusterLabels(self):
        r"""GetUseClusterLabels(self) -> bool"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_GetUseClusterLabels(self)

    def UseClusterLabelsOn(self):
        r"""UseClusterLabelsOn(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_UseClusterLabelsOn(self)

    def UseClusterLabelsOff(self):
        r"""UseClusterLabelsOff(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_UseClusterLabelsOff(self)
    __swig_destroy__ = _itkKdTreeBasedKmeansEstimatorPython.delete_itkKdTreeBasedKmeansEstimatorKdTreeLSVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF3

        Create a new object of the class itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeBasedKmeansEstimatorKdTreeLSVF3 in _itkKdTreeBasedKmeansEstimatorPython:
_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF3_swigregister(itkKdTreeBasedKmeansEstimatorKdTreeLSVF3)

def itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_New():
    return itkKdTreeBasedKmeansEstimatorKdTreeLSVF4.New()

class itkKdTreeBasedKmeansEstimatorKdTreeLSVF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeBasedKmeansEstimatorKdTreeLSVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_Pointer"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_Clone(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itk::SimpleDataObjectDecorator< std::vector< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,4 > > const >,std::allocator< itk::SmartPointer< itk::Statistics::MembershipFunctionBase< itk::Vector< float,4 > > const > > > > const *"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetOutput(self)

    def SetParameters(self, _arg):
        r"""
        SetParameters(self, _arg)

        Parameters
        ----------
        _arg: itkArrayD

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_SetParameters(self, _arg)

    def GetParameters(self):
        r"""GetParameters(self) -> itkArrayD"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetParameters(self)

    def SetMaximumIteration(self, _arg):
        r"""
        SetMaximumIteration(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_SetMaximumIteration(self, _arg)

    def GetMaximumIteration(self):
        r"""GetMaximumIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetMaximumIteration(self)

    def SetCentroidPositionChangesThreshold(self, _arg):
        r"""
        SetCentroidPositionChangesThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_SetCentroidPositionChangesThreshold(self, _arg)

    def GetCentroidPositionChangesThreshold(self):
        r"""GetCentroidPositionChangesThreshold(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetCentroidPositionChangesThreshold(self)

    def SetKdTree(self, tree):
        r"""
        SetKdTree(self, tree)

        Parameters
        ----------
        tree: itkKdTreeLSVF4 *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_SetKdTree(self, tree)

    def GetKdTree(self):
        r"""GetKdTree(self) -> itkKdTreeLSVF4"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetKdTree(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetMeasurementVectorSize(self)

    def GetCurrentIteration(self):
        r"""GetCurrentIteration(self) -> int"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetCurrentIteration(self)

    def GetCentroidPositionChanges(self):
        r"""GetCentroidPositionChanges(self) -> double"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetCentroidPositionChanges(self)

    def StartOptimization(self):
        r"""StartOptimization(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_StartOptimization(self)

    def SetUseClusterLabels(self, _arg):
        r"""
        SetUseClusterLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_SetUseClusterLabels(self, _arg)

    def GetUseClusterLabels(self):
        r"""GetUseClusterLabels(self) -> bool"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_GetUseClusterLabels(self)

    def UseClusterLabelsOn(self):
        r"""UseClusterLabelsOn(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_UseClusterLabelsOn(self)

    def UseClusterLabelsOff(self):
        r"""UseClusterLabelsOff(self)"""
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_UseClusterLabelsOff(self)
    __swig_destroy__ = _itkKdTreeBasedKmeansEstimatorPython.delete_itkKdTreeBasedKmeansEstimatorKdTreeLSVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeBasedKmeansEstimatorKdTreeLSVF4

        Create a new object of the class itkKdTreeBasedKmeansEstimatorKdTreeLSVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeBasedKmeansEstimatorKdTreeLSVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeBasedKmeansEstimatorKdTreeLSVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeBasedKmeansEstimatorKdTreeLSVF4 in _itkKdTreeBasedKmeansEstimatorPython:
_itkKdTreeBasedKmeansEstimatorPython.itkKdTreeBasedKmeansEstimatorKdTreeLSVF4_swigregister(itkKdTreeBasedKmeansEstimatorKdTreeLSVF4)

