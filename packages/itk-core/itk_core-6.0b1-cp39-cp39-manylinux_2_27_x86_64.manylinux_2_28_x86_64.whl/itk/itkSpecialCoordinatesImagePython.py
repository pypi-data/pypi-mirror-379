# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSpecialCoordinatesImagePython
else:
    import _itkSpecialCoordinatesImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython

def itkSpecialCoordinatesImageCD2_New():
    return itkSpecialCoordinatesImageCD2.New()

class itkSpecialCoordinatesImageCD2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCD2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCD2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCD2

        Create a new object of the class itkSpecialCoordinatesImageCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCD2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD2_swigregister(itkSpecialCoordinatesImageCD2)

def itkSpecialCoordinatesImageCD3_New():
    return itkSpecialCoordinatesImageCD3.New()

class itkSpecialCoordinatesImageCD3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCD3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCD3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCD3

        Create a new object of the class itkSpecialCoordinatesImageCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCD3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD3_swigregister(itkSpecialCoordinatesImageCD3)

def itkSpecialCoordinatesImageCD4_New():
    return itkSpecialCoordinatesImageCD4.New()

class itkSpecialCoordinatesImageCD4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageCD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCD4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCD4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: stdcomplexD const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> stdcomplexD

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexD
        GetBufferPointer(self) -> stdcomplexD
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< double > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCD4

        Create a new object of the class itkSpecialCoordinatesImageCD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCD4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCD4_swigregister(itkSpecialCoordinatesImageCD4)

def itkSpecialCoordinatesImageCF2_New():
    return itkSpecialCoordinatesImageCF2.New()

class itkSpecialCoordinatesImageCF2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCF2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCF2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCF2

        Create a new object of the class itkSpecialCoordinatesImageCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCF2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF2_swigregister(itkSpecialCoordinatesImageCF2)

def itkSpecialCoordinatesImageCF3_New():
    return itkSpecialCoordinatesImageCF3.New()

class itkSpecialCoordinatesImageCF3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCF3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCF3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCF3

        Create a new object of the class itkSpecialCoordinatesImageCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCF3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF3_swigregister(itkSpecialCoordinatesImageCF3)

def itkSpecialCoordinatesImageCF4_New():
    return itkSpecialCoordinatesImageCF4.New()

class itkSpecialCoordinatesImageCF4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageCF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageCF4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageCF4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: stdcomplexF const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> stdcomplexF

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> stdcomplexF
        GetBufferPointer(self) -> stdcomplexF
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,std::complex< float > > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,std::complex< float > > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< std::complex< float > > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageCF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageCF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageCF4

        Create a new object of the class itkSpecialCoordinatesImageCF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageCF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageCF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageCF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageCF4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageCF4_swigregister(itkSpecialCoordinatesImageCF4)

def itkSpecialCoordinatesImageD2_New():
    return itkSpecialCoordinatesImageD2.New()

class itkSpecialCoordinatesImageD2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageD2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageD2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageD2

        Create a new object of the class itkSpecialCoordinatesImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageD2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD2_swigregister(itkSpecialCoordinatesImageD2)

def itkSpecialCoordinatesImageD3_New():
    return itkSpecialCoordinatesImageD3.New()

class itkSpecialCoordinatesImageD3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageD3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageD3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageD3

        Create a new object of the class itkSpecialCoordinatesImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageD3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD3_swigregister(itkSpecialCoordinatesImageD3)

def itkSpecialCoordinatesImageD4_New():
    return itkSpecialCoordinatesImageD4.New()

class itkSpecialCoordinatesImageD4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageD4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageD4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: double const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageD4

        Create a new object of the class itkSpecialCoordinatesImageD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageD4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageD4_swigregister(itkSpecialCoordinatesImageD4)

def itkSpecialCoordinatesImageF2_New():
    return itkSpecialCoordinatesImageF2.New()

class itkSpecialCoordinatesImageF2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageF2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageF2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageF2

        Create a new object of the class itkSpecialCoordinatesImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageF2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF2_swigregister(itkSpecialCoordinatesImageF2)

def itkSpecialCoordinatesImageF3_New():
    return itkSpecialCoordinatesImageF3.New()

class itkSpecialCoordinatesImageF3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageF3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageF3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageF3

        Create a new object of the class itkSpecialCoordinatesImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageF3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF3_swigregister(itkSpecialCoordinatesImageF3)

def itkSpecialCoordinatesImageF4_New():
    return itkSpecialCoordinatesImageF4.New()

class itkSpecialCoordinatesImageF4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageF4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageF4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: float const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageF4

        Create a new object of the class itkSpecialCoordinatesImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageF4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageF4_swigregister(itkSpecialCoordinatesImageF4)

def itkSpecialCoordinatesImageSS2_New():
    return itkSpecialCoordinatesImageSS2.New()

class itkSpecialCoordinatesImageSS2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageSS2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageSS2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageSS2

        Create a new object of the class itkSpecialCoordinatesImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageSS2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS2_swigregister(itkSpecialCoordinatesImageSS2)

def itkSpecialCoordinatesImageSS3_New():
    return itkSpecialCoordinatesImageSS3.New()

class itkSpecialCoordinatesImageSS3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageSS3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageSS3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageSS3

        Create a new object of the class itkSpecialCoordinatesImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageSS3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS3_swigregister(itkSpecialCoordinatesImageSS3)

def itkSpecialCoordinatesImageSS4_New():
    return itkSpecialCoordinatesImageSS4.New()

class itkSpecialCoordinatesImageSS4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageSS4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageSS4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageSS4

        Create a new object of the class itkSpecialCoordinatesImageSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageSS4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageSS4_swigregister(itkSpecialCoordinatesImageSS4)

def itkSpecialCoordinatesImageUC2_New():
    return itkSpecialCoordinatesImageUC2.New()

class itkSpecialCoordinatesImageUC2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUC2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUC2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUC2

        Create a new object of the class itkSpecialCoordinatesImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUC2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC2_swigregister(itkSpecialCoordinatesImageUC2)

def itkSpecialCoordinatesImageUC3_New():
    return itkSpecialCoordinatesImageUC3.New()

class itkSpecialCoordinatesImageUC3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUC3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUC3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUC3

        Create a new object of the class itkSpecialCoordinatesImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUC3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC3_swigregister(itkSpecialCoordinatesImageUC3)

def itkSpecialCoordinatesImageUC4_New():
    return itkSpecialCoordinatesImageUC4.New()

class itkSpecialCoordinatesImageUC4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUC4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUC4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned char const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUC4

        Create a new object of the class itkSpecialCoordinatesImageUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUC4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUC4_swigregister(itkSpecialCoordinatesImageUC4)

def itkSpecialCoordinatesImageUS2_New():
    return itkSpecialCoordinatesImageUS2.New()

class itkSpecialCoordinatesImageUS2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkSpecialCoordinatesImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUS2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUS2_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUS2

        Create a new object of the class itkSpecialCoordinatesImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUS2 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS2_swigregister(itkSpecialCoordinatesImageUS2)

def itkSpecialCoordinatesImageUS3_New():
    return itkSpecialCoordinatesImageUS3.New()

class itkSpecialCoordinatesImageUS3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkSpecialCoordinatesImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUS3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUS3_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUS3

        Create a new object of the class itkSpecialCoordinatesImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUS3 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS3_swigregister(itkSpecialCoordinatesImageUS3)

def itkSpecialCoordinatesImageUS4_New():
    return itkSpecialCoordinatesImageUS4.New()

class itkSpecialCoordinatesImageUS4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkSpecialCoordinatesImageUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpecialCoordinatesImageUS4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpecialCoordinatesImageUS4_Pointer"""
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_Allocate(self, initialize)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned short const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_SetPixelContainer(self, container)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_GetPixelAccessor(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetSpacing(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_SetSpacing(self, *args)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: double const *

        SetOrigin(self, arg0)

        Parameters
        ----------
        arg0: float const *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_SetOrigin(self, *args)
    __swig_destroy__ = _itkSpecialCoordinatesImagePython.delete_itkSpecialCoordinatesImageUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpecialCoordinatesImageUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpecialCoordinatesImageUS4

        Create a new object of the class itkSpecialCoordinatesImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpecialCoordinatesImageUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpecialCoordinatesImageUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpecialCoordinatesImageUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpecialCoordinatesImageUS4 in _itkSpecialCoordinatesImagePython:
_itkSpecialCoordinatesImagePython.itkSpecialCoordinatesImageUS4_swigregister(itkSpecialCoordinatesImageUS4)

