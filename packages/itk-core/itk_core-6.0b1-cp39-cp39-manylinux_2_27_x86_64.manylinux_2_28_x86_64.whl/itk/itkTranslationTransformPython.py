# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTranslationTransformPython
else:
    import _itkTranslationTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArray2DPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython

def itkTranslationTransformD2_New():
    return itkTranslationTransformD2.New()

class itkTranslationTransformD2(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkTranslationTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTranslationTransformD2_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTranslationTransformD2_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_Clone(self)

    def GetOffset(self):
        r"""GetOffset(self) -> itkVectorD2"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_GetOffset(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkVectorD2 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_SetOffset(self, offset)

    def Compose(self, other, pre=False):
        r"""
        Compose(self, other, pre=False)

        Parameters
        ----------
        other: itkTranslationTransformD2 const *
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_Compose(self, other, pre)

    def Translate(self, offset, pre=False):
        r"""
        Translate(self, offset, pre=False)

        Parameters
        ----------
        offset: itkVectorD2 const &
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_Translate(self, offset, pre)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD2 const &

        TransformVector(self, vect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,2 > const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_TransformVector(self, *args)

    def BackTransform(self, *args):
        r"""
        BackTransform(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        BackTransform(self, vect) -> itkVectorD2

        Parameters
        ----------
        vect: itkVectorD2 const &

        BackTransform(self, vect) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,2 > const &

        BackTransform(self, vect) -> itkCovariantVectorD2

        Parameters
        ----------
        vect: itkCovariantVectorD2 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_BackTransform(self, *args)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkTranslationTransformD2 *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_SetIdentity(self)
    __swig_destroy__ = _itkTranslationTransformPython.delete_itkTranslationTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTranslationTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTranslationTransformD2

        Create a new object of the class itkTranslationTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTranslationTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTranslationTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTranslationTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTranslationTransformD2 in _itkTranslationTransformPython:
_itkTranslationTransformPython.itkTranslationTransformD2_swigregister(itkTranslationTransformD2)

def itkTranslationTransformD3_New():
    return itkTranslationTransformD3.New()

class itkTranslationTransformD3(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkTranslationTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTranslationTransformD3_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTranslationTransformD3_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_Clone(self)

    def GetOffset(self):
        r"""GetOffset(self) -> itkVectorD3"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_GetOffset(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkVectorD3 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_SetOffset(self, offset)

    def Compose(self, other, pre=False):
        r"""
        Compose(self, other, pre=False)

        Parameters
        ----------
        other: itkTranslationTransformD3 const *
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_Compose(self, other, pre)

    def Translate(self, offset, pre=False):
        r"""
        Translate(self, offset, pre=False)

        Parameters
        ----------
        offset: itkVectorD3 const &
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_Translate(self, offset, pre)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD3 const &

        TransformVector(self, vect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,3 > const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_TransformVector(self, *args)

    def BackTransform(self, *args):
        r"""
        BackTransform(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        BackTransform(self, vect) -> itkVectorD3

        Parameters
        ----------
        vect: itkVectorD3 const &

        BackTransform(self, vect) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,3 > const &

        BackTransform(self, vect) -> itkCovariantVectorD3

        Parameters
        ----------
        vect: itkCovariantVectorD3 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_BackTransform(self, *args)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkTranslationTransformD3 *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_SetIdentity(self)
    __swig_destroy__ = _itkTranslationTransformPython.delete_itkTranslationTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTranslationTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTranslationTransformD3

        Create a new object of the class itkTranslationTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTranslationTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTranslationTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTranslationTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTranslationTransformD3 in _itkTranslationTransformPython:
_itkTranslationTransformPython.itkTranslationTransformD3_swigregister(itkTranslationTransformD3)

def itkTranslationTransformD4_New():
    return itkTranslationTransformD4.New()

class itkTranslationTransformD4(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkTranslationTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTranslationTransformD4_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTranslationTransformD4_Pointer"""
        return _itkTranslationTransformPython.itkTranslationTransformD4_Clone(self)

    def GetOffset(self):
        r"""GetOffset(self) -> itkVectorD4"""
        return _itkTranslationTransformPython.itkTranslationTransformD4_GetOffset(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkVectorD4 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_SetOffset(self, offset)

    def Compose(self, other, pre=False):
        r"""
        Compose(self, other, pre=False)

        Parameters
        ----------
        other: itkTranslationTransformD4 const *
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_Compose(self, other, pre)

    def Translate(self, offset, pre=False):
        r"""
        Translate(self, offset, pre=False)

        Parameters
        ----------
        offset: itkVectorD4 const &
        pre: bool

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_Translate(self, offset, pre)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD4 const &

        TransformVector(self, vect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,4 > const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_TransformVector(self, *args)

    def BackTransform(self, *args):
        r"""
        BackTransform(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        BackTransform(self, vect) -> itkVectorD4

        Parameters
        ----------
        vect: itkVectorD4 const &

        BackTransform(self, vect) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vect: vnl_vector_fixed< double,4 > const &

        BackTransform(self, vect) -> itkCovariantVectorD4

        Parameters
        ----------
        vect: itkCovariantVectorD4 const &

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_BackTransform(self, *args)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkTranslationTransformD4 *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkTranslationTransformPython.itkTranslationTransformD4_SetIdentity(self)
    __swig_destroy__ = _itkTranslationTransformPython.delete_itkTranslationTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTranslationTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTranslationTransformPython.itkTranslationTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTranslationTransformD4

        Create a new object of the class itkTranslationTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTranslationTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTranslationTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTranslationTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTranslationTransformD4 in _itkTranslationTransformPython:
_itkTranslationTransformPython.itkTranslationTransformD4_swigregister(itkTranslationTransformD4)

