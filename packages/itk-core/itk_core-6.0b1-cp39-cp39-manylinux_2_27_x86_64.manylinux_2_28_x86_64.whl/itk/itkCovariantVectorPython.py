# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCovariantVectorPython
else:
    import _itkCovariantVectorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
class itkCovariantVectorD2(itk.itkFixedArrayPython.itkFixedArrayD2):
    r"""Proxy of C++ itkCovariantVectorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorD2

        Parameters
        ----------
        vec: itkCovariantVectorD2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorD2

        Parameters
        ----------
        vec: itkCovariantVectorD2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorD2"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorD2

        Parameters
        ----------
        vec: itkCovariantVectorD2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorD2

        Parameters
        ----------
        vec: itkCovariantVectorD2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkCovariantVectorD2 const &

        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD2 const &

        __mul__(self, val) -> itkCovariantVectorD2

        Parameters
        ----------
        val: double const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD2_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorD2
        __init__(self, r) -> itkCovariantVectorD2

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkCovariantVectorD2

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorD2_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD2(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkCovariantVectorPython.itkCovariantVectorD2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD2___repr__(self)

# Register itkCovariantVectorD2 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorD2_swigregister(itkCovariantVectorD2)
class itkCovariantVectorD3(itk.itkFixedArrayPython.itkFixedArrayD3):
    r"""Proxy of C++ itkCovariantVectorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorD3

        Parameters
        ----------
        vec: itkCovariantVectorD3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorD3

        Parameters
        ----------
        vec: itkCovariantVectorD3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorD3"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorD3

        Parameters
        ----------
        vec: itkCovariantVectorD3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorD3

        Parameters
        ----------
        vec: itkCovariantVectorD3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkCovariantVectorD3 const &

        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD3 const &

        __mul__(self, val) -> itkCovariantVectorD3

        Parameters
        ----------
        val: double const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD3_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorD3
        __init__(self, r) -> itkCovariantVectorD3

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkCovariantVectorD3

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorD3_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD3(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkCovariantVectorPython.itkCovariantVectorD3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD3___repr__(self)

# Register itkCovariantVectorD3 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorD3_swigregister(itkCovariantVectorD3)
class itkCovariantVectorD4(itk.itkFixedArrayPython.itkFixedArrayD4):
    r"""Proxy of C++ itkCovariantVectorD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorD4

        Parameters
        ----------
        vec: itkCovariantVectorD4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorD4

        Parameters
        ----------
        vec: itkCovariantVectorD4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorD4"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorD4

        Parameters
        ----------
        vec: itkCovariantVectorD4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorD4

        Parameters
        ----------
        vec: itkCovariantVectorD4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkCovariantVectorD4 const &

        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD4 const &

        __mul__(self, val) -> itkCovariantVectorD4

        Parameters
        ----------
        val: double const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD4_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorD4
        __init__(self, r) -> itkCovariantVectorD4

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkCovariantVectorD4

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorD4_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD4(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkCovariantVectorPython.itkCovariantVectorD4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD4___repr__(self)

# Register itkCovariantVectorD4 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorD4_swigregister(itkCovariantVectorD4)
class itkCovariantVectorD5(itk.itkFixedArrayPython.itkFixedArrayD5):
    r"""Proxy of C++ itkCovariantVectorD5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorD5

        Parameters
        ----------
        vec: itkCovariantVectorD5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorD5

        Parameters
        ----------
        vec: itkCovariantVectorD5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorD5"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorD5

        Parameters
        ----------
        vec: itkCovariantVectorD5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorD5

        Parameters
        ----------
        vec: itkCovariantVectorD5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkCovariantVectorD5 const &

        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD5 const &

        __mul__(self, val) -> itkCovariantVectorD5

        Parameters
        ----------
        val: double const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorD5_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorD5
        __init__(self, r) -> itkCovariantVectorD5

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkCovariantVectorD5

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkCovariantVectorD5

        Parameters
        ----------
        arg0: itkCovariantVectorD5 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorD5_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorD5(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorD5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkCovariantVectorPython.itkCovariantVectorD5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorD5___repr__(self)

# Register itkCovariantVectorD5 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorD5_swigregister(itkCovariantVectorD5)
class itkCovariantVectorF2(itk.itkFixedArrayPython.itkFixedArrayF2):
    r"""Proxy of C++ itkCovariantVectorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorF2

        Parameters
        ----------
        vec: itkCovariantVectorF2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorF2

        Parameters
        ----------
        vec: itkCovariantVectorF2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorF2"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorF2

        Parameters
        ----------
        vec: itkCovariantVectorF2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorF2

        Parameters
        ----------
        vec: itkCovariantVectorF2 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkCovariantVectorF2 const &

        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF2 const &

        __mul__(self, val) -> itkCovariantVectorF2

        Parameters
        ----------
        val: float const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF2_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorF2
        __init__(self, r) -> itkCovariantVectorF2

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkCovariantVectorF2

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorF2_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF2(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkCovariantVectorPython.itkCovariantVectorF2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF2___repr__(self)

# Register itkCovariantVectorF2 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorF2_swigregister(itkCovariantVectorF2)
class itkCovariantVectorF3(itk.itkFixedArrayPython.itkFixedArrayF3):
    r"""Proxy of C++ itkCovariantVectorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorF3

        Parameters
        ----------
        vec: itkCovariantVectorF3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorF3

        Parameters
        ----------
        vec: itkCovariantVectorF3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorF3"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorF3

        Parameters
        ----------
        vec: itkCovariantVectorF3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorF3

        Parameters
        ----------
        vec: itkCovariantVectorF3 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkCovariantVectorF3 const &

        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF3 const &

        __mul__(self, val) -> itkCovariantVectorF3

        Parameters
        ----------
        val: float const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF3_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorF3
        __init__(self, r) -> itkCovariantVectorF3

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkCovariantVectorF3

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorF3_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF3(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkCovariantVectorPython.itkCovariantVectorF3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF3___repr__(self)

# Register itkCovariantVectorF3 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorF3_swigregister(itkCovariantVectorF3)
class itkCovariantVectorF4(itk.itkFixedArrayPython.itkFixedArrayF4):
    r"""Proxy of C++ itkCovariantVectorF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorF4

        Parameters
        ----------
        vec: itkCovariantVectorF4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorF4

        Parameters
        ----------
        vec: itkCovariantVectorF4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorF4"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorF4

        Parameters
        ----------
        vec: itkCovariantVectorF4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorF4

        Parameters
        ----------
        vec: itkCovariantVectorF4 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkCovariantVectorF4 const &

        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF4 const &

        __mul__(self, val) -> itkCovariantVectorF4

        Parameters
        ----------
        val: float const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF4_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorF4
        __init__(self, r) -> itkCovariantVectorF4

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkCovariantVectorF4

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorF4_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF4(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkCovariantVectorPython.itkCovariantVectorF4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF4___repr__(self)

# Register itkCovariantVectorF4 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorF4_swigregister(itkCovariantVectorF4)
class itkCovariantVectorF5(itk.itkFixedArrayPython.itkFixedArrayF5):
    r"""Proxy of C++ itkCovariantVectorF5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetCovariantVectorDimension():
        r"""GetCovariantVectorDimension() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetCovariantVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkCovariantVectorF5

        Parameters
        ----------
        vec: itkCovariantVectorF5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkCovariantVectorF5

        Parameters
        ----------
        vec: itkCovariantVectorF5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkCovariantVectorF5"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkCovariantVectorF5

        Parameters
        ----------
        vec: itkCovariantVectorF5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkCovariantVectorF5

        Parameters
        ----------
        vec: itkCovariantVectorF5 const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkCovariantVectorF5 const &

        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF5 const &

        __mul__(self, val) -> itkCovariantVectorF5

        Parameters
        ----------
        val: float const &

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___mul__(self, *args)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_Normalize(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCovariantVectorPython.itkCovariantVectorF5_GetSquaredNorm(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCovariantVectorF5
        __init__(self, r) -> itkCovariantVectorF5

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkCovariantVectorF5

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkCovariantVectorF5

        Parameters
        ----------
        arg0: itkCovariantVectorF5 const &

        """
        _itkCovariantVectorPython.itkCovariantVectorF5_swiginit(self, _itkCovariantVectorPython.new_itkCovariantVectorF5(*args))
    __swig_destroy__ = _itkCovariantVectorPython.delete_itkCovariantVectorF5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkCovariantVectorPython.itkCovariantVectorF5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCovariantVectorPython.itkCovariantVectorF5___repr__(self)

# Register itkCovariantVectorF5 in _itkCovariantVectorPython:
_itkCovariantVectorPython.itkCovariantVectorF5_swigregister(itkCovariantVectorF5)

