# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFiniteDifferencePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFiniteDifferenceFunctionPython
else:
    import _itkFiniteDifferenceFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
class itkFiniteDifferenceFunctionICVF22(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkCovariantVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast(obj)

# Register itkFiniteDifferenceFunctionICVF22 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_swigregister(itkFiniteDifferenceFunctionICVF22)
class itkFiniteDifferenceFunctionICVF23(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkCovariantVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_cast(obj)

# Register itkFiniteDifferenceFunctionICVF23 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF23_swigregister(itkFiniteDifferenceFunctionICVF23)
class itkFiniteDifferenceFunctionICVF24(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkCovariantVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,2 >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_cast(obj)

# Register itkFiniteDifferenceFunctionICVF24 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF24_swigregister(itkFiniteDifferenceFunctionICVF24)
class itkFiniteDifferenceFunctionICVF32(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkCovariantVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_cast(obj)

# Register itkFiniteDifferenceFunctionICVF32 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF32_swigregister(itkFiniteDifferenceFunctionICVF32)
class itkFiniteDifferenceFunctionICVF33(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkCovariantVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast(obj)

# Register itkFiniteDifferenceFunctionICVF33 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_swigregister(itkFiniteDifferenceFunctionICVF33)
class itkFiniteDifferenceFunctionICVF34(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkCovariantVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_cast(obj)

# Register itkFiniteDifferenceFunctionICVF34 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF34_swigregister(itkFiniteDifferenceFunctionICVF34)
class itkFiniteDifferenceFunctionICVF42(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkCovariantVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_cast(obj)

# Register itkFiniteDifferenceFunctionICVF42 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF42_swigregister(itkFiniteDifferenceFunctionICVF42)
class itkFiniteDifferenceFunctionICVF43(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkCovariantVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_cast(obj)

# Register itkFiniteDifferenceFunctionICVF43 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF43_swigregister(itkFiniteDifferenceFunctionICVF43)
class itkFiniteDifferenceFunctionICVF44(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkCovariantVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::CovariantVector< float,4 >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_cast(obj)

# Register itkFiniteDifferenceFunctionICVF44 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF44_swigregister(itkFiniteDifferenceFunctionICVF44)
class itkFiniteDifferenceFunctionID2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> double

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_cast(obj)

# Register itkFiniteDifferenceFunctionID2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_swigregister(itkFiniteDifferenceFunctionID2)
class itkFiniteDifferenceFunctionID3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> double

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_cast(obj)

# Register itkFiniteDifferenceFunctionID3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_swigregister(itkFiniteDifferenceFunctionID3)
class itkFiniteDifferenceFunctionID4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> double

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_cast(obj)

# Register itkFiniteDifferenceFunctionID4 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4_swigregister(itkFiniteDifferenceFunctionID4)
class itkFiniteDifferenceFunctionIF2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> float

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast(obj)

# Register itkFiniteDifferenceFunctionIF2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_swigregister(itkFiniteDifferenceFunctionIF2)
class itkFiniteDifferenceFunctionIF3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> float

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast(obj)

# Register itkFiniteDifferenceFunctionIF3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_swigregister(itkFiniteDifferenceFunctionIF3)
class itkFiniteDifferenceFunctionIF4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> float

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_cast(obj)

# Register itkFiniteDifferenceFunctionIF4 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4_swigregister(itkFiniteDifferenceFunctionIF4)
class itkFiniteDifferenceFunctionISS2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< short > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_cast(obj)

# Register itkFiniteDifferenceFunctionISS2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS2_swigregister(itkFiniteDifferenceFunctionISS2)
class itkFiniteDifferenceFunctionISS3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< short,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_cast(obj)

# Register itkFiniteDifferenceFunctionISS3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS3_swigregister(itkFiniteDifferenceFunctionISS3)
class itkFiniteDifferenceFunctionISS4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< short,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_cast(obj)

# Register itkFiniteDifferenceFunctionISS4 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionISS4_swigregister(itkFiniteDifferenceFunctionISS4)
class itkFiniteDifferenceFunctionIUC2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> unsigned char

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned char > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast(obj)

# Register itkFiniteDifferenceFunctionIUC2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_swigregister(itkFiniteDifferenceFunctionIUC2)
class itkFiniteDifferenceFunctionIUC3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> unsigned char

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned char,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast(obj)

# Register itkFiniteDifferenceFunctionIUC3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_swigregister(itkFiniteDifferenceFunctionIUC3)
class itkFiniteDifferenceFunctionIUC4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> unsigned char

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned char,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_cast(obj)

# Register itkFiniteDifferenceFunctionIUC4 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC4_swigregister(itkFiniteDifferenceFunctionIUC4)
class itkFiniteDifferenceFunctionIUS2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> unsigned short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned short > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast(obj)

# Register itkFiniteDifferenceFunctionIUS2 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_swigregister(itkFiniteDifferenceFunctionIUS2)
class itkFiniteDifferenceFunctionIUS3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> unsigned short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned short,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast(obj)

# Register itkFiniteDifferenceFunctionIUS3 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_swigregister(itkFiniteDifferenceFunctionIUS3)
class itkFiniteDifferenceFunctionIUS4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> unsigned short

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< unsigned short,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_cast(obj)

# Register itkFiniteDifferenceFunctionIUS4 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS4_swigregister(itkFiniteDifferenceFunctionIUS4)
class itkFiniteDifferenceFunctionIVF22(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast(obj)

# Register itkFiniteDifferenceFunctionIVF22 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_swigregister(itkFiniteDifferenceFunctionIVF22)
class itkFiniteDifferenceFunctionIVF23(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_cast(obj)

# Register itkFiniteDifferenceFunctionIVF23 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF23_swigregister(itkFiniteDifferenceFunctionIVF23)
class itkFiniteDifferenceFunctionIVF24(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkVectorF2

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,2 >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_cast(obj)

# Register itkFiniteDifferenceFunctionIVF24 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF24_swigregister(itkFiniteDifferenceFunctionIVF24)
class itkFiniteDifferenceFunctionIVF32(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_cast(obj)

# Register itkFiniteDifferenceFunctionIVF32 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF32_swigregister(itkFiniteDifferenceFunctionIVF32)
class itkFiniteDifferenceFunctionIVF33(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast(obj)

# Register itkFiniteDifferenceFunctionIVF33 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_swigregister(itkFiniteDifferenceFunctionIVF33)
class itkFiniteDifferenceFunctionIVF34(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkVectorF3

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_cast(obj)

# Register itkFiniteDifferenceFunctionIVF34 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF34_swigregister(itkFiniteDifferenceFunctionIVF34)
class itkFiniteDifferenceFunctionIVF42(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,2 >( 0. )) -> itkVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 > > > const &
        globalData: void *
        offset: itkVectorF2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_cast(obj)

# Register itkFiniteDifferenceFunctionIVF42 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF42_swigregister(itkFiniteDifferenceFunctionIVF42)
class itkFiniteDifferenceFunctionIVF43(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float >( 0. )) -> itkVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,3 > > const &
        globalData: void *
        offset: itkVectorF3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_cast(obj)

# Register itkFiniteDifferenceFunctionIVF43 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF43_swigregister(itkFiniteDifferenceFunctionIVF43)
class itkFiniteDifferenceFunctionIVF44(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkFiniteDifferenceFunctionIVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InitializeIteration(self):
        r"""InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_InitializeIteration(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, neighborhood, globalData, offset=::itk::Vector< float,4 >( 0. )) -> itkVectorF4

        Parameters
        ----------
        neighborhood: itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float,4 >,4 > > const &
        globalData: void *
        offset: itkVectorF4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_ComputeUpdate(self, *args)

    def SetRadius(self, r):
        r"""
        SetRadius(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_SetRadius(self, r)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_GetRadius(self)

    def SetScaleCoefficients(self, vals):
        r"""
        SetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double const *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_SetScaleCoefficients(self, vals)

    def GetScaleCoefficients(self, vals):
        r"""
        GetScaleCoefficients(self, vals)

        Parameters
        ----------
        vals: double *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_GetScaleCoefficients(self, vals)

    def ComputeNeighborhoodScales(self):
        r"""ComputeNeighborhoodScales(self) -> itkVectorD4"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, GlobalData):
        r"""
        ComputeGlobalTimeStep(self, GlobalData) -> double

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_ComputeGlobalTimeStep(self, GlobalData)

    def GetGlobalDataPointer(self):
        r"""GetGlobalDataPointer(self) -> void *"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, GlobalData):
        r"""
        ReleaseGlobalDataPointer(self, GlobalData)

        Parameters
        ----------
        GlobalData: void *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_ReleaseGlobalDataPointer(self, GlobalData)
    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFiniteDifferenceFunctionIVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_cast(obj)

# Register itkFiniteDifferenceFunctionIVF44 in _itkFiniteDifferenceFunctionPython:
_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF44_swigregister(itkFiniteDifferenceFunctionIVF44)

