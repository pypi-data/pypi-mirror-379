# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSliceBySliceImageFilterPython
else:
    import _itkSliceBySliceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkSliceBySliceImageFilterICD3ICD3_New():
    return itkSliceBySliceImageFilterICD3ICD3.New()

class itkSliceBySliceImageFilterICD3ICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkSliceBySliceImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterICD3ICD3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterICD3ICD3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICD2ICD2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterICD2ICD2
        GetFilter(self) -> itkImageToImageFilterICD2ICD2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICD2ICD2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterICD2ICD2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterICD2ICD2
        GetInputFilter(self) -> itkImageToImageFilterICD2ICD2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceICD2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceICD2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceICD2
        GetOutputFilter(self) -> itkImageSourceICD2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterICD3ICD3

        Create a new object of the class itkSliceBySliceImageFilterICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterICD3ICD3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD3ICD3_swigregister(itkSliceBySliceImageFilterICD3ICD3)

def itkSliceBySliceImageFilterICD4ICD4_New():
    return itkSliceBySliceImageFilterICD4ICD4.New()

class itkSliceBySliceImageFilterICD4ICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkSliceBySliceImageFilterICD4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterICD4ICD4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterICD4ICD4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICD3ICD3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterICD3ICD3
        GetFilter(self) -> itkImageToImageFilterICD3ICD3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICD3ICD3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterICD3ICD3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterICD3ICD3
        GetInputFilter(self) -> itkImageToImageFilterICD3ICD3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceICD3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceICD3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceICD3
        GetOutputFilter(self) -> itkImageSourceICD3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterICD4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterICD4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterICD4ICD4

        Create a new object of the class itkSliceBySliceImageFilterICD4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterICD4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterICD4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterICD4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterICD4ICD4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICD4ICD4_swigregister(itkSliceBySliceImageFilterICD4ICD4)

def itkSliceBySliceImageFilterICF3ICF3_New():
    return itkSliceBySliceImageFilterICF3ICF3.New()

class itkSliceBySliceImageFilterICF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkSliceBySliceImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterICF3ICF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterICF3ICF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICF2ICF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterICF2ICF2
        GetFilter(self) -> itkImageToImageFilterICF2ICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICF2ICF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterICF2ICF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterICF2ICF2
        GetInputFilter(self) -> itkImageToImageFilterICF2ICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceICF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceICF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceICF2
        GetOutputFilter(self) -> itkImageSourceICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterICF3ICF3

        Create a new object of the class itkSliceBySliceImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterICF3ICF3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_swigregister(itkSliceBySliceImageFilterICF3ICF3)

def itkSliceBySliceImageFilterICF4ICF4_New():
    return itkSliceBySliceImageFilterICF4ICF4.New()

class itkSliceBySliceImageFilterICF4ICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkSliceBySliceImageFilterICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterICF4ICF4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterICF4ICF4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICF3ICF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterICF3ICF3
        GetFilter(self) -> itkImageToImageFilterICF3ICF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterICF3ICF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterICF3ICF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterICF3ICF3
        GetInputFilter(self) -> itkImageToImageFilterICF3ICF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceICF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceICF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceICF3
        GetOutputFilter(self) -> itkImageSourceICF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterICF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterICF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterICF4ICF4

        Create a new object of the class itkSliceBySliceImageFilterICF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterICF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterICF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterICF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterICF4ICF4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF4ICF4_swigregister(itkSliceBySliceImageFilterICF4ICF4)

def itkSliceBySliceImageFilterID3ID3_New():
    return itkSliceBySliceImageFilterID3ID3.New()

class itkSliceBySliceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkSliceBySliceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterID3ID3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterID3ID3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterID2ID2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterID2ID2
        GetFilter(self) -> itkImageToImageFilterID2ID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterID2ID2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterID2ID2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterID2ID2
        GetInputFilter(self) -> itkImageToImageFilterID2ID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceID2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceID2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceID2
        GetOutputFilter(self) -> itkImageSourceID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterID3ID3

        Create a new object of the class itkSliceBySliceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterID3ID3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_swigregister(itkSliceBySliceImageFilterID3ID3)

def itkSliceBySliceImageFilterID4ID4_New():
    return itkSliceBySliceImageFilterID4ID4.New()

class itkSliceBySliceImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkSliceBySliceImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterID4ID4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterID4ID4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterID3ID3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterID3ID3
        GetFilter(self) -> itkImageToImageFilterID3ID3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterID3ID3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterID3ID3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterID3ID3
        GetInputFilter(self) -> itkImageToImageFilterID3ID3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceID3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceID3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceID3
        GetOutputFilter(self) -> itkImageSourceID3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterID4ID4

        Create a new object of the class itkSliceBySliceImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterID4ID4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID4ID4_swigregister(itkSliceBySliceImageFilterID4ID4)

def itkSliceBySliceImageFilterIF3IF3_New():
    return itkSliceBySliceImageFilterIF3IF3.New()

class itkSliceBySliceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkSliceBySliceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIF3IF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIF3IF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIF2IF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIF2IF2
        GetFilter(self) -> itkImageToImageFilterIF2IF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIF2IF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIF2IF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIF2IF2
        GetInputFilter(self) -> itkImageToImageFilterIF2IF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIF2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIF2
        GetOutputFilter(self) -> itkImageSourceIF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIF3IF3

        Create a new object of the class itkSliceBySliceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIF3IF3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_swigregister(itkSliceBySliceImageFilterIF3IF3)

def itkSliceBySliceImageFilterIF4IF4_New():
    return itkSliceBySliceImageFilterIF4IF4.New()

class itkSliceBySliceImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkSliceBySliceImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIF4IF4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIF4IF4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIF3IF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIF3IF3
        GetFilter(self) -> itkImageToImageFilterIF3IF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIF3IF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIF3IF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIF3IF3
        GetInputFilter(self) -> itkImageToImageFilterIF3IF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIF3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIF3
        GetOutputFilter(self) -> itkImageSourceIF3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIF4IF4

        Create a new object of the class itkSliceBySliceImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIF4IF4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF4IF4_swigregister(itkSliceBySliceImageFilterIF4IF4)

def itkSliceBySliceImageFilterIRGBUC3IRGBUC3_New():
    return itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New()

class itkSliceBySliceImageFilterIRGBUC3IRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""Proxy of C++ itkSliceBySliceImageFilterIRGBUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIRGBUC2IRGBUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        GetFilter(self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIRGBUC2IRGBUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIRGBUC2IRGBUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        GetInputFilter(self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIRGBUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIRGBUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIRGBUC2
        GetOutputFilter(self) -> itkImageSourceIRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIRGBUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkSliceBySliceImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIRGBUC3IRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIRGBUC3IRGBUC3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_swigregister(itkSliceBySliceImageFilterIRGBUC3IRGBUC3)

def itkSliceBySliceImageFilterIRGBUC4IRGBUC4_New():
    return itkSliceBySliceImageFilterIRGBUC4IRGBUC4.New()

class itkSliceBySliceImageFilterIRGBUC4IRGBUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC4IRGBUC4):
    r"""Proxy of C++ itkSliceBySliceImageFilterIRGBUC4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIRGBUC4IRGBUC4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIRGBUC4IRGBUC4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIRGBUC3IRGBUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIRGBUC3IRGBUC3
        GetFilter(self) -> itkImageToImageFilterIRGBUC3IRGBUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIRGBUC3IRGBUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIRGBUC3IRGBUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIRGBUC3IRGBUC3
        GetInputFilter(self) -> itkImageToImageFilterIRGBUC3IRGBUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIRGBUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIRGBUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIRGBUC3
        GetOutputFilter(self) -> itkImageSourceIRGBUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIRGBUC4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIRGBUC4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIRGBUC4IRGBUC4

        Create a new object of the class itkSliceBySliceImageFilterIRGBUC4IRGBUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIRGBUC4IRGBUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIRGBUC4IRGBUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIRGBUC4IRGBUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIRGBUC4IRGBUC4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC4IRGBUC4_swigregister(itkSliceBySliceImageFilterIRGBUC4IRGBUC4)

def itkSliceBySliceImageFilterISS3ISS3_New():
    return itkSliceBySliceImageFilterISS3ISS3.New()

class itkSliceBySliceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkSliceBySliceImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterISS3ISS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterISS3ISS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterISS2ISS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterISS2ISS2
        GetFilter(self) -> itkImageToImageFilterISS2ISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterISS2ISS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterISS2ISS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterISS2ISS2
        GetInputFilter(self) -> itkImageToImageFilterISS2ISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceISS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceISS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceISS2
        GetOutputFilter(self) -> itkImageSourceISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterISS3ISS3

        Create a new object of the class itkSliceBySliceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterISS3ISS3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_swigregister(itkSliceBySliceImageFilterISS3ISS3)

def itkSliceBySliceImageFilterISS4ISS4_New():
    return itkSliceBySliceImageFilterISS4ISS4.New()

class itkSliceBySliceImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkSliceBySliceImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterISS4ISS4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterISS4ISS4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterISS3ISS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterISS3ISS3
        GetFilter(self) -> itkImageToImageFilterISS3ISS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterISS3ISS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterISS3ISS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterISS3ISS3
        GetInputFilter(self) -> itkImageToImageFilterISS3ISS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceISS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceISS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceISS3
        GetOutputFilter(self) -> itkImageSourceISS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterISS4ISS4

        Create a new object of the class itkSliceBySliceImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterISS4ISS4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS4ISS4_swigregister(itkSliceBySliceImageFilterISS4ISS4)

def itkSliceBySliceImageFilterIUC3IUC3_New():
    return itkSliceBySliceImageFilterIUC3IUC3.New()

class itkSliceBySliceImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSliceBySliceImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIUC3IUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIUC3IUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUC2IUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIUC2IUC2
        GetFilter(self) -> itkImageToImageFilterIUC2IUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUC2IUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIUC2IUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIUC2IUC2
        GetInputFilter(self) -> itkImageToImageFilterIUC2IUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIUC2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIUC2
        GetOutputFilter(self) -> itkImageSourceIUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUC3IUC3

        Create a new object of the class itkSliceBySliceImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIUC3IUC3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_swigregister(itkSliceBySliceImageFilterIUC3IUC3)

def itkSliceBySliceImageFilterIUC4IUC4_New():
    return itkSliceBySliceImageFilterIUC4IUC4.New()

class itkSliceBySliceImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSliceBySliceImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIUC4IUC4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIUC4IUC4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUC3IUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIUC3IUC3
        GetFilter(self) -> itkImageToImageFilterIUC3IUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUC3IUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIUC3IUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIUC3IUC3
        GetInputFilter(self) -> itkImageToImageFilterIUC3IUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIUC3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIUC3
        GetOutputFilter(self) -> itkImageSourceIUC3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUC4IUC4

        Create a new object of the class itkSliceBySliceImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIUC4IUC4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC4IUC4_swigregister(itkSliceBySliceImageFilterIUC4IUC4)

def itkSliceBySliceImageFilterIUS3IUS3_New():
    return itkSliceBySliceImageFilterIUS3IUS3.New()

class itkSliceBySliceImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSliceBySliceImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIUS3IUS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIUS3IUS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUS2IUS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIUS2IUS2
        GetFilter(self) -> itkImageToImageFilterIUS2IUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUS2IUS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIUS2IUS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIUS2IUS2
        GetInputFilter(self) -> itkImageToImageFilterIUS2IUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIUS2 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIUS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIUS2
        GetOutputFilter(self) -> itkImageSourceIUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUS3IUS3

        Create a new object of the class itkSliceBySliceImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIUS3IUS3 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_swigregister(itkSliceBySliceImageFilterIUS3IUS3)

def itkSliceBySliceImageFilterIUS4IUS4_New():
    return itkSliceBySliceImageFilterIUS4IUS4.New()

class itkSliceBySliceImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSliceBySliceImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSliceBySliceImageFilterIUS4IUS4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSliceBySliceImageFilterIUS4IUS4_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_Clone(self)

    def SetDimension(self, _arg):
        r"""
        SetDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_SetDimension(self, _arg)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetDimension(self)

    def SetFilter(self, filter):
        r"""
        SetFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUS3IUS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_SetFilter(self, filter)

    def GetFilter(self, *args):
        r"""
        GetFilter(self) -> itkImageToImageFilterIUS3IUS3
        GetFilter(self) -> itkImageToImageFilterIUS3IUS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetFilter(self, *args)

    def SetInputFilter(self, filter):
        r"""
        SetInputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageToImageFilterIUS3IUS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_SetInputFilter(self, filter)

    def GetModifiableInputFilter(self):
        r"""GetModifiableInputFilter(self) -> itkImageToImageFilterIUS3IUS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetModifiableInputFilter(self)

    def GetInputFilter(self, *args):
        r"""
        GetInputFilter(self) -> itkImageToImageFilterIUS3IUS3
        GetInputFilter(self) -> itkImageToImageFilterIUS3IUS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetInputFilter(self, *args)

    def SetOutputFilter(self, filter):
        r"""
        SetOutputFilter(self, filter)

        Parameters
        ----------
        filter: itkImageSourceIUS3 *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_SetOutputFilter(self, filter)

    def GetModifiableOutputFilter(self):
        r"""GetModifiableOutputFilter(self) -> itkImageSourceIUS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetModifiableOutputFilter(self)

    def GetOutputFilter(self, *args):
        r"""
        GetOutputFilter(self) -> itkImageSourceIUS3
        GetOutputFilter(self) -> itkImageSourceIUS3
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetOutputFilter(self, *args)

    def GetSliceIndex(self):
        r"""GetSliceIndex(self) -> long"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_GetSliceIndex(self)
    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSliceBySliceImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUS4IUS4

        Create a new object of the class itkSliceBySliceImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSliceBySliceImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSliceBySliceImageFilterIUS4IUS4 in _itkSliceBySliceImageFilterPython:
_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS4IUS4_swigregister(itkSliceBySliceImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def slice_by_slice_image_filter(*args: itkt.ImageLike,  dimension: int=..., filter=..., input_filter=..., output_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SliceBySliceImageFilter"""
    import itk

    kwarg_typehints = { 'dimension':dimension,'filter':filter,'input_filter':input_filter,'output_filter':output_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SliceBySliceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def slice_by_slice_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGrid.SliceBySliceImageFilter
    slice_by_slice_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    slice_by_slice_image_filter.__doc__ = filter_object.__doc__



