# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_matrix_fixed_refPython
else:
    import _vnl_matrix_fixed_refPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
class vnl_matrix_fixed_ref_constF_3_3(object):
    r"""Proxy of C++ vnl_matrix_fixed_ref_constF_3_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, rhs) -> vnl_matrix_fixed_ref_constF_3_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_3 const &

        __init__(self, dataptr) -> vnl_matrix_fixed_ref_constF_3_3

        Parameters
        ----------
        dataptr: float const *

        __init__(self, rhs) -> vnl_matrix_fixed_ref_constF_3_3

        Parameters
        ----------
        rhs: vnl_matrix_fixed_ref_constF_3_3 const &

        """
        _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_swiginit(self, _vnl_matrix_fixed_refPython.new_vnl_matrix_fixed_ref_constF_3_3(*args))

    def get_row(self, row_index):
        r"""
        get_row(self, row_index) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        row_index: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_get_row(self, row_index)

    def get_column(self, column_index):
        r"""
        get_column(self, column_index) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        column_index: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_get_column(self, column_index)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_get_diagonal(self)

    def data_block(self):
        r"""data_block(self) -> float const *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_data_block(self)

    def begin(self):
        r"""begin(self) -> float const *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_begin(self)

    def end(self):
        r"""end(self) -> float const *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_end(self)

    def __call__(self, r, c):
        r"""
        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3___call__(self, r, c)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_rows(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_columns(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_cols(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_size(self)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3__print(self, os)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_copy_out(self, arg0)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_conjugate_transpose(self)

    def extract(self, rowz, colz, top=0, left=0):
        r"""
        extract(self, rowz, colz, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        rowz: unsigned int
        colz: unsigned int
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_extract(self, rowz, colz, top, left)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_get_n_columns(self, colstart, n)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_is_zero(self, *args)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_has_nans(self)

    def assert_size(self, rowz, colz):
        r"""
        assert_size(self, rowz, colz)

        Parameters
        ----------
        rowz: unsigned int
        colz: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_assert_size(self, rowz, colz)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_assert_finite(self)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_equal(a, b)
    __swig_destroy__ = _vnl_matrix_fixed_refPython.delete_vnl_matrix_fixed_ref_constF_3_3

# Register vnl_matrix_fixed_ref_constF_3_3 in _vnl_matrix_fixed_refPython:
_vnl_matrix_fixed_refPython.vnl_matrix_fixed_ref_constF_3_3_swigregister(vnl_matrix_fixed_ref_constF_3_3)
class vnl_matrix_fixed_refF_3_3(vnl_matrix_fixed_ref_constF_3_3):
    r"""Proxy of C++ vnl_matrix_fixed_refF_3_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def data_block(self):
        r"""data_block(self) -> float *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_data_block(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_get(self, r, c)

    def __call__(self, r, c):
        r"""
        __call__(self, r, c) -> float &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___call__(self, r, c)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_copy_in(self, arg0)

    def set(self, d):
        r"""
        set(self, d) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set(self, d)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        m: vnl_matrix_fixed_ref_constF_3_3 const &

        __iadd__(self, m) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        m: vnl_matrix_fixed_ref_constF_3_3 const &

        __isub__(self, m) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        s: vnl_matrix_fixed_ref_constF_3_3 const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___imul__(self, *args)

    def update(self, arg0, top=0, left=0):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_update(self, arg0, top, left)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        v: vnl_vectorF const &

        set_row(self, i, v) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        i: unsigned int
        v: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set_row(self, *args)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixed_refF_3_3"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_scale_column(self, col, value)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_read_ascii(self, s)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_as_matrix(self)

    def begin(self):
        r"""begin(self) -> float *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_begin(self)

    def end(self):
        r"""end(self) -> float *"""
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_end(self)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixed_ref_constF_3_3 const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixed_ref_constF_3_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_3 const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___eq__(self, *args)

    def __ne__(self, that):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixed_ref_constF_3_3 const &

        """
        return _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3___ne__(self, that)

    def __init__(self, *args):
        r"""
        __init__(self, rhs) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_3 &

        __init__(self, dataptr) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        dataptr: float *

        __init__(self, arg0) -> vnl_matrix_fixed_refF_3_3

        Parameters
        ----------
        arg0: vnl_matrix_fixed_refF_3_3 const &

        """
        _vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_swiginit(self, _vnl_matrix_fixed_refPython.new_vnl_matrix_fixed_refF_3_3(*args))
    __swig_destroy__ = _vnl_matrix_fixed_refPython.delete_vnl_matrix_fixed_refF_3_3

# Register vnl_matrix_fixed_refF_3_3 in _vnl_matrix_fixed_refPython:
_vnl_matrix_fixed_refPython.vnl_matrix_fixed_refF_3_3_swigregister(vnl_matrix_fixed_refF_3_3)

