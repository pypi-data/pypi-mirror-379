# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRealToHalfHermitianForwardFFTImageFilterPython
else:
    import _itkRealToHalfHermitianForwardFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSimpleDataObjectDecoratorPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkArrayPython
import itk.itkRGBAPixelPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_New():
    return itkRealToHalfHermitianForwardFFTImageFilterID2ICD2.New()

class itkRealToHalfHermitianForwardFFTImageFilterID2ICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterID2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterID2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterID2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterID2ICD2

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterID2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterID2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterID2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterID2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterID2ICD2 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID2ICD2_swigregister(itkRealToHalfHermitianForwardFFTImageFilterID2ICD2)

def itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_New():
    return itkRealToHalfHermitianForwardFFTImageFilterID3ICD3.New()

class itkRealToHalfHermitianForwardFFTImageFilterID3ICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterID3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterID3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterID3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterID3ICD3

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterID3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterID3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterID3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterID3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterID3ICD3 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID3ICD3_swigregister(itkRealToHalfHermitianForwardFFTImageFilterID3ICD3)

def itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_New():
    return itkRealToHalfHermitianForwardFFTImageFilterID4ICD4.New()

class itkRealToHalfHermitianForwardFFTImageFilterID4ICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterID4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterID4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterID4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterID4ICD4

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterID4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterID4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterID4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterID4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterID4ICD4 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterID4ICD4_swigregister(itkRealToHalfHermitianForwardFFTImageFilterID4ICD4)

def itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_New():
    return itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)

def itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_New():
    return itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)

def itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_New():
    return itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4):
    r"""Proxy of C++ itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_Clone(self)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_GetSizeGreatestPrimeFactor(self)

    def GetActualXDimensionIsOddOutput(self):
        r"""GetActualXDimensionIsOddOutput(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_GetActualXDimensionIsOddOutput(self)

    def GetActualXDimensionIsOdd(self):
        r"""GetActualXDimensionIsOdd(self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_GetActualXDimensionIsOdd(self)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF4ICF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def real_to_half_hermitian_forward_fft_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RealToHalfHermitianForwardFFTImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RealToHalfHermitianForwardFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def real_to_half_hermitian_forward_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.RealToHalfHermitianForwardFFTImageFilter
    real_to_half_hermitian_forward_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    real_to_half_hermitian_forward_fft_image_filter.__doc__ = filter_object.__doc__



