# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineTransformPython
else:
    import _itkBSplineTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkBSplineBaseTransformPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkBSplineInterpolationWeightFunctionPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkFunctionBasePython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython

def itkBSplineTransformD23_New():
    return itkBSplineTransformD23.New()

class itkBSplineTransformD23(itk.itkBSplineBaseTransformPython.itkBSplineBaseTransformD23):
    r"""Proxy of C++ itkBSplineTransformD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformD23_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformD23_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD23_Clone(self)

    def SetTransformDomainOrigin(self, arg0):
        r"""
        SetTransformDomainOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD23_SetTransformDomainOrigin(self, arg0)

    def GetTransformDomainOrigin(self):
        r"""GetTransformDomainOrigin(self) -> itkPointD2"""
        return _itkBSplineTransformPython.itkBSplineTransformD23_GetTransformDomainOrigin(self)

    def SetTransformDomainPhysicalDimensions(self, arg0):
        r"""
        SetTransformDomainPhysicalDimensions(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD2 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD23_SetTransformDomainPhysicalDimensions(self, arg0)

    def GetTransformDomainPhysicalDimensions(self):
        r"""GetTransformDomainPhysicalDimensions(self) -> itkVectorD2"""
        return _itkBSplineTransformPython.itkBSplineTransformD23_GetTransformDomainPhysicalDimensions(self)

    def SetTransformDomainDirection(self, arg0):
        r"""
        SetTransformDomainDirection(self, arg0)

        Parameters
        ----------
        arg0: itkMatrixD22 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD23_SetTransformDomainDirection(self, arg0)

    def GetTransformDomainDirection(self):
        r"""GetTransformDomainDirection(self) -> itkMatrixD22"""
        return _itkBSplineTransformPython.itkBSplineTransformD23_GetTransformDomainDirection(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize2 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD23_SetTransformDomainMeshSize(self, arg0)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize2"""
        return _itkBSplineTransformPython.itkBSplineTransformD23_GetTransformDomainMeshSize(self)
    __swig_destroy__ = _itkBSplineTransformPython.delete_itkBSplineTransformD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformPython.itkBSplineTransformD23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformD23

        Create a new object of the class itkBSplineTransformD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformD23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformD23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformD23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformD23 in _itkBSplineTransformPython:
_itkBSplineTransformPython.itkBSplineTransformD23_swigregister(itkBSplineTransformD23)

def itkBSplineTransformD33_New():
    return itkBSplineTransformD33.New()

class itkBSplineTransformD33(itk.itkBSplineBaseTransformPython.itkBSplineBaseTransformD33):
    r"""Proxy of C++ itkBSplineTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformD33_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformD33_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD33_Clone(self)

    def SetTransformDomainOrigin(self, arg0):
        r"""
        SetTransformDomainOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD33_SetTransformDomainOrigin(self, arg0)

    def GetTransformDomainOrigin(self):
        r"""GetTransformDomainOrigin(self) -> itkPointD3"""
        return _itkBSplineTransformPython.itkBSplineTransformD33_GetTransformDomainOrigin(self)

    def SetTransformDomainPhysicalDimensions(self, arg0):
        r"""
        SetTransformDomainPhysicalDimensions(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD3 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD33_SetTransformDomainPhysicalDimensions(self, arg0)

    def GetTransformDomainPhysicalDimensions(self):
        r"""GetTransformDomainPhysicalDimensions(self) -> itkVectorD3"""
        return _itkBSplineTransformPython.itkBSplineTransformD33_GetTransformDomainPhysicalDimensions(self)

    def SetTransformDomainDirection(self, arg0):
        r"""
        SetTransformDomainDirection(self, arg0)

        Parameters
        ----------
        arg0: itkMatrixD33 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD33_SetTransformDomainDirection(self, arg0)

    def GetTransformDomainDirection(self):
        r"""GetTransformDomainDirection(self) -> itkMatrixD33"""
        return _itkBSplineTransformPython.itkBSplineTransformD33_GetTransformDomainDirection(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize3 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD33_SetTransformDomainMeshSize(self, arg0)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize3"""
        return _itkBSplineTransformPython.itkBSplineTransformD33_GetTransformDomainMeshSize(self)
    __swig_destroy__ = _itkBSplineTransformPython.delete_itkBSplineTransformD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformPython.itkBSplineTransformD33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformD33

        Create a new object of the class itkBSplineTransformD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformD33 in _itkBSplineTransformPython:
_itkBSplineTransformPython.itkBSplineTransformD33_swigregister(itkBSplineTransformD33)

def itkBSplineTransformD43_New():
    return itkBSplineTransformD43.New()

class itkBSplineTransformD43(itk.itkBSplineBaseTransformPython.itkBSplineBaseTransformD43):
    r"""Proxy of C++ itkBSplineTransformD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineTransformD43_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineTransformD43_Pointer"""
        return _itkBSplineTransformPython.itkBSplineTransformD43_Clone(self)

    def SetTransformDomainOrigin(self, arg0):
        r"""
        SetTransformDomainOrigin(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD43_SetTransformDomainOrigin(self, arg0)

    def GetTransformDomainOrigin(self):
        r"""GetTransformDomainOrigin(self) -> itkPointD4"""
        return _itkBSplineTransformPython.itkBSplineTransformD43_GetTransformDomainOrigin(self)

    def SetTransformDomainPhysicalDimensions(self, arg0):
        r"""
        SetTransformDomainPhysicalDimensions(self, arg0)

        Parameters
        ----------
        arg0: itkVectorD4 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD43_SetTransformDomainPhysicalDimensions(self, arg0)

    def GetTransformDomainPhysicalDimensions(self):
        r"""GetTransformDomainPhysicalDimensions(self) -> itkVectorD4"""
        return _itkBSplineTransformPython.itkBSplineTransformD43_GetTransformDomainPhysicalDimensions(self)

    def SetTransformDomainDirection(self, arg0):
        r"""
        SetTransformDomainDirection(self, arg0)

        Parameters
        ----------
        arg0: itkMatrixD44 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD43_SetTransformDomainDirection(self, arg0)

    def GetTransformDomainDirection(self):
        r"""GetTransformDomainDirection(self) -> itkMatrixD44"""
        return _itkBSplineTransformPython.itkBSplineTransformD43_GetTransformDomainDirection(self)

    def SetTransformDomainMeshSize(self, arg0):
        r"""
        SetTransformDomainMeshSize(self, arg0)

        Parameters
        ----------
        arg0: itkSize4 const &

        """
        return _itkBSplineTransformPython.itkBSplineTransformD43_SetTransformDomainMeshSize(self, arg0)

    def GetTransformDomainMeshSize(self):
        r"""GetTransformDomainMeshSize(self) -> itkSize4"""
        return _itkBSplineTransformPython.itkBSplineTransformD43_GetTransformDomainMeshSize(self)
    __swig_destroy__ = _itkBSplineTransformPython.delete_itkBSplineTransformD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineTransformD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineTransformPython.itkBSplineTransformD43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineTransformD43

        Create a new object of the class itkBSplineTransformD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineTransformD43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineTransformD43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineTransformD43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineTransformD43 in _itkBSplineTransformPython:
_itkBSplineTransformPython.itkBSplineTransformD43_swigregister(itkBSplineTransformD43)

