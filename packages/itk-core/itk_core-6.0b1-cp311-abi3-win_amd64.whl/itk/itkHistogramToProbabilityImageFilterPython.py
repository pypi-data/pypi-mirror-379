# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToProbabilityImageFilterPython
else:
    import _itkHistogramToProbabilityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkHistogramToProbabilityImageFilterHDID2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDID2_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID2_Superclass)

def itkHistogramToProbabilityImageFilterHDID3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDID3_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID3_Superclass)

def itkHistogramToProbabilityImageFilterHDID4_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDID4_Superclass.New()

class itkHistogramToProbabilityImageFilterHDID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID4_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID4_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDID4_Superclass)

def itkHistogramToProbabilityImageFilterHDIF2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()

class itkHistogramToProbabilityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF2_Superclass)

def itkHistogramToProbabilityImageFilterHDIF3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()

class itkHistogramToProbabilityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF3_Superclass)

def itkHistogramToProbabilityImageFilterHDIF4_Superclass_New():
    return itkHistogramToProbabilityImageFilterHDIF4_Superclass.New()

class itkHistogramToProbabilityImageFilterHDIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF4_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF4_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Superclass_swigregister(itkHistogramToProbabilityImageFilterHDIF4_Superclass)

def itkHistogramToProbabilityImageFilterHFID2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFID2_Superclass.New()

class itkHistogramToProbabilityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID2_Superclass)

def itkHistogramToProbabilityImageFilterHFID3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFID3_Superclass.New()

class itkHistogramToProbabilityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID3_Superclass)

def itkHistogramToProbabilityImageFilterHFID4_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFID4_Superclass.New()

class itkHistogramToProbabilityImageFilterHFID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long,double > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID4_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID4_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFID4_Superclass)

def itkHistogramToProbabilityImageFilterHFIF2_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToProbabilityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF2_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF2_Superclass)

def itkHistogramToProbabilityImageFilterHFIF3_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()

class itkHistogramToProbabilityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF3_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF3_Superclass)

def itkHistogramToProbabilityImageFilterHFIF4_Superclass_New():
    return itkHistogramToProbabilityImageFilterHFIF4_Superclass.New()

class itkHistogramToProbabilityImageFilterHFIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramProbabilityFunction< unsigned long long > const &

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long >
        GetFunctor(self) -> itk::Function::HistogramProbabilityFunction< unsigned long long > const &
        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long long

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF4_Superclass

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF4_Superclass in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Superclass_swigregister(itkHistogramToProbabilityImageFilterHFIF4_Superclass)

def itkHistogramToProbabilityImageFilterHDID2_New():
    return itkHistogramToProbabilityImageFilterHDID2.New()

class itkHistogramToProbabilityImageFilterHDID2(itkHistogramToProbabilityImageFilterHDID2_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID2_swigregister(itkHistogramToProbabilityImageFilterHDID2)

def itkHistogramToProbabilityImageFilterHDID3_New():
    return itkHistogramToProbabilityImageFilterHDID3.New()

class itkHistogramToProbabilityImageFilterHDID3(itkHistogramToProbabilityImageFilterHDID3_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID3_swigregister(itkHistogramToProbabilityImageFilterHDID3)

def itkHistogramToProbabilityImageFilterHDID4_New():
    return itkHistogramToProbabilityImageFilterHDID4.New()

class itkHistogramToProbabilityImageFilterHDID4(itkHistogramToProbabilityImageFilterHDID4_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDID4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDID4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDID4

        Create a new object of the class itkHistogramToProbabilityImageFilterHDID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDID4 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDID4_swigregister(itkHistogramToProbabilityImageFilterHDID4)

def itkHistogramToProbabilityImageFilterHDIF2_New():
    return itkHistogramToProbabilityImageFilterHDIF2.New()

class itkHistogramToProbabilityImageFilterHDIF2(itkHistogramToProbabilityImageFilterHDIF2_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF2_swigregister(itkHistogramToProbabilityImageFilterHDIF2)

def itkHistogramToProbabilityImageFilterHDIF3_New():
    return itkHistogramToProbabilityImageFilterHDIF3.New()

class itkHistogramToProbabilityImageFilterHDIF3(itkHistogramToProbabilityImageFilterHDIF3_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF3_swigregister(itkHistogramToProbabilityImageFilterHDIF3)

def itkHistogramToProbabilityImageFilterHDIF4_New():
    return itkHistogramToProbabilityImageFilterHDIF4.New()

class itkHistogramToProbabilityImageFilterHDIF4(itkHistogramToProbabilityImageFilterHDIF4_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHDIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHDIF4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHDIF4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHDIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHDIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHDIF4

        Create a new object of the class itkHistogramToProbabilityImageFilterHDIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHDIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHDIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHDIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHDIF4 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHDIF4_swigregister(itkHistogramToProbabilityImageFilterHDIF4)

def itkHistogramToProbabilityImageFilterHFID2_New():
    return itkHistogramToProbabilityImageFilterHFID2.New()

class itkHistogramToProbabilityImageFilterHFID2(itkHistogramToProbabilityImageFilterHFID2_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID2_swigregister(itkHistogramToProbabilityImageFilterHFID2)

def itkHistogramToProbabilityImageFilterHFID3_New():
    return itkHistogramToProbabilityImageFilterHFID3.New()

class itkHistogramToProbabilityImageFilterHFID3(itkHistogramToProbabilityImageFilterHFID3_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID3_swigregister(itkHistogramToProbabilityImageFilterHFID3)

def itkHistogramToProbabilityImageFilterHFID4_New():
    return itkHistogramToProbabilityImageFilterHFID4.New()

class itkHistogramToProbabilityImageFilterHFID4(itkHistogramToProbabilityImageFilterHFID4_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFID4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFID4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFID4

        Create a new object of the class itkHistogramToProbabilityImageFilterHFID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFID4 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFID4_swigregister(itkHistogramToProbabilityImageFilterHFID4)

def itkHistogramToProbabilityImageFilterHFIF2_New():
    return itkHistogramToProbabilityImageFilterHFIF2.New()

class itkHistogramToProbabilityImageFilterHFIF2(itkHistogramToProbabilityImageFilterHFIF2_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF2 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF2_swigregister(itkHistogramToProbabilityImageFilterHFIF2)

def itkHistogramToProbabilityImageFilterHFIF3_New():
    return itkHistogramToProbabilityImageFilterHFIF3.New()

class itkHistogramToProbabilityImageFilterHFIF3(itkHistogramToProbabilityImageFilterHFIF3_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF3 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF3_swigregister(itkHistogramToProbabilityImageFilterHFIF3)

def itkHistogramToProbabilityImageFilterHFIF4_New():
    return itkHistogramToProbabilityImageFilterHFIF4.New()

class itkHistogramToProbabilityImageFilterHFIF4(itkHistogramToProbabilityImageFilterHFIF4_Superclass):
    r"""Proxy of C++ itkHistogramToProbabilityImageFilterHFIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToProbabilityImageFilterHFIF4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToProbabilityImageFilterHFIF4_Pointer"""
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToProbabilityImageFilterPython.delete_itkHistogramToProbabilityImageFilterHFIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToProbabilityImageFilterHFIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToProbabilityImageFilterHFIF4

        Create a new object of the class itkHistogramToProbabilityImageFilterHFIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToProbabilityImageFilterHFIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToProbabilityImageFilterHFIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToProbabilityImageFilterHFIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToProbabilityImageFilterHFIF4 in _itkHistogramToProbabilityImageFilterPython:
_itkHistogramToProbabilityImageFilterPython.itkHistogramToProbabilityImageFilterHFIF4_swigregister(itkHistogramToProbabilityImageFilterHFIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_probability_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToProbabilityImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToProbabilityImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_probability_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToProbabilityImageFilter
    histogram_to_probability_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_probability_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToImageFilter
    histogram_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_image_filter.__doc__ = filter_object.__doc__



