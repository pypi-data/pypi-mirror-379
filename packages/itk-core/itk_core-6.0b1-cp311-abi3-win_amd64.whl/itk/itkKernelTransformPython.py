# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkKernelTransformPython
else:
    import _itkKernelTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython

def itkKernelTransformD2_New():
    return itkKernelTransformD2.New()

class itkKernelTransformD2(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkKernelTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKernelTransformD2_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKernelTransformD2_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD2_Clone(self)

    def GetModifiableSourceLandmarks(self):
        r"""GetModifiableSourceLandmarks(self) -> itkPointSetPD22STD22DD"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetModifiableSourceLandmarks(self)

    def GetSourceLandmarks(self, *args):
        r"""
        GetSourceLandmarks(self) -> itkPointSetPD22STD22DD
        GetSourceLandmarks(self) -> itkPointSetPD22STD22DD
        """
        return _itkKernelTransformPython.itkKernelTransformD2_GetSourceLandmarks(self, *args)

    def SetSourceLandmarks(self, arg0):
        r"""
        SetSourceLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD22STD22DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD2_SetSourceLandmarks(self, arg0)

    def GetModifiableTargetLandmarks(self):
        r"""GetModifiableTargetLandmarks(self) -> itkPointSetPD22STD22DD"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetModifiableTargetLandmarks(self)

    def GetTargetLandmarks(self, *args):
        r"""
        GetTargetLandmarks(self) -> itkPointSetPD22STD22DD
        GetTargetLandmarks(self) -> itkPointSetPD22STD22DD
        """
        return _itkKernelTransformPython.itkKernelTransformD2_GetTargetLandmarks(self, *args)

    def SetTargetLandmarks(self, arg0):
        r"""
        SetTargetLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD22STD22DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD2_SetTargetLandmarks(self, arg0)

    def GetModifiableDisplacements(self):
        r"""GetModifiableDisplacements(self) -> itkVectorContainerULLVD2"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetModifiableDisplacements(self)

    def GetDisplacements(self, *args):
        r"""
        GetDisplacements(self) -> itkVectorContainerULLVD2
        GetDisplacements(self) -> itkVectorContainerULLVD2
        """
        return _itkKernelTransformPython.itkKernelTransformD2_GetDisplacements(self, *args)

    def ComputeWMatrix(self):
        r"""ComputeWMatrix(self)"""
        return _itkKernelTransformPython.itkKernelTransformD2_ComputeWMatrix(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        """
        return _itkKernelTransformPython.itkKernelTransformD2_TransformVector(self, *args)

    def UpdateParameters(self):
        r"""UpdateParameters(self)"""
        return _itkKernelTransformPython.itkKernelTransformD2_UpdateParameters(self)

    def SetStiffness(self, _arg):
        r"""
        SetStiffness(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKernelTransformPython.itkKernelTransformD2_SetStiffness(self, _arg)

    def GetStiffness(self):
        r"""GetStiffness(self) -> double"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetStiffness(self)
    __swig_destroy__ = _itkKernelTransformPython.delete_itkKernelTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKernelTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKernelTransformPython.itkKernelTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKernelTransformD2

        Create a new object of the class itkKernelTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelTransformD2 in _itkKernelTransformPython:
_itkKernelTransformPython.itkKernelTransformD2_swigregister(itkKernelTransformD2)

def itkKernelTransformD3_New():
    return itkKernelTransformD3.New()

class itkKernelTransformD3(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkKernelTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKernelTransformD3_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKernelTransformD3_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD3_Clone(self)

    def GetModifiableSourceLandmarks(self):
        r"""GetModifiableSourceLandmarks(self) -> itkPointSetPD33STD33DD"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetModifiableSourceLandmarks(self)

    def GetSourceLandmarks(self, *args):
        r"""
        GetSourceLandmarks(self) -> itkPointSetPD33STD33DD
        GetSourceLandmarks(self) -> itkPointSetPD33STD33DD
        """
        return _itkKernelTransformPython.itkKernelTransformD3_GetSourceLandmarks(self, *args)

    def SetSourceLandmarks(self, arg0):
        r"""
        SetSourceLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD33STD33DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD3_SetSourceLandmarks(self, arg0)

    def GetModifiableTargetLandmarks(self):
        r"""GetModifiableTargetLandmarks(self) -> itkPointSetPD33STD33DD"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetModifiableTargetLandmarks(self)

    def GetTargetLandmarks(self, *args):
        r"""
        GetTargetLandmarks(self) -> itkPointSetPD33STD33DD
        GetTargetLandmarks(self) -> itkPointSetPD33STD33DD
        """
        return _itkKernelTransformPython.itkKernelTransformD3_GetTargetLandmarks(self, *args)

    def SetTargetLandmarks(self, arg0):
        r"""
        SetTargetLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD33STD33DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD3_SetTargetLandmarks(self, arg0)

    def GetModifiableDisplacements(self):
        r"""GetModifiableDisplacements(self) -> itkVectorContainerULLVD3"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetModifiableDisplacements(self)

    def GetDisplacements(self, *args):
        r"""
        GetDisplacements(self) -> itkVectorContainerULLVD3
        GetDisplacements(self) -> itkVectorContainerULLVD3
        """
        return _itkKernelTransformPython.itkKernelTransformD3_GetDisplacements(self, *args)

    def ComputeWMatrix(self):
        r"""ComputeWMatrix(self)"""
        return _itkKernelTransformPython.itkKernelTransformD3_ComputeWMatrix(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        """
        return _itkKernelTransformPython.itkKernelTransformD3_TransformVector(self, *args)

    def UpdateParameters(self):
        r"""UpdateParameters(self)"""
        return _itkKernelTransformPython.itkKernelTransformD3_UpdateParameters(self)

    def SetStiffness(self, _arg):
        r"""
        SetStiffness(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKernelTransformPython.itkKernelTransformD3_SetStiffness(self, _arg)

    def GetStiffness(self):
        r"""GetStiffness(self) -> double"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetStiffness(self)
    __swig_destroy__ = _itkKernelTransformPython.delete_itkKernelTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKernelTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKernelTransformPython.itkKernelTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKernelTransformD3

        Create a new object of the class itkKernelTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelTransformD3 in _itkKernelTransformPython:
_itkKernelTransformPython.itkKernelTransformD3_swigregister(itkKernelTransformD3)

def itkKernelTransformD4_New():
    return itkKernelTransformD4.New()

class itkKernelTransformD4(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkKernelTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKernelTransformD4_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKernelTransformD4_Pointer"""
        return _itkKernelTransformPython.itkKernelTransformD4_Clone(self)

    def GetModifiableSourceLandmarks(self):
        r"""GetModifiableSourceLandmarks(self) -> itkPointSetPD44STD44DD"""
        return _itkKernelTransformPython.itkKernelTransformD4_GetModifiableSourceLandmarks(self)

    def GetSourceLandmarks(self, *args):
        r"""
        GetSourceLandmarks(self) -> itkPointSetPD44STD44DD
        GetSourceLandmarks(self) -> itkPointSetPD44STD44DD
        """
        return _itkKernelTransformPython.itkKernelTransformD4_GetSourceLandmarks(self, *args)

    def SetSourceLandmarks(self, arg0):
        r"""
        SetSourceLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD44STD44DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD4_SetSourceLandmarks(self, arg0)

    def GetModifiableTargetLandmarks(self):
        r"""GetModifiableTargetLandmarks(self) -> itkPointSetPD44STD44DD"""
        return _itkKernelTransformPython.itkKernelTransformD4_GetModifiableTargetLandmarks(self)

    def GetTargetLandmarks(self, *args):
        r"""
        GetTargetLandmarks(self) -> itkPointSetPD44STD44DD
        GetTargetLandmarks(self) -> itkPointSetPD44STD44DD
        """
        return _itkKernelTransformPython.itkKernelTransformD4_GetTargetLandmarks(self, *args)

    def SetTargetLandmarks(self, arg0):
        r"""
        SetTargetLandmarks(self, arg0)

        Parameters
        ----------
        arg0: itkPointSetPD44STD44DD *

        """
        return _itkKernelTransformPython.itkKernelTransformD4_SetTargetLandmarks(self, arg0)

    def GetModifiableDisplacements(self):
        r"""GetModifiableDisplacements(self) -> itkVectorContainerULLVD4"""
        return _itkKernelTransformPython.itkKernelTransformD4_GetModifiableDisplacements(self)

    def GetDisplacements(self, *args):
        r"""
        GetDisplacements(self) -> itkVectorContainerULLVD4
        GetDisplacements(self) -> itkVectorContainerULLVD4
        """
        return _itkKernelTransformPython.itkKernelTransformD4_GetDisplacements(self, *args)

    def ComputeWMatrix(self):
        r"""ComputeWMatrix(self)"""
        return _itkKernelTransformPython.itkKernelTransformD4_ComputeWMatrix(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        """
        return _itkKernelTransformPython.itkKernelTransformD4_TransformVector(self, *args)

    def UpdateParameters(self):
        r"""UpdateParameters(self)"""
        return _itkKernelTransformPython.itkKernelTransformD4_UpdateParameters(self)

    def SetStiffness(self, _arg):
        r"""
        SetStiffness(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkKernelTransformPython.itkKernelTransformD4_SetStiffness(self, _arg)

    def GetStiffness(self):
        r"""GetStiffness(self) -> double"""
        return _itkKernelTransformPython.itkKernelTransformD4_GetStiffness(self)
    __swig_destroy__ = _itkKernelTransformPython.delete_itkKernelTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKernelTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKernelTransformPython.itkKernelTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKernelTransformD4

        Create a new object of the class itkKernelTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKernelTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKernelTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelTransformD4 in _itkKernelTransformPython:
_itkKernelTransformPython.itkKernelTransformD4_swigregister(itkKernelTransformD4)

