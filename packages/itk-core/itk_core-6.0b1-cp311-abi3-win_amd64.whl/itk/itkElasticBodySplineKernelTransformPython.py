# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkElasticBodySplineKernelTransformPython
else:
    import _itkElasticBodySplineKernelTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkKernelTransformPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython

def itkElasticBodySplineKernelTransformD2_New():
    return itkElasticBodySplineKernelTransformD2.New()

class itkElasticBodySplineKernelTransformD2(itk.itkKernelTransformPython.itkKernelTransformD2):
    r"""Proxy of C++ itkElasticBodySplineKernelTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkElasticBodySplineKernelTransformD2_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkElasticBodySplineKernelTransformD2_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2_GetAlpha(self)
    __swig_destroy__ = _itkElasticBodySplineKernelTransformPython.delete_itkElasticBodySplineKernelTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkElasticBodySplineKernelTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkElasticBodySplineKernelTransformD2

        Create a new object of the class itkElasticBodySplineKernelTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkElasticBodySplineKernelTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkElasticBodySplineKernelTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkElasticBodySplineKernelTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkElasticBodySplineKernelTransformD2 in _itkElasticBodySplineKernelTransformPython:
_itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD2_swigregister(itkElasticBodySplineKernelTransformD2)

def itkElasticBodySplineKernelTransformD3_New():
    return itkElasticBodySplineKernelTransformD3.New()

class itkElasticBodySplineKernelTransformD3(itk.itkKernelTransformPython.itkKernelTransformD3):
    r"""Proxy of C++ itkElasticBodySplineKernelTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkElasticBodySplineKernelTransformD3_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkElasticBodySplineKernelTransformD3_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3_GetAlpha(self)
    __swig_destroy__ = _itkElasticBodySplineKernelTransformPython.delete_itkElasticBodySplineKernelTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkElasticBodySplineKernelTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkElasticBodySplineKernelTransformD3

        Create a new object of the class itkElasticBodySplineKernelTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkElasticBodySplineKernelTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkElasticBodySplineKernelTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkElasticBodySplineKernelTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkElasticBodySplineKernelTransformD3 in _itkElasticBodySplineKernelTransformPython:
_itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD3_swigregister(itkElasticBodySplineKernelTransformD3)

def itkElasticBodySplineKernelTransformD4_New():
    return itkElasticBodySplineKernelTransformD4.New()

class itkElasticBodySplineKernelTransformD4(itk.itkKernelTransformPython.itkKernelTransformD4):
    r"""Proxy of C++ itkElasticBodySplineKernelTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkElasticBodySplineKernelTransformD4_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkElasticBodySplineKernelTransformD4_Pointer"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4_GetAlpha(self)
    __swig_destroy__ = _itkElasticBodySplineKernelTransformPython.delete_itkElasticBodySplineKernelTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkElasticBodySplineKernelTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkElasticBodySplineKernelTransformD4

        Create a new object of the class itkElasticBodySplineKernelTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkElasticBodySplineKernelTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkElasticBodySplineKernelTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkElasticBodySplineKernelTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkElasticBodySplineKernelTransformD4 in _itkElasticBodySplineKernelTransformPython:
_itkElasticBodySplineKernelTransformPython.itkElasticBodySplineKernelTransformD4_swigregister(itkElasticBodySplineKernelTransformD4)

