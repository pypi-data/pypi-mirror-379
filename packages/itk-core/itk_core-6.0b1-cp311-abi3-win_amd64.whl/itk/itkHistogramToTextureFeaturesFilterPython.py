# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToTextureFeaturesFilterPython
else:
    import _itkHistogramToTextureFeaturesFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSimpleDataObjectDecoratorPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkArrayPython
import itk.itkRGBAPixelPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkHistogramPython
import itk.itkSamplePython
class itkHistogramToTextureFeaturesFilterEnums(object):
    r"""Proxy of C++ itkHistogramToTextureFeaturesFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TextureFeature_Energy = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Energy
    
    TextureFeature_Entropy = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Entropy
    
    TextureFeature_Correlation = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Correlation
    
    TextureFeature_InverseDifferenceMoment = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_InverseDifferenceMoment
    
    TextureFeature_Inertia = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_Inertia
    
    TextureFeature_ClusterShade = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_ClusterShade
    
    TextureFeature_ClusterProminence = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_ClusterProminence
    
    TextureFeature_HaralickCorrelation = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_HaralickCorrelation
    
    TextureFeature_InvalidFeatureName = _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_TextureFeature_InvalidFeatureName
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkHistogramToTextureFeaturesFilterEnums
        __init__(self, arg0) -> itkHistogramToTextureFeaturesFilterEnums

        Parameters
        ----------
        arg0: itkHistogramToTextureFeaturesFilterEnums const &

        """
        _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_swiginit(self, _itkHistogramToTextureFeaturesFilterPython.new_itkHistogramToTextureFeaturesFilterEnums(*args))
    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterEnums

# Register itkHistogramToTextureFeaturesFilterEnums in _itkHistogramToTextureFeaturesFilterPython:
_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterEnums_swigregister(itkHistogramToTextureFeaturesFilterEnums)

def itkHistogramToTextureFeaturesFilterHD_New():
    return itkHistogramToTextureFeaturesFilterHD.New()

class itkHistogramToTextureFeaturesFilterHD(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkHistogramToTextureFeaturesFilterHD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToTextureFeaturesFilterHD_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToTextureFeaturesFilterHD_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_Clone(self)

    def SetInput(self, histogram):
        r"""
        SetInput(self, histogram)

        Parameters
        ----------
        histogram: itkHistogramD const *

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_SetInput(self, histogram)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInput(self)

    def GetEnergy(self):
        r"""GetEnergy(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergy(self)

    def GetEnergyOutput(self):
        r"""GetEnergyOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEnergyOutput(self)

    def GetEntropy(self):
        r"""GetEntropy(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropy(self)

    def GetEntropyOutput(self):
        r"""GetEntropyOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetEntropyOutput(self)

    def GetCorrelation(self):
        r"""GetCorrelation(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelation(self)

    def GetCorrelationOutput(self):
        r"""GetCorrelationOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetCorrelationOutput(self)

    def GetInverseDifferenceMoment(self):
        r"""GetInverseDifferenceMoment(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMoment(self)

    def GetInverseDifferenceMomentOutput(self):
        r"""GetInverseDifferenceMomentOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInverseDifferenceMomentOutput(self)

    def GetInertia(self):
        r"""GetInertia(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertia(self)

    def GetInertiaOutput(self):
        r"""GetInertiaOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetInertiaOutput(self)

    def GetClusterShade(self):
        r"""GetClusterShade(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShade(self)

    def GetClusterShadeOutput(self):
        r"""GetClusterShadeOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterShadeOutput(self)

    def GetClusterProminence(self):
        r"""GetClusterProminence(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminence(self)

    def GetClusterProminenceOutput(self):
        r"""GetClusterProminenceOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetClusterProminenceOutput(self)

    def GetHaralickCorrelation(self):
        r"""GetHaralickCorrelation(self) -> double"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelation(self)

    def GetHaralickCorrelationOutput(self):
        r"""GetHaralickCorrelationOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetHaralickCorrelationOutput(self)

    def GetFeature(self, feature):
        r"""
        GetFeature(self, feature) -> double

        Parameters
        ----------
        feature: enum itkHistogramToTextureFeaturesFilterEnums::TextureFeature

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_GetFeature(self, feature)
    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterHD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToTextureFeaturesFilterHD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToTextureFeaturesFilterHD

        Create a new object of the class itkHistogramToTextureFeaturesFilterHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToTextureFeaturesFilterHD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToTextureFeaturesFilterHD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToTextureFeaturesFilterHD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToTextureFeaturesFilterHD in _itkHistogramToTextureFeaturesFilterPython:
_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHD_swigregister(itkHistogramToTextureFeaturesFilterHD)

def itkHistogramToTextureFeaturesFilterHF_New():
    return itkHistogramToTextureFeaturesFilterHF.New()

class itkHistogramToTextureFeaturesFilterHF(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkHistogramToTextureFeaturesFilterHF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToTextureFeaturesFilterHF_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToTextureFeaturesFilterHF_Pointer"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_Clone(self)

    def SetInput(self, histogram):
        r"""
        SetInput(self, histogram)

        Parameters
        ----------
        histogram: itkHistogramF const *

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_SetInput(self, histogram)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInput(self)

    def GetEnergy(self):
        r"""GetEnergy(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergy(self)

    def GetEnergyOutput(self):
        r"""GetEnergyOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEnergyOutput(self)

    def GetEntropy(self):
        r"""GetEntropy(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropy(self)

    def GetEntropyOutput(self):
        r"""GetEntropyOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetEntropyOutput(self)

    def GetCorrelation(self):
        r"""GetCorrelation(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelation(self)

    def GetCorrelationOutput(self):
        r"""GetCorrelationOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetCorrelationOutput(self)

    def GetInverseDifferenceMoment(self):
        r"""GetInverseDifferenceMoment(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMoment(self)

    def GetInverseDifferenceMomentOutput(self):
        r"""GetInverseDifferenceMomentOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInverseDifferenceMomentOutput(self)

    def GetInertia(self):
        r"""GetInertia(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertia(self)

    def GetInertiaOutput(self):
        r"""GetInertiaOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetInertiaOutput(self)

    def GetClusterShade(self):
        r"""GetClusterShade(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShade(self)

    def GetClusterShadeOutput(self):
        r"""GetClusterShadeOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterShadeOutput(self)

    def GetClusterProminence(self):
        r"""GetClusterProminence(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminence(self)

    def GetClusterProminenceOutput(self):
        r"""GetClusterProminenceOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetClusterProminenceOutput(self)

    def GetHaralickCorrelation(self):
        r"""GetHaralickCorrelation(self) -> float"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelation(self)

    def GetHaralickCorrelationOutput(self):
        r"""GetHaralickCorrelationOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetHaralickCorrelationOutput(self)

    def GetFeature(self, feature):
        r"""
        GetFeature(self, feature) -> float

        Parameters
        ----------
        feature: enum itkHistogramToTextureFeaturesFilterEnums::TextureFeature

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_GetFeature(self, feature)
    __swig_destroy__ = _itkHistogramToTextureFeaturesFilterPython.delete_itkHistogramToTextureFeaturesFilterHF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToTextureFeaturesFilterHF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToTextureFeaturesFilterHF

        Create a new object of the class itkHistogramToTextureFeaturesFilterHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToTextureFeaturesFilterHF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToTextureFeaturesFilterHF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToTextureFeaturesFilterHF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToTextureFeaturesFilterHF in _itkHistogramToTextureFeaturesFilterPython:
_itkHistogramToTextureFeaturesFilterPython.itkHistogramToTextureFeaturesFilterHF_swigregister(itkHistogramToTextureFeaturesFilterHF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_texture_features_filter(*args, **kwargs):
    """Functional interface for HistogramToTextureFeaturesFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToTextureFeaturesFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_texture_features_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToTextureFeaturesFilter
    histogram_to_texture_features_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_texture_features_filter.__doc__ = filter_object.__doc__



