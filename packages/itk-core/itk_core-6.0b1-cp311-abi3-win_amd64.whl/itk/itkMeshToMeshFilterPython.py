# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeshToMeshFilterPython
else:
    import _itkMeshToMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMeshSourcePython
import itk.itkMeshBasePython
import itk.itkPointSetPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMapContainerPython
import itk.itkBoundingBoxPython

def itkMeshToMeshFilterMD2MD2_New():
    return itkMeshToMeshFilterMD2MD2.New()

class itkMeshToMeshFilterMD2MD2(itk.itkMeshSourcePython.itkMeshSourceMD2):
    r"""Proxy of C++ itkMeshToMeshFilterMD2MD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMD2MD2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMD2MD2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD2 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD2
        GetInput(self, idx) -> itkMeshD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMD2MD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMD2MD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMD2MD2

        Create a new object of the class itkMeshToMeshFilterMD2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMD2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMD2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMD2MD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMD2MD2 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2_swigregister(itkMeshToMeshFilterMD2MD2)

def itkMeshToMeshFilterMD3MD3_New():
    return itkMeshToMeshFilterMD3MD3.New()

class itkMeshToMeshFilterMD3MD3(itk.itkMeshSourcePython.itkMeshSourceMD3):
    r"""Proxy of C++ itkMeshToMeshFilterMD3MD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMD3MD3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMD3MD3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD3 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD3
        GetInput(self, idx) -> itkMeshD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMD3MD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMD3MD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMD3MD3

        Create a new object of the class itkMeshToMeshFilterMD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMD3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMD3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMD3MD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMD3MD3 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3_swigregister(itkMeshToMeshFilterMD3MD3)

def itkMeshToMeshFilterMD4MD4_New():
    return itkMeshToMeshFilterMD4MD4.New()

class itkMeshToMeshFilterMD4MD4(itk.itkMeshSourcePython.itkMeshSourceMD4):
    r"""Proxy of C++ itkMeshToMeshFilterMD4MD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMD4MD4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMD4MD4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD4 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD4
        GetInput(self, idx) -> itkMeshD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMD4MD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMD4MD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMD4MD4

        Create a new object of the class itkMeshToMeshFilterMD4MD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMD4MD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMD4MD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMD4MD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMD4MD4 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4_swigregister(itkMeshToMeshFilterMD4MD4)

def itkMeshToMeshFilterMF2MF2_New():
    return itkMeshToMeshFilterMF2MF2.New()

class itkMeshToMeshFilterMF2MF2(itk.itkMeshSourcePython.itkMeshSourceMF2):
    r"""Proxy of C++ itkMeshToMeshFilterMF2MF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMF2MF2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMF2MF2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF2 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF2
        GetInput(self, idx) -> itkMeshF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMF2MF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMF2MF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMF2MF2

        Create a new object of the class itkMeshToMeshFilterMF2MF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMF2MF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMF2MF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMF2MF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMF2MF2 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2_swigregister(itkMeshToMeshFilterMF2MF2)

def itkMeshToMeshFilterMF3MF3_New():
    return itkMeshToMeshFilterMF3MF3.New()

class itkMeshToMeshFilterMF3MF3(itk.itkMeshSourcePython.itkMeshSourceMF3):
    r"""Proxy of C++ itkMeshToMeshFilterMF3MF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMF3MF3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMF3MF3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF3 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF3
        GetInput(self, idx) -> itkMeshF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMF3MF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMF3MF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMF3MF3

        Create a new object of the class itkMeshToMeshFilterMF3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMF3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMF3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMF3MF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMF3MF3 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3_swigregister(itkMeshToMeshFilterMF3MF3)

def itkMeshToMeshFilterMF4MF4_New():
    return itkMeshToMeshFilterMF4MF4.New()

class itkMeshToMeshFilterMF4MF4(itk.itkMeshSourcePython.itkMeshSourceMF4):
    r"""Proxy of C++ itkMeshToMeshFilterMF4MF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMF4MF4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMF4MF4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF4 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF4
        GetInput(self, idx) -> itkMeshF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMF4MF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMF4MF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMF4MF4

        Create a new object of the class itkMeshToMeshFilterMF4MF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMF4MF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMF4MF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMF4MF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMF4MF4 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4_swigregister(itkMeshToMeshFilterMF4MF4)

def itkMeshToMeshFilterMSS2MSS2_New():
    return itkMeshToMeshFilterMSS2MSS2.New()

class itkMeshToMeshFilterMSS2MSS2(itk.itkMeshSourcePython.itkMeshSourceMSS2):
    r"""Proxy of C++ itkMeshToMeshFilterMSS2MSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMSS2MSS2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMSS2MSS2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshSS2 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshSS2
        GetInput(self, idx) -> itkMeshSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMSS2MSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMSS2MSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMSS2MSS2

        Create a new object of the class itkMeshToMeshFilterMSS2MSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMSS2MSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMSS2MSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMSS2MSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMSS2MSS2 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2_swigregister(itkMeshToMeshFilterMSS2MSS2)

def itkMeshToMeshFilterMSS3MSS3_New():
    return itkMeshToMeshFilterMSS3MSS3.New()

class itkMeshToMeshFilterMSS3MSS3(itk.itkMeshSourcePython.itkMeshSourceMSS3):
    r"""Proxy of C++ itkMeshToMeshFilterMSS3MSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMSS3MSS3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMSS3MSS3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshSS3 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshSS3
        GetInput(self, idx) -> itkMeshSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMSS3MSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMSS3MSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMSS3MSS3

        Create a new object of the class itkMeshToMeshFilterMSS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMSS3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMSS3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMSS3MSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMSS3MSS3 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3_swigregister(itkMeshToMeshFilterMSS3MSS3)

def itkMeshToMeshFilterMSS4MSS4_New():
    return itkMeshToMeshFilterMSS4MSS4.New()

class itkMeshToMeshFilterMSS4MSS4(itk.itkMeshSourcePython.itkMeshSourceMSS4):
    r"""Proxy of C++ itkMeshToMeshFilterMSS4MSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMSS4MSS4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMSS4MSS4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshSS4 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshSS4
        GetInput(self, idx) -> itkMeshSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMSS4MSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMSS4MSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMSS4MSS4

        Create a new object of the class itkMeshToMeshFilterMSS4MSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMSS4MSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMSS4MSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMSS4MSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMSS4MSS4 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4_swigregister(itkMeshToMeshFilterMSS4MSS4)

def itkMeshToMeshFilterMUC2MUC2_New():
    return itkMeshToMeshFilterMUC2MUC2.New()

class itkMeshToMeshFilterMUC2MUC2(itk.itkMeshSourcePython.itkMeshSourceMUC2):
    r"""Proxy of C++ itkMeshToMeshFilterMUC2MUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUC2MUC2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUC2MUC2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUC2 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUC2
        GetInput(self, idx) -> itkMeshUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUC2MUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUC2MUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUC2MUC2

        Create a new object of the class itkMeshToMeshFilterMUC2MUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUC2MUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUC2MUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUC2MUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUC2MUC2 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2_swigregister(itkMeshToMeshFilterMUC2MUC2)

def itkMeshToMeshFilterMUC3MUC3_New():
    return itkMeshToMeshFilterMUC3MUC3.New()

class itkMeshToMeshFilterMUC3MUC3(itk.itkMeshSourcePython.itkMeshSourceMUC3):
    r"""Proxy of C++ itkMeshToMeshFilterMUC3MUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUC3MUC3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUC3MUC3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUC3 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUC3
        GetInput(self, idx) -> itkMeshUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUC3MUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUC3MUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUC3MUC3

        Create a new object of the class itkMeshToMeshFilterMUC3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUC3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUC3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUC3MUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUC3MUC3 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3_swigregister(itkMeshToMeshFilterMUC3MUC3)

def itkMeshToMeshFilterMUC4MUC4_New():
    return itkMeshToMeshFilterMUC4MUC4.New()

class itkMeshToMeshFilterMUC4MUC4(itk.itkMeshSourcePython.itkMeshSourceMUC4):
    r"""Proxy of C++ itkMeshToMeshFilterMUC4MUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUC4MUC4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUC4MUC4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUC4 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUC4
        GetInput(self, idx) -> itkMeshUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUC4MUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUC4MUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUC4MUC4

        Create a new object of the class itkMeshToMeshFilterMUC4MUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUC4MUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUC4MUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUC4MUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUC4MUC4 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4_swigregister(itkMeshToMeshFilterMUC4MUC4)

def itkMeshToMeshFilterMUS2MUS2_New():
    return itkMeshToMeshFilterMUS2MUS2.New()

class itkMeshToMeshFilterMUS2MUS2(itk.itkMeshSourcePython.itkMeshSourceMUS2):
    r"""Proxy of C++ itkMeshToMeshFilterMUS2MUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUS2MUS2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUS2MUS2_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUS2 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUS2
        GetInput(self, idx) -> itkMeshUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUS2MUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUS2MUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUS2MUS2

        Create a new object of the class itkMeshToMeshFilterMUS2MUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUS2MUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUS2MUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUS2MUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUS2MUS2 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2_swigregister(itkMeshToMeshFilterMUS2MUS2)

def itkMeshToMeshFilterMUS3MUS3_New():
    return itkMeshToMeshFilterMUS3MUS3.New()

class itkMeshToMeshFilterMUS3MUS3(itk.itkMeshSourcePython.itkMeshSourceMUS3):
    r"""Proxy of C++ itkMeshToMeshFilterMUS3MUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUS3MUS3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUS3MUS3_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUS3 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUS3
        GetInput(self, idx) -> itkMeshUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUS3MUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUS3MUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUS3MUS3

        Create a new object of the class itkMeshToMeshFilterMUS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUS3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUS3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUS3MUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUS3MUS3 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3_swigregister(itkMeshToMeshFilterMUS3MUS3)

def itkMeshToMeshFilterMUS4MUS4_New():
    return itkMeshToMeshFilterMUS4MUS4.New()

class itkMeshToMeshFilterMUS4MUS4(itk.itkMeshSourcePython.itkMeshSourceMUS4):
    r"""Proxy of C++ itkMeshToMeshFilterMUS4MUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeshToMeshFilterMUS4MUS4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeshToMeshFilterMUS4MUS4_Pointer"""
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUS4 const *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUS4
        GetInput(self, idx) -> itkMeshUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4_GetInput(self, *args)
    __swig_destroy__ = _itkMeshToMeshFilterPython.delete_itkMeshToMeshFilterMUS4MUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeshToMeshFilterMUS4MUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeshToMeshFilterMUS4MUS4

        Create a new object of the class itkMeshToMeshFilterMUS4MUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeshToMeshFilterMUS4MUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeshToMeshFilterMUS4MUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeshToMeshFilterMUS4MUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeshToMeshFilterMUS4MUS4 in _itkMeshToMeshFilterPython:
_itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4_swigregister(itkMeshToMeshFilterMUS4MUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def mesh_to_mesh_filter(*args,  output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for MeshToMeshFilter"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshToMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.MeshToMeshFilter
    mesh_to_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__



