{"file":"ga-login.ga-signup.entry.js","mappings":"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","names":[],"sources":["src/components/ga-login/ga-login.scss?tag=ga-login&encapsulation=shadow","src/components/ga-login/ga-login.tsx","src/components/ga-signup/ga-signup.scss?tag=ga-signup&encapsulation=shadow","src/components/ga-signup/ga-signup.tsx"],"sourcesContent":["@import '../../gacolors.scss';\n\n.auth-error {\n    display: block;\n    color: $ga-red;\n    margin-top: 1rem;\n}\n\n.auth-button {\n    margin-top: 1rem;\n}\n\nlimel-button {\n    --lime-primary-color: #f49132;\n}\n","/* eslint-disable camelcase */\nimport { Component, h, Prop, Event, State, EventEmitter } from '@stencil/core';\nimport { ILoginField } from '../../types/LoginField';\nimport {\n    LimeWebComponentPlatform,\n    PlatformServiceName,\n} from '@limetech/lime-web-components';\nimport { ISession } from '../../types/Session';\n\n@Component({\n    tag: 'ga-login',\n    shadow: true,\n    styleUrl: 'ga-login.scss',\n})\nexport class GaLogin {\n    @Prop() public platform: LimeWebComponentPlatform;\n\n    @Event() setSession: EventEmitter<ISession>;\n\n    @State() private loading: boolean = false;\n    @State() private errorOnLogin: boolean = false;\n    @State() private email: string = '';\n    @State() private password: string = '';\n\n    private loginFields: ILoginField[] = [\n        {\n            id: 'LoginEmail',\n            style: 'auth-imput',\n            label: 'Email address',\n            type: 'email',\n            value: 'email',\n            required: false,\n            icon: 'filled_message',\n        },\n        {\n            id: 'LoginPassword',\n            style: 'auth-imput',\n            label: 'Password',\n            type: 'password',\n            value: 'password',\n            required: false,\n            icon: 'lock_2',\n        },\n    ];\n\n    constructor() {\n        this.onChange = this.onChange.bind(this);\n        this.onLogin = this.onLogin.bind(this);\n        this.isDisabled = this.isDisabled.bind(this);\n    }\n\n    public render() {\n        return [\n            this.loginFields.map((loginField: ILoginField) => {\n                return (\n                    <limel-input-field\n                        id={loginField.id}\n                        class={loginField.style}\n                        label={loginField.label}\n                        type={loginField.type}\n                        value={this[loginField.value]}\n                        required={loginField.required}\n                        trailingIcon={loginField.icon}\n                        onChange={(event: any) =>\n                            this.onChange(event, loginField.value)\n                        }\n                    />\n                );\n            }),\n            (() => {\n                return (\n                    <div>\n                        <limel-button\n                            class=\"auth-button\"\n                            label=\"Login\"\n                            primary={true}\n                            loading={this.loading}\n                            disabled={this.isDisabled()}\n                            onClick={this.onLogin}\n                        />\n                        {this.errorOnLogin ? (\n                            <span class=\"auth-error\">\n                                Could not login. Please check your credentials\n                            </span>\n                        ) : null}\n                    </div>\n                );\n            })(),\n        ];\n    }\n\n    private isDisabled(): boolean {\n        return !(this.email && this.password);\n    }\n\n    private onChange(event, valueReference) {\n        this[valueReference] = event.detail;\n    }\n\n    private async onLogin() {\n        this.errorOnLogin = false;\n        this.loading = true;\n\n        const data = { email: this.email, password: this.password };\n        const response = await this.platform\n            .get(PlatformServiceName.Http)\n            .post('getaccept/login/', data);\n        this.loading = false;\n\n        if (response.success) {\n            const session: ISession = {\n                username: this.email,\n                access_token: response.data.access_token,\n                expires_in: response.data.expires_in,\n            };\n            this.setSession.emit(session);\n        } else {\n            this.errorOnLogin = true;\n        }\n    }\n}\n","@import '../../gacolors.scss';\n\n.auth-signup-field-container {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.auth-imput {\n    margin-bottom: 0.2rem;\n    margin-right: 0.5rem;\n    width: 48%;\n}\n\n.auth-button {\n    margin-top: 1rem;\n}\n\n.auth-imput {\n    margin-bottom: 0.2rem;\n}\n\n.auth-language-label {\n    display: block;\n    margin: 1rem 0rem 0.5rem 1rem;\n}\n\nlimel-button {\n    --lime-primary-color: #f49132;\n}\n","import { Component, h, Prop, State, Event, EventEmitter } from '@stencil/core';\nimport { ILoginField } from '../../types/LoginField';\nimport { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { LimeWebComponentPlatform } from '@limetech/lime-web-components';\nimport { signup } from '../../services';\nimport { ISession } from '../../types/Session';\nimport { ISignup } from '../../types/Signup';\n\n@Component({\n    tag: 'ga-signup',\n    shadow: true,\n    styleUrl: 'ga-signup.scss',\n})\nexport class GaSignup {\n    @Prop() public platform: LimeWebComponentPlatform;\n\n    @State() private isLoading: boolean = false;\n    @State() private disableSignup: boolean = false;\n    @State() private signupFirstName: string = '';\n    @State() private signupLastName: string = '';\n    @State() private companyName: string = '';\n    @State() private mobile: string = '';\n    @State() private countryCode: string = 'SE';\n    @State() private signupEmail: string;\n    @State() private signupPassword: string = '';\n\n    @Event() setSession: EventEmitter<ISession>;\n    @Event() errorHandler: EventEmitter<string>;\n\n    constructor() {\n        this.onChange = this.onChange.bind(this);\n        this.countrySetOnChange = this.countrySetOnChange.bind(this);\n        this.onSignup = this.onSignup.bind(this);\n    }\n\n    public render() {\n        this.disableSignup = this.shouldDisableSignup();\n\n        return [\n            <div class=\"auth-signup-field-container\">\n                {this.signupFields.map((signupField: ILoginField) => {\n                    return (\n                        <limel-input-field\n                            id={signupField.id}\n                            class={signupField.style}\n                            label={signupField.label}\n                            type={signupField.type}\n                            value={this[signupField.value]}\n                            required={signupField.required}\n                            trailingIcon={signupField.icon}\n                            onChange={event =>\n                                this.onChange(event, signupField.value)\n                            }\n                        />\n                    );\n                })}\n            </div>,\n            <span class=\"auth-language-label\">Country</span>,\n            <limel-chip-set\n                type=\"choice\"\n                onChange={this.countrySetOnChange}\n                required={true}\n                value={this.countryCodes}\n            />,\n            <limel-button\n                class=\"auth-button\"\n                label=\"Signup\"\n                primary={true}\n                loading={this.isLoading}\n                disabled={this.disableSignup}\n                onClick={this.onSignup}\n            />,\n        ];\n    }\n\n    private shouldDisableSignup(): boolean {\n        return (\n            this.signupEmail === '' &&\n            this.signupLastName === '' &&\n            this.signupLastName === '' &&\n            this.mobile === '' &&\n            this.signupPassword === ''\n        );\n    }\n\n    private onChange(event, valueReference) {\n        this[valueReference] = event.detail;\n    }\n\n    private countrySetOnChange(event: LimelChipSetCustomEvent<Chip>) {\n        this.countryCode = event.detail.id.toString();\n    }\n\n    private async onSignup() {\n        this.isLoading = true;\n        const signupData: ISignup = {\n            company: this.companyName,\n            first_name: this.signupFirstName,\n            last_name: this.signupLastName,\n            country_code: this.countryCode,\n            mobile: this.mobile,\n            email: this.signupEmail,\n            password: this.signupPassword,\n        };\n\n        const { data, success } = await signup(this.platform, signupData);\n\n        if (success) {\n            const session: ISession = {\n                username: this.signupEmail,\n                access_token: data.access_token,\n                expires_in: data.expires_in,\n            };\n            this.setSession.emit(session);\n        } else {\n            if (data.error) {\n                this.errorHandler.emit(data.error);\n            } else {\n                this.errorHandler.emit('Something went wrong...');\n            }\n        }\n\n        this.isLoading = false;\n    }\n\n    private signupFields: ILoginField[] = [\n        {\n            id: 'SignupEmail',\n            style: 'auth-imput',\n            label: 'Email address',\n            type: 'email',\n            value: 'signupEmail',\n            required: true,\n            icon: 'filled_message',\n        },\n        {\n            id: 'Password',\n            style: 'auth-imput',\n            label: 'Password',\n            type: 'password',\n            value: 'signupPassword',\n            required: true,\n            icon: 'lock_2',\n        },\n        {\n            id: 'FirstName',\n            style: 'auth-imput',\n            label: 'First name',\n            type: 'text',\n            value: 'signupFirstName',\n            required: true,\n            icon: 'user',\n        },\n        {\n            id: 'LastName',\n            style: 'auth-imput',\n            label: 'Last name',\n            type: 'text',\n            value: 'signupLastName',\n            required: true,\n            icon: 'user',\n        },\n        {\n            id: 'Company',\n            style: 'auth-imput',\n            label: 'Company',\n            type: 'text',\n            value: 'companyName',\n            required: true,\n            icon: 'organization',\n        },\n        {\n            id: 'Mobile',\n            style: 'auth-imput',\n            label: 'Mobile',\n            type: 'text',\n            value: 'mobile',\n            required: true,\n            icon: 'phone_not_being_used',\n        },\n    ];\n\n    private countryCodes: Chip[] = [\n        {\n            id: 'SE',\n            text: 'SWE',\n            selected: true,\n        },\n        {\n            id: 'NO',\n            text: 'NOR',\n        },\n        {\n            id: 'FI',\n            text: 'FIN',\n        },\n        {\n            id: 'DK',\n            text: 'DEN',\n        },\n        {\n            id: 'GB',\n            text: 'GBR',\n        },\n        {\n            id: 'US',\n            text: 'USA',\n        },\n    ];\n}\n"],"version":3}