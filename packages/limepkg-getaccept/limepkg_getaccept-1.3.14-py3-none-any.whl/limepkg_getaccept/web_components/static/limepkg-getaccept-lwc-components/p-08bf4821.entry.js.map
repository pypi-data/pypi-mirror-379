{"version":3,"names":["gaLoginCss","GaLoginStyle0","GaLogin","constructor","hostRef","this","loginFields","id","style","label","type","value","required","icon","onChange","bind","onLogin","isDisabled","render","map","loginField","h","class","trailingIcon","event","primary","loading","disabled","onClick","errorOnLogin","email","password","valueReference","detail","data","response","platform","get","PlatformServiceName","Http","post","success","session","username","access_token","expires_in","setSession","emit","gaSignupCss","GaSignupStyle0","GaSignup","signupFields","countryCodes","text","selected","countrySetOnChange","onSignup","disableSignup","shouldDisableSignup","key","signupField","isLoading","signupEmail","signupLastName","mobile","signupPassword","countryCode","toString","signupData","company","companyName","first_name","signupFirstName","last_name","country_code","signup","error","errorHandler"],"sources":["src/components/ga-login/ga-login.scss?tag=ga-login&encapsulation=shadow","src/components/ga-login/ga-login.tsx","src/components/ga-signup/ga-signup.scss?tag=ga-signup&encapsulation=shadow","src/components/ga-signup/ga-signup.tsx"],"sourcesContent":["@import '../../gacolors.scss';\n\n.auth-error {\n    display: block;\n    color: $ga-red;\n    margin-top: 1rem;\n}\n\n.auth-button {\n    margin-top: 1rem;\n}\n\nlimel-button {\n    --lime-primary-color: #f49132;\n}\n","/* eslint-disable camelcase */\nimport { Component, h, Prop, Event, State, EventEmitter } from '@stencil/core';\nimport { ILoginField } from '../../types/LoginField';\nimport {\n    LimeWebComponentPlatform,\n    PlatformServiceName,\n} from '@limetech/lime-web-components';\nimport { ISession } from '../../types/Session';\n\n@Component({\n    tag: 'ga-login',\n    shadow: true,\n    styleUrl: 'ga-login.scss',\n})\nexport class GaLogin {\n    @Prop() public platform: LimeWebComponentPlatform;\n\n    @Event() setSession: EventEmitter<ISession>;\n\n    @State() private loading: boolean = false;\n    @State() private errorOnLogin: boolean = false;\n    @State() private email: string = '';\n    @State() private password: string = '';\n\n    private loginFields: ILoginField[] = [\n        {\n            id: 'LoginEmail',\n            style: 'auth-imput',\n            label: 'Email address',\n            type: 'email',\n            value: 'email',\n            required: false,\n            icon: 'filled_message',\n        },\n        {\n            id: 'LoginPassword',\n            style: 'auth-imput',\n            label: 'Password',\n            type: 'password',\n            value: 'password',\n            required: false,\n            icon: 'lock_2',\n        },\n    ];\n\n    constructor() {\n        this.onChange = this.onChange.bind(this);\n        this.onLogin = this.onLogin.bind(this);\n        this.isDisabled = this.isDisabled.bind(this);\n    }\n\n    public render() {\n        return [\n            this.loginFields.map((loginField: ILoginField) => {\n                return (\n                    <limel-input-field\n                        id={loginField.id}\n                        class={loginField.style}\n                        label={loginField.label}\n                        type={loginField.type}\n                        value={this[loginField.value]}\n                        required={loginField.required}\n                        trailingIcon={loginField.icon}\n                        onChange={(event: any) =>\n                            this.onChange(event, loginField.value)\n                        }\n                    />\n                );\n            }),\n            (() => {\n                return (\n                    <div>\n                        <limel-button\n                            class=\"auth-button\"\n                            label=\"Login\"\n                            primary={true}\n                            loading={this.loading}\n                            disabled={this.isDisabled()}\n                            onClick={this.onLogin}\n                        />\n                        {this.errorOnLogin ? (\n                            <span class=\"auth-error\">\n                                Could not login. Please check your credentials\n                            </span>\n                        ) : null}\n                    </div>\n                );\n            })(),\n        ];\n    }\n\n    private isDisabled(): boolean {\n        return !(this.email && this.password);\n    }\n\n    private onChange(event, valueReference) {\n        this[valueReference] = event.detail;\n    }\n\n    private async onLogin() {\n        this.errorOnLogin = false;\n        this.loading = true;\n\n        const data = { email: this.email, password: this.password };\n        const response = await this.platform\n            .get(PlatformServiceName.Http)\n            .post('getaccept/login/', data);\n        this.loading = false;\n\n        if (response.success) {\n            const session: ISession = {\n                username: this.email,\n                access_token: response.data.access_token,\n                expires_in: response.data.expires_in,\n            };\n            this.setSession.emit(session);\n        } else {\n            this.errorOnLogin = true;\n        }\n    }\n}\n","@import '../../gacolors.scss';\n\n.auth-signup-field-container {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.auth-imput {\n    margin-bottom: 0.2rem;\n    margin-right: 0.5rem;\n    width: 48%;\n}\n\n.auth-button {\n    margin-top: 1rem;\n}\n\n.auth-imput {\n    margin-bottom: 0.2rem;\n}\n\n.auth-language-label {\n    display: block;\n    margin: 1rem 0rem 0.5rem 1rem;\n}\n\nlimel-button {\n    --lime-primary-color: #f49132;\n}\n","import { Component, h, Prop, State, Event, EventEmitter } from '@stencil/core';\nimport { ILoginField } from '../../types/LoginField';\nimport { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { LimeWebComponentPlatform } from '@limetech/lime-web-components';\nimport { signup } from '../../services';\nimport { ISession } from '../../types/Session';\nimport { ISignup } from '../../types/Signup';\n\n@Component({\n    tag: 'ga-signup',\n    shadow: true,\n    styleUrl: 'ga-signup.scss',\n})\nexport class GaSignup {\n    @Prop() public platform: LimeWebComponentPlatform;\n\n    @State() private isLoading: boolean = false;\n    @State() private disableSignup: boolean = false;\n    @State() private signupFirstName: string = '';\n    @State() private signupLastName: string = '';\n    @State() private companyName: string = '';\n    @State() private mobile: string = '';\n    @State() private countryCode: string = 'SE';\n    @State() private signupEmail: string;\n    @State() private signupPassword: string = '';\n\n    @Event() setSession: EventEmitter<ISession>;\n    @Event() errorHandler: EventEmitter<string>;\n\n    constructor() {\n        this.onChange = this.onChange.bind(this);\n        this.countrySetOnChange = this.countrySetOnChange.bind(this);\n        this.onSignup = this.onSignup.bind(this);\n    }\n\n    public render() {\n        this.disableSignup = this.shouldDisableSignup();\n\n        return [\n            <div class=\"auth-signup-field-container\">\n                {this.signupFields.map((signupField: ILoginField) => {\n                    return (\n                        <limel-input-field\n                            id={signupField.id}\n                            class={signupField.style}\n                            label={signupField.label}\n                            type={signupField.type}\n                            value={this[signupField.value]}\n                            required={signupField.required}\n                            trailingIcon={signupField.icon}\n                            onChange={event =>\n                                this.onChange(event, signupField.value)\n                            }\n                        />\n                    );\n                })}\n            </div>,\n            <span class=\"auth-language-label\">Country</span>,\n            <limel-chip-set\n                type=\"choice\"\n                onChange={this.countrySetOnChange}\n                required={true}\n                value={this.countryCodes}\n            />,\n            <limel-button\n                class=\"auth-button\"\n                label=\"Signup\"\n                primary={true}\n                loading={this.isLoading}\n                disabled={this.disableSignup}\n                onClick={this.onSignup}\n            />,\n        ];\n    }\n\n    private shouldDisableSignup(): boolean {\n        return (\n            this.signupEmail === '' &&\n            this.signupLastName === '' &&\n            this.signupLastName === '' &&\n            this.mobile === '' &&\n            this.signupPassword === ''\n        );\n    }\n\n    private onChange(event, valueReference) {\n        this[valueReference] = event.detail;\n    }\n\n    private countrySetOnChange(event: LimelChipSetCustomEvent<Chip>) {\n        this.countryCode = event.detail.id.toString();\n    }\n\n    private async onSignup() {\n        this.isLoading = true;\n        const signupData: ISignup = {\n            company: this.companyName,\n            first_name: this.signupFirstName,\n            last_name: this.signupLastName,\n            country_code: this.countryCode,\n            mobile: this.mobile,\n            email: this.signupEmail,\n            password: this.signupPassword,\n        };\n\n        const { data, success } = await signup(this.platform, signupData);\n\n        if (success) {\n            const session: ISession = {\n                username: this.signupEmail,\n                access_token: data.access_token,\n                expires_in: data.expires_in,\n            };\n            this.setSession.emit(session);\n        } else {\n            if (data.error) {\n                this.errorHandler.emit(data.error);\n            } else {\n                this.errorHandler.emit('Something went wrong...');\n            }\n        }\n\n        this.isLoading = false;\n    }\n\n    private signupFields: ILoginField[] = [\n        {\n            id: 'SignupEmail',\n            style: 'auth-imput',\n            label: 'Email address',\n            type: 'email',\n            value: 'signupEmail',\n            required: true,\n            icon: 'filled_message',\n        },\n        {\n            id: 'Password',\n            style: 'auth-imput',\n            label: 'Password',\n            type: 'password',\n            value: 'signupPassword',\n            required: true,\n            icon: 'lock_2',\n        },\n        {\n            id: 'FirstName',\n            style: 'auth-imput',\n            label: 'First name',\n            type: 'text',\n            value: 'signupFirstName',\n            required: true,\n            icon: 'user',\n        },\n        {\n            id: 'LastName',\n            style: 'auth-imput',\n            label: 'Last name',\n            type: 'text',\n            value: 'signupLastName',\n            required: true,\n            icon: 'user',\n        },\n        {\n            id: 'Company',\n            style: 'auth-imput',\n            label: 'Company',\n            type: 'text',\n            value: 'companyName',\n            required: true,\n            icon: 'organization',\n        },\n        {\n            id: 'Mobile',\n            style: 'auth-imput',\n            label: 'Mobile',\n            type: 'text',\n            value: 'mobile',\n            required: true,\n            icon: 'phone_not_being_used',\n        },\n    ];\n\n    private countryCodes: Chip[] = [\n        {\n            id: 'SE',\n            text: 'SWE',\n            selected: true,\n        },\n        {\n            id: 'NO',\n            text: 'NOR',\n        },\n        {\n            id: 'FI',\n            text: 'FIN',\n        },\n        {\n            id: 'DK',\n            text: 'DEN',\n        },\n        {\n            id: 'GB',\n            text: 'GBR',\n        },\n        {\n            id: 'US',\n            text: 'USA',\n        },\n    ];\n}\n"],"mappings":"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"}