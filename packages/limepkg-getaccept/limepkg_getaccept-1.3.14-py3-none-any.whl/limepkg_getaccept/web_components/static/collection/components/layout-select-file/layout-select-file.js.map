{"version":3,"file":"layout-select-file.js","sourceRoot":"","sources":["../../../src/components/layout-select-file/layout-select-file.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {\n    Component,\n    h,\n    Prop,\n    State,\n    EventEmitter,\n    Event,\n    Listen,\n    Watch,\n} from '@stencil/core';\nimport {\n    LimeWebComponentPlatform,\n    LimeWebComponentContext,\n} from '@limetech/lime-web-components';\nimport {\n    fetchTemplates,\n    fetchLimeDocuments,\n    fetchTemplateFields,\n    fetchObjectProps,\n    fetchTemplateRoles,\n} from '../../services';\nimport { ISession } from '../../types/Session';\nimport { ICustomField } from '../../types/CustomField';\nimport { IListItem } from '../../types/ListItem';\nimport { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\nimport { ITemplateRole } from 'src/types/TemplateRole';\n\nenum EnumSections {\n    None = 'none',\n    Template = 'template',\n    LimeDocuments = 'limeDocuments',\n}\n\ntype TableRow = {\n    field: string;\n    value: string;\n};\n\n@Component({\n    tag: 'layout-select-file',\n    shadow: true,\n    styleUrl: 'layout-select-file.scss',\n})\nexport class LayoutSelectFile {\n    @Prop() public platform: LimeWebComponentPlatform;\n    @Prop() public context: LimeWebComponentContext;\n    @Prop() public session: ISession;\n    @Prop() public selectedTemplate: IListItem;\n    @Prop() public selectedLimeDocument: IListItem;\n    @Prop() public customFields: ICustomField[] = [];\n    @Prop() public templateRoles: ITemplateRole[] = [];\n\n    @Event() setCustomFields: EventEmitter;\n    @Event() setTemplateRoles: EventEmitter;\n    @Event() private errorHandler: EventEmitter<string>;\n\n    @State() private isLoadingTemplates: boolean = false;\n    @State() private isLoadingProps: boolean = false;\n    @State() private templates: IListItem[] = [];\n\n    @State() private isLoadingFields: boolean = false;\n    @State() private isLoadingLimeDocuments: boolean;\n    @State() private limeDocuments: IListItem[];\n\n    @State() private openSection: EnumSections = EnumSections.Template;\n\n    @State() private tableData: TableRow[] = [];\n\n    @State() private currentTab: string = '1';\n\n    @State()\n    private gaMergeFields: TableRow[] = [\n        {\n            field: '{{recipient.first_name}}',\n            value: 'Recipient - First name',\n        },\n        {\n            field: '{{recipient.last_name}}',\n            value: 'Recipient - Last name',\n        },\n        {\n            field: '{{recipient.email}}',\n            value: 'Recipient - Email',\n        },\n        {\n            field: '{{recipient.company_name}}',\n            value: 'Recipient - Company name',\n        },\n        {\n            field: '{{sender.first_name}}',\n            value: 'Sender - First name',\n        },\n        {\n            field: '{{sender.last_name}}',\n            value: 'Sender - Last name',\n        },\n        {\n            field: '{{sender.fullname}}',\n            value: 'Sender - Full name',\n        },\n        {\n            field: '{{document.name}}',\n            value: 'Document - Name',\n        },\n        {\n            field: '{{document.field}}',\n            value: 'Document - field',\n        },\n    ];\n\n    constructor() {\n        this.loadTemplates = this.loadTemplates.bind(this);\n        this.loadTemplateFields = this.loadTemplateFields.bind(this);\n        this.loadLimeDocuments = this.loadLimeDocuments.bind(this);\n        this.onChangeSection = this.onChangeSection.bind(this);\n        this.setTemplates = this.setTemplates.bind(this);\n        this.setLimeDocuments = this.setLimeDocuments.bind(this);\n        this.setFields = this.setFields.bind(this);\n        this.onActivateRow = this.onActivateRow.bind(this);\n        this.loadTemplateRoles = this.loadTemplateRoles.bind(this);\n    }\n\n    public render() {\n        return [\n            <div class=\"layout-select-file-container\">\n                <h3>Select file to send</h3>\n                <div class=\"select-file-container\">\n                    <div class=\"file-column\">\n                        <limel-collapsible-section\n                            header=\"Templates\"\n                            isOpen={this.openSection === EnumSections.Template}\n                            onOpen={event =>\n                                this.onChangeSection(\n                                    event,\n                                    EnumSections.Template\n                                )\n                            }\n                            onClose={event =>\n                                this.onChangeSection(event, EnumSections.None)\n                            }\n                        >\n                            <template-list\n                                templates={this.templates}\n                                selectedTemplate={this.selectedTemplate}\n                                isLoading={this.isLoadingTemplates}\n                            />\n                        </limel-collapsible-section>\n                        <limel-collapsible-section\n                            header=\"Lime documents\"\n                            isOpen={\n                                this.openSection === EnumSections.LimeDocuments\n                            }\n                            onOpen={event =>\n                                this.onChangeSection(\n                                    event,\n                                    EnumSections.LimeDocuments\n                                )\n                            }\n                            onClose={event =>\n                                this.onChangeSection(event, EnumSections.None)\n                            }\n                        >\n                            <lime-document-list\n                                documents={this.limeDocuments}\n                                selectedLimeDocument={this.selectedLimeDocument}\n                                isLoading={this.isLoadingLimeDocuments}\n                            />\n                        </limel-collapsible-section>\n                    </div>\n                    <div class=\"file-column\">\n                        <template-preview\n                            template={this.selectedTemplate}\n                            isLoading={this.isLoadingFields}\n                            session={this.session}\n                        />\n                        <custom-fields\n                            template={this.selectedTemplate}\n                            customFields={this.customFields}\n                            isLoading={this.isLoadingFields}\n                        />\n                    </div>\n                </div>\n                {!this.isLoadingProps ? (\n                    <limel-collapsible-section\n                        header=\"Show template parameters\"\n                        onClose={event => event.stopPropagation()}\n                    >\n                        <limel-button-group\n                            onChange={this.onChange}\n                            value={[\n                                {\n                                    id: '1',\n                                    title: 'Template fields',\n                                    selected: true,\n                                },\n                                {\n                                    id: '2',\n                                    title: 'GetAccept template fields',\n                                },\n                            ]}\n                        />\n                        {this.currentTab === '1' ? (\n                            <table class=\"merge-fields-table\" id=\"merge-fields\">\n                                <thead>\n                                    <tr>\n                                        <th>Merge tag</th>\n                                        <th>Value</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.tableData.map(value => (\n                                        <tr>\n                                            <td>{value.field}</td>\n                                            <td>{value.value}</td>\n                                            <td>\n                                                <limel-button\n                                                    label=\"Copy\"\n                                                    primary={true}\n                                                    onClick={() =>\n                                                        this.copyToClipboard(\n                                                            value.field\n                                                        )\n                                                    }\n                                                >\n                                                    Copy\n                                                </limel-button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        ) : (\n                            <table\n                                class=\"merge-fields-table\"\n                                id=\"getaccept-merge-fields\"\n                            >\n                                <thead>\n                                    <tr>\n                                        <th>Merge tag</th>\n                                        <th>Value</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.gaMergeFields.map(value => (\n                                        <tr>\n                                            <td>{value.field}</td>\n                                            <td>{value.value}</td>\n                                            <td>\n                                                <limel-button\n                                                    label=\"Copy\"\n                                                    primary={true}\n                                                    onClick={() =>\n                                                        this.copyToClipboard(\n                                                            value.field\n                                                        )\n                                                    }\n                                                >\n                                                    Copy\n                                                </limel-button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        )}\n                    </limel-collapsible-section>\n                ) : (\n                    <limel-spinner />\n                )}\n            </div>,\n        ];\n    }\n\n    public async componentWillLoad() {\n        this.loadTemplates().then(() => { });\n        this.loadLimeDocuments().then(() => { });\n        this.loadObjectProps().then(() => { });\n    }\n\n    private onChangeSection(event, section: EnumSections) {\n        event.stopPropagation();\n        this.openSection = section;\n    }\n\n    private async loadTemplates() {\n        this.isLoadingTemplates = true;\n\n        try {\n            this.templates = await fetchTemplates(\n                this.platform,\n                this.session,\n                this.selectedTemplate\n            );\n        } catch (e) {\n            this.errorHandler.emit(\n                'Could not load templates from GetAccept...'\n            );\n        }\n\n        this.isLoadingTemplates = false;\n    }\n\n    private async loadLimeDocuments() {\n        this.isLoadingLimeDocuments = true;\n        const { id: record_id, limetype } = this.context;\n\n        try {\n            this.limeDocuments = await fetchLimeDocuments(\n                this.platform,\n                limetype,\n                record_id,\n                this.selectedLimeDocument\n            );\n        } catch (e) {\n            this.errorHandler.emit('Could not load related Lime documents...');\n        }\n\n        this.isLoadingLimeDocuments = false;\n    }\n\n    private onChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        this.currentTab = event.detail.id;\n    };\n\n    private async loadTemplateFields() {\n        if (!this.selectedTemplate) {\n            this.customFields = [];\n            this.setCustomFields.emit(this.customFields);\n\n            return;\n        }\n\n        this.isLoadingFields = true;\n        const { id: record_id, limetype } = this.context;\n\n        try {\n            const fields = await fetchTemplateFields(\n                this.platform,\n                this.session,\n                limetype,\n                record_id,\n                this.selectedTemplate\n            );\n            this.setFields(fields);\n        } catch (e) {\n            this.errorHandler.emit(\n                'Could not fetch template fields from GetAccept...'\n            );\n        }\n\n        this.isLoadingFields = false;\n    }\n\n    private async loadObjectProps() {\n        const { id: record_id, limetype } = this.context;\n        this.isLoadingProps = true;\n        try {\n            const props = await fetchObjectProps(\n                this.platform,\n                this.session,\n                limetype,\n                record_id\n            );\n            this.setAvailableFields(props);\n        } catch (e) {\n            this.errorHandler.emit('Could not fetch lime object...');\n        }\n\n        this.isLoadingProps = false;\n    }\n\n    private async loadTemplateRoles() {\n        if (!this.selectedTemplate) {\n            return;\n        }\n\n        const { id: record_id, limetype } = this.context;\n\n        try {\n            const roles = await fetchTemplateRoles(\n                this.platform,\n                this.session,\n                limetype,\n                record_id,\n                this.selectedTemplate\n            );\n            this.setRoles(roles);\n        } catch (e) {\n            this.errorHandler.emit(\n                'Could not fetch template roles from GetAccept...'\n            );\n        }\n    }\n\n    private setAvailableFields(limeObject) {\n        Object.entries(limeObject).forEach(([key, value]: [string, string]) => {\n            if (value) {\n                this.tableData.push({\n                    field: `{{${key}}}`,\n                    value: value,\n                });\n            }\n        });\n    }\n\n    private setFields(fields) {\n        const customFields: ICustomField[] = fields.map(this.mapField);\n\n        this.setCustomFields.emit(customFields);\n    }\n\n    private setRoles(roles: ITemplateRole[]) {\n        this.setTemplateRoles.emit(roles);\n    }\n\n    @Watch('selectedTemplate')\n    onChangeTemplate(data: IListItem) {\n        this.setTemplates(data);\n        if (data) {\n            this.loadTemplateFields();\n            this.loadTemplateRoles();\n        }\n    }\n\n    private setTemplates(template: IListItem) {\n        this.templates = this.getSelectedListItems(this.templates, template);\n    }\n\n    @Watch('selectedLimeDocument')\n    onChangeDocument(data: IListItem) {\n        this.setLimeDocuments(data);\n    }\n\n    private mapField(field: any): ICustomField {\n        return {\n            value: field.field_value.toString(),\n            id: field.field_id,\n            label: field.field_label,\n            is_editable: field.is_editable === null ? true : field.is_editable,\n        };\n    }\n\n    private setLimeDocuments(document: IListItem) {\n        this.limeDocuments = this.getSelectedListItems(\n            this.limeDocuments,\n            document\n        );\n    }\n\n    private getSelectedListItems(\n        items: IListItem[],\n        selectedItem: IListItem\n    ): IListItem[] {\n        return items.map((item: IListItem) => {\n            if (selectedItem && item.value === selectedItem.value) {\n                return selectedItem;\n            }\n\n            return { ...item, selected: false };\n        });\n    }\n\n    @Listen('updateFieldValue')\n    updateFieldValue(event) {\n        const { id, value } = event.detail;\n        const customFields: ICustomField[] = this.customFields.map(field => {\n            return field.id === id ? { ...field, value: value } : field;\n        });\n        this.setCustomFields.emit(customFields);\n    }\n\n    private onActivateRow(event) {\n        navigator.clipboard.writeText(event.detail.field);\n        this.errorHandler.emit(\n            `Copied '${event.detail.field}' to your clipboard`\n        );\n    }\n\n    private copyToClipboard(text) {\n        navigator.clipboard.writeText(text);\n        this.errorHandler.emit(`Copied '${text}' to your clipboard`);\n    }\n}\n"]}