{"version":3,"file":"custom-fields.js","sourceRoot":"","sources":["../../../src/components/custom-fields/custom-fields.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAgB,KAAK,EAAE,MAAM,eAAe,CAAC;AASxE,MAAM,OAAO,YAAY;IAOrB,uGAAgB;IAET,MAAM;QACT,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,oBAAa,CAAC;QACzB,CAAC;aAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,OAAO,EAAE,CAAC;QACd,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC5B,OAAO;gBACH,uBAAe;gBACf,mBACI,IAAI,EAAC,6BAA6B,EAClC,IAAI,EAAC,UAAU,GACjB;aACL,CAAC;QACN,CAAC;QAED,OAAO;YACH,uBAAe;YACf,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAC3B,yBACI,KAAK,EAAC,cAAc,EACpB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,CAAC,KAAK,CAAC,WAAW,EAC5B,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,GACxD,CACL,CAAC;SACL,CAAC;IACN,CAAC;IAEO,aAAa,CAAC,KAAK,EAAE,EAAE;QAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAChE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport { ICustomField } from '../../types/CustomField';\nimport { IListItem } from '../../types/ListItem';\n\n@Component({\n    tag: 'custom-fields',\n    shadow: true,\n    styleUrl: 'custom-fields.scss',\n})\nexport class CustomFields {\n    @Prop() public template: IListItem;\n    @Prop() public customFields: ICustomField[];\n    @Prop() public isLoading: boolean;\n\n    @Event() updateFieldValue: EventEmitter;\n\n    constructor() {}\n\n    public render() {\n        if (this.isLoading) {\n            return <ga-loader />;\n        } else if (!this.template) {\n            return [];\n        }\n\n        if (!this.customFields.length) {\n            return [\n                <h4>Fields</h4>,\n                <empty-state\n                    text=\"This template has no fields\"\n                    icon=\"text_box\"\n                />,\n            ];\n        }\n\n        return [\n            <h4>Fields</h4>,\n            this.customFields.map(field => (\n                <limel-input-field\n                    class=\"custom-field\"\n                    label={field.label}\n                    value={field.value}\n                    disabled={!field.is_editable}\n                    onChange={event => this.onChangeField(event, field.id)}\n                />\n            )),\n        ];\n    }\n\n    private onChangeField(event, id) {\n        this.updateFieldValue.emit({ id: id, value: event.detail });\n    }\n}\n"]}