{"version":3,"file":"layout-template-roles.js","sourceRoot":"","sources":["../../../src/components/lwc-limepkg-getaccept-layout-template-roles/layout-template-roles.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Option } from '@limetech/lime-elements';\nimport {\n    LimeWebComponent,\n    LimeWebComponentContext,\n    LimeWebComponentPlatform,\n} from '@limetech/lime-web-components';\nimport { Component, EventEmitter, h, Prop, Event, State } from '@stencil/core';\nimport { EnumViews } from '../../models/EnumViews';\nimport { IDocument } from 'src/types/Document';\nimport { IListItem } from 'src/types/ListItem';\nimport { IRecipient } from 'src/types/Recipient';\nimport { ISession } from 'src/types/Session';\nimport { ITemplateRole } from 'src/types/TemplateRole';\n\nconst roleNames = {\n    signer: 'Signer',\n    approver: 'Internal approver',\n    externalApprover: 'External approver',\n    cc: 'Viewer',\n};\n\n@Component({\n    tag: 'layout-template-roles',\n    shadow: true,\n    styleUrl: 'layout-template-roles.scss',\n})\nexport class LayoutTemplateRoles implements LimeWebComponent {\n    @Prop() context: LimeWebComponentContext;\n    @Prop() public document: IDocument;\n    @Prop() public template: IListItem;\n    @Prop() public limeDocument: IListItem;\n    @Prop() public platform: LimeWebComponentPlatform;\n    @Prop() public session: ISession;\n    @Prop() public templateRoles: ITemplateRole[] = [];\n\n    // @Event() documentCompleted: EventEmitter<boolean>;\n    // @Event() errorHandler: EventEmitter<string>;\n    @Event() recipientRoleUpdated: EventEmitter<{\n        recipient: IRecipient;\n        role: ITemplateRole;\n    }>;\n    @Event() changeView: EventEmitter<EnumViews>;\n\n    // @State() private isLoading: boolean = true;\n    // @State() private sentDocument: IDocument;\n    @State() value: Option[] = [];\n    @State() options: Option[];\n    @State() recipients: IRecipient[];\n\n    constructor() {\n        this.getOptions = this.getOptions.bind(this);\n        this.getRecipientByOption = this.getRecipientByOption.bind(this);\n    }\n\n    get roles() {\n        return this.templateRoles.filter(role => !this.isRecipient(role));\n    }\n\n    componentWillLoad() {\n        if (!this.templateRoles.length) {\n            this.changeView.emit(EnumViews.sendDocument);\n        }\n\n        this.recipients = this.document.recipients;\n        this.options = this.recipients.map(recipient => ({\n            text: recipient.fullname,\n            value: recipient.email,\n        }));\n        this.value = Array(this.roles.length);\n        this.roles.forEach((role, index) => {\n            const relatedRecipient = this.recipients.find(\n                recipient => recipient.role_id === role.role_id\n            );\n            if (relatedRecipient) {\n                this.value[index] = {\n                    text: relatedRecipient.fullname,\n                    value: relatedRecipient.email,\n                };\n            }\n        });\n    }\n\n    private getRecipientByOption(option: Option): IRecipient {\n        return this.recipients.find(\n            recipient =>\n                recipient.fullname === option.text &&\n                recipient.email === option.value\n        );\n    }\n\n    private getOptions(roleName: string): Option[] {\n        return this.options.filter(\n            option =>\n                !this.value.map(value => value?.value).includes(option.value) &&\n                this.getRecipientByOption(option).role === roleName\n        );\n    }\n\n    public render() {\n        return (\n            <section class=\"template-roles\">\n                {this.roles.map((role, index) => {\n                    return (\n                        <div class=\"template-roles__column\">\n                            <limel-select\n                                label={`${roleNames[role.role]} - ${\n                                    role.role_name\n                                }`}\n                                value={this.value[index]}\n                                options={this.getOptions(role.role)}\n                                onChange={event =>\n                                    this.handleChange(event, index, role)\n                                }\n                            />\n                        </div>\n                    );\n                })}\n            </section>\n        );\n    }\n\n    private isRecipient(role: ITemplateRole): boolean {\n        return !!role.first_name || !!role.last_name || !!role.email;\n    }\n\n    private handleChange(event, index, role) {\n        this.value[index] = event.detail;\n        this.value = [...this.value];\n        this.recipientRoleUpdated.emit({\n            recipient: this.getRecipientByOption(event.detail),\n            role: role,\n        });\n    }\n}\n"]}