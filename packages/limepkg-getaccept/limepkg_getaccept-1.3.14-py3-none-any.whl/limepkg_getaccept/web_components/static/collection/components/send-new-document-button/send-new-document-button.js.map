{"version":3,"file":"send-new-document-button.js","sourceRoot":"","sources":["../../../src/components/send-new-document-button/send-new-document-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAQnD,MAAM,OAAO,IAAI;IAKL,UAAU;QACd,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO;gBACH,KAAK,EAAE,sBAAsB;gBAC7B,IAAI,EAAE,MAAM;gBACZ,WAAW,EAAE,2CAA2C;gBACxD,UAAU,EAAE,aAAa;aAC5B,CAAC;QACN,CAAC;QAED,OAAO;YACH,KAAK,EAAE,uBAAuB;YAC9B,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,mCAAmC;YAChD,UAAU,EAAE,cAAc;SAC7B,CAAC;IACN,CAAC;IAED;;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9D;IAEM,MAAM;QACT,IAAI,eAAe,GAAG,+BAA+B,CAAC;QACtD,eAAe,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QACtD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAEnE,OAAO;YACH,4DAAK,KAAK,EAAE,eAAe;gBACvB,6DAAK,KAAK,CAAM;gBAChB,mEACI,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAE,IAAI,EACV,IAAI,EAAC,OAAO,GACd;gBACF,qEACI,OAAO,EAAE,IAAI,EACb,KAAK,EAAE,UAAU,EACjB,OAAO,EAAE,IAAI,CAAC,iBAAiB,GACjC;gBACF,4DAAI,WAAW,CAAK,CAClB;SACT,CAAC;IACN,CAAC;IAEO,iBAAiB;QACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,SAAoB,CAAC,CAAC;IACzD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { EnumViews } from '../../models/EnumViews';\nimport { IDocumentButton } from './DocumentButton';\n\n@Component({\n    tag: 'send-new-document-button',\n    shadow: true,\n    styleUrl: 'send-new-document-button.scss',\n})\nexport class Root {\n    @Prop() public isSigning: boolean;\n    @Event() changeView: EventEmitter;\n    @Event() setDocumentType: EventEmitter<boolean>;\n\n    private buttonData(): IDocumentButton {\n        if (this.isSigning) {\n            return {\n                label: 'Document for signing',\n                icon: 'edit',\n                description: 'Used for signing sales related documents.',\n                buttonText: 'For signing',\n            };\n        }\n\n        return {\n            label: 'Document for tracking',\n            icon: 'search',\n            description: 'Used when no signing is required.',\n            buttonText: 'For tracking',\n        };\n    }\n\n    constructor() {\n        this.changeViewHandler = this.changeViewHandler.bind(this);\n    }\n\n    public render() {\n        let buttonContainer = 'new-document-button-container';\n        buttonContainer += !this.isSigning ? ' tracking' : '';\n        const { icon, label, buttonText, description } = this.buttonData();\n\n        return [\n            <div class={buttonContainer}>\n                <h4>{label}</h4>\n                <limel-icon\n                    class=\"new-document-icon\"\n                    name={icon}\n                    size=\"large\"\n                />\n                <limel-button\n                    primary={true}\n                    label={buttonText}\n                    onClick={this.changeViewHandler}\n                />\n                <p>{description}</p>\n            </div>,\n        ];\n    }\n\n    private changeViewHandler() {\n        this.changeView.emit(EnumViews.recipient);\n        this.setDocumentType.emit(this.isSigning as boolean);\n    }\n}\n"]}