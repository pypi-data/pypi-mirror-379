{"version":3,"file":"layout-video-library.js","sourceRoot":"","sources":["../../../src/components/layout-video-library/layout-video-library.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAK7C,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAOnD,MAAM,OAAO,kBAAkB;IASpB,iBAAiB;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED;;;sBAToC,EAAE;+BACM,KAAK;QAS7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClD;IAEM,MAAM;QACT,OAAO;YACH,4DAAK,KAAK,EAAC,yBAAyB;gBAChC,8EAAuB;gBACvB,gIAGI;gBACH,IAAI,CAAC,eAAe,IAAI,mEAAa;gBAEtC,2DAAI,KAAK,EAAC,YAAY,IACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACrB,OAAO,mBAAa,KAAK,EAAE,KAAK,GAAI,CAAC;gBACzC,CAAC,CAAC,CACD,CACH;SACT,CAAC;IACN,CAAC;IAEO,KAAK,CAAC,UAAU;QACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE;YACvC,OAAO;gBACH,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,WAAW,EAAE,KAAK,CAAC,WAAW;gBAC9B,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,SAAS,EAAE,KAAK,CAAC,SAAS;aAC7B,CAAC;QACN,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IACjC,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, State, Event } from '@stencil/core';\nimport { fetchVideos } from '../../services';\nimport { LimeWebComponentPlatform } from '@limetech/lime-web-components';\nimport { ISession } from '../../types/Session';\nimport { IVideo } from '../../types/Video';\nimport { EventEmitter } from 'events';\nimport { EnumViews } from '../../models/EnumViews';\n\n@Component({\n    tag: 'layout-video-library',\n    shadow: true,\n    styleUrl: 'layout-video-library.scss',\n})\nexport class LayoutVideoLibrary {\n    @Prop() platform: LimeWebComponentPlatform;\n    @Prop() public session: ISession;\n\n    @State() private videos: IVideo[] = [];\n    @State() private isLoadingVideos: boolean = false;\n\n    @Event() changeView: EventEmitter;\n\n    public componentWillLoad() {\n        this.loadVideos();\n    }\n\n    constructor() {\n        this.handelClose = this.handelClose.bind(this);\n    }\n\n    public render() {\n        return [\n            <div class=\"video-library-container\">\n                <h3>Select a video</h3>\n                <p>\n                    It will be present for the recipient when they open the\n                    document.\n                </p>\n                {this.isLoadingVideos && <ga-loader />}\n\n                <ul class=\"video-list\">\n                    {this.videos.map(video => {\n                        return <video-thumb video={video} />;\n                    })}\n                </ul>\n            </div>,\n        ];\n    }\n\n    private async loadVideos() {\n        this.isLoadingVideos = true;\n        const { videos } = await fetchVideos(this.platform, this.session);\n        this.videos = videos.map((video: IVideo) => {\n            return {\n                thumb_url: video.thumb_url,\n                video_id: video.video_id,\n                video_title: video.video_title,\n                video_type: video.video_type,\n                video_url: video.video_url,\n            };\n        });\n        this.isLoadingVideos = false;\n    }\n\n    private handelClose() {\n        this.changeView.emit(EnumViews.sendDocument);\n    }\n}\n"]}