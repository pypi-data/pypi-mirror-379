"""Test reaction equations."""

import numpy as np

# Test values come from pychegp code


def test_arrhenius():
    from freckll.reactions.reactions import arrhenius_constant

    temperature = np.array([
        1846.3,
        1827.5,
        1764.8,
        1651.1,
        1398.2,
        1266.1,
        1349.5,
        1515.0,
        1676.1,
        1834.9,
        1986.0,
        2176.5,
        2412.0,
    ])
    k0 = arrhenius_constant(a=1.977e18, n=-7.5, er=22900.0, temperature=temperature)

    expected = np.array([
        2.58288430e-12,
        2.45486592e-12,
        2.04360183e-12,
        1.37797390e-12,
        3.90188815e-13,
        1.48728911e-13,
        2.81876773e-13,
        7.55663882e-13,
        1.51403300e-12,
        2.50502748e-12,
        3.57632056e-12,
        4.93623891e-12,
        6.38116678e-12,
    ])

    np.testing.assert_allclose(k0, expected)


def test_collision_reaction():
    from freckll.reactions.common import collision_rate_limit
    from freckll.species import SpeciesFormula

    reactats = SpeciesFormula("CH3")
    k0 = np.array([
        2.30619237e-11,
        1.31264193e-11,
        6.88277557e-12,
        3.80031234e-12,
        3.02367037e-12,
        1.43511975e-12,
        3.08418410e-13,
        5.30003132e-14,
        9.04939281e-15,
        1.53248255e-15,
        2.40874692e-16,
        2.34637676e-17,
        9.02245617e-19,
    ])

    ki = np.array([
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
        5.997e-11,
    ])

    m = np.array([
        3.57581283e20,
        7.58837183e19,
        1.61989375e19,
        3.28066710e18,
        5.42973748e17,
        7.62225561e16,
        1.63528555e16,
        4.77902996e15,
        1.37736280e15,
        3.84935743e14,
        9.48470847e13,
        1.58797461e13,
        1.13167872e12,
    ])

    temperature = np.array([
        1846.3,
        1827.5,
        1764.8,
        1651.1,
        1398.2,
        1266.1,
        1349.5,
        1515.0,
        1676.1,
        1834.9,
        1986.0,
        2176.5,
        2412.0,
    ])

    result = collision_rate_limit(
        k_rate=k0, k_inf=ki, reactants=[reactats, reactats], m_concentration=m, temperature=temperature
    )

    expected = np.array([
        2.30619237e-11,
        1.31264193e-11,
        6.88277557e-12,
        3.80031234e-12,
        3.02367037e-12,
        1.43511975e-12,
        3.08418410e-13,
        5.30003132e-14,
        9.04939281e-15,
        1.53248255e-15,
        2.40874692e-16,
        2.34637676e-17,
        9.02245617e-19,
    ])

    np.testing.assert_allclose(result, expected)


def test_collision_reaction_single_species():
    from freckll.reactions.common import collision_rate_limit
    from freckll.species import SpeciesFormula

    reactats = SpeciesFormula("C2H3")
    k0 = np.array([
        2.58288430e-12,
        2.45486592e-12,
        2.04360183e-12,
        1.37797390e-12,
        3.90188815e-13,
        1.48728911e-13,
        2.81876773e-13,
        7.55663882e-13,
        1.51403300e-12,
        2.50502748e-12,
        3.57632056e-12,
        4.93623891e-12,
        6.38116678e-12,
    ])

    ki = np.array([
        3.92819741e09,
        3.51376545e09,
        2.38137335e09,
        1.09076510e09,
        1.21823173e08,
        2.73684009e07,
        7.26834679e07,
        3.67200174e08,
        1.30688200e09,
        3.67240295e09,
        8.41944528e09,
        2.03364146e10,
        4.99015840e10,
    ])
    m = np.array([
        3.57581239e20,
        7.58837113e19,
        1.61989364e19,
        3.28066698e18,
        5.42973739e17,
        7.62225555e16,
        1.63528555e16,
        4.77902996e15,
        1.37736280e15,
        3.84935743e14,
        9.48470847e13,
        1.58797461e13,
        1.13167872e12,
    ])

    result = collision_rate_limit(k_rate=k0, k_inf=ki, reactants=[reactats], m_concentration=m, temperature=1846.3)

    expected = np.array([
        2.58288430e-12,
        2.45486592e-12,
        2.04360183e-12,
        1.37797390e-12,
        3.90188815e-13,
        1.48728911e-13,
        2.81876773e-13,
        7.55663882e-13,
        1.51403300e-12,
        2.50502748e-12,
        3.57632056e-12,
        4.93623891e-12,
        6.38116678e-12,
    ])

    np.testing.assert_allclose(result, expected)


def test_troe_falloff():
    from freckll.reactions.falloff import troe_falloff_term

    k0 = np.array([
        2.58288430e-12,
        2.45486592e-12,
        2.04360183e-12,
        1.37797390e-12,
        3.90188815e-13,
        1.48728911e-13,
        2.81876773e-13,
        7.55663882e-13,
        1.51403300e-12,
        2.50502748e-12,
        3.57632056e-12,
        4.93623891e-12,
        6.38116678e-12,
    ])
    ki = np.array([
        3.92819741e09,
        3.51376545e09,
        2.38137335e09,
        1.09076510e09,
        1.21823173e08,
        2.73684009e07,
        7.26834679e07,
        3.67200174e08,
        1.30688200e09,
        3.67240295e09,
        8.41944528e09,
        2.03364146e10,
        4.99015840e10,
    ])

    m = np.array([
        3.57581239e20,
        7.58837113e19,
        1.61989364e19,
        3.28066698e18,
        5.42973739e17,
        7.62225555e16,
        1.63528555e16,
        4.77902996e15,
        1.37736280e15,
        3.84935743e14,
        9.48470847e13,
        1.58797461e13,
        1.13167872e12,
    ])

    temperature = np.array([
        1846.3,
        1827.5,
        1764.8,
        1651.1,
        1398.2,
        1266.1,
        1349.5,
        1515.0,
        1676.1,
        1834.9,
        1986.0,
        2176.5,
        2412.0,
    ])

    result = troe_falloff_term(k0=k0, kinf=ki, m=m, temperature=temperature, a_troe=0.35, t3=1, t1=100000000.0, t2=1e18)

    expected = np.array([
        -0.36310058,
        -0.25167942,
        -0.18359401,
        -0.14316149,
        -0.12235864,
        -0.09769283,
        -0.07667554,
        -0.06302549,
        -0.05375279,
        -0.047021,
        -0.04174271,
        -0.03677556,
        -0.03179401,
    ])

    np.testing.assert_allclose(result, 10**expected)


def test_inverse_reaction():
    from freckll.reactions.common import invert_reaction

    thermo_inv_react = np.array([
        [
            [12.62082296, 43.93447316],
            [12.60684593, 43.79139722],
            [12.56089401, 43.30613095],
            [12.48145494, 42.39289976],
            [12.34139365, 40.19064007],
            [12.30675329, 38.93324418],
            [12.32433885, 39.7363809],
            [12.39746399, 41.23895131],
            [12.49836647, 42.59750807],
            [12.61233827, 43.84784581],
            [12.72630024, 44.96428713],
            [12.87055159, 46.28073248],
            [13.04258597, 47.78383352],
        ],
        [
            [3.11055054, 22.32493579],
            [3.10090597, 22.28350494],
            [3.06789551, 22.14281277],
            [3.00438637, 21.87710568],
            [2.84180557, 21.22845151],
            [2.74109214, 20.85067572],
            [2.80619631, 21.09272593],
            [2.92108366, 21.53891856],
            [3.01878527, 21.93676254],
            [3.10471573, 22.29985338],
            [3.17890332, 22.62266544],
            [3.26395624, 23.0027927],
            [3.35857565, 23.43761169],
        ],
    ]).transpose((0, 2, 1))

    thermo_inv_prod = np.array([
        [
            [6.51067764, 50.1485245],
            [6.38599466, 49.95784399],
            [5.95543435, 49.31183081],
            [5.11132287, 48.09905319],
            [2.86824424, 45.18989141],
            [1.43038391, 43.53807948],
            [2.36352765, 44.59240902],
            [3.97553778, 46.57204051],
            [5.30444395, 48.37043994],
            [6.4353076, 50.03306286],
            [7.37918341, 51.52379937],
            [8.42035149, 53.28897015],
            [9.52274275, 55.31367553],
        ]
    ]).transpose((0, 2, 1))

    k0 = np.array([
        4.07782082e-15,
        3.37614075e-15,
        1.74697157e-15,
        4.65558639e-16,
        1.13661745e-17,
        9.06386210e-19,
        4.73955559e-18,
        7.36490488e-17,
        6.32317022e-16,
        3.63831820e-15,
        1.48313288e-14,
        6.60440701e-14,
        3.02056015e-13,
    ])

    kinf = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

    temperature = np.array([
        1846.3,
        1827.5,
        1764.8,
        1651.1,
        1398.2,
        1266.1,
        1349.5,
        1515.0,
        1676.1,
        1834.9,
        1986.0,
        2176.5,
        2412.0,
    ])

    result_k0, result_kinv, result_keq = invert_reaction(
        thermo_inv_reactants=thermo_inv_react,
        thermo_inv_products=thermo_inv_prod,
        k0=k0,
        k_inf=kinf,
        temperature=temperature,
    )

    expected_k0 = np.array([
        1.04406122e-36,
        9.40768311e-37,
        6.54897687e-37,
        3.18240163e-37,
        4.32130554e-38,
        1.12890471e-38,
        2.71274895e-38,
        1.17503430e-37,
        3.75890553e-37,
        9.80377048e-37,
        2.13889988e-36,
        4.96395100e-36,
        1.18969053e-35,
    ])

    expected_kinv = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

    expected_keq = np.array([
        3.90572960e21,
        3.58870586e21,
        2.66754884e21,
        1.46291604e21,
        2.63026403e20,
        8.02889920e19,
        1.74714125e20,
        6.26782117e20,
        1.68218386e21,
        3.71114175e21,
        6.93409212e21,
        1.33047385e22,
        2.53894611e22,
    ])

    np.testing.assert_allclose(result_k0, expected_k0)
    np.testing.assert_allclose(result_kinv, expected_kinv)
    np.testing.assert_allclose(result_keq, expected_keq)


def test_invert_two():
    from freckll.reactions.common import invert_reaction

    thermo_inv_react = np.array([
        [
            [1.39903735, 59.59142273],
            [1.24102823, 59.41990228],
            [0.69171777, 58.83680744],
            [-0.4017315, 57.7333641],
            [-3.41284697, 55.033542],
            [-5.42124778, 53.46211744],
            [-4.11105441, 54.46863998],
            [-1.90743436, 56.32620927],
            [-0.14963445, 57.98132217],
            [1.30357882, 59.4875944],
            [2.48651941, 60.82101559],
            [3.76025362, 62.38159736],
            [5.07443463, 64.15061228],
        ]
    ]).transpose((0, 2, 1))
    thermo_inv_prod = np.array([
        [
            [8.47271071, 41.49035985],
            [8.44763073, 41.37869243],
            [8.36268442, 41.00031179],
            [8.20317145, 40.28921006],
            [7.8183272, 38.57278133],
            [7.59655085, 37.58612878],
            [7.73849157, 38.21719122],
            [8.0017809, 39.39082992],
            [8.23888349, 40.44846696],
            [8.45752364, 41.4227428],
            [8.65381781, 42.29603681],
            [8.88726682, 43.3327765],
            [9.15719844, 44.52956289],
        ],
        [
            [-3.86679318, 30.75716691],
            [-3.9510936, 30.71287275],
            [-4.24487974, 30.56212537],
            [-4.83296667, 30.27610507],
            [-6.47374988, 29.5716466],
            [-7.58390178, 29.15820066],
            [-6.85835288, 29.42332717],
            [-5.64967327, 29.90981274],
            [-4.69699987, 30.34046644],
            [-3.91771074, 30.73035645],
            [-3.28913563, 31.07409449],
            [-2.61815956, 31.4749756],
            [-1.932018, 31.9279543],
        ],
    ]).transpose((0, 2, 1))

    k0 = np.array([
        2.14302301e-12,
        2.06574483e-12,
        1.82022574e-12,
        1.42193639e-12,
        7.41243112e-13,
        4.89248087e-13,
        6.40569833e-13,
        1.02172631e-12,
        1.50441208e-12,
        2.09595982e-12,
        2.77130309e-12,
        3.78600113e-12,
        5.30198818e-12,
    ])
    kinf = np.zeros_like(k0)
    temperature = np.array([
        1846.3,
        1827.5,
        1764.8,
        1651.1,
        1398.2,
        1266.1,
        1349.5,
        1515.0,
        1676.1,
        1834.9,
        1986.0,
        2176.5,
        2412.0,
    ])

    k0inv, _, keq = invert_reaction(
        thermo_inv_reactants=thermo_inv_react,
        thermo_inv_products=thermo_inv_prod,
        k0=k0,
        k_inf=kinf,
        temperature=temperature,
    )

    expected_k0inv = np.array([
        1.08169270e11,
        1.01914639e11,
        8.27567529e10,
        5.43819482e10,
        1.65153289e10,
        7.26398010e09,
        1.24409527e10,
        3.01567649e10,
        5.99472680e10,
        1.04348058e11,
        1.62322915e11,
        2.58871814e11,
        4.15392708e11,
    ])

    expected_keq = np.array([
        1.98117544e-23,
        2.02693633e-23,
        2.19948907e-23,
        2.61472131e-23,
        4.48821283e-23,
        6.73526194e-23,
        5.14888088e-23,
        3.38805014e-23,
        2.50955903e-23,
        2.00862370e-23,
        1.70727780e-23,
        1.46250033e-23,
        1.27637970e-23,
    ])

    np.testing.assert_allclose(k0inv, expected_k0inv)
    np.testing.assert_allclose(keq, expected_keq)
