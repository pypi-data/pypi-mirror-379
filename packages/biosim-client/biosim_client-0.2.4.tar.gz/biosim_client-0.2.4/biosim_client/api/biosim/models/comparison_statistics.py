"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self


class ComparisonStatistics(BaseModel):
    """
    ComparisonStatistics
    """

    dataset_name: StrictStr
    simulator_version_i: StrictStr
    simulator_version_j: StrictStr
    var_names: List[StrictStr]
    score: Optional[List[Union[StrictFloat, StrictInt]]] = None
    is_close: Optional[List[StrictBool]] = None
    error_message: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "dataset_name",
        "simulator_version_i",
        "simulator_version_j",
        "var_names",
        "score",
        "is_close",
        "error_message",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComparisonStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict["score"] = None

        # set to None if is_close (nullable) is None
        # and model_fields_set contains the field
        if self.is_close is None and "is_close" in self.model_fields_set:
            _dict["is_close"] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict["error_message"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComparisonStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataset_name": obj.get("dataset_name"),
            "simulator_version_i": obj.get("simulator_version_i"),
            "simulator_version_j": obj.get("simulator_version_j"),
            "var_names": obj.get("var_names"),
            "score": obj.get("score"),
            "is_close": obj.get("is_close"),
            "error_message": obj.get("error_message"),
        })
        return _obj
