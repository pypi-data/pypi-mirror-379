"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from biosim_client.api.biosim.api_client import ApiClient, RequestSerialized
from biosim_client.api.biosim.api_response import ApiResponse
from biosim_client.api.biosim.models.verify_workflow_output import VerifyWorkflowOutput
from biosim_client.api.biosim.rest import RESTResponseType


class VerificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_verify_output(
        self,
        workflow_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyWorkflowOutput:
        """Retrieve verification report for OMEX/COMBINE archive


        :param workflow_id: (required)
        :type workflow_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._get_verify_output_serialize(
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_verify_output_with_http_info(
        self,
        workflow_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyWorkflowOutput]:
        """Retrieve verification report for OMEX/COMBINE archive


        :param workflow_id: (required)
        :type workflow_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._get_verify_output_serialize(
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_verify_output_without_preload_content(
        self,
        workflow_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve verification report for OMEX/COMBINE archive


        :param workflow_id: (required)
        :type workflow_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._get_verify_output_serialize(
            workflow_id=workflow_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_verify_output_serialize(
        self,
        workflow_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workflow_id is not None:
            _path_params["workflow_id"] = workflow_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/verify/{workflow_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def verify_omex(
        self,
        uploaded_file: Annotated[
            Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
            Field(description="OMEX/COMBINE archive containing a deterministic SBML model"),
        ],
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        simulators: Annotated[
            Optional[List[StrictStr]], Field(description="List of simulators 'name' or 'name:version' to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        cache_buster: Annotated[
            Optional[StrictStr],
            Field(description="Optional unique id for cache busting (unique string to force new simulation runs)."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyWorkflowOutput:
        """Request verification report for OMEX/COMBINE archive across simulators


        :param uploaded_file: OMEX/COMBINE archive containing a deterministic SBML model (required)
        :type uploaded_file: bytearray
        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param simulators: List of simulators 'name' or 'name:version' to compare.
        :type simulators: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param cache_buster: Optional unique id for cache busting (unique string to force new simulation runs).
        :type cache_buster: str
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_omex_serialize(
            uploaded_file=uploaded_file,
            workflow_id_prefix=workflow_id_prefix,
            simulators=simulators,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            cache_buster=cache_buster,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def verify_omex_with_http_info(
        self,
        uploaded_file: Annotated[
            Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
            Field(description="OMEX/COMBINE archive containing a deterministic SBML model"),
        ],
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        simulators: Annotated[
            Optional[List[StrictStr]], Field(description="List of simulators 'name' or 'name:version' to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        cache_buster: Annotated[
            Optional[StrictStr],
            Field(description="Optional unique id for cache busting (unique string to force new simulation runs)."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyWorkflowOutput]:
        """Request verification report for OMEX/COMBINE archive across simulators


        :param uploaded_file: OMEX/COMBINE archive containing a deterministic SBML model (required)
        :type uploaded_file: bytearray
        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param simulators: List of simulators 'name' or 'name:version' to compare.
        :type simulators: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param cache_buster: Optional unique id for cache busting (unique string to force new simulation runs).
        :type cache_buster: str
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_omex_serialize(
            uploaded_file=uploaded_file,
            workflow_id_prefix=workflow_id_prefix,
            simulators=simulators,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            cache_buster=cache_buster,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def verify_omex_without_preload_content(
        self,
        uploaded_file: Annotated[
            Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
            Field(description="OMEX/COMBINE archive containing a deterministic SBML model"),
        ],
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        simulators: Annotated[
            Optional[List[StrictStr]], Field(description="List of simulators 'name' or 'name:version' to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        cache_buster: Annotated[
            Optional[StrictStr],
            Field(description="Optional unique id for cache busting (unique string to force new simulation runs)."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Request verification report for OMEX/COMBINE archive across simulators


        :param uploaded_file: OMEX/COMBINE archive containing a deterministic SBML model (required)
        :type uploaded_file: bytearray
        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param simulators: List of simulators 'name' or 'name:version' to compare.
        :type simulators: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param cache_buster: Optional unique id for cache busting (unique string to force new simulation runs).
        :type cache_buster: str
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_omex_serialize(
            uploaded_file=uploaded_file,
            workflow_id_prefix=workflow_id_prefix,
            simulators=simulators,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            cache_buster=cache_buster,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _verify_omex_serialize(
        self,
        uploaded_file,
        workflow_id_prefix,
        simulators,
        include_outputs,
        user_description,
        rel_tol,
        abs_tol_min,
        abs_tol_scale,
        cache_buster,
        observables,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {
            "simulators": "multi",
            "observables": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if workflow_id_prefix is not None:
            _query_params.append(("workflow_id_prefix", workflow_id_prefix))

        if simulators is not None:
            _query_params.append(("simulators", simulators))

        if include_outputs is not None:
            _query_params.append(("include_outputs", include_outputs))

        if user_description is not None:
            _query_params.append(("user_description", user_description))

        if rel_tol is not None:
            _query_params.append(("rel_tol", rel_tol))

        if abs_tol_min is not None:
            _query_params.append(("abs_tol_min", abs_tol_min))

        if abs_tol_scale is not None:
            _query_params.append(("abs_tol_scale", abs_tol_scale))

        if cache_buster is not None:
            _query_params.append(("cache_buster", cache_buster))

        if observables is not None:
            _query_params.append(("observables", observables))

        # process the header parameters
        # process the form parameters
        if uploaded_file is not None:
            _files["uploaded_file"] = uploaded_file
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["multipart/form-data"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/verify/omex",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def verify_runs(
        self,
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        biosimulations_run_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of biosimulations run IDs to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyWorkflowOutput:
        """Request verification report for biosimulation runs by run IDs


        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param biosimulations_run_ids: List of biosimulations run IDs to compare.
        :type biosimulations_run_ids: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_runs_serialize(
            workflow_id_prefix=workflow_id_prefix,
            biosimulations_run_ids=biosimulations_run_ids,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def verify_runs_with_http_info(
        self,
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        biosimulations_run_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of biosimulations run IDs to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyWorkflowOutput]:
        """Request verification report for biosimulation runs by run IDs


        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param biosimulations_run_ids: List of biosimulations run IDs to compare.
        :type biosimulations_run_ids: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_runs_serialize(
            workflow_id_prefix=workflow_id_prefix,
            biosimulations_run_ids=biosimulations_run_ids,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def verify_runs_without_preload_content(
        self,
        workflow_id_prefix: Annotated[Optional[StrictStr], Field(description="Prefix for the workflow id.")] = None,
        biosimulations_run_ids: Annotated[
            Optional[List[StrictStr]], Field(description="List of biosimulations run IDs to compare.")
        ] = None,
        include_outputs: Annotated[
            Optional[StrictBool],
            Field(description="Whether to include the output data on which the comparison is based."),
        ] = None,
        user_description: Annotated[
            Optional[StrictStr], Field(description="User description of the verification run.")
        ] = None,
        rel_tol: Annotated[
            Optional[Union[StrictFloat, StrictInt]], Field(description="Relative tolerance for proximity comparison.")
        ] = None,
        abs_tol_min: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        abs_tol_scale: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(description="Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale."),
        ] = None,
        observables: Annotated[
            Optional[List[StrictStr]], Field(description="List of observables to include in the return data.")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Request verification report for biosimulation runs by run IDs


        :param workflow_id_prefix: Prefix for the workflow id.
        :type workflow_id_prefix: str
        :param biosimulations_run_ids: List of biosimulations run IDs to compare.
        :type biosimulations_run_ids: List[str]
        :param include_outputs: Whether to include the output data on which the comparison is based.
        :type include_outputs: bool
        :param user_description: User description of the verification run.
        :type user_description: str
        :param rel_tol: Relative tolerance for proximity comparison.
        :type rel_tol: float
        :param abs_tol_min: Min absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_min: float
        :param abs_tol_scale: Scale for absolute tolerance, where atol = max(atol_min, max(arr1,arr2)*atol_scale.
        :type abs_tol_scale: float
        :param observables: List of observables to include in the return data.
        :type observables: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """

        _param = self._verify_runs_serialize(
            workflow_id_prefix=workflow_id_prefix,
            biosimulations_run_ids=biosimulations_run_ids,
            include_outputs=include_outputs,
            user_description=user_description,
            rel_tol=rel_tol,
            abs_tol_min=abs_tol_min,
            abs_tol_scale=abs_tol_scale,
            observables=observables,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifyWorkflowOutput",
            "422": "HTTPValidationError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _verify_runs_serialize(
        self,
        workflow_id_prefix,
        biosimulations_run_ids,
        include_outputs,
        user_description,
        rel_tol,
        abs_tol_min,
        abs_tol_scale,
        observables,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {
            "biosimulations_run_ids": "multi",
            "observables": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if workflow_id_prefix is not None:
            _query_params.append(("workflow_id_prefix", workflow_id_prefix))

        if biosimulations_run_ids is not None:
            _query_params.append(("biosimulations_run_ids", biosimulations_run_ids))

        if include_outputs is not None:
            _query_params.append(("include_outputs", include_outputs))

        if user_description is not None:
            _query_params.append(("user_description", user_description))

        if rel_tol is not None:
            _query_params.append(("rel_tol", rel_tol))

        if abs_tol_min is not None:
            _query_params.append(("abs_tol_min", abs_tol_min))

        if abs_tol_scale is not None:
            _query_params.append(("abs_tol_scale", abs_tol_scale))

        if observables is not None:
            _query_params.append(("observables", observables))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/verify/runs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
