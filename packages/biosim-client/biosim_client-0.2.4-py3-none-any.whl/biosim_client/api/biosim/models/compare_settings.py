"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self


class CompareSettings(BaseModel):
    """
    CompareSettings
    """

    user_description: StrictStr
    include_outputs: StrictBool
    rel_tol: Union[StrictFloat, StrictInt]
    abs_tol_min: Union[StrictFloat, StrictInt]
    abs_tol_scale: Union[StrictFloat, StrictInt]
    observables: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "user_description",
        "include_outputs",
        "rel_tol",
        "abs_tol_min",
        "abs_tol_scale",
        "observables",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompareSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if observables (nullable) is None
        # and model_fields_set contains the field
        if self.observables is None and "observables" in self.model_fields_set:
            _dict["observables"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompareSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_description": obj.get("user_description"),
            "include_outputs": obj.get("include_outputs"),
            "rel_tol": obj.get("rel_tol"),
            "abs_tol_min": obj.get("abs_tol_min"),
            "abs_tol_scale": obj.get("abs_tol_scale"),
            "observables": obj.get("observables"),
        })
        return _obj
