"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictStr
from typing_extensions import Self

from biosim_client.api.biosim.models.compare_settings import CompareSettings
from biosim_client.api.biosim.models.generate_statistics_activity_output import GenerateStatisticsActivityOutput
from biosim_client.api.biosim.models.verify_workflow_status import VerifyWorkflowStatus


class VerifyWorkflowOutput(BaseModel):
    """
    VerifyWorkflowOutput
    """

    workflow_id: StrictStr
    compare_settings: CompareSettings
    workflow_status: VerifyWorkflowStatus
    timestamp: StrictStr
    workflow_run_id: Optional[StrictStr] = None
    workflow_error: Optional[StrictStr] = None
    workflow_results: Optional[GenerateStatisticsActivityOutput] = None
    __properties: ClassVar[List[str]] = [
        "workflow_id",
        "compare_settings",
        "workflow_status",
        "timestamp",
        "workflow_run_id",
        "workflow_error",
        "workflow_results",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyWorkflowOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compare_settings
        if self.compare_settings:
            _dict["compare_settings"] = self.compare_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_results
        if self.workflow_results:
            _dict["workflow_results"] = self.workflow_results.to_dict()
        # set to None if workflow_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_run_id is None and "workflow_run_id" in self.model_fields_set:
            _dict["workflow_run_id"] = None

        # set to None if workflow_error (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_error is None and "workflow_error" in self.model_fields_set:
            _dict["workflow_error"] = None

        # set to None if workflow_results (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_results is None and "workflow_results" in self.model_fields_set:
            _dict["workflow_results"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyWorkflowOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workflow_id": obj.get("workflow_id"),
            "compare_settings": CompareSettings.from_dict(obj["compare_settings"])
            if obj.get("compare_settings") is not None
            else None,
            "workflow_status": obj.get("workflow_status"),
            "timestamp": obj.get("timestamp"),
            "workflow_run_id": obj.get("workflow_run_id"),
            "workflow_error": obj.get("workflow_error"),
            "workflow_results": GenerateStatisticsActivityOutput.from_dict(obj["workflow_results"])
            if obj.get("workflow_results") is not None
            else None,
        })
        return _obj
