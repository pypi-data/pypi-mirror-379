"""
biosim-server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from biosim_client.api.biosim.models.biosim_simulation_run import BiosimSimulationRun
from biosim_client.api.biosim.models.hdf5_file import HDF5File


class SimulationRunInfo(BaseModel):
    """
    SimulationRunInfo
    """

    biosim_sim_run: BiosimSimulationRun
    hdf5_file: HDF5File
    __properties: ClassVar[List[str]] = ["biosim_sim_run", "hdf5_file"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationRunInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of biosim_sim_run
        if self.biosim_sim_run:
            _dict["biosim_sim_run"] = self.biosim_sim_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdf5_file
        if self.hdf5_file:
            _dict["hdf5_file"] = self.hdf5_file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationRunInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biosim_sim_run": BiosimSimulationRun.from_dict(obj["biosim_sim_run"])
            if obj.get("biosim_sim_run") is not None
            else None,
            "hdf5_file": HDF5File.from_dict(obj["hdf5_file"]) if obj.get("hdf5_file") is not None else None,
        })
        return _obj
