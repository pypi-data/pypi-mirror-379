Metadata-Version: 2.4
Name: autocleaneeg-pipeline
Version: 2.3.0
Summary: A modular framework for automated EEG data processing, built on MNE-Python
Project-URL: Homepage, https://github.com/cincibrainlab/autoclean_pipeline
Project-URL: Repository, https://github.com/cincibrainlab/autoclean_pipeline
Project-URL: Documentation, https://cincibrainlab.github.io/autoclean_pipeline/
Project-URL: Issues, https://github.com/cincibrainlab/autoclean_pipeline/issues
Author-email: Ernest Pedapati <ernest.pedapati@cchmc.org>, Gavin Gammoh <gavin.gammoh@cchmc.org>
License: MIT License
        
        Copyright (c) 2024 Cincinnati Children's Hospital Medical Center
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE. 
License-File: LICENSE
Keywords: bids,eeg,electrophysiology,mne-python,neuroscience,preprocessing,signal-processing
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Medical Science Apps.
Requires-Python: <3.14,>=3.10
Requires-Dist: auth0-python>=4.7.1
Requires-Dist: autoclean-eeg2source>=0.1.0
Requires-Dist: autocleaneeg-icvision>=0.1.0
Requires-Dist: autocleaneeg-view
Requires-Dist: autoreject>=0.3.0
Requires-Dist: bctpy>=0.6.1
Requires-Dist: cryptography>=3.4.8
Requires-Dist: cython>=0.29.0
Requires-Dist: defusedxml
Requires-Dist: eeglabio>=0.0.3
Requires-Dist: fastparquet>=2024.11.0
Requires-Dist: fastplotlib>=0.3.0
Requires-Dist: fooof>=1.1.0
Requires-Dist: inquirer>=3.1.0
Requires-Dist: loguru>=0.6.0
Requires-Dist: matplotlib>=3.4.0
Requires-Dist: mne-bids>=0.10
Requires-Dist: mne-connectivity>=0.7.0
Requires-Dist: mne-icalabel>=0.8.0
Requires-Dist: mne-qt-browser>=0.3.0
Requires-Dist: mne>=1.7.0
Requires-Dist: networkx>=3.4.2
Requires-Dist: nibabel>=5.3.2
Requires-Dist: numpy>=1.20.0
Requires-Dist: onnxruntime>=1.22.1
Requires-Dist: openai>=1.78.1
Requires-Dist: pandas>=1.3.0
Requires-Dist: pillow>=9.0.0
Requires-Dist: platformdirs>=3.0.0
Requires-Dist: pybv>=0.6.0
Requires-Dist: pydantic>=2.0
Requires-Dist: pyjsonviewer>=0.1.0
Requires-Dist: pymupdf
Requires-Dist: pymupdf>=1.0.0
Requires-Dist: pyopengl-accelerate
Requires-Dist: pyprep>=0.3.0
Requires-Dist: pyqt5>=5.15.11
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: python-picard==0.8
Requires-Dist: python-ulid>=1.0.0
Requires-Dist: pyvistaqt>=0.11.2
Requires-Dist: pywavelets>=1.5.0
Requires-Dist: pyyaml>=5.1
Requires-Dist: qtpy>=2.4.3
Requires-Dist: reportlab>=3.6.0
Requires-Dist: requests>=2.25.0
Requires-Dist: rich>=10.0.0
Requires-Dist: schema>=0.7.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: seaborn>=0.13.2
Requires-Dist: textual-dev>=0.11.0
Requires-Dist: textual>=0.11.0
Requires-Dist: torch>=1.9.0
Description-Content-Type: text/markdown

# AutoCleanEEG Pipeline

[![Python](https://img.shields.io/badge/python-3.10%2B-blue.svg)](https://www.python.org/downloads/)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

A modular framework for automated EEG data processing, built on MNE‑Python.



## Features

- Framework for automated EEG preprocessing with "lego block" modularity
- Support for multiple EEG paradigms (ASSR, Chirp, MMN, Resting State) 
- BIDS-compatible data organization and comprehensive quality control
- Extensible plugin system for file formats, montages, and event processing
- Research-focused workflow: single file testing → parameter tuning → batch processing
- Detailed output: BIDS‑compatible derivatives, single task log file, stage files, exports, and QA visualizations

## Installation (uv)

Use Astral's uv for fast, isolated installs. If you don't have uv yet, see https://docs.astral.sh/uv/

- Install CLI (recommended for users):

```bash
uv tool install autocleaneeg-pipeline
autocleaneeg-pipeline --help
```

- Upgrade or remove:

```bash
uv tool upgrade autocleaneeg-pipeline
uv tool uninstall autocleaneeg-pipeline
```

- Development install from source:

```bash
git clone https://github.com/cincibrainlab/autocleaneeg_pipeline.git
cd autoclean_pipeline
uv tool install -e --upgrade .
```

## Quick Start

Process a file using a built-in task:

```bash
autocleaneeg-pipeline process RestingEyesOpen /path/to/data.raw
```

List tasks and show overrides:

```bash
autocleaneeg-pipeline task list


## Output Structure

Each processing task writes to a self‑contained folder under your chosen output directory. The structure is designed to keep task‑level artifacts at the task root while maintaining a clean BIDS derivatives tree.

Example (per task):

```
<task>/
  bids/
    dataset_description.json
    derivatives/
      dataset_description.json
      01_import/
      02_resample/
      ...
      16_comp/
    sub-<id>/eeg/... (primary BIDS data written by mne-bids)

  exports/            # Final exported files and convenience copies (CSV/log)
  ica/                # ICA FIF files + ica_control_sheet.csv
  logs/
    pipeline.log      # Single consolidated log for all runs in this task
  qa/
    *_fastplot_summary.(tiff|png)
  reports/
    run_reports/
      *_autoclean_report.pdf
      *_processing_log.csv       # Per-file processing CSVs
      *_autoclean_report_flagged_channels.tsv

  preprocessing_log.csv          # Combined, task-level processing log (no task prefix)
```

Key points:
- Task‑root folders use concise names: `exports/`, `ica/`, `logs/`, `qa/`, `reports/`.
- Stage files go directly under `bids/derivatives/` as numbered folders (no `intermediate/`).
- No reports or per‑subject folders are created in derivatives.
- `dataset_description.json` is present at both `bids/` and `bids/derivatives/`.


## BIDS + Branding

- The BIDS `dataset_description.json` is post‑processed to:
  - Set `Name` to the task name.
  - Add `GeneratedBy` entry for `autocleaneeg-pipeline` with version.
  - Remove placeholder Authors inserted by MNE‑BIDS if present.


## Logs

- A single log file per task lives at `<task>/logs/pipeline.log`.
- Console output level matches your `--verbose` choice; file logs capture the same level.
- If you want rotation (e.g., `10 MB`), we can enable it; default is a single growing file.


## Processing Logs (CSV)

- Per‑file: `<task>/reports/run_reports/<basename>_processing_log.csv`.
- Combined (task‑level): `<task>/preprocessing_log.csv` (no taskname prefix).
- A convenience copy of the per‑file CSV is dropped into `exports/`.


## ICA Artifacts

- ICA FIF files and the editable control sheet live in `<task>/ica/`:
  - `<task>/ica/<basename>-ica.fif`
  - `<task>/ica/ica_control_sheet.csv`


## QA Visualizations

- Fastplot summary images go to `<task>/qa/`.
- The review GUI auto‑discovers images from `reports/` and `qa/`.


## Removed Legacy Folders

This release removes the old locations and naming used during development:
- No `metadata/` folder at the task root (JSONs are in `reports/run_reports/`).
- No `final_files/` or `final_exports/` (use `exports/`).
- No `ica_fif/` (use `ica/`).
- No `qa_review_plots/` (use `qa/`).
- No versioned derivatives folder (e.g., `autoclean-vX`) — derivatives are directly under `bids/derivatives/`.


## CLI Tips

- Process a single file:

```bash
autocleaneeg-pipeline process RestingEyesOpen /path/to/file.set
```

- Open the review GUI for an output directory:

```bash
autocleaneeg-pipeline review --output /path/to/output
```

- Apply ICA control‑sheet edits (reads `<task>/ica/ica_control_sheet.csv` by default when a metadata path is provided):

```bash
autocleaneeg-pipeline process ica --metadata-dir /path/to/task/reports
```
```


## Documentation

Full documentation is available at [https://docs.autocleaneeg.org](https://docs.autocleaneeg.org)

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Cincinnati Children's Hospital Research Foundation
- Built with [MNE-Python](https://mne.tools/)
