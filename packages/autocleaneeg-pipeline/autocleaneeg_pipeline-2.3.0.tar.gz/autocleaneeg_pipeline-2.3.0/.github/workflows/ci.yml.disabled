name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick code quality checks that fail fast
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
            ${{ runner.os }}-pip-

      - name: Install code quality tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff mypy

      - name: Check code formatting with Black
        run: black --check --diff src/autoclean/

      - name: Check import sorting with isort
        run: isort --check-only --diff src/autoclean/

      - name: Lint with Ruff
        run: ruff check src/autoclean/

      # - name: Type check with mypy
      #   run: mypy src/autoclean/ --ignore-missing-imports

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit

      - name: Run Bandit security linter
        run: bandit -r src/autoclean/ -f json -o bandit-report.json || true

      - name: Run pip-audit for dependency vulnerabilities
        run: pip-audit --desc --output=audit-report.json --format=json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            audit-report.json

  # Matrix testing across Python versions and operating systems
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: code-quality  # Only run tests if code quality passes
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time while maintaining coverage
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-
            ${{ runner.os }}-pip-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openblas lapack

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install pytest pytest-cov pytest-xdist pytest-mock
          pip install -e .

      - name: Create test data directory
        run: |
          python -c "
          import os
          from pathlib import Path
          test_dir = Path('tests/fixtures/data')
          test_dir.mkdir(parents=True, exist_ok=True)
          print(f'Created test directory: {test_dir.absolute()}')
          "

      - name: Generate synthetic test data
        run: |
          python -c "
          from tests.fixtures.synthetic_data import generate_all_test_data
          generate_all_test_data()
          print('Synthetic test data generated successfully')
          "

      - name: Run unit tests with coverage
        run: pytest tests/unit/ --cov=autoclean --cov-report=xml --cov-report=term-missing --cov-fail-under=15 -v --tb=short --maxfail=10 -x

      - name: Test Python task file functionality
        run: |
          python -c "
          # Test our example task files work
          from pathlib import Path
          import tempfile
          from autoclean import Pipeline
          
          with tempfile.TemporaryDirectory() as temp_dir:
              pipeline = Pipeline(output_dir=temp_dir)
              
              # Test adding example task files
              examples_dir = Path('examples')
              task_files = [
                  'simple_resting_task.py',
                  'assr_default_new.py',
                  'advanced_custom_task.py'
              ]
              
              for task_file in task_files:
                  file_path = examples_dir / task_file
                  if file_path.exists():
                      pipeline.add_task(str(file_path))
                      print(f'[OK] Successfully loaded {task_file}')
                  else:
                      print(f'[WARN] {task_file} not found')
              
              tasks = pipeline.list_tasks()
              print(f'Total tasks available: {len(tasks)}')
              print(f'Tasks: {tasks}')
              print('[SUCCESS] Python task file system working correctly')
          "

      - name: Test backward compatibility
        run: |
          python -c "
          # Test that YAML workflows still work
          import tempfile
          from pathlib import Path
          from autoclean import Pipeline
          
          with tempfile.TemporaryDirectory() as temp_dir:
              try:
                  # Test with YAML config
                  pipeline = Pipeline(
                      output_dir=temp_dir
                  )
                  yaml_tasks = pipeline.list_tasks()
                  print(f'[OK] YAML tasks loaded: {len(yaml_tasks)}')
                  
                  # Test without YAML config  
                  pipeline2 = Pipeline(output_dir=temp_dir)
                  print('[OK] Pipeline works without YAML config')
                  
                  print('[SUCCESS] Backward compatibility maintained')
              except Exception as e:
                  print(f'[WARN] Backward compatibility test: {e}')
          "

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            tests/logs/
            tests/fixtures/data/
            coverage.xml
          retention-days: 7

  # Integration tests (run on a subset of configurations)
  integration-test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install pytest pytest-cov pytest-xdist pytest-mock
          pip install -e .

      - name: Generate synthetic test data
        run: |
          python -c "
          from tests.fixtures.synthetic_data import generate_all_test_data
          generate_all_test_data()
          "

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --tb=short \
            --maxfail=5
        continue-on-error: true  # Integration tests are allowed to fail for now

  # Build and packaging verification
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, security, test, build]
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "[SUCCESS] All required CI checks passed!"
            exit 0
          else
            echo "[FAILED] Some required CI checks failed:"
            echo "  Code Quality: ${{ needs.code-quality.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Build: ${{ needs.build.result }}"
            exit 1
          fi