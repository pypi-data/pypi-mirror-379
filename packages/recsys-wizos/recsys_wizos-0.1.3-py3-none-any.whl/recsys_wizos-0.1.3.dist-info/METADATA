Metadata-Version: 2.4
Name: recsys-wizos
Version: 0.1.3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: ipython>=8.10
Requires-Dist: jupyterlab>=3.0
Requires-Dist: notebook
Requires-Dist: kedro[jupyter]~=0.19.10
Requires-Dist: kedro-datasets[matplotlib-matplotlibwriter,pandas-csvdataset,pandas-exceldataset,pandas-parquetdataset,plotly-jsondataset,plotly-plotlydataset]>=3.0
Requires-Dist: kedro-viz>=6.7.0
Requires-Dist: scikit-learn~=1.5.1
Requires-Dist: seaborn~=0.12.1
Requires-Dist: spacy~=3.8
Requires-Dist: mlxtend~=0.23
Requires-Dist: pyodbc~=5.2.0
Requires-Dist: adlfs==2024.12.0
Requires-Dist: pyarrow~=19.0
Provides-Extra: docs
Requires-Dist: docutils<0.21; extra == "docs"
Requires-Dist: sphinx<7.3,>=5.3; extra == "docs"
Requires-Dist: sphinx_rtd_theme==2.0.0; extra == "docs"
Requires-Dist: nbsphinx==0.8.1; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints==1.20.2; extra == "docs"
Requires-Dist: sphinx_copybutton==0.5.2; extra == "docs"
Requires-Dist: ipykernel<7.0,>=5.3; extra == "docs"
Requires-Dist: Jinja2<3.2.0; extra == "docs"
Requires-Dist: myst-parser<2.1,>=1.0; extra == "docs"
Provides-Extra: dev
Requires-Dist: pytest-cov~=3.0; extra == "dev"
Requires-Dist: pytest-mock<2.0,>=1.7.1; extra == "dev"
Requires-Dist: pytest~=7.2; extra == "dev"
Requires-Dist: ruff~=0.8.0; extra == "dev"
Requires-Dist: nbstripout~=0.8.1; extra == "dev"
Provides-Extra: app
Requires-Dist: fastapi[standard]; extra == "app"
Requires-Dist: pydantic-settings>=2.0.0; extra == "app"

# RecSys

[![Powered by Kedro](https://img.shields.io/badge/powered_by-kedro-ffc900?logo=kedro)](https://kedro.org)

## Overview

This is your new Kedro project with Kedro-Viz setup, which was generated using `kedro 0.19.10`.

Take a look at the [Kedro documentation](https://docs.kedro.org) to get started.

## Rules and guidelines

In order to get the best out of the template:

* Don't remove any lines from the `.gitignore` file we provide
* Make sure your results can be reproduced by following a [data engineering convention](https://docs.kedro.org/en/stable/faq/faq.html#what-is-data-engineering-convention)
* Don't commit data to your repository
* Don't commit any credentials or your local configuration to your repository. Keep all your credentials and local configuration in `conf/local/`

## How to install dependencies

Declare any dependencies in `requirements.txt` for `pip` installation.

To install them, run:

```
pip install -r requirements.txt
```

## Initial configurations

If you want to make further changes to the source code, install the develpoment dependencies by first running:

```
pip install -e ."[dev]"
```

### Install ruff VSCode extension

If you use VSCode as your code editor, install the ruff [extension](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff)

### Install nbstripout

To automatically strip out all output cell contents before committing to `git`, install [`nbstripout`](https://github.com/kynan/nbstripout) with the following command:

```
nbstripout --install
```

This will run `nbstripout` before anything is committed to `git`.

> *Note:* Your output cells will be retained locally.

### Install pre-commit hook scriptsÂ¶

`pre-commit` is a framework for managing and maintaining multi-language pre-commit hooks. The hooks are configured in `.pre-commit-config.yaml` file. In order to enable them, run:

```
pre-commit install
```

## How to run your Kedro pipeline

You can run your Kedro project with:

```
kedro run
```

## How to test your Kedro project

Have a look at the files `src/tests/test_run.py` and `src/tests/pipelines/data_science/test_pipeline.py` for instructions on how to write your tests. Run the tests as follows:

```
pytest
```

To configure the coverage threshold, look at the `.coveragerc` file.

## Project dependencies

To see and update the dependency requirements for your project use `requirements.txt`. Install the project requirements with `pip install -r requirements.txt`.

[Further information about project dependencies](https://docs.kedro.org/en/stable/kedro_project_setup/dependencies.html#project-specific-dependencies)

## How to work with Kedro and notebooks

> Note: Using `kedro jupyter` or `kedro ipython` to run your notebook provides these variables in scope: `catalog`, `context`, `pipelines` and `session`.
>
> Jupyter, JupyterLab, and IPython are already included in the project requirements by default, so once you have run `pip install -r requirements.txt` you will not need to take any extra steps before you use them.

### Jupyter
To use Jupyter notebooks in your Kedro project, you need to install Jupyter:

```
pip install jupyter
```

After installing Jupyter, you can start a local notebook server:

```
kedro jupyter notebook
```

### JupyterLab
To use JupyterLab, you need to install it:

```
pip install jupyterlab
```

You can also start JupyterLab:

```
kedro jupyter lab
```

### IPython
And if you want to run an IPython session:

```
kedro ipython
```

[Further information about using notebooks for experiments within Kedro projects](https://docs.kedro.org/en/develop/notebooks_and_ipython/kedro_and_notebooks.html).
## Package your Kedro project

[Further information about building project documentation and packaging your project](https://docs.kedro.org/en/stable/tutorial/package_a_project.html).
