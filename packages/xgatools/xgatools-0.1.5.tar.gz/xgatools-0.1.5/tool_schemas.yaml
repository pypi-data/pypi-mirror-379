web_search:
  description: |
    Search the web for up-to-date information on a specific topic using the Tavily API. This tool allows you to gather real-time information from the internet to answer user queries,research topics, validate facts, and find recent developments. Results include titles, URLs, and publication dates. Use this tool for discovering relevant web pages before potentially crawling them for complete content.
  example: |
    <function_calls>
    <invoke name="web_search">
      <parameter name="query">what is AI and what are they building?</parameter>
      <parameter name="num_results">20</parameter>
    </invoke>
    </function_calls>

    <!-- Another search example -->
    <function_calls>
    <invoke name="web_search">
      <parameter name="query">latest AI research on transformer models</parameter>
      <parameter name="num_results">20</parameter>
    </invoke>
    </function_calls>

scrape_webpage:
  description: |
    Extract full text content from multiple webpages in a single operation. 
      IMPORTANT: You should ALWAYS collect multiple relevant URLs from web-search results and scrape them all in a single call for efficiency.This tool saves time by processing multiple pages simultaneously rather than one at a time. The extracted text includes the main content of each page without HTML markup.
  example: |
    <function_calls>
    <invoke name="scrape_webpage">
      <parameter name="urls">https://www.kortix.ai/,https://github.com/kortix-ai/suna</parameter>
    </invoke>
    </function_calls>

ask:
  description: |
    Ask user a question and wait for response. Use for: 1) Requesting clarification on ambiguous requirements, 2) Seeking confirmation before proceeding with high-impact changes, 3) Gathering additional information needed to complete a task, 4) Offering options and requesting user preference, 5) Validating assumptions when critical to task success. IMPORTANT: Use this tool only when user input is essential to proceed. Always provide clear context and options when applicable.
  example: |
    <function_calls>
    <invoke name="ask">
      <parameter name="text">I'm planning to bake the chocolate cake for your birthday party. The recipe mentions "rich frosting" but doesn't specify what type.
      Could you clarify your preferences? For example:
      1. Would you prefer buttercream or cream cheese frosting?
      2. Do you want any specific flavor added to the frosting (vanilla, coffee, etc.)?
      3. Should I add any decorative toppings like sprinkles or fruit?
      4. Do you have any dietary restrictions I should be aware of?
      This information will help me make sure the cake meets your expectations for the celebration.</parameter>
      <parameter name="attachments">recipes/chocolate_cake.txt,photos/cake_examples.jpg</parameter>
    </invoke>
    </function_calls>

web_browser_takeover:
  description: |  
    Request user takeover of browser interaction. Use when: 1) Page requires complex human interaction 2) Authentication/verification needed 3) Anti-bot measures present 4) Complex form filling/navigation required 5) Human verification (CAPTCHA) needed. IMPORTANT: Use as last resort after web-search and scrape-webpage have failed.
  example: |
    <function_calls>
    <invoke name="web_browser_takeover">
      <parameter name="text">I've encountered a CAPTCHA verification on the page. Please:
      1. Solve the CAPTCHA puzzle
      2. Let me know once you've completed it
      3. I'll then continue with the automated process
      If you encounter any issues or need to take additional steps, please let me know.</parameter>
    </invoke>
    </function_calls>

complete:
  description: |
    A special tool to indicate you have completed all tasks and are about to enter complete state. Use ONLY when: 1) All tasks in todo.md are marked complete [x], 2) The user's original request has been fully addressed, 3) There are no pending actions or follow-ups required, 4) You've delivered all final outputs and results to the user. IMPORTANT: This is the ONLY way to properly terminate execution. Never use this tool unless ALL tasks are complete and verified. Always ensure you've provided all necessary outputs and references before using this tool. Include relevant attachments when the completion relates to specific files or resources.
  example: |
    <function_calls>
    <invoke name="complete">
      <parameter name="text">I have successfully completed all tasks for your project. Here's what was accomplished:
      1. Created the web application with modern UI components
      2. Implemented user authentication and database integration
      3. Deployed the application to production
      4. Created comprehensive documentation
      All deliverables are attached for your review.</parameter>
      <parameter name="attachments">app/src/main.js,docs/README.md,deployment-config.yaml</parameter>
    </invoke>
    </function_calls>

execute_command:
  description: |
    Execute a shell command in the workspace directory. IMPORTANT: Commands are non-blocking by default and run in a tmux session. This is ideal for long-running operations like starting servers or build processes. Uses sessions to maintain state between commands. This tool is essential for running CLI tools, installing packages, and managing system operations.
  example: |
    <function_calls>
    <invoke name="execute_command">
      <parameter name="command">npm run dev</parameter>
      <parameter name="session_name">dev_server</parameter>
    </invoke>
    </function_calls>

    <!-- Example 2: Running in Specific Directory -->
    <function_calls>
    <invoke name="execute_command">
      <parameter name="command">npm run build</parameter>
      <parameter name="folder">frontend</parameter>
      <parameter name="session_name">build_process</parameter>
    </invoke>
    </function_calls>

    <!-- Example 3: Blocking command (wait for completion) -->
    <function_calls>
    <invoke name="execute_command">
      <parameter name="command">npm install</parameter>
      <parameter name="blocking">true</parameter>
      <parameter name="timeout">300</parameter>
    </invoke>
    </function_calls>

check_command_output:
  description: |
    Check the output of a previously executed command in a tmux session. Use this to monitor the progress or results of non-blocking commands.
  example: |
    <function_calls>
    <invoke name="check_command_output">
      <parameter name="session_name">dev_server</parameter>
    </invoke>
    </function_calls>
    
    <!-- Example 2: Check final output and kill session -->
    <function_calls>
    <invoke name="check_command_output">
      <parameter name="session_name">build_process</parameter>
      <parameter name="kill_session">true</parameter>
    </invoke>
    </function_calls>

terminate_command:
  description: |
    Terminate a running command by killing its tmux session.
  example: |
    <function_calls>
    <invoke name="terminate_command">
      <parameter name="session_name">dev_server</parameter>
    </invoke>
    </function_calls>

list_commands:
  description: |
    List all running tmux sessions and their status.
  example: |
    <function_calls>
    <invoke name="list_commands">
    </invoke>
    </function_calls>
    
create_file:
  description: |
    Create a new file with the provided contents at a given path in the workspace. The path must be relative to /workspace (e.g., 'src/main.py' for /workspace/src/main.py)
  example: |
    <function_calls>
    <invoke name="create_file">
      <parameter name="file_path">src/main.py</parameter>
      <parameter name="file_contents">
      # This is the file content
      def main():
          print("Hello, World!")
      
      if __name__ == "__main__":
          main()
      </parameter>
    </invoke>
    </function_calls>

str_replace:
  description: |
    Replace specific text in a file. The file path must be relative to /workspace (e.g., 'src/main.py' for /workspace/src/main.py). Use this when you need to replace a unique string that appears exactly once in the file.
  example: |
    <function_calls>
      <invoke name="str_replace">
      <parameter name="file_path">src/main.py</parameter>
      <parameter name="old_str">text to replace (must appear exactly once in the file)</parameter>
      <parameter name="new_str">replacement text that will be inserted instead</parameter>
    </invoke>
    </function_calls>

full_file_rewrite:
  description: |
    Completely rewrite an existing file with new content. The file path must be relative to /workspace (e.g., 'src/main.py' for /workspace/src/main.py). Use this when you need to replace the entire file content or make extensive changes throughout the file.
  example: |
    <function_calls>
    <invoke name="full_file_rewrite">
      <parameter name="file_path">src/main.py</parameter>
      <parameter name="file_contents">
      This completely replaces the entire file content.
      Use when making major changes to a file or when the changes
      are too extensive for str-replace.
      All previous content will be lost and replaced with this text.
      </parameter>
    </invoke>
    </function_calls>
  
delete_file:
  description: |
    Delete a file at the given path. The path must be relative to /workspace (e.g., 'src/main.py' for /workspace/src/main.py)
  example: |
    <function_calls>
    <invoke name="delete_file">
      <parameter name="file_path">src/main.py</parameter>
    </invoke>
    </function_calls>

upload_file:
  description: |
    Upload file content to the sandbox workspace. The path must be relative to /workspace (e.g., 'docs/notes.txt').
    For text files, use default UTF-8 encoding. For binary files (images, executables, etc.), set encoding to 'base64'
    and provide the file content as base64-encoded string.
  example: |
    <!-- Text file upload -->
    <function_calls>
    <invoke name="upload_file">
      <parameter name="file_path">src/config.json</parameter>
      <parameter name="file_contents">
      {
        "debug": true,
        "timeout": 30
      }
      </parameter>
    </invoke>
    </function_calls>
    
    <!-- Binary file upload (base64) -->
    <function_calls>
    <invoke name="upload_file">
      <parameter name="file_path">images/logo.png</parameter>
      <parameter name="file_contents">iVBORw0KGgoAAAANSUhEUgAA...</parameter>
      <parameter name="encoding">base64</parameter>
    </invoke>
    </function_calls>

download_file:
  description: |
    Download file content from the sandbox workspace. The path must be relative to /workspace (e.g., 'src/main.py').
    For text files, content is returned directly. For binary files, set encoding to 'base64' to get base64-encoded content.
  example: |
    <!-- Text file download -->
    <function_calls>
    <invoke name="download_file">
      <parameter name="file_path">src/main.py</parameter>
    </invoke>
    </function_calls>
    
    <!-- Binary file download -->
    <function_calls>
    <invoke name="download_file">
      <parameter name="file_path">reports/summary.pdf</parameter>
      <parameter name="encoding">base64</parameter>
    </invoke>
    </function_calls>

expose_port:
  description: |
    Expose a port from the agent's sandbox environment to the public internet and get its preview URL. This is essential for making services running in the sandbox accessible to users, such as web applications, APIs, or other network services. The exposed URL can be shared with users to allow them to interact with the sandbox environment.
  example: |
    <!-- Example 1: Expose a web server running on port 8000 -->
    <function_calls>
    <invoke name="expose_port">
      <parameter name="port">8000</parameter>
    </invoke>
    </function_calls>

    <!-- Example 2: Expose an API service running on port 3000 -->
    <function_calls>
    <invoke name="expose_port">
      <parameter name="port">3000</parameter>
    </invoke>
    </function_calls>

    <!-- Example 3: Expose a development server running on port 5173 -->
    <function_calls>
    <invoke name="expose_port">
      <parameter name="port">5173</parameter>
    </invoke>
    </function_calls>