---
globs: *.py
---

# Python Coding Standards for Nexla SDK

## Type Hints
- **ALWAYS** use type hints for all function parameters and return values
- Use `from typing import` for complex types: `Dict`, `List`, `Optional`, `Union`, `Any`
- Use `TypeVar` for generic types: `T = TypeVar('T', bound=BaseModel)`
- Example from [client.py](mdc:nexla_sdk/client.py):
```python
def _convert_to_model(self, data: Union[Dict[str, Any], List[Dict[str, Any]]], model_class: Type[T]) -> Union[T, List[T]]:
```

## Exception Handling
- Use the custom exception hierarchy from [exceptions.py](mdc:nexla_sdk/exceptions.py)
- **Never** use generic `Exception` - always use specific exception types:
  - `NexlaAuthError` for authentication issues
  - `NexlaAPIError` for API errors
  - `NexlaValidationError` for validation errors
  - `NexlaClientError` for client configuration errors
- Chain exceptions using `raise ... from e` to preserve stack traces

## Documentation
- **Always** include docstrings for public methods and classes
- Use Google-style docstrings with Args, Returns, Raises sections
- Include usage examples in docstrings
- Example from [client.py](mdc:nexla_sdk/client.py):
```python
def get_access_token(self) -> str:
    """
    Get a valid access token, automatically refreshing if necessary
    
    Returns:
        A valid access token string
        
    Raises:
        NexlaAuthError: If no valid token is available or refresh fails
        
    Examples:
        # Get a valid access token
        token = client.get_access_token()
    """
```

## String Formatting
- Use f-strings for string formatting (Python 3.6+)
- Use descriptive variable names in f-strings
- Example: `f"Failed to obtain session token: {e}"`
- For complex formatting, consider using `.format()` for readability

## Imports
- Group imports in standard order: standard library, third-party, local
- Use absolute imports within the package: `from .exceptions import NexlaError`
- Import specific classes/functions rather than modules when possible
- Use `from typing import` for type hints

## Logging
- Use the `logging` module, not `print()` statements
- Get logger with: `logger = logging.getLogger(__name__)`
- Log at appropriate levels: DEBUG, INFO, WARNING, ERROR
- Include context in log messages

## Environment Variables
- Support environment variables for configuration
- Use `os.getenv()` with appropriate defaults
- Document environment variables in docstrings
- Example from [client.py](mdc:nexla_sdk/client.py):
```python
service_key = os.getenv("NEXLA_SERVICE_KEY")
```

## Error Messages
- Provide clear, actionable error messages
- Include context about what operation failed
- Use consistent error message formatting
- Don't expose internal implementation details in user-facing errors

## Code Organization
- Keep functions focused on single responsibility
- Use descriptive function and variable names
- Limit function parameters (consider using dataclasses/models for complex parameters)
- Use early returns to reduce nesting

## Compatibility
- Target Python 3.7+ (uses f-strings and modern typing features)
- Use modern Python features appropriately
- Leverage Pydantic for data validation and serialization
- Use `Optional` instead of `Union[X, None]`
