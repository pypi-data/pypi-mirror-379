from importlib.resources import files

import streamlit as st


from tetrascience.ui.app_header import app_header
from tetrascience.ui.badge import badge
from tetrascience.ui.bar_graph import bar_graph
from tetrascience.ui.button import button
from tetrascience.ui.button_control import button_control
from tetrascience.ui.card import card
from tetrascience.ui.checkbox import checkbox
from tetrascience.ui.code_editor import code_editor
from tetrascience.ui.dropdown import dropdown
from tetrascience.ui.heatmap import heatmap
from tetrascience.ui.input import input
from tetrascience.ui.label import label
from tetrascience.ui.line_graph import line_graph
from tetrascience.ui.markdown_display import markdown_display
from tetrascience.ui.menu_item import menu_item
from tetrascience.ui.supportive_text import supportive_text
from tetrascience.ui.tab import tab
from tetrascience.ui.textarea import textarea
from tetrascience.ui.toast import toast
from tetrascience.ui.toggle import toggle
from tetrascience.ui.tooltip import tooltip
from tetrascience.ui.pop_confirm import pop_confirm


def main():
    """The main function of the streamlit app."""

    # Page setup with TetraScience styling
    st.set_page_config(
        page_title="TetraScience Data App Template",
        page_icon="üß¨",
        layout="wide",
        initial_sidebar_state="collapsed",
    )

    # Set styles from CSS file to better match TDP
    # Includes: change the typeface and also remove the rainbow top header bar
    css_file_path = files("{{data_app_package_dir}}").joinpath("style.css")
    css_content = css_file_path.read_text(encoding="utf-8")
    st.html(f"<style>{css_content}</style>")

    # Add your app code here
    tetrascience_ui_kit()


def tetrascience_ui_kit():
    """
    TetraScience UI Component Showcase - Hello World Template

    A curated demonstration of the TetraScience UI component library designed
    to serve as the initial showcase page for developers using this template.

    Features:
    - Professional TetraScience branding and navigation
    - Interactive component demonstrations
    - Scientific data visualization examples
    - Developer resources with code examples
    - Performance-optimized component selection
    """

    USER_PROFILE = {
        "name": "Developer",
        "avatar": "https://via.placeholder.com/40x40",
    }
    HOSTNAME = "data-app-template"

    app_header(hostname=HOSTNAME, user_profile=USER_PROFILE, key="app_header_main")

    # =============================================================================
    # üß¨ WELCOME SECTION
    # =============================================================================

    st.title("üß¨ Welcome to TetraScience Data App Template")
    st.markdown(
        """
        This template showcases our comprehensive UI component library designed specifically
        for scientific applications and data visualization.

        üöÄ **Ready to build?** This template includes everything you need to create
        professional scientific applications with our React-based component library.
        """
    )

    # Quick stats cards
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        card(
            title="30+ Components",
            children="Professional UI elements for scientific applications",
            variant="default",
            size="small",
            key="stats_components",
        )

    with col2:
        card(
            title="Data Visualization",
            children="Charts, graphs, and scientific plotting tools",
            variant="default",
            size="small",
            key="stats_viz",
        )

    with col3:
        card(
            title="React Integration",
            children="Seamless React components in Streamlit",
            variant="default",
            size="small",
            key="stats_react",
        )

    with col4:
        card(
            title="Scientific Focus",
            children="Purpose-built for laboratory workflows",
            variant="default",
            size="small",
            key="stats_science",
        )

    st.divider()

    # =============================================================================
    # üé® UI COMPONENT GALLERY
    # =============================================================================

    st.header("üé® UI Component Gallery")
    st.markdown(
        "Complete collection of UI elements for building scientific applications:"
    )

    # Create organized sections for different component types
    tab1, tab2, tab3, tab4 = st.tabs(
        [
            "üîò Action Components",
            "üìù Form Components",
            "üìã Data Components",
            "üí¨ Feedback Components",
        ]
    )

    with tab1:
        st.subheader("Action & Navigation Components")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("**Buttons:**")
            button(
                label="üöÄ Primary Action",
                variant="primary",
                size="medium",
                key="btn_primary",
            )
            button(
                label="üìã Secondary Action",
                variant="secondary",
                size="medium",
                key="btn_secondary",
            )

            st.markdown("**Button Controls:**")
            button_control(
                icon="üîÑ",
                selected=True,
                disabled=False,
                name="refresh_data",
                key="btn_control_demo",
            )

        with col2:
            st.markdown("**Navigation:**")
            tab(
                label="üìä Data Analysis", active=True, size="medium", key="tab_analysis"
            )
            tab(
                label="üî¨ Experiments",
                active=False,
                size="medium",
                key="tab_experiments",
            )

            st.markdown("**Menu Items:**")
            menu_item(
                label="üìà View Results",
                checked=True,
                show_checkbox=True,
                active=True,
                key="menu_results",
            )

        with col3:
            st.markdown("**Status Indicators:**")
            badge(
                label="üü¢ Active", variant="primary", size="medium", key="badge_active"
            )
            badge(
                label="‚ö†Ô∏è Warning",
                variant="secondary",
                size="medium",
                key="badge_warning",
            )

    with tab2:
        st.subheader("Form & Input Components")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Text Inputs:**")
            input(
                value="",
                placeholder="üî¨ Enter sample ID...",
                size="medium",
                type="text",
                key="input_sample",
            )

            st.markdown("**Text Areas:**")
            textarea(
                value="",
                placeholder="üìù Enter experimental notes...",
                rows=4,
                key="textarea_notes",
            )

            st.markdown("**Selections:**")
            dropdown(
                options=[
                    {"value": "pcr", "label": "üß¨ PCR Analysis"},
                    {"value": "gel", "label": "‚ö° Gel Electrophoresis"},
                    {"value": "seq", "label": "üîÑ DNA Sequencing"},
                ],
                placeholder="Select analysis type...",
                key="dropdown_analysis",
            )

        with col2:
            st.markdown("**Interactive Controls:**")
            checkbox(
                checked=False,
                label="üìä Include statistical analysis",
                key="checkbox_stats",
            )
            toggle(
                checked=False,
                label="üîî Enable notifications",
                key="toggle_notifications",
            )

            st.markdown("**Code Editor:**")
            code_editor(
                value="# Python analysis script\nimport pandas as pd\nimport numpy as np\n\n# Load experimental data\ndata = pd.read_csv('results.csv')",
                language="python",
                height="200px",
                key="code_editor_demo",
            )

    with tab3:
        st.subheader("Data Display & Organization")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Labels & Text:**")
            label(
                children="üè∑Ô∏è Sample Information",
                info_text="Detailed metadata about the current sample",
                key="label_sample",
            )
            supportive_text(
                children="‚úÖ Analysis completed successfully",
                show_check=True,
                key="support_success",
            )

            st.markdown("**Rich Content:**")
            markdown_display(
                markdown="## üìã Experimental Protocol\n\n**Objective**: Analyze protein expression levels\n\n- **Sample**: E. coli cultures\n- **Method**: Western blotting\n- **Duration**: 4 hours",
                key="markdown_protocol",
            )

        with col2:
            st.markdown("**Containers:**")
            card(
                children="üß™ **Sample #127** \n\nStatus: Processing  \nEstimated completion: 15 min  \nPriority: High",
                title="üìã Current Analysis",
                variant="default",
                size="medium",
                key="card_sample",
            )

    with tab4:
        st.subheader("Feedback & Notification Components")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Status Messages:**")
            toast(
                type="success",
                heading="‚úÖ Analysis Complete",
                description="Sample processing finished successfully",
                key="toast_success",
            )
            toast(
                type="warning",
                heading="‚ö†Ô∏è Low Signal",
                description="Consider increasing sample concentration",
                key="toast_warning",
            )

        with col2:
            st.markdown("**Interactive Helpers:**")
            tooltip(
                content="üî¨ This protocol follows standard laboratory procedures for optimal results",
                children="ü§î Hover for protocol information",
                key="tooltip_protocol",
            )

            pop_confirm(
                title="üóëÔ∏è Delete Sample Data?",
                description="This action cannot be undone. All analysis results will be permanently removed.",
                children="üóëÔ∏è Delete Sample",
                ok_text="Delete",
                cancel_text="Cancel",
                key="pop_confirm_delete",
            )

        st.divider()

    # =============================================================================
    # üìä DATA VISUALIZATION SHOWCASE
    # =============================================================================

    st.header("üìä Scientific Data Visualization")
    st.markdown("Professional charts and graphs for scientific data analysis:")

    # Experimental Results Comparison
    st.subheader("üìä Experimental Results Comparison")
    bar_graph(
        data_series=[
            {
                "name": "Experiment A",
                "color": "#FF9500",  # Orange
                "x": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [140, 140, 195, 205, 230, 65, 300, 290, 175, 280],
            },
            {
                "name": "Experiment B",
                "color": "#FF5C64",  # Red
                "x": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [150, 75, 300, 210, 130, 75, 140, 35, 290, 70],
            },
            {
                "name": "Control Group",
                "color": "#A1C63C",  # Green
                "x": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [55, 185, 225, 75, 105, 120, 215, 155, 90, 265],
            },
        ],
        variant="group",
        x_title="",
        y_title="Response Intensity",
        title="",
        bar_width=20,
        name="experiment_bar_graph",
        key="bar_graph_showcase",
    )
    st.caption(
        "üí° **Features**: Categorical data support, custom colors, responsive design"
    )

    # Parameter Correlation Heatmap
    st.subheader("üî• Parameter Correlation Analysis")
    heatmap(
        data=[
            [
                18795,
                3860,
                8390,
                24575,
            ],
            [
                11666,
                21942,
                21431,
                5747,
            ],
            [
                5612,
                24870,
                18787,
                20159,
            ],
            [
                14534,
                10629,
                4016,
                11529,
            ],
        ],
        x_labels=["pH", "Temperature", "Conductivity", "Turbidity"],
        y_labels=["pH", "Temperature", "Conductivity", "Turbidity"],
        title="üî• Parameter Correlation Analysis",
        key="heatmap_demo",
    )
    st.caption(
        "üí° **Features**: Color-coded correlations, customizable scales, scientific labeling"
    )

    # Time Series Line Graph
    st.subheader("üìà Time Series Analysis")
    line_graph(
        data_series=[
            {
                "name": "Data A",
                "color": "rgba(255, 166, 46, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [75, 140, 105, 120, 145, 115, 110, 80, 90],
            },
            {
                "name": "Data B",
                "color": "rgba(255, 92, 100, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [125, 160, 115, 145, 190, 180, 120, 105, 110],
            },
            {
                "name": "Data C",
                "color": "rgba(165, 195, 78, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [185, 195, 145, 215, 205, 200, 160, 145, 135],
            },
            {
                "name": "Data D",
                "color": "rgba(45, 156, 219, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [225, 215, 210, 245, 230, 230, 200, 185, 190],
            },
            {
                "name": "Data E",
                "color": "rgba(251, 237, 83, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [245, 260, 235, 265, 250, 250, 220, 220, 225],
            },
            {
                "name": "Data F",
                "color": "rgba(122, 81, 171, 1)",
                "x": [200, 300, 400, 500, 600, 700, 800, 900, 1000],
                "y": [275, 295, 270, 285, 300, 300, 250, 255, 260],
            },
        ],
        y_title="",
        x_title="",
        key="line_graph_showcase",
    )

    st.caption(
        "üí° **Features**: Multi-series support, interactive legends, real-time updates"
    )

    st.divider()

    # =============================================================================
    # üë®‚Äçüíª DEVELOPER RESOURCES & DATA APP PROVIDERS
    # =============================================================================

    st.header("üë®‚Äçüíª Developer Resources")
    st.markdown(
        "Code examples and integration patterns for TetraScience data connectors:"
    )

    # Data App Provider Examples
    st.subheader("üîå Data App Provider Examples")
    st.markdown(
        "The **data_app_providers** module provides functionality for retrieving and using database provider configurations from the TetraScience Data Platform (TDP). This is useful for data apps that need to connect to various databases like Snowflake, Databricks, or Athena."
    )

    provider_tab1, provider_tab2, provider_tab3 = st.tabs(
        ["üèóÔ∏è Basic Usage", "üíª Local Development", "‚òÅÔ∏è Production"]
    )

    with provider_tab1:
        st.markdown("**Basic Usage - TetraScience Data App Providers:**")
        basic_usage_code = """# Basic Usage Example
from tetrascience.data_app_providers import (
    get_provider_configurations,
    build_provider,
    TetraScienceClient,
)

# Create TDP client
client = TetraScienceClient(
    token="your-auth-token",
    x_org_slug="your-org-slug",
    base_url="https://api.tetrascience.com"
)

# Get provider configurations from TDP
configs = get_provider_configurations(client)

# Build and use a provider
for config in configs:
    provider = build_provider(config)
    df = provider.query("SELECT * FROM my_table LIMIT 10")
    print(df.head())"""

        code_editor(
            value=basic_usage_code,
            language="python",
            height=300,
            key="basic_usage_code_editor",
        )

        st.caption(
            "üí° **Basic Usage**: Simple setup for connecting to database providers through TDP"
        )

    with provider_tab2:
        st.markdown("**Development Setup - Environment Variable Configuration:**")
        development_code = """# Environment Variable Configuration (Development)
import os
import json
from tetrascience.data_app_providers import get_provider_configurations, build_provider

# Set provider configuration
provider_config = [
    {
        "name": "Dev Snowflake",
        "type": "snowflake",
        "iconUrl": "https://example.com/snowflake.png",
        "fields": {
            "user": "dev_user",
            "password": "dev_password",
            "account": "dev.snowflakecomputing.com",
            "warehouse": "DEV_WH",
            "database": "DEV_DB",
            "schema": "PUBLIC",
            "role": "DEV_ROLE"
        }
    }
]

os.environ["DATA_APP_PROVIDER_CONFIG"] = json.dumps(provider_config)

# Get configurations (client still needed but won't be used for env var mode)
client = TetraScienceClient()  # Can be empty for env var mode
configs = get_provider_configurations(client)
provider = build_provider(configs[0])

# Query data
df = provider.query("SELECT * FROM my_table LIMIT 10")
print(df.head())"""

        code_editor(
            value=development_code,
            language="python",
            height=350,
            key="development_code_editor",
        )

        st.caption(
            "üí° **Development**: Use environment variables for local development and testing"
        )

    with provider_tab3:
        st.markdown("**Production Usage - TDP Integration:**")
        production_code = """# Production Usage (TDP Integration)
import os
from tetrascience.data_app_providers import (
    get_provider_configurations,
    build_provider,
    TetraScienceClient,
)

# Environment variables set by data app runtime:
# CONNECTOR_ID=your-connector-id
# ORG_SLUG=your-org-slug
# TDP_ENDPOINT=https://api.tetrascience.com

# Provider secrets set by attaching a provider to the data app within TDP
# SNOWFLAKE_USER=actual_user
# SNOWFLAKE_PASSWORD=actual_password
# DATABRICKS_CLIENT_ID=actual_client_id
# etc.

client = TetraScienceClient(
    token=os.getenv("TS_AUTH_TOKEN"),
    x_org_slug=os.getenv("ORG_SLUG"),
    base_url=os.getenv("TDP_ENDPOINT") or os.getenv("TDP_INTERNAL_ENDPOINT")
)

# Fetch provider configurations from TDP
configs = get_provider_configurations(client)

# Use providers
for config in configs:
    print(f"Using provider: {config.name} ({config.type})")
    provider = build_provider(config)

    # Query data
    df = provider.query("SELECT COUNT(*) as row_count FROM my_table")
    print(f"Row count: {df['row_count'][0]}")"""

        code_editor(
            value=production_code,
            language="python",
            height=350,
            key="production_code_editor",
        )

        st.caption(
            "üí° **Production**: Automatic configuration through TDP with environment variables"
        )

    # Additional Information
    st.subheader("üìã Supported Provider Types")

    col1, col2, col3 = st.columns(3)

    with col1:
        card(
            title="‚ùÑÔ∏è Snowflake",
            children="Enterprise data warehouse integration. Requires: snowflake-connector-python",
            variant="default",
            size="small",
            key="provider_snowflake",
        )

    with col2:
        card(
            title="üßÆ Databricks",
            children="Scalable data processing platform. Requires: databricks-sql-connector[pyarrow]",
            variant="default",
            size="small",
            key="provider_databricks",
        )

    with col3:
        card(
            title="‚òÅÔ∏è Athena",
            children="AWS serverless query service. Requires: pyathena[arrow] and boto3",
            variant="default",
            size="small",
            key="provider_athena",
        )

    st.divider()

    # =============================================================================
    # üì¶ LIBRARY INFORMATION
    # =============================================================================

    st.header("üì¶ TetraScience Streamlit UI Library")
    st.markdown(
        """
        The **TetraScience Streamlit UI Library** provides all the components showcased in this template.
        This library is actively maintained and regularly updated with new features and improvements.
        """
    )

    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown(
            """
            **üîó Library Location:**
            The complete TetraScience Streamlit UI component library is available on PyPI:

            **[https://pypi.org/project/tetrascience-streamlit-ui/](https://pypi.org/project/tetrascience-streamlit-ui/)**

            **üìã Installation:**
            ```bash
            poetry add tetrascience-streamlit-ui
            ```

            **üîÑ Stay Updated:**
            Check regularly for updates to get the latest components, bug fixes, and new features.
            We recommend checking for updates weekly or subscribing to release notifications.
            """
        )

    with col2:
        card(
            title="üöÄ Latest Features",
            children="Regular updates include new scientific components, performance improvements, and enhanced data visualization capabilities.",
            variant="default",
            size="medium",
            key="updates_card",
        )

    st.divider()

    # =============================================================================
    # üéØ GETTING STARTED SECTION
    # =============================================================================

    st.header("üéØ Getting Started")
    st.markdown("Ready to build your own TetraScience data application?")

    col1, col2, col3 = st.columns(3)

    with col1:
        card(
            title="üìö Documentation",
            children="Access comprehensive guides, API references, and best practices for building scientific applications with our component library.",
            variant="default",
            size="medium",
            key="docs_card",
        )

    with col2:
        card(
            title="üîß Component Library",
            children="Explore 30+ React components designed for scientific workflows, data visualization, and laboratory management.",
            variant="default",
            size="medium",
            key="components_card",
        )

    with col3:
        card(
            title="üöÄ Quick Start",
            children="Clone this template, customize the components, and deploy your scientific data application in minutes.",
            variant="default",
            size="medium",
            key="quickstart_card",
        )

    # Next steps
    st.subheader("üîÑ Next Steps")
    st.markdown(
        """
    1. **Customize this template** - Replace this showcase with your application logic
    2. **Add your data sources** - Use the connector examples above to integrate your data
    3. **Choose your components** - Select from our comprehensive UI library
    4. **Deploy and share** - Publish your application to the TetraScience platform

    **Happy building!** üß¨‚ú®
    """
    )

    # Footer with version info
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; font-size: 0.9em;'>
            TetraScience Data App Template |
            Built with ‚ù§Ô∏è for the scientific community
        </div>
        """,
        unsafe_allow_html=True,
    )
