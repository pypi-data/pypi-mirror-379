# Developing {{ data_app_slug }} <!-- omit in toc -->

## Table of contents <!-- omit in toc -->

- [Getting started](#getting-started)
- [Editing markdown files](#editing-markdown-files)
- [Directory structure](#directory-structure)
- [Running tests](#running-tests)
- [Publishing](#publishing)

## Getting started

- Install the project with `poetry install`
- Add pre-commit as a commit hook with `poetry run pre-commit install`
- Start the app with `poe start` üöÄ (or `poetry run poe start` if you do not have [poethepoet](https://poethepoet.natn.io/index.html) installed)
- See other tasks configured for the project with `poe -h`

## Editing markdown files

The tables of contents are generated and automatically updated by the VSCode extension ‚ÄúMarkdown All in One‚Äù.
If using vscode, please install the extension.

## Directory structure

The directory structure follows that of standard Python repositories using `poetry`.

Python code meant to be imported or otherwise used by this data app should only be added to the `{{ data_app_package_dir }}` directory. Tests should all be located in the `__tests__` directory.

## Running tests

Unit tests and integration tests are located in the `__tests__/unit` and `__tests__/integration` directories, respectively.

To run all tests, execute `poetry run pytest` or `poe test`.

## Publishing

```bash
# 1. Build your data app for publishing
poetry run poe build-for-publish

# 2. Publish to TDP
ts-cli publish --type data-app --namespace {{ data_app_namespace }} --slug {{ data_app_slug }} --version {{ data_app_version }}
```

The `build-for-publish` command builds a Docker image and exports it as `image.tar`, which is required for data app publishing.
