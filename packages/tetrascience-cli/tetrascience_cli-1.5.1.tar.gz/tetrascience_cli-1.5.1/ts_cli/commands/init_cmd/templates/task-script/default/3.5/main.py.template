# The following imports are necessary for type-checking and editor integration.
from __future__ import annotations

from typing import TYPE_CHECKING, Any, BinaryIO

if TYPE_CHECKING:
    from ts_sdk import task
# End imports related to type-checking and editor integration.

import io

import simplejson as json


def convert(input: BinaryIO) -> Any:
    """Given a file-like object "input", produce a JSON-serializable object
    (nested dictionary, array, etc) that will get dumped to the data lake as
    the output of this workflow.

    ADD YOUR BUSINESS LOGIC HERE.
    """
    return {"a": "1", "label": "label"}


def decorate(input_dict, label):
    input_dict["label"] = label
    return input_dict


def main(input, context: task.Context):
    ids_namespace = "{{ ids_namespace }}"
    ids_type = "{{ ids_slug }}"
    ids_version = "{{ ids_version }}"

    username = input.get("username")
    password = context.resolve_secret(input.get("password"))

    # Add your logic
    file = context.read_file(input["input_file"])
    input_dict = json.loads(file["body"])

    decorate(input_dict, "label")

    convert(io.BytesIO(file["body"]))

    # Validate against IDS
    context.validate_ids(input_dict, ids_namespace, ids_type, ids_version)

    # write the IDS JSON to the data lake
    output = context.write_file(
        content=json.dumps(input_dict, indent=2, allow_nan=False),
        file_name="output.json",
        file_category="IDS",
        ids=f"{ids_namespace}/{ids_type}:{ids_version}",
    )

    print(output)
    return output
