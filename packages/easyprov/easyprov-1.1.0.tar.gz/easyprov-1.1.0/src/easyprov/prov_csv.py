"""
Store provenance in csv files
"""

from .provenance import fmt_prov


def csv_dump(data, header, pth, pth_script, **kwds):
    """Write dataframe in csv file.

    Args:
        data (pd.DataFrame): data to write
        header (str|dict): meat info associated with data
        pth (str|Path): path to file to write
        pth_script (str|Path): path to script that generated data
        **kwds: additional arguments that will be passed to pd.to_csv

    Returns:
        None
    """
    if isinstance(header, str):
        lines = [line.strip() if line.startswith("#") else f"#{line.strip()}" for line in header.splitlines()]
    elif isinstance(header, dict):
        lines = [f"# {k}: {descr}" for k, descr in header.items()]
    else:
        raise UserWarning(f"invalid header {header}")

    with open(pth, "w", encoding="utf-8") as fhw:
        fhw.write(f"# This file has been generated by: {fmt_prov(pth_script)}\n#\n")
        for line in lines:
            fhw.write(line + "\n")

        fhw.write("#\n")
        data.to_csv(fhw, sep=";", lineterminator="\n", **kwds)


def csv_prov(pth):
    """Read provenance in file.

    Args:
        pth (Path): path to file to read (previously saved with csv_dump)

    Returns:
        (str): provenance, path to script that generated data
    """
    line = open(pth, encoding="utf-8").readline()
    return line.split(":")[-1].strip()


def csv_header(pth):
    """Read header in file.

    Args:
        pth (Path): path to file to read (previously saved with csv_dump)

    Returns:
        (dict): name, unit, descr for each column in dataframe
    """
    lines = []
    with open(pth, encoding="utf-8") as fhr:
        line = fhr.readline().strip()
        while line and line.startswith("#"):
            lines.append(line[1:])
            line = fhr.readline().strip()

    lines = [line.strip() for line in lines[1:] if line.strip()]
    header = {}
    for line in lines:
        k, v = line.split(": ")
        header[k] = v.strip()

    return header
