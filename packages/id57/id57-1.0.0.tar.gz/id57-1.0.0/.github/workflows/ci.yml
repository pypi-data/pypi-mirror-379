name: CI

permissions:
  contents: write

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    name: Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip and install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install "maturin>=1.5" pytest

      - name: Build wheel with maturin
        run: maturin build --release --out dist

      - name: Install built wheel
        shell: bash
        run: |
          python - <<'PY'
          from pathlib import Path
          import subprocess
          import sys

          wheel, = Path('dist').glob('id57-*.whl')
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', str(wheel)])
          PY

      - name: Run tests against installed wheel
        run: pytest tests

  publish-wheels:
    name: Publish wheels on ${{ matrix.os }}
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          python -m pip install "maturin>=1.5"

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          TARGET_OS: ${{ matrix.os }}
        shell: bash
        run: |
          args=(publish --skip-existing --interpreter python)
          if [[ "${TARGET_OS}" != "ubuntu-latest" ]]; then
            args+=(--no-sdist)
          fi
          maturin "${args[@]}"

  create-release:
    name: Create GitHub Release
    needs: publish-wheels
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Extract version
        id: metadata
        shell: bash
        run: |
          python - <<'PY'
          from pathlib import Path
          import os
          import tomllib

          data = tomllib.loads(Path('pyproject.toml').read_text(encoding='utf-8'))
          version = data['project']['version']
          output_path = os.environ['GITHUB_OUTPUT']
          with open(output_path, 'a', encoding='utf-8') as output:
              output.write(f'version={version}\n')
          PY

      - name: Collect changelog notes
        id: changelog
        env:
          VERSION: ${{ steps.metadata.outputs.version }}
        shell: bash
        run: |
          python - <<'PY'
          from __future__ import annotations

          from pathlib import Path
          import os
          import re

          version = '${VERSION}'
          changelog = Path('CHANGELOG.md').read_text(encoding='utf-8')
          escaped = re.escape(version)
          pattern = re.compile(rf"## \[{escaped}\](?:[^\n]*\n)(?P<body>.*?)(?:\n## \[|\Z)", re.DOTALL)
          match = pattern.search(changelog)
          body = match.group('body').strip() if match else f'Release {version}'
          output_path = os.environ['GITHUB_OUTPUT']
          with open(output_path, 'a', encoding='utf-8') as output:
              output.write('notes<<EOF\n')
              output.write(body)
              output.write('\nEOF\n')
          PY

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.metadata.outputs.version }}
          name: v${{ steps.metadata.outputs.version }}
          body: ${{ steps.changelog.outputs.notes }}
          allowUpdates: true
