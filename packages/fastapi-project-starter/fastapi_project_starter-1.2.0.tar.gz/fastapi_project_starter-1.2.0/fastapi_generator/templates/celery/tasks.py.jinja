
from asgiref.sync import async_to_sync

from fastapi_mail import MessageSchema, MessageType, MultipartSubtypeEnum



from ..core.celery_app import celery_app
from ..core.logger import get_logger
from .email_config import fastmail

logger = get_logger()

@celery_app.task(
    name="send_email",
    bind=True,
    max_retries=3,
    soft_time_limit=60,
    autoretry_for=(Exception,),
    retry_backoff=True,
    retry_backoff_max=60,
)

def send_email(
        self, *, recipients, subject: str, html_content: str,
        plain_content: str,
) -> bool:
    try:
        # Convert single string to list if needed
        if isinstance(recipients, str):
            recipients = [recipients]
        elif not isinstance(recipients, list):
            recipients = list(recipients)

        message = MessageSchema(
            subject=subject,
            recipients=recipients,
            body=html_content,
            subtype=MessageType.html,
            alternative_body=plain_content,
            multipart_subtype=MultipartSubtypeEnum.alternative,
        )
        async_to_sync(fastmail.send_message)(message)
        logger.info(f"Email sent to {recipients} with subject {subject}")
        return True
    except Exception as e:
        logger.error(f"Email failed to send to {recipients} with subject {subject}: {e}")
        return False