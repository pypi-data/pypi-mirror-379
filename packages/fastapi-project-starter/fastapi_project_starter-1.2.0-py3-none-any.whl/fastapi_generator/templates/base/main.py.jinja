"""
{{ project_name }} - FastAPI Application
Generated by FastGen
"""
{% if include_middlewares %}
from starlette.requests import Request
{% endif %}
from contextlib import asynccontextmanager
from fastapi import FastAPI{% if include_database %}, Depends{% endif %}{% if include_auth %}, Security{% endif %}

{% if include_auth %}
from fastapi.security import HTTPBearer
{% endif %}
{% if include_database %}
from .core.config import settings
from .db.database import get_db, init_db, close_db,load_models
{#from app.models import Base#}
{% else %}
from .core.config import settings
{% endif %}
{% if include_loguru %}
from .core.logger import get_logger
{% endif %}
{% if include_middlewares %}
from .middleware.setup import setup_middlewares
{% endif %}
from sqlalchemy import text

# API Route imports
from .api.v1 import api_router
{% if include_auth %}
{#from app.auth import auth_router#}
{% endif %}

{% if include_loguru %}
# Initialize logger
logger = get_logger()
{% endif %}


# ------------------------------
# FastAPI App Initialization
# ------------------------------
app = FastAPI(
    title="{{ project_name }}",
    description="{{ description }}",
    version="settings.APP_VERSION",
    docs_url="/docs",
    redoc_url="/redoc",
)

{% if include_middlewares %}
# Setup Middlewares
setup_middlewares(app)
{% if include_loguru %}
logger.info("Middlewares configured successfully")
{% endif %}

{% endif %}

{% if include_auth %}
# Security
security = HTTPBearer()

{% endif %}
{% if include_database %}
# ------------------------------
# Database Lifespan Events
# ------------------------------
{% if is_async %}
@asynccontextmanager
async def lifespan(app: FastAPI):
    try:
        await init_db()
        print("Database connected successfully")
{% if include_loguru %}
        logger.info("Async DB initialized")
{% endif %}
        yield
    finally:
        await close_db()
{% else %}
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Initialize DB tables on startup (sync)"""
    init_db()
    print("Database connected successfully")
    try:
        yield
    finally:
        close_db()
{% endif %}

app.router.lifespan_context = lifespan

{% endif %}
# ------------------------------
# Root & Health Endpoints
# ------------------------------
@app.get("/")
async def root():
{% if include_loguru %}
    logger.info("Root endpoint called")
{% endif %}
    return {
        "message": "Welcome to {{ project_name }}",
        "status": "healthy",
        "version": settings.APP_VERSION,
        "docs_url": "/docs"
    }


@app.get("/health")
async def health_check():
{% if include_loguru %}
    logger.info("Health check endpoint called")
{% endif %}
    return {"status": "healthy", "service": "{{ project_slug }}"}

#Request ID Example
@app.get("/example")
async def get_users(request: Request):
    log = logger.bind(request_id=request.state.request_id)
    log.info("Fetching users from database ( Example for Request ID middleware )")
    return {"message":"This is an example for the Request ID middleware","request_id": request.state.request_id}


{% if include_database %}

# ------------------------------
# Database Test Endpoint
# ------------------------------
@app.get("/db-test")
async def test_database(db = Depends(get_db)):
{% if include_loguru %}
    logger.bind(database=True).info("Testing database connection")
{% endif %}
    try:
{% if is_async %}
        await db.execute(text("SELECT 1"))
{% else %}
        db.execute(text("SELECT 1"))
{% endif %}
        return {"database": "connected"}
    except Exception as e:
{% if include_loguru %}
        logger.bind(database=True).error(f"Database connection failed: {e}")
{% endif %}
        return {"database": "error", "message": str(e)}
{% endif %}


# ------------------------------
# API Routers
# ------------------------------
app.include_router(api_router, prefix=settings.API_V1_STR)

{% if include_auth %}
{#app.include_router(auth_router, prefix="/auth", tags=["authentication"])#}
{% endif %}


# ------------------------------
# Example Endpoint
# ------------------------------
@app.get("/api/example")
async def example_endpoint():
{% if include_loguru %}
    logger.info("Example endpoint called")
{% endif %}
    return {"message": "This is an example endpoint"}


# ------------------------------
# Entry Point
# ------------------------------
if __name__ == "__main__":
    import uvicorn
{% if include_loguru %}
    logger.info("Starting {{ project_name }} server")
{% endif %}
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True{% if include_loguru %},
        log_config=None  # Use loguru instead of uvicorn logging
{% endif %}
    )