"use strict";(self.webpackChunkjupyterlab_cell_lock=self.webpackChunkjupyterlab_cell_lock||[]).push([[420],{420:(e,t,l)=>{l.r(t),l.d(t,{default:()=>b});var a=l(980),n=l(86),o=l(436),c=l(760),s=l(256);class d extends s.Widget{constructor(){super(),this._timer=null,this.addClass("jp-CellLockStatus"),this._statusNode=document.createElement("span"),this.node.appendChild(this._statusNode),this.node.style.display="inline-flex",this.node.style.alignItems="center"}setTemporaryStatus(e,t=2e3){this._statusNode.innerText=e,this._timer&&window.clearTimeout(this._timer),this._timer=window.setTimeout(()=>{this._statusNode.innerText="",this._timer=null},t)}}const i=e=>"boolean"!=typeof e||e,r=(e,t,l,a=0)=>{const n=i(e.getMetadata("editable")),o=i(e.getMetadata("deletable")),s=t.node.querySelector(".jp-InputPrompt.jp-InputArea-prompt");if(!s)return void(a<10&&setTimeout(()=>{r(e,t,l,a+1)},10));const d=s.querySelector(".jp-CellLockIcon");d&&d.remove();const u=document.createElement("span");if(u.className="jp-CellLockIcon",u.setAttribute("role","button"),u.setAttribute("tabindex","0"),n&&o){u.title="This cell is editable and deletable.",u.setAttribute("aria-label","Lock cell"),c.editIcon.element({container:u,elementPosition:"left",height:"14px",width:"14px"});const a=()=>{e.setMetadata("editable",!1),e.setMetadata("deletable",!1),r(e,t,l),l&&l.setTemporaryStatus("Cell locked.")};u.addEventListener("click",a),u.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),a())})}else{let a="This cell is ";const s=!n,d=!o;s&&d?a+="read-only and undeletable.":s?a+="read-only but can be deleted.":d&&(a+="undeletable but can be edited."),u.title=a,u.setAttribute("aria-label","Unlock cell"),c.lockIcon.element({container:u,elementPosition:"left",height:"14px",width:"14px"});const i=()=>{e.setMetadata("editable",!0),e.setMetadata("deletable",!0),r(e,t,l),l&&l.setTemporaryStatus("Cell unlocked.")};u.addEventListener("click",i),u.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),i())})}s.appendChild(u)},u=(e,t)=>{if(!e)return;const{content:l}=e;l.model&&l.widgets&&requestAnimationFrame(()=>{l.widgets.forEach((e,a)=>{const n=l.model.cells.get(a);n&&r(n,e,t)})})},m=(e,t,l,a)=>{var n;const o=l.currentWidget;if(!o)return void console.warn("No active notebook.");const c=o.content,s=null===(n=c.model)||void 0===n?void 0:n.cells;if(!s)return;let d=0,u=0;for(let l=0;l<s.length;l++){const n=s.get(l),o=i(n.getMetadata("editable")),m=i(n.getMetadata("deletable"));if(o!==e||m!==t){n.setMetadata("editable",e),n.setMetadata("deletable",t);const o=c.widgets[l];r(n,o,a),d++}else u++}const m=e?"unlocked":"locked";let b="";0===d?b=`All cells were already ${m}.`:(b=`${d} cell${d>1?"s":""} ${d>1?"were":"was"} successfully ${m}.`,u>0&&(b+=` (${u} already ${m}).`)),a&&a.setTemporaryStatus(b)},b={id:"jupyterlab-cell-lock:plugin",autoStart:!0,requires:[a.INotebookTracker],optional:[n.IStatusBar],activate:(e,t,l)=>{let a;console.log("jupyterlab-cell-lock extension activated!"),l&&(a=new d,l.registerStatusItem("cellLockStatus",{item:a,align:"middle"}));const n="jupyterlab-cell-lock:lock-cells";e.commands.addCommand(n,{label:"Make All Current Cells Read-Only & Undeletable",execute:()=>{m(!1,!1,t,a)}});const s="jupyterlab-cell-lock:unlock-cells";e.commands.addCommand(s,{label:"Make All Current Cells Editable & Deletable",execute:()=>{m(!0,!0,t,a)}}),t.widgetAdded.connect((t,l)=>{var d;const{content:i,context:m}=l,b=new o.ToolbarButton({label:"Lock all cells",icon:c.lockIcon,onClick:()=>{e.commands.execute(n)},tooltip:"Make all current cells read-only & undeletable"}),p=new o.ToolbarButton({label:"Unlock all cells",icon:c.editIcon,onClick:()=>{e.commands.execute(s)},tooltip:"Make all current cells editable & deletable"});l.toolbar.insertItem(10,"lockCells",b),l.toolbar.insertItem(11,"unlockCells",p),Promise.all([m.ready,l.revealed]).then(()=>{u(l,a)});const k=e=>{if("code"===e.model.type&&e.outputArea){const t=e.outputArea.model;t.changed.connect(()=>{setTimeout(()=>{r(e.model,e,a)},10)}),t.stateChanged.connect((t,l)=>{"outputs"!==l.name&&"length"!==l.name||setTimeout(()=>{r(e.model,e,a)},10)})}};i.widgets.forEach(e=>{k(e)}),null===(d=i.model)||void 0===d||d.cells.changed.connect((e,t)=>{"add"===t.type&&t.newValues.forEach((e,l)=>{const n=i.widgets[t.newIndex+l];n&&setTimeout(()=>{r(e,n,a),k(n)},10)})}),i.widgets.forEach(e=>{e.model.metadataChanged.connect(()=>{r(e.model,e,a)})}),m.saveState.connect((e,t)=>{"completed"===t&&u(l,a)})}),t.activeCellChanged.connect(()=>{const e=t.currentWidget;e&&u(e,a)})}}}}]);