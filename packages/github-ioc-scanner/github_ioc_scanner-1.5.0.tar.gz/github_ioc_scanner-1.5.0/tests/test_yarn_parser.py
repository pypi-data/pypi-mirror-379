"""Tests for Yarn lockfile parser."""

import pytest
from src.github_ioc_scanner.parsers.javascript import YarnLockParser


class TestYarnLockParser:
    """Tests for YarnLockParser."""
    
    def setup_method(self):
        """Set up parser for each test."""
        self.parser = YarnLockParser()
    
    def test_can_parse_yarn_lock(self):
        """Test that parser correctly identifies yarn.lock files."""
        assert self.parser.can_parse('yarn.lock') is True
        assert self.parser.can_parse('src/yarn.lock') is True
        assert self.parser.can_parse('frontend/yarn.lock') is True
        
        # Should not parse other files
        assert self.parser.can_parse('package.json') is False
        assert self.parser.can_parse('package-lock.json') is False
        assert self.parser.can_parse('requirements.txt') is False
    
    def test_parse_yarn_v1_format(self):
        """Test parsing Yarn v1 lockfile format."""
        content = '''# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

lodash@^4.17.21:
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==

react@^18.2.0:
  version "18.2.0"
  resolved "https://registry.yarnpkg.com/react/-/react-18.2.0.tgz#555bd98592883255fa00de14f1151a917b5d77d5"
  integrity sha512-/3IjMdb2L9QbBdWiW5e3P2/npwMBaU9mHCSCUzNln0ZCYbcfTsGbTJrU/kGemdH2IWmB2ioZ+zkxtmq6g09fGQ==
  dependencies:
    loose-envify "^1.1.0"
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 2
        
        lodash_dep = next(d for d in deps if d.name == 'lodash')
        assert lodash_dep.version == '4.17.21'
        assert lodash_dep.dependency_type == 'dependencies'
        
        react_dep = next(d for d in deps if d.name == 'react')
        assert react_dep.version == '18.2.0'
        assert react_dep.dependency_type == 'dependencies'
    
    def test_parse_yarn_v1_scoped_packages(self):
        """Test parsing scoped packages in Yarn v1 format."""
        content = '''# yarn lockfile v1

"@babel/core@^7.20.0":
  version "7.20.12"
  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.20.12.tgz#7930db57443c6714ad216953d772d4d83d090f03"
  integrity sha512-XsMfHovsUYHFMdrIHkZphTN/2Hzzi78R08NuHfDBehym2VsPDL6Zn/JAD/JQdnRvbSsbQc4mVaU1m6JgtTEElg==

"@types/node@^18.11.0":
  version "18.11.18"
  resolved "https://registry.yarnpkg.com/@types/node/-/node-18.11.18.tgz#8dfb97f0da23c2293e554c5a50d61ef134d7697f"
  integrity sha512-DHQpWGjyQKSHj3ebjFI/wRKcqQcdR+MoFBygntYOZytCqNfkd2ZC4ARDJ2DQqhjH5p85Nnd3jhUJIXrszFX/JA==
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 2
        
        babel_dep = next(d for d in deps if d.name == '@babel/core')
        assert babel_dep.version == '7.20.12'
        
        types_dep = next(d for d in deps if d.name == '@types/node')
        assert types_dep.version == '18.11.18'
    
    def test_parse_yarn_v1_multiple_versions(self):
        """Test parsing packages with multiple version specs in Yarn v1."""
        content = '''# yarn lockfile v1

lodash@^4.17.20, lodash@^4.17.21:
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 1
        
        lodash_dep = deps[0]
        assert lodash_dep.name == 'lodash'
        assert lodash_dep.version == '4.17.21'
    
    def test_parse_yarn_v2_format(self):
        """Test parsing Yarn v2+ (Berry) YAML format."""
        content = '''__metadata:
  version: 6
  cacheKey: 8

"lodash@npm:^4.17.21":
  version: 4.17.21
  resolution: "lodash@npm:4.17.21"
  checksum: eb835a2e51d381e561e508ce932ea50a8e334a2ceaca583b5b1bdd06c1a3a4b7

"react@npm:^18.2.0":
  version: 18.2.0
  resolution: "react@npm:18.2.0"
  dependencies:
    loose-envify: ^1.1.0
  checksum: 88e38092da087d7519436d0947f66cf3d3ac9a9e0552739b7e2e0dc1e2b9e8e5

"@babel/core@npm:^7.20.0":
  version: 7.20.12
  resolution: "@babel/core@npm:7.20.12"
  checksum: 7930db57443c6714ad216953d772d4d83d090f03
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 3
        
        lodash_dep = next(d for d in deps if d.name == 'lodash')
        assert lodash_dep.version == '4.17.21'
        
        react_dep = next(d for d in deps if d.name == 'react')
        assert react_dep.version == '18.2.0'
        
        babel_dep = next(d for d in deps if d.name == '@babel/core')
        assert babel_dep.version == '7.20.12'
    
    def test_parse_yarn_v2_workspace_packages(self):
        """Test parsing workspace packages in Yarn v2 format."""
        content = '''__metadata:
  version: 6

"my-app@workspace:.":
  version: 0.0.0-use.local
  resolution: "my-app@workspace:."
  dependencies:
    lodash: ^4.17.21
  languageName: unknown
  linkType: soft

"lodash@npm:^4.17.21":
  version: 4.17.21
  resolution: "lodash@npm:4.17.21"
  checksum: eb835a2e51d381e561e508ce932ea50a8e334a2ceaca583b5b1bdd06c1a3a4b7
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 2
        
        # Should include both workspace and npm packages
        package_names = {d.name for d in deps}
        assert package_names == {'my-app', 'lodash'}
    
    def test_detect_yarn_v2_format(self):
        """Test detection of Yarn v2+ format."""
        v1_content = '''# yarn lockfile v1
lodash@^4.17.21:
  version "4.17.21"
'''
        
        v2_content = '''__metadata:
  version: 6
  cacheKey: 8

"lodash@npm:^4.17.21":
  version: 4.17.21
'''
        
        assert self.parser._is_yarn_v2_format(v1_content) is False
        assert self.parser._is_yarn_v2_format(v2_content) is True
    
    def test_extract_package_name_v1(self):
        """Test package name extraction for Yarn v1 format."""
        test_cases = [
            ('lodash@^4.17.21', 'lodash'),
            ('@babel/core@^7.20.0', '@babel/core'),
            ('"@types/node@^18.11.0"', '@types/node'),
            ('package@^1.0.0, package@^1.1.0', 'package'),
            ('react@^18.2.0', 'react'),
        ]
        
        for package_spec, expected_name in test_cases:
            result = self.parser._extract_package_name_v1(package_spec)
            assert result == expected_name, f"Failed for {package_spec}: got {result}, expected {expected_name}"
    
    def test_extract_package_name_v2(self):
        """Test package name extraction for Yarn v2+ format."""
        test_cases = [
            ('lodash@npm:^4.17.21', 'lodash'),
            ('@babel/core@npm:^7.20.0', '@babel/core'),
            ('"@types/node@npm:^18.11.0"', '@types/node'),
            ('my-app@workspace:.', 'my-app'),
            ('package@file:../local', 'package'),
            ('react@npm:^18.2.0', 'react'),
        ]
        
        for package_spec, expected_name in test_cases:
            result = self.parser._extract_package_name_v2(package_spec)
            assert result == expected_name, f"Failed for {package_spec}: got {result}, expected {expected_name}"
    
    def test_parse_empty_yarn_lock(self):
        """Test parsing empty yarn.lock file."""
        content = '''# yarn lockfile v1
'''
        
        deps = self.parser.parse(content)
        assert len(deps) == 0
    
    def test_parse_invalid_yaml_v2(self):
        """Test that invalid YAML in v2 format raises ValueError."""
        content = '''__metadata:
  version: 6
  cacheKey: 8

"lodash@npm:^4.17.21":
  version: 4.17.21
  resolution: "lodash@npm:4.17.21"
  checksum: [invalid yaml structure
'''
        
        with pytest.raises(ValueError, match="Invalid YAML"):
            self.parser.parse(content)
    
    def test_parse_malformed_v1_format(self):
        """Test parsing malformed v1 format (should not crash)."""
        content = '''# yarn lockfile v1

lodash@^4.17.21:
  # Missing version line
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz"

react@^18.2.0:
  version "18.2.0"
  resolved "https://registry.yarnpkg.com/react/-/react-18.2.0.tgz"
'''
        
        # Should parse what it can and skip malformed entries
        deps = self.parser.parse(content)
        assert len(deps) == 1
        assert deps[0].name == 'react'
        assert deps[0].version == '18.2.0'