# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyusb
else:
    import _pyusb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


HID_DEVICE = _pyusb.HID_DEVICE
class hid_device(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fd = property(_pyusb.hid_device_fd_get, _pyusb.hid_device_fd_set)
    output_report_length = property(_pyusb.hid_device_output_report_length_get, _pyusb.hid_device_output_report_length_set)
    input_report_length = property(_pyusb.hid_device_input_report_length_get, _pyusb.hid_device_input_report_length_set)

    def __init__(self):
        _pyusb.hid_device_swiginit(self, _pyusb.new_hid_device())
    __swig_destroy__ = _pyusb.delete_hid_device

# Register hid_device in _pyusb:
_pyusb.hid_device_swigregister(hid_device)
class CHid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyusb.CHid_swiginit(self, _pyusb.new_CHid())
    __swig_destroy__ = _pyusb.delete_CHid

    def open(self, hidName, mode):
        return _pyusb.CHid_open(self, hidName, mode)

    def read(self, data, length, milliseconds):
        return _pyusb.CHid_read(self, data, length, milliseconds)

    def write(self, data, length, milliseconds):
        return _pyusb.CHid_write(self, data, length, milliseconds)

    def close(self):
        return _pyusb.CHid_close(self)

    def get_output_report_length(self):
        return _pyusb.CHid_get_output_report_length(self)

    def get_input_report_length(self):
        return _pyusb.CHid_get_input_report_length(self)

    def get_hid_fd(self):
        return _pyusb.CHid_get_hid_fd(self)

# Register CHid in _pyusb:
_pyusb.CHid_swigregister(CHid)

