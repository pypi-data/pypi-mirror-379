"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, List, Mapping, Optional, Union


class Transactions(BaseSDK):
    def list(
        self,
        *,
        state_code: Optional[str] = None,
        transaction_type: Optional[str] = None,
        transaction_source: Optional[str] = None,
        search_query: Optional[str] = None,
        country: Optional[List[models.CountryCodeEnum]] = None,
        state: Optional[str] = None,
        address_status_in: Optional[
            str
        ] = "UNVERIFIED,INVALID,PARTIALLY_VERIFIED,VERIFIED,UNVERIFIABLE",
        status: Optional[models.TransactionStatusEnum] = None,
        filing_id: Optional[str] = None,
        order_by: Optional[str] = "date,state,customer_name,status",
        date_gte: Optional[str] = None,
        date_lte: Optional[str] = None,
        processing_status_in: Optional[str] = None,
        marketplace: Optional[bool] = None,
        exempt_in: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageTransactionRead:
        r"""Get Transactions

        The Get Transactions API retrieves a list of transactions with
        optional filtering, sorting, and pagination.

        :param state_code: Filter transactions by state code.
        :param transaction_type: Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
        :param transaction_source: Filter transactions based on the source.
        :param search_query: Search for transactions using a general query         (e.g., order ID, customer name).
        :param country: Filter transactions by country code         (ISO 3166-1 alpha-2 format, e.g., US).
        :param state: Filter by full state name (e.g., California).
        :param address_status_in: Filter by address status (e.g., UNVERIFIED, INVALID,         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
        :param status: Filter by transaction status (e.g., PENDING, COMMITTED,         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
        :param filing_id: Retrieve transactions linked to a specific filing ID.
        :param order_by: Sort results based on specified fields.         Prefix with - for descending order (e.g., -date for newest first).
        :param date_gte: Retrieve transactions with a date         greater than or equal to (YYYY-MM-DD).
        :param date_lte: Retrieve transactions with a date         less than or equal to (YYYY-MM-DD).
        :param processing_status_in: Filter transactions based on processing status.         Multiple values can be passed as a comma-separated list.
        :param marketplace: Filter transactions by marketplace (e.g., AMAZON, EBAY).
        :param exempt_in: Filter transactions by exemption status.         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionsV1TransactionsGetRequest(
            state_code=state_code,
            transaction_type=transaction_type,
            transaction_source=transaction_source,
            search_query=search_query,
            country=country,
            state=state,
            address_status_in=address_status_in,
            status=status,
            filing_id=filing_id,
            order_by=order_by,
            date_gte=date_gte,
            date_lte=date_lte,
            processing_status_in=processing_status_in,
            marketplace=marketplace,
            exempt_in=exempt_in,
            page=page,
            size=size,
        )

        req = self._build_request(
            method="GET",
            path="/v1/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_v1_transactions_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageTransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        state_code: Optional[str] = None,
        transaction_type: Optional[str] = None,
        transaction_source: Optional[str] = None,
        search_query: Optional[str] = None,
        country: Optional[List[models.CountryCodeEnum]] = None,
        state: Optional[str] = None,
        address_status_in: Optional[
            str
        ] = "UNVERIFIED,INVALID,PARTIALLY_VERIFIED,VERIFIED,UNVERIFIABLE",
        status: Optional[models.TransactionStatusEnum] = None,
        filing_id: Optional[str] = None,
        order_by: Optional[str] = "date,state,customer_name,status",
        date_gte: Optional[str] = None,
        date_lte: Optional[str] = None,
        processing_status_in: Optional[str] = None,
        marketplace: Optional[bool] = None,
        exempt_in: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageTransactionRead:
        r"""Get Transactions

        The Get Transactions API retrieves a list of transactions with
        optional filtering, sorting, and pagination.

        :param state_code: Filter transactions by state code.
        :param transaction_type: Filter by transaction type (e.g., SALE, FULL_CREDIT_NOTE,         PARTIAL_CREDIT_NOTE, ARCHIVE etc.).
        :param transaction_source: Filter transactions based on the source.
        :param search_query: Search for transactions using a general query         (e.g., order ID, customer name).
        :param country: Filter transactions by country code         (ISO 3166-1 alpha-2 format, e.g., US).
        :param state: Filter by full state name (e.g., California).
        :param address_status_in: Filter by address status (e.g., UNVERIFIED, INVALID,         PARTIALLY_VERIFIED, VERIFIED, UNVERIFIABLE).
        :param status: Filter by transaction status (e.g., PENDING, COMMITTED,         CANCELLED, FULLY_REFUNDED, PARTIALLY_REFUNDED, ARCHIVED).
        :param filing_id: Retrieve transactions linked to a specific filing ID.
        :param order_by: Sort results based on specified fields.         Prefix with - for descending order (e.g., -date for newest first).
        :param date_gte: Retrieve transactions with a date         greater than or equal to (YYYY-MM-DD).
        :param date_lte: Retrieve transactions with a date         less than or equal to (YYYY-MM-DD).
        :param processing_status_in: Filter transactions based on processing status.         Multiple values can be passed as a comma-separated list.
        :param marketplace: Filter transactions by marketplace (e.g., AMAZON, EBAY).
        :param exempt_in: Filter transactions by exemption status.         Multiple values can be passed as a comma-separated list (e.g., EXEMPT,TAXABLE).
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionsV1TransactionsGetRequest(
            state_code=state_code,
            transaction_type=transaction_type,
            transaction_source=transaction_source,
            search_query=search_query,
            country=country,
            state=state,
            address_status_in=address_status_in,
            status=status,
            filing_id=filing_id,
            order_by=order_by,
            date_gte=date_gte,
            date_lte=date_lte,
            processing_status_in=processing_status_in,
            marketplace=marketplace,
            exempt_in=exempt_in,
            page=page,
            size=size,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_v1_transactions_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageTransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create(
        self,
        *,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressPublic],
            List[models.TransactionAddressPublicTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemBuilder],
            List[models.TransactionItemBuilderTypedDict],
        ],
        customer: Union[models.CustomerBaseBase, models.CustomerBaseBaseTypedDict],
        type_: models.TransactionTypeEnum,
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Transaction

        Create a transaction.

        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param customer:
        :param type:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.TransactionPublicRequest(
            requires_exemption=utils.get_pydantic_model(
                requires_exemption, Optional[models.ExemptionRequired]
            ),
            organization_id=organization_id,
            external_id=external_id,
            date_=date_,
            shop_date=shop_date,
            shop_date_tz=shop_date_tz,
            status=status,
            description=description,
            refund_status=refund_status,
            total_amount=total_amount,
            customer_id=customer_id,
            marketplace=marketplace,
            exempt=exempt,
            exemptions=utils.get_pydantic_model(
                exemptions, Optional[List[models.Exemption]]
            ),
            related_to=related_to,
            secondary_external_id=secondary_external_id,
            secondary_source=secondary_source,
            external_friendly_id=external_friendly_id,
            total_tax_amount_imported=total_tax_amount_imported,
            tax_rate_imported=tax_rate_imported,
            total_tax_amount_calculated=total_tax_amount_calculated,
            tax_rate_calculated=tax_rate_calculated,
            total_tax_liability_amount=total_tax_liability_amount,
            tax_liability_source=tax_liability_source,
            taxable_amount=taxable_amount,
            currency=currency,
            locked=locked,
            source=source,
            connection_id=connection_id,
            filing_id=filing_id,
            city=city,
            county=county,
            state=state,
            country=country,
            postal_code=postal_code,
            tax_id=tax_id,
            addresses=utils.get_pydantic_model(
                addresses, List[models.TransactionAddressPublic]
            ),
            transaction_items=utils.get_pydantic_model(
                transaction_items, List[models.TransactionItemBuilder]
            ),
            customer=utils.get_pydantic_model(customer, models.CustomerBaseBase),
            type=type_,
        )

        req = self._build_request(
            method="POST",
            path="/v1/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.TransactionPublicRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_transaction_v1_transactions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["400", "401"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_async(
        self,
        *,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressPublic],
            List[models.TransactionAddressPublicTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemBuilder],
            List[models.TransactionItemBuilderTypedDict],
        ],
        customer: Union[models.CustomerBaseBase, models.CustomerBaseBaseTypedDict],
        type_: models.TransactionTypeEnum,
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Transaction

        Create a transaction.

        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param customer:
        :param type:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.TransactionPublicRequest(
            requires_exemption=utils.get_pydantic_model(
                requires_exemption, Optional[models.ExemptionRequired]
            ),
            organization_id=organization_id,
            external_id=external_id,
            date_=date_,
            shop_date=shop_date,
            shop_date_tz=shop_date_tz,
            status=status,
            description=description,
            refund_status=refund_status,
            total_amount=total_amount,
            customer_id=customer_id,
            marketplace=marketplace,
            exempt=exempt,
            exemptions=utils.get_pydantic_model(
                exemptions, Optional[List[models.Exemption]]
            ),
            related_to=related_to,
            secondary_external_id=secondary_external_id,
            secondary_source=secondary_source,
            external_friendly_id=external_friendly_id,
            total_tax_amount_imported=total_tax_amount_imported,
            tax_rate_imported=tax_rate_imported,
            total_tax_amount_calculated=total_tax_amount_calculated,
            tax_rate_calculated=tax_rate_calculated,
            total_tax_liability_amount=total_tax_liability_amount,
            tax_liability_source=tax_liability_source,
            taxable_amount=taxable_amount,
            currency=currency,
            locked=locked,
            source=source,
            connection_id=connection_id,
            filing_id=filing_id,
            city=city,
            county=county,
            state=state,
            country=country,
            postal_code=postal_code,
            tax_id=tax_id,
            addresses=utils.get_pydantic_model(
                addresses, List[models.TransactionAddressPublic]
            ),
            transaction_items=utils.get_pydantic_model(
                transaction_items, List[models.TransactionItemBuilder]
            ),
            customer=utils.get_pydantic_model(customer, models.CustomerBaseBase),
            type=type_,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.TransactionPublicRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_transaction_v1_transactions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "202", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["400", "401"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get_by_external_id(
        self,
        *,
        external_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Get Transaction By External Id

        Retrieves a specific transaction based on its external ID.
        This allows users to fetch transaction details using an identifier from an external system.

        :param external_id: The unique external identifier of the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.GetTransactionByExternalIDV1TransactionsExternalExternalIDGetRequest(
                external_id=external_id,
            )
        )

        req = self._build_request(
            method="GET",
            path="/v1/transactions/external/{external_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transaction_by_external_id_v1_transactions_external__external_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_by_external_id_async(
        self,
        *,
        external_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Get Transaction By External Id

        Retrieves a specific transaction based on its external ID.
        This allows users to fetch transaction details using an identifier from an external system.

        :param external_id: The unique external identifier of the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.GetTransactionByExternalIDV1TransactionsExternalExternalIDGetRequest(
                external_id=external_id,
            )
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/transactions/external/{external_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transaction_by_external_id_v1_transactions_external__external_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        transaction_id: str,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressBuilder],
            List[models.TransactionAddressBuilderTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemCreateUpdate],
            List[models.TransactionItemCreateUpdateTypedDict],
        ],
        customer: Union[models.CustomerUpdate, models.CustomerUpdateTypedDict],
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Update Transaction

        Update a specific transaction by its ID.

        :param transaction_id:
        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param customer:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateTransactionV1TransactionsTransactionIDPutRequest(
            transaction_id=transaction_id,
            transaction_update=models.TransactionUpdate(
                requires_exemption=utils.get_pydantic_model(
                    requires_exemption, Optional[models.ExemptionRequired]
                ),
                organization_id=organization_id,
                external_id=external_id,
                date_=date_,
                shop_date=shop_date,
                shop_date_tz=shop_date_tz,
                status=status,
                description=description,
                refund_status=refund_status,
                total_amount=total_amount,
                customer_id=customer_id,
                marketplace=marketplace,
                exempt=exempt,
                exemptions=utils.get_pydantic_model(
                    exemptions, Optional[List[models.Exemption]]
                ),
                related_to=related_to,
                secondary_external_id=secondary_external_id,
                secondary_source=secondary_source,
                external_friendly_id=external_friendly_id,
                total_tax_amount_imported=total_tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                total_tax_amount_calculated=total_tax_amount_calculated,
                tax_rate_calculated=tax_rate_calculated,
                total_tax_liability_amount=total_tax_liability_amount,
                tax_liability_source=tax_liability_source,
                taxable_amount=taxable_amount,
                currency=currency,
                locked=locked,
                source=source,
                connection_id=connection_id,
                filing_id=filing_id,
                city=city,
                county=county,
                state=state,
                country=country,
                postal_code=postal_code,
                tax_id=tax_id,
                addresses=utils.get_pydantic_model(
                    addresses, List[models.TransactionAddressBuilder]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.TransactionItemCreateUpdate]
                ),
                customer=utils.get_pydantic_model(customer, models.CustomerUpdate),
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/v1/transactions/{transaction_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.transaction_update,
                False,
                False,
                "json",
                models.TransactionUpdate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_transaction_v1_transactions__transaction_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        transaction_id: str,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressBuilder],
            List[models.TransactionAddressBuilderTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemCreateUpdate],
            List[models.TransactionItemCreateUpdateTypedDict],
        ],
        customer: Union[models.CustomerUpdate, models.CustomerUpdateTypedDict],
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Update Transaction

        Update a specific transaction by its ID.

        :param transaction_id:
        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param customer:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateTransactionV1TransactionsTransactionIDPutRequest(
            transaction_id=transaction_id,
            transaction_update=models.TransactionUpdate(
                requires_exemption=utils.get_pydantic_model(
                    requires_exemption, Optional[models.ExemptionRequired]
                ),
                organization_id=organization_id,
                external_id=external_id,
                date_=date_,
                shop_date=shop_date,
                shop_date_tz=shop_date_tz,
                status=status,
                description=description,
                refund_status=refund_status,
                total_amount=total_amount,
                customer_id=customer_id,
                marketplace=marketplace,
                exempt=exempt,
                exemptions=utils.get_pydantic_model(
                    exemptions, Optional[List[models.Exemption]]
                ),
                related_to=related_to,
                secondary_external_id=secondary_external_id,
                secondary_source=secondary_source,
                external_friendly_id=external_friendly_id,
                total_tax_amount_imported=total_tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                total_tax_amount_calculated=total_tax_amount_calculated,
                tax_rate_calculated=tax_rate_calculated,
                total_tax_liability_amount=total_tax_liability_amount,
                tax_liability_source=tax_liability_source,
                taxable_amount=taxable_amount,
                currency=currency,
                locked=locked,
                source=source,
                connection_id=connection_id,
                filing_id=filing_id,
                city=city,
                county=county,
                state=state,
                country=country,
                postal_code=postal_code,
                tax_id=tax_id,
                addresses=utils.get_pydantic_model(
                    addresses, List[models.TransactionAddressBuilder]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.TransactionItemCreateUpdate]
                ),
                customer=utils.get_pydantic_model(customer, models.CustomerUpdate),
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/v1/transactions/{transaction_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.transaction_update,
                False,
                False,
                "json",
                models.TransactionUpdate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_transaction_v1_transactions__transaction_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get_by_id(
        self,
        *,
        transaction_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Get Transaction By Id

        The Get Transaction By Id API retrieves detailed information
        about a specific transaction by providing its unique transaction ID.

        :param transaction_id: The unique identifier of the transaction to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionByIDV1TransactionsTransactionIDGetRequest(
            transaction_id=transaction_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/transactions/{transaction_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transaction_by_id_v1_transactions__transaction_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_by_id_async(
        self,
        *,
        transaction_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Get Transaction By Id

        The Get Transaction By Id API retrieves detailed information
        about a specific transaction by providing its unique transaction ID.

        :param transaction_id: The unique identifier of the transaction to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionByIDV1TransactionsTransactionIDGetRequest(
            transaction_id=transaction_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/transactions/{transaction_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transaction_by_id_v1_transactions__transaction_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get_by_filing_id(
        self,
        *,
        filing_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.TransactionRead]:
        r"""Get Transactions By Filing Id

        Retrieve transactions by filing ID.

        :param filing_id: The unique identifier of the filing         whose transactions you wish to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.GetTransactionsByFilingIDV1TransactionsFilingsFilingIDGetRequest(
                filing_id=filing_id,
            )
        )

        req = self._build_request(
            method="GET",
            path="/v1/transactions/filings/{filing_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_by_filing_id_v1_transactions_filings__filing_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.TransactionRead], http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_by_filing_id_async(
        self,
        *,
        filing_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.TransactionRead]:
        r"""Get Transactions By Filing Id

        Retrieve transactions by filing ID.

        :param filing_id: The unique identifier of the filing         whose transactions you wish to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.GetTransactionsByFilingIDV1TransactionsFilingsFilingIDGetRequest(
                filing_id=filing_id,
            )
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/transactions/filings/{filing_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_by_filing_id_v1_transactions_filings__filing_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.TransactionRead], http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcTransactionsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcTransactionsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create_credit_note(
        self,
        *,
        original_transaction_id: str,
        external_id: str,
        date_: datetime,
        status: models.Status,
        currency: models.CurrencyEnum,
        transaction_items: Union[
            List[models.CreditNoteItemCreateUpdate],
            List[models.CreditNoteItemCreateUpdateTypedDict],
        ],
        description: Optional[str] = None,
        total_amount: Optional[float] = 0.00,
        marketplace: Optional[bool] = False,
        tax_amount_imported: Optional[float] = None,
        tax_rate_imported: Optional[float] = None,
        taxable_amount: Optional[float] = None,
        addresses: Optional[
            Union[
                List[models.TransactionAddressBuilder],
                List[models.TransactionAddressBuilderTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Credit Note By Transaction Id

        Create a new credit note for a specific transaction.

        :param original_transaction_id:
        :param external_id: Unique identifier for the credit note in the external system.
        :param date_: Date when the credit note was issued or created.
        :param status: Current state of the credit note in its lifecycle.
        :param currency:
        :param transaction_items: Detailed list of individual items included in this credit note.
        :param description: Brief explanation or reason for issuing the credit note.
        :param total_amount: Total monetary value of the credit note, including all items and taxes.
        :param marketplace: Indicates whether this credit note is associated with a marketplace transaction.
        :param tax_amount_imported: Pre-calculated total tax amount for the entire credit note, if provided by the external system.
        :param tax_rate_imported: Pre-calculated overall tax rate for the credit note, if provided by the external system.
        :param taxable_amount: Total portion of the credit note amount subject to taxation.
        :param addresses: A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.POSTCreateCreditNoteByTransactionIDRequest(
            original_transaction_id=original_transaction_id,
            credit_note_create=models.CreditNoteCreate(
                external_id=external_id,
                date_=date_,
                status=status,
                description=description,
                total_amount=total_amount,
                marketplace=marketplace,
                tax_amount_imported=tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                taxable_amount=taxable_amount,
                currency=currency,
                addresses=utils.get_pydantic_model(
                    addresses, Optional[List[models.TransactionAddressBuilder]]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.CreditNoteItemCreateUpdate]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v1/transactions/{original_transaction_id}/credit_notes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.credit_note_create,
                False,
                False,
                "json",
                models.CreditNoteCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="POST_create_credit_note_by_transaction_id",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_credit_note_async(
        self,
        *,
        original_transaction_id: str,
        external_id: str,
        date_: datetime,
        status: models.Status,
        currency: models.CurrencyEnum,
        transaction_items: Union[
            List[models.CreditNoteItemCreateUpdate],
            List[models.CreditNoteItemCreateUpdateTypedDict],
        ],
        description: Optional[str] = None,
        total_amount: Optional[float] = 0.00,
        marketplace: Optional[bool] = False,
        tax_amount_imported: Optional[float] = None,
        tax_rate_imported: Optional[float] = None,
        taxable_amount: Optional[float] = None,
        addresses: Optional[
            Union[
                List[models.TransactionAddressBuilder],
                List[models.TransactionAddressBuilderTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Credit Note By Transaction Id

        Create a new credit note for a specific transaction.

        :param original_transaction_id:
        :param external_id: Unique identifier for the credit note in the external system.
        :param date_: Date when the credit note was issued or created.
        :param status: Current state of the credit note in its lifecycle.
        :param currency:
        :param transaction_items: Detailed list of individual items included in this credit note.
        :param description: Brief explanation or reason for issuing the credit note.
        :param total_amount: Total monetary value of the credit note, including all items and taxes.
        :param marketplace: Indicates whether this credit note is associated with a marketplace transaction.
        :param tax_amount_imported: Pre-calculated total tax amount for the entire credit note, if provided by the external system.
        :param tax_rate_imported: Pre-calculated overall tax rate for the credit note, if provided by the external system.
        :param taxable_amount: Total portion of the credit note amount subject to taxation.
        :param addresses: A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.POSTCreateCreditNoteByTransactionIDRequest(
            original_transaction_id=original_transaction_id,
            credit_note_create=models.CreditNoteCreate(
                external_id=external_id,
                date_=date_,
                status=status,
                description=description,
                total_amount=total_amount,
                marketplace=marketplace,
                tax_amount_imported=tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                taxable_amount=taxable_amount,
                currency=currency,
                addresses=utils.get_pydantic_model(
                    addresses, Optional[List[models.TransactionAddressBuilder]]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.CreditNoteItemCreateUpdate]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/transactions/{original_transaction_id}/credit_notes",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.credit_note_create,
                False,
                False,
                "json",
                models.CreditNoteCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="POST_create_credit_note_by_transaction_id",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update_credit_note(
        self,
        *,
        original_transaction_id: str,
        credit_note_id: str,
        external_id: str,
        date_: datetime,
        status: models.Status,
        currency: models.CurrencyEnum,
        transaction_items: Union[
            List[models.CreditNoteItemCreateUpdate],
            List[models.CreditNoteItemCreateUpdateTypedDict],
        ],
        description: Optional[str] = None,
        total_amount: Optional[float] = 0.00,
        marketplace: Optional[bool] = False,
        tax_amount_imported: Optional[float] = None,
        tax_rate_imported: Optional[float] = None,
        taxable_amount: Optional[float] = None,
        addresses: Optional[
            Union[
                List[models.TransactionAddressBuilder],
                List[models.TransactionAddressBuilderTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Any:
        r"""Update Credit Note By Transaction Id

        Update an existing credit note for a specific transaction.

        :param original_transaction_id:
        :param credit_note_id:
        :param external_id: Unique identifier for the credit note in the external system.
        :param date_: Date when the credit note was issued or created.
        :param status: Current state of the credit note in its lifecycle.
        :param currency:
        :param transaction_items: Detailed list of individual items included in this credit note.
        :param description: Brief explanation or reason for issuing the credit note.
        :param total_amount: Total monetary value of the credit note, including all items and taxes.
        :param marketplace: Indicates whether this credit note is associated with a marketplace transaction.
        :param tax_amount_imported: Pre-calculated total tax amount for the entire credit note, if provided by the external system.
        :param tax_rate_imported: Pre-calculated overall tax rate for the credit note, if provided by the external system.
        :param taxable_amount: Total portion of the credit note amount subject to taxation.
        :param addresses: A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PUTUpdateCreditNoteByTransactionIDRequest(
            original_transaction_id=original_transaction_id,
            credit_note_id=credit_note_id,
            credit_note_create=models.CreditNoteCreate(
                external_id=external_id,
                date_=date_,
                status=status,
                description=description,
                total_amount=total_amount,
                marketplace=marketplace,
                tax_amount_imported=tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                taxable_amount=taxable_amount,
                currency=currency,
                addresses=utils.get_pydantic_model(
                    addresses, Optional[List[models.TransactionAddressBuilder]]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.CreditNoteItemCreateUpdate]
                ),
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/v1/transactions/{original_transaction_id}/credit_notes/{credit_note_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.credit_note_create,
                False,
                False,
                "json",
                models.CreditNoteCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="PUT_update_credit_note_by_transaction_id",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Any, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_credit_note_async(
        self,
        *,
        original_transaction_id: str,
        credit_note_id: str,
        external_id: str,
        date_: datetime,
        status: models.Status,
        currency: models.CurrencyEnum,
        transaction_items: Union[
            List[models.CreditNoteItemCreateUpdate],
            List[models.CreditNoteItemCreateUpdateTypedDict],
        ],
        description: Optional[str] = None,
        total_amount: Optional[float] = 0.00,
        marketplace: Optional[bool] = False,
        tax_amount_imported: Optional[float] = None,
        tax_rate_imported: Optional[float] = None,
        taxable_amount: Optional[float] = None,
        addresses: Optional[
            Union[
                List[models.TransactionAddressBuilder],
                List[models.TransactionAddressBuilderTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Any:
        r"""Update Credit Note By Transaction Id

        Update an existing credit note for a specific transaction.

        :param original_transaction_id:
        :param credit_note_id:
        :param external_id: Unique identifier for the credit note in the external system.
        :param date_: Date when the credit note was issued or created.
        :param status: Current state of the credit note in its lifecycle.
        :param currency:
        :param transaction_items: Detailed list of individual items included in this credit note.
        :param description: Brief explanation or reason for issuing the credit note.
        :param total_amount: Total monetary value of the credit note, including all items and taxes.
        :param marketplace: Indicates whether this credit note is associated with a marketplace transaction.
        :param tax_amount_imported: Pre-calculated total tax amount for the entire credit note, if provided by the external system.
        :param tax_rate_imported: Pre-calculated overall tax rate for the credit note, if provided by the external system.
        :param taxable_amount: Total portion of the credit note amount subject to taxation.
        :param addresses: A list of TransactionAddressBuilder objects or None if no addresses are provided. This field represents the addresses associated with the transaction.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PUTUpdateCreditNoteByTransactionIDRequest(
            original_transaction_id=original_transaction_id,
            credit_note_id=credit_note_id,
            credit_note_create=models.CreditNoteCreate(
                external_id=external_id,
                date_=date_,
                status=status,
                description=description,
                total_amount=total_amount,
                marketplace=marketplace,
                tax_amount_imported=tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                taxable_amount=taxable_amount,
                currency=currency,
                addresses=utils.get_pydantic_model(
                    addresses, Optional[List[models.TransactionAddressBuilder]]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.CreditNoteItemCreateUpdate]
                ),
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/v1/transactions/{original_transaction_id}/credit_notes/{credit_note_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.credit_note_create,
                False,
                False,
                "json",
                models.CreditNoteCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="PUT_update_credit_note_by_transaction_id",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Any, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
