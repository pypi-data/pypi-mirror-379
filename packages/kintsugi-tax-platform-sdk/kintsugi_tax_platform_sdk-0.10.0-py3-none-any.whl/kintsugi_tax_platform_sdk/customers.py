"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, List, Mapping, Optional, Union


class Customers(BaseSDK):
    def list(
        self,
        *,
        search_query: Optional[str] = None,
        country: Optional[List[models.CountryCodeEnum]] = None,
        state: Optional[str] = None,
        source_in: Optional[str] = None,
        order_by: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageCustomerRead:
        r"""Get Customers

        The Get Customers API retrieves
        a paginated list of customers based on specified filters.
        This API allows searching, filtering by country and state, and sorting the results.

        :param search_query: Search term to filter customers by name or other details
        :param country: Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
        :param state: State or province code to filter customers
        :param source_in: Filter customers by source (comma-separated)
        :param order_by: Comma-separated list of fields to sort results by.
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomersV1Request(
            search_query=search_query,
            country=country,
            state=state,
            source_in=source_in,
            order_by=order_by,
            page=page,
            size=size,
        )

        req = self._build_request(
            method="GET",
            path="/v1/customers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customers_v1",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageCustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        search_query: Optional[str] = None,
        country: Optional[List[models.CountryCodeEnum]] = None,
        state: Optional[str] = None,
        source_in: Optional[str] = None,
        order_by: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageCustomerRead:
        r"""Get Customers

        The Get Customers API retrieves
        a paginated list of customers based on specified filters.
        This API allows searching, filtering by country and state, and sorting the results.

        :param search_query: Search term to filter customers by name or other details
        :param country: Country code in ISO 3166-1 alpha-2 format (e.g., 'US')
        :param state: State or province code to filter customers
        :param source_in: Filter customers by source (comma-separated)
        :param order_by: Comma-separated list of fields to sort results by.
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomersV1Request(
            search_query=search_query,
            country=country,
            state=state,
            source_in=source_in,
            order_by=order_by,
            page=page,
            size=size,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/customers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customers_v1",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.PageCustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create(
        self,
        *,
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        name: Optional[str] = None,
        external_id: Optional[str] = None,
        status: Optional[models.StatusEnum] = None,
        email: Optional[str] = None,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        address_status: Optional[models.AddressStatus] = None,
        registration_number: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        customer_tax_registrations: Optional[
            Union[
                List[models.CustomerTaxRegistrationRead],
                List[models.CustomerTaxRegistrationReadTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Create Customer

        The Create Customer API enables the creation of a new customer record with essential
        details like name, contact information, and address, along with optional metadata.

        :param phone: Customer's phone number
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param name: Name of the customer.
        :param external_id: External identifier associated with the customer.
        :param status:
        :param email: Customer's email address
        :param source:
        :param connection_id: Identifier for the connection source, if applicable.
        :param address_status:
        :param registration_number: Registration number of the customer.
        :param external_friendly_id: External friendly identifier associated with the customer. We need it for netsuite.
        :param customer_tax_registrations: Customer tax registrations associated with the customer.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CustomerCreate(
            phone=phone,
            street_1=street_1,
            street_2=street_2,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country=country,
            full_address=full_address,
            name=name,
            external_id=external_id,
            status=status,
            email=email,
            source=source,
            connection_id=connection_id,
            address_status=address_status,
            registration_number=registration_number,
            external_friendly_id=external_friendly_id,
            customer_tax_registrations=utils.get_pydantic_model(
                customer_tax_registrations,
                Optional[List[models.CustomerTaxRegistrationRead]],
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v1/customers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CustomerCreate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_customer_v1_customers_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_async(
        self,
        *,
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        name: Optional[str] = None,
        external_id: Optional[str] = None,
        status: Optional[models.StatusEnum] = None,
        email: Optional[str] = None,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        address_status: Optional[models.AddressStatus] = None,
        registration_number: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        customer_tax_registrations: Optional[
            Union[
                List[models.CustomerTaxRegistrationRead],
                List[models.CustomerTaxRegistrationReadTypedDict],
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Create Customer

        The Create Customer API enables the creation of a new customer record with essential
        details like name, contact information, and address, along with optional metadata.

        :param phone: Customer's phone number
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param name: Name of the customer.
        :param external_id: External identifier associated with the customer.
        :param status:
        :param email: Customer's email address
        :param source:
        :param connection_id: Identifier for the connection source, if applicable.
        :param address_status:
        :param registration_number: Registration number of the customer.
        :param external_friendly_id: External friendly identifier associated with the customer. We need it for netsuite.
        :param customer_tax_registrations: Customer tax registrations associated with the customer.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CustomerCreate(
            phone=phone,
            street_1=street_1,
            street_2=street_2,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country=country,
            full_address=full_address,
            name=name,
            external_id=external_id,
            status=status,
            email=email,
            source=source,
            connection_id=connection_id,
            address_status=address_status,
            registration_number=registration_number,
            external_friendly_id=external_friendly_id,
            customer_tax_registrations=utils.get_pydantic_model(
                customer_tax_registrations,
                Optional[List[models.CustomerTaxRegistrationRead]],
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/customers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CustomerCreate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_customer_v1_customers_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get(
        self,
        *,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Get Customer By Id

        The Get Customer By ID API retrieves the details of a single customer
        using their unique identifier. It returns customer-specific data,
        including contact information, address, name and metadata, etc.

        :param customer_id: Unique identifier of the customer
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomerByIDV1CustomersCustomerIDGetRequest(
            customer_id=customer_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/customers/{customer_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customer_by_id_v1_customers__customer_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_async(
        self,
        *,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Get Customer By Id

        The Get Customer By ID API retrieves the details of a single customer
        using their unique identifier. It returns customer-specific data,
        including contact information, address, name and metadata, etc.

        :param customer_id: Unique identifier of the customer
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomerByIDV1CustomersCustomerIDGetRequest(
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/customers/{customer_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customer_by_id_v1_customers__customer_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        customer_id: str,
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional[models.StatusEnum] = None,
        email: Optional[str] = None,
        source: Optional[models.SourceEnum] = None,
        address_status: Optional[models.AddressStatus] = None,
        external_id: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Update Customer

        The Update Customer API allows you to modify an existing customer's
        information using their unique identifier,
        enabling updates to their details as needed.

        :param customer_id: Unique identifier of the customer to be retrieved.
        :param phone: Phone number associated with the customer.
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param name: Name of the customer.
        :param status:
        :param email: Email address of the customer.
        :param source:
        :param address_status:
        :param external_id: External identifier associated with the customer
        :param external_friendly_id: External friendly identifier associated with the customer. We need it for netsuite.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateCustomerV1CustomersCustomerIDPutRequest(
            customer_id=customer_id,
            customer_update=models.CustomerUpdate(
                phone=phone,
                street_1=street_1,
                street_2=street_2,
                city=city,
                county=county,
                state=state,
                postal_code=postal_code,
                country=country,
                full_address=full_address,
                name=name,
                status=status,
                email=email,
                source=source,
                address_status=address_status,
                external_id=external_id,
                external_friendly_id=external_friendly_id,
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/v1/customers/{customer_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.customer_update, False, False, "json", models.CustomerUpdate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_customer_v1_customers__customer_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        customer_id: str,
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        name: Optional[str] = None,
        status: Optional[models.StatusEnum] = None,
        email: Optional[str] = None,
        source: Optional[models.SourceEnum] = None,
        address_status: Optional[models.AddressStatus] = None,
        external_id: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Update Customer

        The Update Customer API allows you to modify an existing customer's
        information using their unique identifier,
        enabling updates to their details as needed.

        :param customer_id: Unique identifier of the customer to be retrieved.
        :param phone: Phone number associated with the customer.
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param name: Name of the customer.
        :param status:
        :param email: Email address of the customer.
        :param source:
        :param address_status:
        :param external_id: External identifier associated with the customer
        :param external_friendly_id: External friendly identifier associated with the customer. We need it for netsuite.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateCustomerV1CustomersCustomerIDPutRequest(
            customer_id=customer_id,
            customer_update=models.CustomerUpdate(
                phone=phone,
                street_1=street_1,
                street_2=street_2,
                city=city,
                county=county,
                state=state,
                postal_code=postal_code,
                country=country,
                full_address=full_address,
                name=name,
                status=status,
                email=email,
                source=source,
                address_status=address_status,
                external_id=external_id,
                external_friendly_id=external_friendly_id,
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/v1/customers/{customer_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.customer_update, False, False, "json", models.CustomerUpdate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_customer_v1_customers__customer_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcCustomersResponsesValidationErrorResponseData, http_res
            )
            raise errors.BackendSrcCustomersResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get_by_external_id(
        self,
        *,
        external_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Get Customer By External Id

        The Get Customer By External ID API retrieves the details of a single customer using
        their external identifier. This endpoint is useful for accessing customer data when only
        an external ID is available.

        :param external_id: The external identifier of the customer to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomerByExternalIDV1CustomersExternalExternalIDGetRequest(
            external_id=external_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/customers/external/{external_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customer_by_external_id_v1_customers_external__external_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_by_external_id_async(
        self,
        *,
        external_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CustomerRead:
        r"""Get Customer By External Id

        The Get Customer By External ID API retrieves the details of a single customer using
        their external identifier. This endpoint is useful for accessing customer data when only
        an external ID is available.

        :param external_id: The external identifier of the customer to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetCustomerByExternalIDV1CustomersExternalExternalIDGetRequest(
            external_id=external_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/customers/external/{external_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_customer_by_external_id_v1_customers_external__external_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.CustomerRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get_transactions(
        self,
        *,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.TransactionRead]:
        r"""Get Transactions By Customer Id

        Get a list of transactions for a customer by their unique ID.

        :param customer_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionsByCustomerIDV1CustomersCustomerIDTransactionsGetRequest(
            customer_id=customer_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/customers/{customer_id}/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_by_customer_id_v1_customers__customer_id__transactions_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.TransactionRead], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_transactions_async(
        self,
        *,
        customer_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.TransactionRead]:
        r"""Get Transactions By Customer Id

        Get a list of transactions for a customer by their unique ID.

        :param customer_id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetTransactionsByCustomerIDV1CustomersCustomerIDTransactionsGetRequest(
            customer_id=customer_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/customers/{customer_id}/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_transactions_by_customer_id_v1_customers__customer_id__transactions_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.TransactionRead], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create_transaction(
        self,
        *,
        customer_id_param: str,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressBuilder],
            List[models.TransactionAddressBuilderTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemCreateUpdate],
            List[models.TransactionItemCreateUpdateTypedDict],
        ],
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        address_status: Optional[models.AddressStatus] = None,
        processing_status: Optional[models.ProcessingStatusEnum] = None,
        destination_currency: Optional[models.CurrencyEnum] = None,
        converted_total_amount: Optional[float] = None,
        converted_total_tax_amount_imported: Optional[float] = None,
        converted_total_tax_amount_calculated: Optional[float] = None,
        conversion_rate: Optional[float] = None,
        converted_taxable_amount: Optional[float] = None,
        converted_total_discount: Optional[float] = None,
        converted_subtotal: Optional[float] = None,
        converted_total_tax_liability_amount: Optional[float] = None,
        customer: Optional[
            Union[models.CustomerCreate, models.CustomerCreateTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Transaction By Customer Id

        Create a new transaction for a specific customer.

        :param customer_id_param:
        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param address_status:
        :param processing_status: Our transaction state, used to determine when/if a transaction needs additional processing.
        :param destination_currency:
        :param converted_total_amount: Converted total amount.
        :param converted_total_tax_amount_imported: Converted imported tax amount.
        :param converted_total_tax_amount_calculated: Converted calculated tax amount.
        :param conversion_rate: Currency conversion rate.
        :param converted_taxable_amount: Converted taxable amount.
        :param converted_total_discount: Converted total discount amount.
        :param converted_subtotal: Converted subtotal amount.
        :param converted_total_tax_liability_amount: Converted total tax liability amount.
        :param customer:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateTransactionByCustomerIDV1CustomersCustomerIDTransactionsPostRequest(
            customer_id_param=customer_id_param,
            transaction_create=models.TransactionCreate(
                requires_exemption=utils.get_pydantic_model(
                    requires_exemption, Optional[models.ExemptionRequired]
                ),
                organization_id=organization_id,
                external_id=external_id,
                date_=date_,
                shop_date=shop_date,
                shop_date_tz=shop_date_tz,
                status=status,
                description=description,
                refund_status=refund_status,
                total_amount=total_amount,
                customer_id=customer_id,
                marketplace=marketplace,
                exempt=exempt,
                exemptions=utils.get_pydantic_model(
                    exemptions, Optional[List[models.Exemption]]
                ),
                related_to=related_to,
                secondary_external_id=secondary_external_id,
                secondary_source=secondary_source,
                external_friendly_id=external_friendly_id,
                total_tax_amount_imported=total_tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                total_tax_amount_calculated=total_tax_amount_calculated,
                tax_rate_calculated=tax_rate_calculated,
                total_tax_liability_amount=total_tax_liability_amount,
                tax_liability_source=tax_liability_source,
                taxable_amount=taxable_amount,
                currency=currency,
                locked=locked,
                source=source,
                connection_id=connection_id,
                filing_id=filing_id,
                city=city,
                county=county,
                state=state,
                country=country,
                postal_code=postal_code,
                tax_id=tax_id,
                address_status=address_status,
                processing_status=processing_status,
                destination_currency=destination_currency,
                converted_total_amount=converted_total_amount,
                converted_total_tax_amount_imported=converted_total_tax_amount_imported,
                converted_total_tax_amount_calculated=converted_total_tax_amount_calculated,
                conversion_rate=conversion_rate,
                converted_taxable_amount=converted_taxable_amount,
                converted_total_discount=converted_total_discount,
                converted_subtotal=converted_subtotal,
                converted_total_tax_liability_amount=converted_total_tax_liability_amount,
                addresses=utils.get_pydantic_model(
                    addresses, List[models.TransactionAddressBuilder]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.TransactionItemCreateUpdate]
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.CustomerCreate]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v1/customers/{customer_id}/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.transaction_create,
                False,
                False,
                "json",
                models.TransactionCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_transaction_by_customer_id_v1_customers__customer_id__transactions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_transaction_async(
        self,
        *,
        customer_id_param: str,
        organization_id: str,
        external_id: str,
        date_: datetime,
        addresses: Union[
            List[models.TransactionAddressBuilder],
            List[models.TransactionAddressBuilderTypedDict],
        ],
        transaction_items: Union[
            List[models.TransactionItemCreateUpdate],
            List[models.TransactionItemCreateUpdateTypedDict],
        ],
        requires_exemption: Optional[
            Union[models.ExemptionRequired, models.ExemptionRequiredTypedDict]
        ] = None,
        shop_date: Optional[str] = None,
        shop_date_tz: Optional[str] = None,
        status: Optional[models.TransactionStatusEnum] = None,
        description: Optional[str] = None,
        refund_status: Optional[models.TransactionRefundStatus] = None,
        total_amount: Optional[float] = 0.00,
        customer_id: Optional[str] = None,
        marketplace: Optional[bool] = False,
        exempt: Optional[models.TransactionExemptStatusEnum] = None,
        exemptions: Optional[
            Union[List[models.Exemption], List[models.ExemptionTypedDict]]
        ] = None,
        related_to: Optional[str] = None,
        secondary_external_id: Optional[str] = None,
        secondary_source: Optional[str] = None,
        external_friendly_id: Optional[str] = None,
        total_tax_amount_imported: Optional[float] = 0.00,
        tax_rate_imported: Optional[float] = 0.00,
        total_tax_amount_calculated: Optional[float] = 0.00,
        tax_rate_calculated: Optional[float] = 0.00,
        total_tax_liability_amount: Optional[float] = 0.00,
        tax_liability_source: Optional[models.TaxLiabilitySourceEnum] = None,
        taxable_amount: Optional[float] = 0.00,
        currency: Optional[models.CurrencyEnum] = None,
        locked: Optional[bool] = False,
        source: Optional[models.SourceEnum] = None,
        connection_id: Optional[str] = None,
        filing_id: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        postal_code: Optional[str] = None,
        tax_id: Optional[str] = None,
        address_status: Optional[models.AddressStatus] = None,
        processing_status: Optional[models.ProcessingStatusEnum] = None,
        destination_currency: Optional[models.CurrencyEnum] = None,
        converted_total_amount: Optional[float] = None,
        converted_total_tax_amount_imported: Optional[float] = None,
        converted_total_tax_amount_calculated: Optional[float] = None,
        conversion_rate: Optional[float] = None,
        converted_taxable_amount: Optional[float] = None,
        converted_total_discount: Optional[float] = None,
        converted_subtotal: Optional[float] = None,
        converted_total_tax_liability_amount: Optional[float] = None,
        customer: Optional[
            Union[models.CustomerCreate, models.CustomerCreateTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.TransactionRead:
        r"""Create Transaction By Customer Id

        Create a new transaction for a specific customer.

        :param customer_id_param:
        :param organization_id: Unique identifier of the organization.
        :param external_id: External identifier of the transaction.
        :param date_: Transaction date and time
        :param addresses:
        :param transaction_items:
        :param requires_exemption:
        :param shop_date: Transaction date in the shop's local timezone
        :param shop_date_tz: Timezone of the shop
        :param status:
        :param description: Description of the transaction.
        :param refund_status: Shopify has 2 order statuses for refund case: refunded and partially_refunded If the given order has different status from these 2, we will set the transaction's refund_status to PARTIALLY_REFUNDED by default.
        :param total_amount: Total amount of the transaction.
        :param customer_id: Unique identifier of the customer.
        :param marketplace: Indicates if transaction is marketplace-based.
        :param exempt: Based on transaction item exempt status. NOT EXEMPT: None of the items are NOT EXEMPT PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT FULLY_EXEMPT: All items sold in the transaction are EXEMPT
        :param exemptions: List of exemptions applied (if any).
        :param related_to: Related transaction identifier.
        :param secondary_external_id: Secondary External Identifier.
        :param secondary_source: Secondary source information
        :param external_friendly_id: Friendly identifier of the original item.
        :param total_tax_amount_imported: Imported tax amount.
        :param tax_rate_imported: Imported tax rate.
        :param total_tax_amount_calculated: Calculated tax amount.
        :param tax_rate_calculated: Calculated tax rate.
        :param total_tax_liability_amount: Total tax liability amount.
        :param tax_liability_source:
        :param taxable_amount: Taxable amount.
        :param currency:
        :param locked: Transaction lock status.
        :param source:
        :param connection_id: Connection Identifier
        :param filing_id: Filing identifier.
        :param city: City of the transaction address.
        :param county: County of the transaction address.
        :param state: State of the transaction address.
        :param country:
        :param postal_code: Postal code of the transaction.
        :param tax_id: Tax ID associated with the transaction
        :param address_status:
        :param processing_status: Our transaction state, used to determine when/if a transaction needs additional processing.
        :param destination_currency:
        :param converted_total_amount: Converted total amount.
        :param converted_total_tax_amount_imported: Converted imported tax amount.
        :param converted_total_tax_amount_calculated: Converted calculated tax amount.
        :param conversion_rate: Currency conversion rate.
        :param converted_taxable_amount: Converted taxable amount.
        :param converted_total_discount: Converted total discount amount.
        :param converted_subtotal: Converted subtotal amount.
        :param converted_total_tax_liability_amount: Converted total tax liability amount.
        :param customer:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateTransactionByCustomerIDV1CustomersCustomerIDTransactionsPostRequest(
            customer_id_param=customer_id_param,
            transaction_create=models.TransactionCreate(
                requires_exemption=utils.get_pydantic_model(
                    requires_exemption, Optional[models.ExemptionRequired]
                ),
                organization_id=organization_id,
                external_id=external_id,
                date_=date_,
                shop_date=shop_date,
                shop_date_tz=shop_date_tz,
                status=status,
                description=description,
                refund_status=refund_status,
                total_amount=total_amount,
                customer_id=customer_id,
                marketplace=marketplace,
                exempt=exempt,
                exemptions=utils.get_pydantic_model(
                    exemptions, Optional[List[models.Exemption]]
                ),
                related_to=related_to,
                secondary_external_id=secondary_external_id,
                secondary_source=secondary_source,
                external_friendly_id=external_friendly_id,
                total_tax_amount_imported=total_tax_amount_imported,
                tax_rate_imported=tax_rate_imported,
                total_tax_amount_calculated=total_tax_amount_calculated,
                tax_rate_calculated=tax_rate_calculated,
                total_tax_liability_amount=total_tax_liability_amount,
                tax_liability_source=tax_liability_source,
                taxable_amount=taxable_amount,
                currency=currency,
                locked=locked,
                source=source,
                connection_id=connection_id,
                filing_id=filing_id,
                city=city,
                county=county,
                state=state,
                country=country,
                postal_code=postal_code,
                tax_id=tax_id,
                address_status=address_status,
                processing_status=processing_status,
                destination_currency=destination_currency,
                converted_total_amount=converted_total_amount,
                converted_total_tax_amount_imported=converted_total_tax_amount_imported,
                converted_total_tax_amount_calculated=converted_total_tax_amount_calculated,
                conversion_rate=conversion_rate,
                converted_taxable_amount=converted_taxable_amount,
                converted_total_discount=converted_total_discount,
                converted_subtotal=converted_subtotal,
                converted_total_tax_liability_amount=converted_total_tax_liability_amount,
                addresses=utils.get_pydantic_model(
                    addresses, List[models.TransactionAddressBuilder]
                ),
                transaction_items=utils.get_pydantic_model(
                    transaction_items, List[models.TransactionItemCreateUpdate]
                ),
                customer=utils.get_pydantic_model(
                    customer, Optional[models.CustomerCreate]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/customers/{customer_id}/transactions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.transaction_create,
                False,
                False,
                "json",
                models.TransactionCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_transaction_by_customer_id_v1_customers__customer_id__transactions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.TransactionRead, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
