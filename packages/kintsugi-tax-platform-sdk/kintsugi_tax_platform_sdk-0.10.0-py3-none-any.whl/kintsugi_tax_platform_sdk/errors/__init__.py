"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .sdkerror import SDKError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .apierror import APIError
    from .backend_src_address_validation_responses_validationerrorresponse import (
        BackendSrcAddressValidationResponsesValidationErrorResponse,
        BackendSrcAddressValidationResponsesValidationErrorResponseData,
    )
    from .backend_src_customers_responses_validationerrorresponse import (
        BackendSrcCustomersResponsesValidationErrorResponse,
        BackendSrcCustomersResponsesValidationErrorResponseData,
    )
    from .backend_src_exemptions_responses_validationerrorresponse import (
        BackendSrcExemptionsResponsesValidationErrorResponse,
        BackendSrcExemptionsResponsesValidationErrorResponseData,
    )
    from .backend_src_filings_responses_validationerrorresponse import (
        BackendSrcFilingsResponsesValidationErrorResponse,
        BackendSrcFilingsResponsesValidationErrorResponseData,
    )
    from .backend_src_nexus_responses_validationerrorresponse import (
        BackendSrcNexusResponsesValidationErrorResponse,
        BackendSrcNexusResponsesValidationErrorResponseData,
    )
    from .backend_src_products_responses_validationerrorresponse import (
        BackendSrcProductsResponsesValidationErrorResponse,
        BackendSrcProductsResponsesValidationErrorResponseData,
    )
    from .backend_src_registrations_responses_validationerrorresponse import (
        BackendSrcRegistrationsResponsesValidationErrorResponse,
        BackendSrcRegistrationsResponsesValidationErrorResponseData,
    )
    from .backend_src_tax_estimation_responses_validationerrorresponse import (
        BackendSrcTaxEstimationResponsesValidationErrorResponse,
        BackendSrcTaxEstimationResponsesValidationErrorResponseData,
    )
    from .backend_src_transactions_responses_validationerrorresponse import (
        BackendSrcTransactionsResponsesValidationErrorResponse,
        BackendSrcTransactionsResponsesValidationErrorResponseData,
    )
    from .errorresponse import ErrorResponse, ErrorResponseData
    from .httpvalidationerror import HTTPValidationError, HTTPValidationErrorData
    from .no_response_error import NoResponseError
    from .responsevalidationerror import ResponseValidationError

__all__ = [
    "APIError",
    "BackendSrcAddressValidationResponsesValidationErrorResponse",
    "BackendSrcAddressValidationResponsesValidationErrorResponseData",
    "BackendSrcCustomersResponsesValidationErrorResponse",
    "BackendSrcCustomersResponsesValidationErrorResponseData",
    "BackendSrcExemptionsResponsesValidationErrorResponse",
    "BackendSrcExemptionsResponsesValidationErrorResponseData",
    "BackendSrcFilingsResponsesValidationErrorResponse",
    "BackendSrcFilingsResponsesValidationErrorResponseData",
    "BackendSrcNexusResponsesValidationErrorResponse",
    "BackendSrcNexusResponsesValidationErrorResponseData",
    "BackendSrcProductsResponsesValidationErrorResponse",
    "BackendSrcProductsResponsesValidationErrorResponseData",
    "BackendSrcRegistrationsResponsesValidationErrorResponse",
    "BackendSrcRegistrationsResponsesValidationErrorResponseData",
    "BackendSrcTaxEstimationResponsesValidationErrorResponse",
    "BackendSrcTaxEstimationResponsesValidationErrorResponseData",
    "BackendSrcTransactionsResponsesValidationErrorResponse",
    "BackendSrcTransactionsResponsesValidationErrorResponseData",
    "ErrorResponse",
    "ErrorResponseData",
    "HTTPValidationError",
    "HTTPValidationErrorData",
    "NoResponseError",
    "ResponseValidationError",
    "SDKError",
]

_dynamic_imports: dict[str, str] = {
    "APIError": ".apierror",
    "BackendSrcAddressValidationResponsesValidationErrorResponse": ".backend_src_address_validation_responses_validationerrorresponse",
    "BackendSrcAddressValidationResponsesValidationErrorResponseData": ".backend_src_address_validation_responses_validationerrorresponse",
    "BackendSrcCustomersResponsesValidationErrorResponse": ".backend_src_customers_responses_validationerrorresponse",
    "BackendSrcCustomersResponsesValidationErrorResponseData": ".backend_src_customers_responses_validationerrorresponse",
    "BackendSrcExemptionsResponsesValidationErrorResponse": ".backend_src_exemptions_responses_validationerrorresponse",
    "BackendSrcExemptionsResponsesValidationErrorResponseData": ".backend_src_exemptions_responses_validationerrorresponse",
    "BackendSrcFilingsResponsesValidationErrorResponse": ".backend_src_filings_responses_validationerrorresponse",
    "BackendSrcFilingsResponsesValidationErrorResponseData": ".backend_src_filings_responses_validationerrorresponse",
    "BackendSrcNexusResponsesValidationErrorResponse": ".backend_src_nexus_responses_validationerrorresponse",
    "BackendSrcNexusResponsesValidationErrorResponseData": ".backend_src_nexus_responses_validationerrorresponse",
    "BackendSrcProductsResponsesValidationErrorResponse": ".backend_src_products_responses_validationerrorresponse",
    "BackendSrcProductsResponsesValidationErrorResponseData": ".backend_src_products_responses_validationerrorresponse",
    "BackendSrcRegistrationsResponsesValidationErrorResponse": ".backend_src_registrations_responses_validationerrorresponse",
    "BackendSrcRegistrationsResponsesValidationErrorResponseData": ".backend_src_registrations_responses_validationerrorresponse",
    "BackendSrcTaxEstimationResponsesValidationErrorResponse": ".backend_src_tax_estimation_responses_validationerrorresponse",
    "BackendSrcTaxEstimationResponsesValidationErrorResponseData": ".backend_src_tax_estimation_responses_validationerrorresponse",
    "BackendSrcTransactionsResponsesValidationErrorResponse": ".backend_src_transactions_responses_validationerrorresponse",
    "BackendSrcTransactionsResponsesValidationErrorResponseData": ".backend_src_transactions_responses_validationerrorresponse",
    "ErrorResponse": ".errorresponse",
    "ErrorResponseData": ".errorresponse",
    "HTTPValidationError": ".httpvalidationerror",
    "HTTPValidationErrorData": ".httpvalidationerror",
    "NoResponseError": ".no_response_error",
    "ResponseValidationError": ".responsevalidationerror",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
