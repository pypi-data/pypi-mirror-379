"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countrycodeenum import CountryCodeEnum
from kintsugi_tax_platform_sdk.types import BaseModel
from kintsugi_tax_platform_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetFilingsV1FilingsGetRequestTypedDict(TypedDict):
    status_in: NotRequired[str]
    r"""Filter filings by status"""
    start_date: NotRequired[str]
    r"""Filter filings with a start date greater than or equal to this date."""
    end_date: NotRequired[str]
    r"""Filter filings with an end date less than or equal to this date."""
    date_filed_gte: NotRequired[str]
    r"""Filter filings filed on or after this date."""
    date_filed_lte: NotRequired[str]
    r"""Filter filings filed on or before this date."""
    order_by: NotRequired[str]
    r"""Comma-separated list of fields to sort the results."""
    state_code: NotRequired[str]
    r"""Filter filings by state code (e.g., CA for California)."""
    country_code: NotRequired[List[CountryCodeEnum]]
    r"""Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US)."""
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetFilingsV1FilingsGetRequest(BaseModel):
    status_in: Annotated[
        Optional[str],
        pydantic.Field(alias="status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "FILED,FILING,UNFILED,PAUSED"
    r"""Filter filings by status"""

    start_date: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings with a start date greater than or equal to this date."""

    end_date: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings with an end date less than or equal to this date."""

    date_filed_gte: Annotated[
        Optional[str],
        pydantic.Field(alias="date_filed__gte"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings filed on or after this date."""

    date_filed_lte: Annotated[
        Optional[str],
        pydantic.Field(alias="date_filed__lte"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings filed on or before this date."""

    order_by: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Comma-separated list of fields to sort the results."""

    state_code: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings by state code (e.g., CA for California)."""

    country_code: Annotated[
        Optional[List[CountryCodeEnum]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter filings by country code in ISO 3166-1 alpha-2 format (e.g., US)."""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""
