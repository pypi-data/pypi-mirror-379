"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, List, Mapping, Optional, Union


class AddressValidation(BaseSDK):
    def search(
        self,
        *,
        security: Union[
            models.SearchV1AddressValidationSearchPostSecurity,
            models.SearchV1AddressValidationSearchPostSecurityTypedDict,
        ],
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AddressSearchResponse]:
        r"""Search

        This API validates and enriches address information
        submitted by the user. It ensures that the address is standardized, accurate,
        and compliant with geographical and postal standards.
        The API also adds additional fields, such as county, when possible.

        :param security:
        :param phone: Phone number associated with the address.
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddressBase(
            phone=phone,
            street_1=street_1,
            street_2=street_2,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country=country,
            full_address=full_address,
        )

        req = self._build_request(
            method="POST",
            path="/v1/address_validation/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SearchV1AddressValidationSearchPostSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AddressBase
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search_v1_address_validation_search_post",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AddressSearchResponse], http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcAddressValidationResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcAddressValidationResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def search_async(
        self,
        *,
        security: Union[
            models.SearchV1AddressValidationSearchPostSecurity,
            models.SearchV1AddressValidationSearchPostSecurityTypedDict,
        ],
        phone: Optional[str] = None,
        street_1: Optional[str] = None,
        street_2: Optional[str] = None,
        city: Optional[str] = None,
        county: Optional[str] = None,
        state: Optional[str] = None,
        postal_code: Optional[str] = None,
        country: Optional[models.CountryCodeEnum] = None,
        full_address: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AddressSearchResponse]:
        r"""Search

        This API validates and enriches address information
        submitted by the user. It ensures that the address is standardized, accurate,
        and compliant with geographical and postal standards.
        The API also adds additional fields, such as county, when possible.

        :param security:
        :param phone: Phone number associated with the address.
        :param street_1: Primary street address.
        :param street_2: Additional street address details, such as an apartment or suite number.
        :param city: City where the customer resides.
        :param county: County or district of the customer.
        :param state: State or province of the customer.
        :param postal_code: ZIP or Postal code of the customer.
        :param country:
        :param full_address: Complete address string of the customer, which can be used as an alternative to individual fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AddressBase(
            phone=phone,
            street_1=street_1,
            street_2=street_2,
            city=city,
            county=county,
            state=state,
            postal_code=postal_code,
            country=country,
            full_address=full_address,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/address_validation/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.SearchV1AddressValidationSearchPostSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.AddressBase
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search_v1_address_validation_search_post",
                oauth2_scopes=None,
                security_source=security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AddressSearchResponse], http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcAddressValidationResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcAddressValidationResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def suggestions(
        self,
        *,
        line1: Optional[str] = None,
        line2: Optional[str] = None,
        line3: Optional[str] = None,
        city: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[str] = "US",
        postal_code: Optional[str] = "",
        id: Optional[int] = None,
        county: Optional[str] = None,
        full_address: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Any:
        r"""Suggestions

        This API endpoint provides address suggestions based on
        partial input data. It helps users auto-complete and validate addresses efficiently
        by returning a list of suggested addresses that match the input criteria.
        This improves accuracy, increases speed, reduces errors,
        and streamlines the data entry process.

        :param line1: Primary address line, such as street name and number
        :param line2: Additional address details, such as an apartment or suite number
        :param line3: Additional address details for complex addresses
        :param city: The city or town name for the address
        :param state: State, province, or region of the address
        :param country: Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).         Defaults to 'US'.         should not be empty. Not validating here as the validation         structure can be different for different providers
        :param postal_code: ZIP or postal code for the address. Can be empty for some locales.         Not validating here as the validation structure can be different for different providers
        :param id: Unique identifier for the request, if applicable
        :param county: County or district name for the address
        :param full_address: A complete address string that can be used as an alternative to providing individual fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ValidationAddress(
            line1=line1,
            line2=line2,
            line3=line3,
            city=city,
            state=state,
            country=country,
            postal_code=postal_code,
            id=id,
            county=county,
            full_address=full_address,
        )

        req = self._build_request(
            method="POST",
            path="/v1/address_validation/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ValidationAddress
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="suggestions_v1_address_validation_suggestions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Any, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcAddressValidationResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcAddressValidationResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def suggestions_async(
        self,
        *,
        line1: Optional[str] = None,
        line2: Optional[str] = None,
        line3: Optional[str] = None,
        city: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[str] = "US",
        postal_code: Optional[str] = "",
        id: Optional[int] = None,
        county: Optional[str] = None,
        full_address: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Any:
        r"""Suggestions

        This API endpoint provides address suggestions based on
        partial input data. It helps users auto-complete and validate addresses efficiently
        by returning a list of suggested addresses that match the input criteria.
        This improves accuracy, increases speed, reduces errors,
        and streamlines the data entry process.

        :param line1: Primary address line, such as street name and number
        :param line2: Additional address details, such as an apartment or suite number
        :param line3: Additional address details for complex addresses
        :param city: The city or town name for the address
        :param state: State, province, or region of the address
        :param country: Country code in ISO 3166-1 alpha-2 format (e.g., 'US' for the United States).         Defaults to 'US'.         should not be empty. Not validating here as the validation         structure can be different for different providers
        :param postal_code: ZIP or postal code for the address. Can be empty for some locales.         Not validating here as the validation structure can be different for different providers
        :param id: Unique identifier for the request, if applicable
        :param county: County or district name for the address
        :param full_address: A complete address string that can be used as an alternative to providing individual fields.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ValidationAddress(
            line1=line1,
            line2=line2,
            line3=line3,
            city=city,
            state=state,
            country=country,
            postal_code=postal_code,
            id=id,
            county=county,
            full_address=full_address,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/address_validation/suggestions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.ValidationAddress
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="suggestions_v1_address_validation_suggestions_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Any, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcAddressValidationResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcAddressValidationResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
