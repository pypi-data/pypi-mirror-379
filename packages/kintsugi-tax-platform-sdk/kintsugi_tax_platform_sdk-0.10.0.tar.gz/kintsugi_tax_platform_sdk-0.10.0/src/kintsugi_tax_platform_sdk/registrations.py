"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from kintsugi_tax_platform_sdk import errors, models, utils
from kintsugi_tax_platform_sdk._hooks import HookContext
from kintsugi_tax_platform_sdk.types import BaseModel, OptionalNullable, UNSET
from kintsugi_tax_platform_sdk.utils.unmarshal_json_response import (
    unmarshal_json_response,
)
from typing import Any, List, Mapping, Optional, Union, cast


class Registrations(BaseSDK):
    def get_all(
        self,
        *,
        status_in: Optional[
            str
        ] = "REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION",
        state_code: Optional[str] = None,
        filing_frequency_in: Optional[str] = None,
        country_code_in: Optional[List[models.CountryCodeEnum]] = None,
        order_by: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageRegistrationReadWithPassword:
        r"""Get Registrations

        The Get Registrations API retrieves a
        paginated list of registrations.
        This API helps in tracking and managing registrations efficiently across multiple
        jurisdictions.

        :param status_in: Filter registrations by status. Multiple statuses can be passed,         separated by commas.
        :param state_code: Filter registrations by state code.
        :param filing_frequency_in: Filter registrations by filing frequency. Multiple filing frequencies         can be passed, separated by commas.
        :param country_code_in: Filter registrations by country code in ISO 3166-1 alpha-2 format         (e.g., US, CA).
        :param order_by: Order results by specified fields (comma-separated)
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRegistrationsV1RegistrationsGetRequest(
            status_in=status_in,
            state_code=state_code,
            filing_frequency_in=filing_frequency_in,
            country_code_in=country_code_in,
            order_by=order_by,
            page=page,
            size=size,
        )

        req = self._build_request(
            method="GET",
            path="/v1/registrations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_registrations_v1_registrations_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.PageRegistrationReadWithPassword, http_res
            )
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_all_async(
        self,
        *,
        status_in: Optional[
            str
        ] = "REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION",
        state_code: Optional[str] = None,
        filing_frequency_in: Optional[str] = None,
        country_code_in: Optional[List[models.CountryCodeEnum]] = None,
        order_by: Optional[str] = None,
        page: Optional[int] = 1,
        size: Optional[int] = 50,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PageRegistrationReadWithPassword:
        r"""Get Registrations

        The Get Registrations API retrieves a
        paginated list of registrations.
        This API helps in tracking and managing registrations efficiently across multiple
        jurisdictions.

        :param status_in: Filter registrations by status. Multiple statuses can be passed,         separated by commas.
        :param state_code: Filter registrations by state code.
        :param filing_frequency_in: Filter registrations by filing frequency. Multiple filing frequencies         can be passed, separated by commas.
        :param country_code_in: Filter registrations by country code in ISO 3166-1 alpha-2 format         (e.g., US, CA).
        :param order_by: Order results by specified fields (comma-separated)
        :param page: Page number
        :param size: Page size
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRegistrationsV1RegistrationsGetRequest(
            status_in=status_in,
            state_code=state_code,
            filing_frequency_in=filing_frequency_in,
            country_code_in=country_code_in,
            order_by=order_by,
            page=page,
            size=size,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/registrations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_registrations_v1_registrations_get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.PageRegistrationReadWithPassword, http_res
            )
        if utils.match_response(http_res, ["401", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def create(
        self,
        *,
        request: Union[models.CreateRegistration, models.CreateRegistrationTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Create Registration

        The Create Registration API allows users to create a new registration
        for tracking and managing tax filings efficiently across multiple jurisdictions.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.CreateRegistration)
        request = cast(models.CreateRegistration, request)

        req = self._build_request(
            method="POST",
            path="/v1/registrations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateRegistration
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_registration_v1_registrations_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "409", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, ["401", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def create_async(
        self,
        *,
        request: Union[models.CreateRegistration, models.CreateRegistrationTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Create Registration

        The Create Registration API allows users to create a new registration
        for tracking and managing tax filings efficiently across multiple jurisdictions.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, models.CreateRegistration)
        request = cast(models.CreateRegistration, request)

        req = self._build_request_async(
            method="POST",
            path="/v1/registrations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateRegistration
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_registration_v1_registrations_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "409", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, ["401", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def get(
        self,
        *,
        registration_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Get Registration By Id

        The Get Registration By ID API retrieves a single registration record
        based on its unique identifier.

        :param registration_id: The unique identifier of the                                 registration to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRegistrationByIDV1RegistrationsRegistrationIDGetRequest(
            registration_id=registration_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/registrations/{registration_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_registration_by_id_v1_registrations__registration_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def get_async(
        self,
        *,
        registration_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Get Registration By Id

        The Get Registration By ID API retrieves a single registration record
        based on its unique identifier.

        :param registration_id: The unique identifier of the                                 registration to retrieve.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetRegistrationByIDV1RegistrationsRegistrationIDGetRequest(
            registration_id=registration_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/registrations/{registration_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_registration_by_id_v1_registrations__registration_id__get",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        registration_id: str,
        registration_date: Optional[str] = None,
        registration_email: Optional[str] = None,
        registration_key: Optional[str] = None,
        deregistration_key: Optional[str] = None,
        registration_requested: Optional[str] = None,
        registration_completed: Optional[str] = None,
        deregistration_requested: Optional[str] = None,
        deregistration_completed: Optional[str] = None,
        auto_registered: Optional[bool] = False,
        registrations_regime: Optional[models.RegistrationsRegimeEnum] = None,
        change_regime_status: Optional[models.ChangeRegimeStatusEnum] = None,
        third_party_enabled: Optional[bool] = False,
        marked_collecting: Optional[bool] = None,
        username: Optional[str] = None,
        filing_frequency: Optional[models.FilingFrequencyEnum] = None,
        create_filings_from: Optional[str] = None,
        is_approaching: Optional[bool] = None,
        comment: Optional[str] = None,
        vda: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Update Registration

        The Update Registration API allows you to modify
        an existing registration using its unique registration_id.

        :param registration_id: The unique identifier of the registration to be updated.
        :param registration_date: The date when the registration was created. Format: YYYY-MM-DD.
        :param registration_email: Email address associated with the registration.
        :param registration_key: A unique key assigned to the registration.
        :param deregistration_key: A unique key assigned for deregistration.
        :param registration_requested: Timestamp when the registration was requested.
        :param registration_completed: Timestamp when the registration was completed.
        :param deregistration_requested: Timestamp when deregistration was requested.
        :param deregistration_completed: Timestamp when the deregistration was completed.
        :param auto_registered: Indicates whether the registration was completed automatically.
        :param registrations_regime:
        :param change_regime_status:
        :param third_party_enabled: Indicates whether third-party access is enabled for this registration.
        :param marked_collecting: Indicates whether the  registration is marked as collecting in shopify
        :param username: The username associated with the registration.
        :param filing_frequency:
        :param create_filings_from: The updated date from which filings should start (YYYY-MM-DD).
        :param is_approaching: Indicates whether the registration is approaching an action (e.g., renewal).
        :param comment: Additional notes or comments related to the registration.
        :param vda: Indicates if the Voluntary Disclosure Agreement (VDA) applies.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateRegistrationV1RegistrationsRegistrationIDPutRequest(
            registration_id=registration_id,
            registration_update_api=models.RegistrationUpdateAPI(
                registration_date=registration_date,
                registration_email=registration_email,
                registration_key=registration_key,
                deregistration_key=deregistration_key,
                registration_requested=registration_requested,
                registration_completed=registration_completed,
                deregistration_requested=deregistration_requested,
                deregistration_completed=deregistration_completed,
                auto_registered=auto_registered,
                registrations_regime=registrations_regime,
                change_regime_status=change_regime_status,
                third_party_enabled=third_party_enabled,
                marked_collecting=marked_collecting,
                username=username,
                filing_frequency=filing_frequency,
                create_filings_from=create_filings_from,
                is_approaching=is_approaching,
                comment=comment,
                vda=vda,
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/v1/registrations/{registration_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.registration_update_api,
                False,
                False,
                "json",
                models.RegistrationUpdateAPI,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_registration_v1_registrations__registration_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        registration_id: str,
        registration_date: Optional[str] = None,
        registration_email: Optional[str] = None,
        registration_key: Optional[str] = None,
        deregistration_key: Optional[str] = None,
        registration_requested: Optional[str] = None,
        registration_completed: Optional[str] = None,
        deregistration_requested: Optional[str] = None,
        deregistration_completed: Optional[str] = None,
        auto_registered: Optional[bool] = False,
        registrations_regime: Optional[models.RegistrationsRegimeEnum] = None,
        change_regime_status: Optional[models.ChangeRegimeStatusEnum] = None,
        third_party_enabled: Optional[bool] = False,
        marked_collecting: Optional[bool] = None,
        username: Optional[str] = None,
        filing_frequency: Optional[models.FilingFrequencyEnum] = None,
        create_filings_from: Optional[str] = None,
        is_approaching: Optional[bool] = None,
        comment: Optional[str] = None,
        vda: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Update Registration

        The Update Registration API allows you to modify
        an existing registration using its unique registration_id.

        :param registration_id: The unique identifier of the registration to be updated.
        :param registration_date: The date when the registration was created. Format: YYYY-MM-DD.
        :param registration_email: Email address associated with the registration.
        :param registration_key: A unique key assigned to the registration.
        :param deregistration_key: A unique key assigned for deregistration.
        :param registration_requested: Timestamp when the registration was requested.
        :param registration_completed: Timestamp when the registration was completed.
        :param deregistration_requested: Timestamp when deregistration was requested.
        :param deregistration_completed: Timestamp when the deregistration was completed.
        :param auto_registered: Indicates whether the registration was completed automatically.
        :param registrations_regime:
        :param change_regime_status:
        :param third_party_enabled: Indicates whether third-party access is enabled for this registration.
        :param marked_collecting: Indicates whether the  registration is marked as collecting in shopify
        :param username: The username associated with the registration.
        :param filing_frequency:
        :param create_filings_from: The updated date from which filings should start (YYYY-MM-DD).
        :param is_approaching: Indicates whether the registration is approaching an action (e.g., renewal).
        :param comment: Additional notes or comments related to the registration.
        :param vda: Indicates if the Voluntary Disclosure Agreement (VDA) applies.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateRegistrationV1RegistrationsRegistrationIDPutRequest(
            registration_id=registration_id,
            registration_update_api=models.RegistrationUpdateAPI(
                registration_date=registration_date,
                registration_email=registration_email,
                registration_key=registration_key,
                deregistration_key=deregistration_key,
                registration_requested=registration_requested,
                registration_completed=registration_completed,
                deregistration_requested=deregistration_requested,
                deregistration_completed=deregistration_completed,
                auto_registered=auto_registered,
                registrations_regime=registrations_regime,
                change_regime_status=change_regime_status,
                third_party_enabled=third_party_enabled,
                marked_collecting=marked_collecting,
                username=username,
                filing_frequency=filing_frequency,
                create_filings_from=create_filings_from,
                is_approaching=is_approaching,
                comment=comment,
                vda=vda,
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/v1/registrations/{registration_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.registration_update_api,
                False,
                False,
                "json",
                models.RegistrationUpdateAPI,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_registration_v1_registrations__registration_id__put",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def deregister(
        self,
        *,
        registration_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Deregister Registration

        Deregister an existing registration.

        :param registration_id: The unique identifier of the registration to deregister.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeregisterRegistrationV1RegistrationsRegistrationIDDeregisterPostRequest(
            registration_id=registration_id,
        )

        req = self._build_request(
            method="POST",
            path="/v1/registrations/{registration_id}/deregister",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deregister_registration_v1_registrations__registration_id__deregister_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def deregister_async(
        self,
        *,
        registration_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.RegistrationRead:
        r"""Deregister Registration

        Deregister an existing registration.

        :param registration_id: The unique identifier of the registration to deregister.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeregisterRegistrationV1RegistrationsRegistrationIDDeregisterPostRequest(
            registration_id=registration_id,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/registrations/{registration_id}/deregister",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deregister_registration_v1_registrations__registration_id__deregister_post",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["401", "404", "422", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.RegistrationRead, http_res)
        if utils.match_response(http_res, "401", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.BackendSrcRegistrationsResponsesValidationErrorResponseData,
                http_res,
            )
            raise errors.BackendSrcRegistrationsResponsesValidationErrorResponse(
                response_data, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorResponseData, http_res)
            raise errors.ErrorResponse(response_data, http_res)
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
