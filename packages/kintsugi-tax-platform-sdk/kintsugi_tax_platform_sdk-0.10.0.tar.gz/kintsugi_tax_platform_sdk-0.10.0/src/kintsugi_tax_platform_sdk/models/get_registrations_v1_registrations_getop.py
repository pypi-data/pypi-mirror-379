"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .countrycodeenum import CountryCodeEnum
from kintsugi_tax_platform_sdk.types import BaseModel
from kintsugi_tax_platform_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetRegistrationsV1RegistrationsGetRequestTypedDict(TypedDict):
    status_in: NotRequired[str]
    r"""Filter registrations by status. Multiple statuses can be passed,
    separated by commas.
    """
    state_code: NotRequired[str]
    r"""Filter registrations by state code."""
    filing_frequency_in: NotRequired[str]
    r"""Filter registrations by filing frequency. Multiple filing frequencies
    can be passed, separated by commas.
    """
    country_code_in: NotRequired[List[CountryCodeEnum]]
    r"""Filter registrations by country code in ISO 3166-1 alpha-2 format
    (e.g., US, CA).
    """
    order_by: NotRequired[str]
    r"""Order results by specified fields (comma-separated)"""
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetRegistrationsV1RegistrationsGetRequest(BaseModel):
    status_in: Annotated[
        Optional[str],
        pydantic.Field(alias="status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "REGISTERED,PROCESSING,UNREGISTERED,DEREGISTERING,DEREGISTERED,VALIDATING,AWAITING_CLARIFICATION"
    r"""Filter registrations by status. Multiple statuses can be passed,
    separated by commas.
    """

    state_code: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter registrations by state code."""

    filing_frequency_in: Annotated[
        Optional[str],
        pydantic.Field(alias="filing_frequency__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter registrations by filing frequency. Multiple filing frequencies
    can be passed, separated by commas.
    """

    country_code_in: Annotated[
        Optional[List[CountryCodeEnum]],
        pydantic.Field(alias="country_code__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter registrations by country code in ISO 3166-1 alpha-2 format
    (e.g., US, CA).
    """

    order_by: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Order results by specified fields (comma-separated)"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""
