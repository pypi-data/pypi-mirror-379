"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from kintsugi_tax_platform_sdk.types import BaseModel
from kintsugi_tax_platform_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetProductsV1ProductsGetRequestTypedDict(TypedDict):
    query: NotRequired[str]
    r"""Search term to filter products by name or other details."""
    status_in: NotRequired[str]
    r"""Filter products by status (comma-separated)"""
    product_category_in: NotRequired[str]
    r"""Filter products by category (comma-separated)"""
    product_subcategory_in: NotRequired[str]
    r"""Filter products by subcategory (comma-separated)"""
    source_in: NotRequired[str]
    r"""Filter products by source (comma-separated)"""
    order_by: NotRequired[str]
    r"""Order results by specified fields (comma-separated)"""
    page: NotRequired[int]
    r"""Page number"""
    size: NotRequired[int]
    r"""Page size"""


class GetProductsV1ProductsGetRequest(BaseModel):
    query: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Search term to filter products by name or other details."""

    status_in: Annotated[
        Optional[str],
        pydantic.Field(alias="status__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter products by status (comma-separated)"""

    product_category_in: Annotated[
        Optional[str],
        pydantic.Field(alias="product_category__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter products by category (comma-separated)"""

    product_subcategory_in: Annotated[
        Optional[str],
        pydantic.Field(alias="product_subcategory__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter products by subcategory (comma-separated)"""

    source_in: Annotated[
        Optional[str],
        pydantic.Field(alias="source__in"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter products by source (comma-separated)"""

    order_by: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Order results by specified fields (comma-separated)"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number"""

    size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""Page size"""
