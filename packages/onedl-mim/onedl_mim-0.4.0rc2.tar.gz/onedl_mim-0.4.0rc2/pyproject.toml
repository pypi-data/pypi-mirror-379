[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "onedl-mim"
dynamic = ["version"]
description = "MIM Installs OneDL lab packages"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    { name = "OneDL-Mim Contributors", email = "oss-team@vbti.nl" }
]
keywords = ["computer vision", "deep learning", "pytorch", "onedl"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "Click",
    "colorama",
    "model-index",
    "opendatalab",
    "pandas",
    "pip>=19.3",
    "requests",
    "rich",
    "tabulate",
    "numpy<2",
]

[dependency-groups]
docs = [
    "docutils==0.16.0",
    "myst-parser",
    "pytorch_sphinx_theme @ git+https://github.com/VBTI-development/onedl_sphinx_theme.git",
    "sphinx",
    "sphinx-copybutton",
    "sphinx_markdown_tables",
]
tests = [
    "coverage",
    "flake8",
    "interrogate",
    "pytest",
    "opencv-python",
]

[project.optional-dependencies]
torch = [ "torch", "torchvision" ]

[project.urls]
Homepage = "https://github.com/vbti-development/onedl-mim"
Repository = "https://github.com/vbti-development/onedl-mim"
Documentation = "https://onedl-openmim.readthedocs.io"
"Bug Tracker" = "https://github.com/vbti-development/onedl-mim/issues"

[project.scripts]
mim = "mim.cli:cli"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]

[tool.setuptools.dynamic]
version = {attr = "mim.version.__version__"}

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.rst"]

# Build configuration
[tool.bdist_wheel]
universal = true

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]

# Code formatting configuration
[tool.yapf]
based_on_style = "pep8"
blank_line_before_nested_class_or_def = true
split_before_expression_after_opening_paren = true

# Import sorting configuration
[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
known_first_party = ["mim"]
extra_standard_library = [
    "pkg_resources",
    "setuptools",
    "logging",
    "os",
    "warnings",
    "abc"
]
known_third_party = [
    "click",
    "modelindex",
    "pandas",
    "pip",
    "pytest",
    "pytorch_sphinx_theme",
    "requests",
    "tabulate"
]
no_lines_before = ["STDLIB", "LOCALFOLDER"]
default_section = "THIRDPARTY"  # codespell:ignore
include_trailing_comma = true

# Spell checking configuration
[tool.codespell]
ignore-words-list = "te,cann"

# Coverage configuration
[tool.coverage.run]
source = ["mim"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Type checking configuration
[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
