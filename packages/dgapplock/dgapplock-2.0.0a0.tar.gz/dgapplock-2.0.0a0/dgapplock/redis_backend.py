import logging
import os
import threading
import time
import uuid
from contextlib import contextmanager
from typing import Optional, Union, Dict, Any

import dglog
from dgredis import RedisClient
from dgredis.conf import RedisConfig


class AppLockerRedis:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """

    def __init__(self, conf_dict: dict, application: str, ttl: int = 60,
                 logger_: logging.Logger | dglog.Logger | None = None, show_logs: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞.

        :param conf_dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Redis
        :param application: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Å–µ—Ä–≤–∏—Å–∞
        :param ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :param logger_: –õ–æ–≥–≥–µ—Ä
        :param show_logs: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏
        """
        self.conf = RedisConfig(**conf_dict)
        self.client = RedisClient(self.conf)
        self.application = application
        self.instance_id = f"{application}-{uuid.uuid4().hex[:8]}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.lock = None
        self.lock_key = None
        self.ttl = ttl
        self._stop_heartbeat = threading.Event()
        self._heartbeat_thread = None
        self._is_locked = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._notification_shown = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        self.logger = logger_ if logger_ else dglog.Logger()
        if isinstance(self.logger, dglog.Logger) and self.logger.logger is None:
            self.logger.auto_configure()

        self._show_logs = show_logs

    def acquire(self, key: Optional[Union[int, str]] = None, max_retries: int = 3, retry_delay: float = 1.0) -> bool:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å –∑–∞–ø–∏—Å—å—é –≤—Ä–µ–º–µ–Ω–∏ –∏ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ Redis.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        :param retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        :return: True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        for attempt in range(max_retries):
            try:
                if self._try_acquire(key):
                    return True

                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–∏—Å—è—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if self._check_and_release_stale_lock(key):
                    time.sleep(retry_delay)
                    continue

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if not self._notification_shown and self._show_logs:
                    self._show_blocked_notification(key)
                    self._notification_shown = True

                return False

            except Exception as e:
                self.logger.error(f"Acquire attempt {attempt + 1} failed: {e}")
                if attempt == max_retries - 1:
                    return False
                time.sleep(retry_delay)

        return False

    def _show_blocked_notification(self, key: Optional[Union[int, str]] = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"""
        info = self.get_lock_info(key)
        if info:
            self.logger.info(f"üö´ Application '{self.application}' is already running!")
            self.logger.info(f"   Host: {info.get('host', 'Unknown')}")
            self.logger.info(f"   Instance: {info.get('owner', 'Unknown')}")
            self.logger.info("   Waiting for lock to be released...\n")

    def _try_acquire(self, key: Optional[Union[int, str]] = None) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        :return: True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞
        """
        try:
            self.lock_key = key or f'LOCK:{self.application}'
            lock_info_key = f"{self.lock_key}:INFO"

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            self.lock = self.client.client.lock(self.lock_key, timeout=self.ttl)
            if not self.lock.acquire(blocking=False):
                if self._show_logs:
                    self.logger.info(f"Lock acquire failed for {self.lock_key} / {self.instance_id}")
                return False

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            lock_info = {
                'acquired_at': time.time(),
                'owner': self.instance_id,
                'application': self.application,
                'host': self._get_host_info()
            }
            locked = self.client.client.set(lock_info_key, lock_info, ex=self.ttl)
            if locked:
                self._is_locked = True
                self._start_heartbeat()
                if self._show_logs:
                    self.logger.info(f"Lock {self.lock_key} / {self.instance_id} acquired")
            return locked

        except Exception as e:
            self.logger.error(f"Error acquiring lock: {e}")
            return False

    def release(self) -> None:
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π"""
        if not self._is_locked or not self.lock or not self.lock_key:
            return

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat
            self._stop_heartbeat.set()
            if self._heartbeat_thread:
                self._heartbeat_thread.join(timeout=1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–∞ –ª–∏ —ç—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if self.is_my_lock(self.lock_key):
                lock_info_key = f"{self.lock_key}:INFO"

                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                self.client.client.delete(lock_info_key)

                # –ó–∞—Ç–µ–º –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–∞–º—É –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                try:
                    self.lock.release()
                except Exception as lock_release_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ lock.release(),
                    # –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
                    if self._show_logs:
                        self.logger.warning(f"Lock release failed, trying direct delete: {lock_release_error}")
                    try:
                        self.client.client.delete(self.lock_key)
                    except Exception as delete_error:
                        self.logger.error(f"Failed to delete lock key: {delete_error}")

                if self._show_logs:
                    self.logger.info(f"Lock {self.lock_key} / {self.instance_id} released")
            else:
                if self._show_logs:
                    self.logger.warning(f"Trying to release lock that doesn't belong to this instance: {self.lock_key}")

        except Exception as e:
            self.logger.error(f"Error releasing lock: {e}")
        finally:
            self._is_locked = False
            self.lock = None
            self.lock_key = None
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self._notification_shown = False

    def _start_heartbeat(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""

        def heartbeat():
            while not self._stop_heartbeat.is_set():
                time.sleep(self.ttl / 3)
                try:
                    if self._is_locked and self.is_my_lock(self.lock_key):
                        lock_info_key = f"{self.lock_key}:INFO"
                        # –û–±–Ω–æ–≤–ª—è–µ–º TTL –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                        self.client.client.expire(lock_info_key, self.ttl)
                        # –û–±–Ω–æ–≤–ª—è–µ–º TTL –¥–ª—è —Å–∞–º–æ–≥–æ –∫–ª—é—á–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        self.client.client.expire(self.lock_key, self.ttl)
                except Exception as e:
                    self.logger.error(f"Heartbeat error: {e}")
                    break

        self._stop_heartbeat.clear()
        self._heartbeat_thread = threading.Thread(target=heartbeat, daemon=True)
        self._heartbeat_thread.start()

    def get_lock_info(self, key: Optional[Union[int, str]] = None) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–∑ Redis.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ None –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç
        """
        try:
            key = key or f'LOCK:{self.application}'
            lock_info_key = f"{key}:INFO"

            data = self.client.client.get(lock_info_key)
            if not data:
                return None

            return data

        except Exception as e:
            self.logger.error(f"Error getting lock info: {e}")
            return None

    def get_lock_duration(self, key: Optional[Union[int, str]] = None) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None
        """
        info = self.get_lock_info(key)
        if not info or 'acquired_at' not in info:
            return None
        return time.time() - info['acquired_at']

    def is_my_lock(self, key: Optional[Union[int, str]] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç—Ç–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É
        """
        try:
            info = self.get_lock_info(key)
            return bool(info and info.get('owner') == self.instance_id)
        except Exception as e:
            self.logger.error(f"Error checking lock ownership: {e}")
            return False

    def _check_and_release_stale_lock(self, key: Optional[Union[int, str]] = None,
                                      stale_timeout: float = 300.0) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤–∏—Å—è—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param stale_timeout: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
        :return: True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
        """
        try:
            key = key or f'LOCK:{self.application}'
            info = self.get_lock_info(key)

            if not info:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            if time.time() - info['acquired_at'] > stale_timeout:
                # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                self.client.client.delete(f"{key}:INFO")
                # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                self.client.client.delete(key)
                if self._show_logs:
                    self.logger.info(f"Released stale lock: {key}")
                return True

            return False
        except Exception as e:
            self.logger.error(f"Error checking stale lock: {e}")
            return False

    def force_release(self, key: Optional[Union[int, str]] = None) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.

        :param key: –ö–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
        """
        try:
            key = key or f'LOCK:{self.application}'
            lock_info_key = f"{key}:INFO"

            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            self.client.client.delete(lock_info_key)
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self.client.client.delete(key)

            if self._show_logs:
                self.logger.warning(f"Force released lock: {key}")
            return True

        except Exception as e:
            self.logger.error(f"Error force releasing lock: {e}")
            return False

    @contextmanager
    def acquired(self, key: Optional[Union[int, str]] = None, max_retries: int = 3, retry_delay: float = 1.0):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.

        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        with lock.acquired():
            # –ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            ...
        """
        acquired = self.acquire(key, max_retries, retry_delay)
        if not acquired:
            info = self.get_lock_info(key)
            if info:
                raise RuntimeError(
                    f"Failed to acquire lock for {key or self.application}. "
                    f"Already locked by {info.get('owner')} on {info.get('host')}"
                )
            else:
                raise RuntimeError(f"Failed to acquire lock for {key or self.application}")

        try:
            yield
        finally:
            self.release()

    def _get_host_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"""
        import socket
        return f"{socket.gethostname()}-{os.getpid()}"

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not self.acquire():
            raise RuntimeError("Failed to acquire queue lock")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.release()

    def is_locked(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
        return self._is_locked

    def cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã"""
        if self._is_locked:
            self.release()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.cleanup()