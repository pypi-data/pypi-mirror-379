"""Informations sharing between actions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/04_shared_context.ipynb.

# %% auto 0
__all__ = ['SharedContext']

# %% ../nbs/API/04_shared_context.ipynb 2
from collections.abc import MutableMapping
from typing import Any, Dict
from fastcore.foundation import patch
import logging

# %% ../nbs/API/04_shared_context.ipynb 5
logger = logging.getLogger("TriggerKit-SharedContext")

# %% ../nbs/API/04_shared_context.ipynb 6
class SharedContext(MutableMapping):
    """
    A dictionary-like object that allows sharing of context between different parts of a program.
    It is designed to be used as a singleton, ensuring that all parts of the program share the same context.
    """
    def __init__(self, base: Dict[str, Any] = None):
        self._data = base or {}
        self._writes = {} # Record of writes during this run

    def __getitem__(self, key):
        return self._data[key]

    def __setitem__(self, key, value):
        self._data[key] = value
        self._writes[key] = value
        logger.debug(f"[context] Set key '{key}' = {repr(value)}")

    def __delitem__(self, key):
        del self._data[key]
        self._writes[key] = None
        logger.debug(f"[context] Deleted key '{key}'")

    def __iter__(self):
        return iter(self._data)

    def __len__(self):
        return len(self._data)

    def get(self, key, default=None):
        return self._data.get(key, default)

    def to_dict(self) -> Dict[str, Any]:
        return dict(self._data)
    
    def __setattr__(self, key, value):
        logger.debug(f"[context] Set key '{key}' = {repr(value)}")
        if key in {"_data", "_writes"}:
            super().__setattr__(key, value)
        else:
            self._data[key] = value
            self._writes[key] = value

    def __getattr__(self, key):
        return self._data.get(key)


# %% ../nbs/API/04_shared_context.ipynb 10
@patch
def __contains__(self: SharedContext, key):
    return key in self._data

@patch
def __repr__(self: SharedContext):
    lines = [f"SharedContext - {len(self._data)} items:"]
    max_key_length = max(len(k) for k in self._data.keys()) if self._data else 0
    n = 1
    for k in self._data.keys():
        lines.append(f"{n}. {k.ljust(max_key_length)} : {self._data[k]}"); n += 1
    return "\n".join(lines)



# %% ../nbs/API/04_shared_context.ipynb 16
@patch
def updates(self: SharedContext) -> Dict[str, Any]:
    """Returns the subset of keys written during this run."""
    return dict(self._writes)

@patch
def clear_updates(self: SharedContext):
    """Clears the updates made during this run."""
    self._writes.clear()
