#! /c/Users/amit/AppData/Local/Programs/Python/Python312/python
#! python3qgis
#! /usr/bin/env python3
#! /c/Program Files/QGIS 3.26.0/apps/Python39/python
# ==============================================================================
# File Name     : svg2csv.py
# Date Created  : 2025-09-11 00:20 UTC +02:00
# description   : Extract Nodes of SVG and save as CSV
# ------------------------------------------------------------------------------
# Author        : Amit Manohar Manthanwar
# Mailer        : manthanwar@hotmail.com
# WebURL        : https:#manthanwar.github.io
# ------------------------------------------------------------------------------
# Copyright     : (c) 2025 Amit Manohar Manthanwar
# License       : LICENSE.md
# ==============================================================================
# Revision Log  | Author  | Description
# --------------+---------+-----------------------------------------------------
# 11-Sep-2025   | AMM     | Initial Version
# --------------+---------+-----------------------------------------------------
# 23-Sep-2025   | AMM     | added methods
# --------------+---------+-----------------------------------------------------
# Usage: pytest --cache-clear
# ==============================================================================

from pysvg2csv import *

root = get_project_root()
file_path = root.joinpath("data", "weapon-trident-01.svg")

print('root = ' + str(root))

node_coords = extract_node_coordinates(file_path)
latex_paths = create_latex_paths(node_coords)

# print("Node Coordinates:", *node_coords, sep='\n')
# print("LaTeX Paths:", *latex_paths, sep='\n')


def get_large_fp_array() -> list[float]:
    return [[(0.0, -0.0), (0.0, -0.0), (4.0, 1.0), (2.0, 6.0)], [(2.0, 6.0), (2.0, 6.0), (5.0, 2.0), (8.0, 6.0)], [(8.0, 6.0), (5.0, 6.0), (5.0, 10.0), (3.0, 10.0)], [(3.0, 10.0), (6.0, 10.0), (9.0, 15.0), (5.0, 19.0)], [(5.0, 19.0), (9.0, 17.0), (12.999, 16.0), (15.999, 21.0)], [(15.999, 21.0), (10.0, 17.0), (5.0, 26.0), (2.0, 26.0)], [(2.0, 31.0)], [(2.0, 26.0), (5.0, 26.0), (5.0, 31.0), (2.0, 31.0)], [(8.0, 31.0), (5.0, 30.0), (6.0, 25.0), (10.0, 25.0)], [(39.999, 72.999), (5.0, 69.999), (39.999, 40.0), (13.999, 32.0)], [(9.0, 35.0), (9.0, 35.0), (11.999, 35.0), (13.999, 32.0)], [(4.0, 39.0), (4.0, 39.0), (5.0, 43.0), (1.0, 43.0)], [(1.0, 43.0), (10.0, 43.0), (1.0, 69.999), (1.0, 69.999)], [(0.0, 44.0), (7.0, 44.0), (0.0, 67.0), (0.0, 67.0)], [(1.0, 69.999), (7.0, 72.999), (0.0, 75.999), (0.0, 79.999)], [(13.999, 32.0), (14.999, 30.0), (14.999, 25.0), (9.853, 25.0)], [(39.999, 72.999), (2.0, 74.999), (32.999, 35.0), (9.0, 35.0)], [(39.999, 72.999), (0.0, 79.999), (28.999, 34.0), (4.0, 39.0)], [(-1.0, 43.0), (-10.0, 43.0), (-1.0, 69.999), (-1.0, 69.999)], [(-1.0, 69.999), (-7.0, 72.999), (0.0, 75.999), (0.0, 79.999)], [(-4.0, 39.0), (-4.0, 39.0), (-5.0, 43.0), (-1.0, 43.0)], [(0.0, -0.0), (0.0, -0.0), (-4.0, 1.0), (-2.0, 6.0)], [(-2.0, 6.0), (-2.0, 6.0), (-5.0, 2.0), (-8.0, 6.0)], [(-8.0, 31.0), (-5.0, 30.0), (-6.0, 25.0), (-10.0, 25.0)], [(-9.0, 35.0), (-9.0, 35.0), (-12.0, 35.0), (-14.0, 32.0)], [(-14.0, 32.0), (-15.0, 30.0), (-15.0, 25.0), (-9.853, 25.0)], [(-8.0, 6.0), (-5.0, 6.0), (-5.0, 10.0), (-3.0, 10.0)], [(-3.0, 10.0), (-6.0, 10.0), (-9.0, 15.0), (-5.0, 19.0)], [(-5.0, 19.0), (-9.0, 17.0), (-13.0, 16.0), (-16.0, 21.0)], [(-16.0, 21.0), (-10.0, 17.0), (-5.0, 26.0), (-2.0, 26.0)], [(-2.0, 26.0), (-5.0, 26.0), (-5.0, 31.0), (-2.0, 31.0)], [(-8.0, 31.0)], [(-40.0, 72.999), (-5.0, 69.999), (-40.0, 40.0), (-14.0, 32.0)], [(-40.0, 72.999), (-2.0, 73.999), (-33.0, 35.0), (-9.0, 35.0)], [(-40.0, 72.999), (0.0, 79.999), (-29.0, 34.0), (-4.0, 39.0)], [(0.0, 44.0), (-7.0, 44.0), (0.0, 67.0), (0.0, 67.0)]]


def get_large_str_array() -> list[str]:
    return ['\\psbezier(0.0, -0.0)(0.0, -0.0)(4.0, 1.0)(2.0, 6.0)', '\\psbezier(2.0, 6.0)(2.0, 6.0)(5.0, 2.0)(8.0, 6.0)', '\\psbezier(8.0, 6.0)(5.0, 6.0)(5.0, 10.0)(3.0, 10.0)', '\\psbezier(3.0, 10.0)(6.0, 10.0)(9.0, 15.0)(5.0, 19.0)', '\\psbezier(5.0, 19.0)(9.0, 17.0)(12.999, 16.0)(15.999, 21.0)', '\\psbezier(15.999, 21.0)(10.0, 17.0)(5.0, 26.0)(2.0, 26.0)', '\\psbezier(2.0, 31.0)', '\\psbezier(2.0, 26.0)(5.0, 26.0)(5.0, 31.0)(2.0, 31.0)', '\\psbezier(8.0, 31.0)(5.0, 30.0)(6.0, 25.0)(10.0, 25.0)', '\\psbezier(39.999, 72.999)(5.0, 69.999)(39.999, 40.0)(13.999, 32.0)', '\\psbezier(9.0, 35.0)(9.0, 35.0)(11.999, 35.0)(13.999, 32.0)', '\\psbezier(4.0, 39.0)(4.0, 39.0)(5.0, 43.0)(1.0, 43.0)', '\\psbezier(1.0, 43.0)(10.0, 43.0)(1.0, 69.999)(1.0, 69.999)', '\\psbezier(0.0, 44.0)(7.0, 44.0)(0.0, 67.0)(0.0, 67.0)', '\\psbezier(1.0, 69.999)(7.0, 72.999)(0.0, 75.999)(0.0, 79.999)', '\\psbezier(13.999, 32.0)(14.999, 30.0)(14.999, 25.0)(9.853, 25.0)', '\\psbezier(39.999, 72.999)(2.0, 74.999)(32.999, 35.0)(9.0, 35.0)', '\\psbezier(39.999, 72.999)(0.0, 79.999)(28.999, 34.0)(4.0, 39.0)', '\\psbezier(-1.0, 43.0)(-10.0, 43.0)(-1.0, 69.999)(-1.0, 69.999)', '\\psbezier(-1.0, 69.999)(-7.0, 72.999)(0.0, 75.999)(0.0, 79.999)', '\\psbezier(-4.0, 39.0)(-4.0, 39.0)(-5.0, 43.0)(-1.0, 43.0)', '\\psbezier(0.0, -0.0)(0.0, -0.0)(-4.0, 1.0)(-2.0, 6.0)', '\\psbezier(-2.0, 6.0)(-2.0, 6.0)(-5.0, 2.0)(-8.0, 6.0)', '\\psbezier(-8.0, 31.0)(-5.0, 30.0)(-6.0, 25.0)(-10.0, 25.0)', '\\psbezier(-9.0, 35.0)(-9.0, 35.0)(-12.0, 35.0)(-14.0, 32.0)', '\\psbezier(-14.0, 32.0)(-15.0, 30.0)(-15.0, 25.0)(-9.853, 25.0)', '\\psbezier(-8.0, 6.0)(-5.0, 6.0)(-5.0, 10.0)(-3.0, 10.0)', '\\psbezier(-3.0, 10.0)(-6.0, 10.0)(-9.0, 15.0)(-5.0, 19.0)', '\\psbezier(-5.0, 19.0)(-9.0, 17.0)(-13.0, 16.0)(-16.0, 21.0)', '\\psbezier(-16.0, 21.0)(-10.0, 17.0)(-5.0, 26.0)(-2.0, 26.0)', '\\psbezier(-2.0, 26.0)(-5.0, 26.0)(-5.0, 31.0)(-2.0, 31.0)', '\\psbezier(-8.0, 31.0)', '\\psbezier(-40.0, 72.999)(-5.0, 69.999)(-40.0, 40.0)(-14.0, 32.0)', '\\psbezier(-40.0, 72.999)(-2.0, 73.999)(-33.0, 35.0)(-9.0, 35.0)', '\\psbezier(-40.0, 72.999)(0.0, 79.999)(-29.0, 34.0)(-4.0, 39.0)', '\\psbezier(0.0, 44.0)(-7.0, 44.0)(0.0, 67.0)(0.0, 67.0)']


def test_path_fp_array() -> None:
    actual_fp_array = node_coords
    expected_fp_array = get_large_fp_array()
    assert actual_fp_array == expected_fp_array


def test_path_str_array() -> None:
    actual_str_array = latex_paths
    expected_str_array = get_large_str_array()
    assert actual_str_array == expected_str_array




