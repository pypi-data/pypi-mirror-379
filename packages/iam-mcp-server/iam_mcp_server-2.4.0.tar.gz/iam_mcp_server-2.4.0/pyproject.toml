[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build]
# Tell Hatch we're using a src layout
sources = ["src"]

[tool.hatch.build.targets.wheel]
# Explicitly specify the package name for src layout
packages = ["mcp_server_iam"]

[project.scripts]
# Point to the real module path
mcp-server-iam = "mcp_server_iam.__main__:main"

[project]
name = "iam-mcp-server"
dynamic = ["version"]
description = "Individual Application Mesh, MCP Server"
readme = "README.md"
requires-python = ">=3.11"

keywords = ["git", "mcp", "server", "jobs", "resume", "automation"]
license = { text = "MIT" }

authors = [{ name = "Alejandro Garcia" }]
maintainers = [
    { name = "Alejandro Garcia", email = "github_dev.chowder574@passmail.net" },
]

classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "mcp[cli]>=1.10.1",
    "pydantic>=2.11.7",
    "pydantic-core>=2.33.0",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "python-json-logger>=3.3.0",
    "requests>=2.32.4",
    "tenacity>=9.1.2",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "ruff>=0.12.1",
    "twine>=6.1.0",
    "python-semantic-release>=10.2.0",
]

[project.urls]
Homepage = "https://github.com/alejandrogarcia-hub/iam-mcp-server"
Repository = "https://github.com/alejandrogarcia-hub/iam-mcp-server"
Issues = "https://github.com/alejandrogarcia-hub/iam-mcp-server/issues"

[tool.uv]
resolution = "highest"
required-version = ">=0.7.19"

[tool.hatch.version]
source = "vcs"

[tool.semantic_release]
# Version management - Let semantic-release handle git tags only
# No file-based version updates since we use VCS-based versioning

# Branch configuration
branch = "main"

# Release settings
major_on_zero = false
allow_zero_version = false

# Commit parsing - Angular convention
commit_parser = "conventional"
commit_parser_options = { parse_squash_commits = true, ignore_merge_commits = true }

# Build configuration
build_command = "uv build"

# Publishing settings
upload_to_pypi = false    # We handle PyPI upload in GitHub Actions
upload_to_release = false # We handle GitHub releases in Actions

# Git tag settings (no version file updates)
tag_format = "v{version}"
commit_message = "chore(release): {version} [skip ci]"

# Changelog generation
changelog = { exclude_commit_patterns = ["chore\\(release\\):.*"] }
