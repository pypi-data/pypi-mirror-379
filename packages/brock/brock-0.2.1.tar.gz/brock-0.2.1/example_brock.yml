version: 0.2.0               # minimum Brock version required to use this config
project: someprojectname      # name of the project
help: "brock --help message"  # optional
commands:                     # optional
  default: build              # optional - default command to run when no command specified, can be ommited if just one command is configured
  clean:
    default_executor: atollic # optional - default executor to use for this command
    chdir: foo/bar            # optional - switch to this directory relative to base config prior execution
    help: "Help message for this command"   # optional - help to be show in brock --help
    steps:
      - make clean            # run `make clean` in default executor (overriden to atollic here)
  build:
    depends_on:               # optinal - list of commands to run prior steps execution
      - clean
    options:
      very-fast:
        argument: 1           # the order of the argument
        default: fast         # default value that is run automatically
        help: I am fast       # help string which can be seen when: brock build very-fast --help
      fast_as_lightning:
        argument: '*'          # unlimited number of arguments in CLI is accepted and assigned to this argument
        default: fastest       # default value that is run automatically
        help: I am the fastest # help string which can be seen when: brock build very-fast --help
      very-slow:
        flag: --slow          # flag value used
        short_name: -s        # can be used when calling brock: brock build -s
      speed:
        help: I am neither flag nor argument
        choices: [very_slow, slow, medium, fast, fastaf]
    steps:
      - "@atollic make"       # run `make` command in atollic executor
      - make tests            # run `make tests` in python (set as default) executor
      - "@host echo 'Building finished'"  # run command on the host computer
      - run ${VERY_FAST}    # expected output: run fast
      - run ${VERY_SLOW}    # expected output: run --slow
      - run ${SPEED}        # needs to be specified when calling brock: brock build --speed=slow, checks whether the
                            # value is in the choices list if provided and then expected output is: run --slow
  rebuild:
    depends_on:               # dependencies only command, no steps need to be defined
      - clean
      - build
  service:
    steps:
      - executor: atollic     # optional
        shell: powershell     # optional
        script: |
          $ServiceName = 'EventLog'
          $ServiceInfo = Get-Service -Name $ServiceName
          Write-Output $ServiceInfo

executors:                    # optional - if not present, only host executor can be used
  default: python             # optional - default executor, if no executors are defined host executor is used, can be ommited if just one executor is configured
  atollic:
    type: docker              # type of the executor, each type has a different arguments
    help: "Executor --help message" # optional
    dockerfile: path/to/Dockerfile  # build custom image from docker file
    platform: windows         # optional - linux assumed by default
    env:                      # optional - env variables to pass to container
      SOME_VAR: foo
      OTHER_VAR: 123
    mac_address: 88:99:aa:bb:cc:dd # optional - custom MAC address of the container
    ports:                    # optional - expose ports to outside world
      5000: 5000
      6000/udp: 6000
    devices:                  # optional - pass devices to windows containers (isolation=process only)
      # https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/hardware-devices-in-containers
      - class/{interface class GUID}
    default_shell: powershell # optional - default shell (if not specified, sh or cmd is used based on executor platform)
  python:
    type: docker
    image: python:3.9         # use image from registry
    sync:                     # optional - sync files to container instead of direct mount for faster build times on linux containers under macOS/Windows
      type: rsync             # rsync volume synchronization
      options:                # optional - rsync parameters
        - "-avm"
      filter:                 # optional - rsync --filter rules. It is recommended to not use include and exclude if filter is used
        - "+ foo/"            # add foo directory to path
        - "+ foo/**/"         # add all subdirectories in foo/ to path
        - "+ foo/**.c"        # add all files ending with `.c` in foo and all its subdirectories
        - "+ foo/src/**"      # add all files in foo/src/ and all its subdirectories
        - "- *"               # exclude all other files
      include:                # optional - directories to include to syncing (applied before exclude)
        - foo/bar
      exclude:                # optional - directories to exclude from syncing
        - foo/bar
    devices:                  # optional - mount devices to container - works only for linux containers on linux host
      - /dev/ttyUSB0:/dev/ttyUSB0:rwm   # <host_path>:<container_path>:<cgroup_permissions>
    prepare:                  # optional, commands to run after starting a container
      - pip install -r requirements.txt
      - echo "Foo bar"
  gcc:
    type: docker
    image: gcc                # use image from registry
    sync:                     # optional - sync files to container instead of direct mount for faster build times on linux containers under macOS/Windows
      type: mutagen           # mutagen volume synchronization
      options:                # optional - mutagen sync parameters
        - "--ignore-vcs"
      exclude:                # optional - directories to exclude from syncing
        - foo/bar
  remote:
    type: ssh
    host: somesite.example.com:1235 # SSH host to run the commands on
    username: foobar          # optional - user on the remote machine
    password: strongpassword  # optional - password for the user
