# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import numpy
import numpy.typing
import typing
from motrixsim import SceneData, SceneModel

class GaussNewtonSolver:
    r"""
    Use gauss newton iterative method to solve inverse kinematics problem.
    
    Args:
       max_iter (int): Maximum number of iterations (default: 100).
       step_size (float): Step size for each iteration (default: 0.5).
       tolerance (float): Tolerance for convergence (default: 1e-3).
    """
    def __new__(cls, max_iter:builtins.int=100, step_size:builtins.float=0.5, tolerance:builtins.float=0.0010000000474974513) -> GaussNewtonSolver: ...
    def solve(self, ik_model:typing.Any, data:SceneData, target_pose:typing.Any) -> numpy.typing.NDArray[numpy.float32]:
        r"""
        Solve the IK problem for the given chain and target pose.
        
        Args:
            ik_model (IkChain): The IK model. Currently only `IkChain` is supported.
            data (SceneData): The scene data containing the current state.
                target_pose (NDarray[float]): The target pose the end effector want to reach.  It is
                a 7-element array with (x, y, z, i, j, k, w) format.
        
        Returns:
          A numpy array with shape `(data.shape, ik_model.num_dof_pos + 2,)`. For each row, the
          first element   is the number of iterations used, the second element is the final
          residual, and the   remaining elements are the solved DOF positions.
        """

class IkChain:
    r"""
    Represents a kinematic chain for inverse kinematics (IK) solving.
    
    Args:
        model (SceneModel): The scene model containing the kinematic structure.
        end_link (str): The name of the end link of the IK chain.
        start_link (Optional[str]): The name of the start link of the IK chain. If not provided,
            the root link will be used.
        end_effector_offset (Optional[ndarray]): A 7-element array representing the end-effector
            offset as a pose (x, y, z, i, j, k, w) in end link's local space. If not provided, no
            offset will be applied.
    Raises:
       RuntimeError: If the IK chain contains unsupported joint types. (Currently only hinge and
            slider are supported.)
    """
    def __new__(cls, model:SceneModel, end_link:builtins.str, start_link:typing.Optional[builtins.str]=None, end_effector_offset:typing.Optional[typing.Any]=None) -> IkChain: ...

