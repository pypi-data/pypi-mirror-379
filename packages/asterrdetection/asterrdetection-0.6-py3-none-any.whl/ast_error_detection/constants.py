# Error Tags

# not used
FOR_LOOP_INCORRECT_NUMBER_OF_ITERATIONS = "FOR_LOOP_INCORRECT_NUMBER_OF_ITERATIONS"

FOR_LOOP_MISSING = "FOR_LOOP_MISSING"
FOR_LOOP_BODY_MISMATCH = "FOR_LOOP_BODY_MISMATCH"
MISSING_STATEMENT = "MISSING_STATEMENT"
UNNECESSARY_STATEMENT = "UNNECESSARY_STATEMENT"
ERROR_VALUE_PARAMETER = "ERROR_VALUE_PARAMETER"
VAR_CONST_MISMATCH = "CONST_VALUE_MISMATCH"

# VAR
VA_DECLARATION_INITIALIZATION_ERROR = "VA_DECLARATION_INITIALIZATION_ERROR"

# CS
CS_BODY_ERROR = "CS_BODY_ERROR"
CS_BODY_MISPLACED = "CS_BODY_MISPLACED"
CS_MISSING = "CS_MISSING"

# FUNCTION
F_DEFINITION_MISSING = "F_DEFINITION_MISSING"
F_DEFINITION_UNNECESSARY = "F_DEFINITION_UNNECESSARY"
F_DEFINITION_ERROR_ARG = "F_DEFINITION_ERROR_ARG"
F_CALL_MISSING = "F_CALL_MISSING"
F_CALL_UNNECESSARY = "F_CALL_UNNECESSARY"
F_DEFINITION_ERROR_RETURN = "F_DEFINITION_ERROR_RETURN"
F_CALL_ARG_ERROR = "F_CALL_ARG_ERROR"



# SPECIFICATIONS FUNCTIONS
F_CALL_MISSING_PRINT = "F_CALL_MISSING_PRINT"
F_CALL_UNNECESSARY_PRINT = "F_CALL_UNNECESSARY_PRINT"
F_CALL_PRINT_ERROR_ARG = "F_CALL_PRINT_ERROR_ARG"

F_CALL_UNNECESSARY_AVANCER = "F_CALL_UNNECESSARY_AVANCER"
F_CALL_MISSING_AVANCER = "F_CALL_MISSING_AVANCER"
F_CALL_AVANCER_ERROR = "F_CALL_AVANCER_ERROR"

F_CALL_UNNECESSARY_TOURNER = "F_CALL_UNNECESSARY_TOURNER"
F_CALL_MISSING_TOURNER = "F_CALL_MISSING_TOURNER"
F_CALL_TOURNER_ERROR = "F_CALL_TOURNER_ERROR"

F_CALL_UNNECESSARY_ARC = "F_CALL_UNNECESSARY_ARC"
F_CALL_MISSING_ARC = "F_CALL_MISSING_ARC"
F_CALL_ARC_ERROR = "F_CALL_ARC_ERROR"

F_CALL_UNNECESSARY_COULEUR = "F_CALL_UNNECESSARY_COULEUR"
F_CALL_MISSING_COULEUR = "F_CALL_MISSING_COULEUR"
F_CALL_COULEUR_ERROR = "F_CALL_COULEUR_ERROR"

F_CALL_UNNECESSARY_HAUT = "F_CALL_UNNECESSARY_HAUT"
F_CALL_MISSING_HAUT = "F_CALL_MISSING_HAUT"
F_CALL_HAUT_ERROR = "F_CALL_HAUT_ERROR"

F_CALL_UNNECESSARY_GAUCHE ="F_CALL_UNNECESSARY_GAUCHE"
F_CALL_MISSING_GAUCHE = "F_CALL_MISSING_GAUCHE"
F_CALL_GAUCHE_ERROR = "F_CALL_GAUCHE_ERROR"

F_CALL_UNNECESSARY_DROITE ="F_CALL_UNNECESSARY_DROITE"
F_CALL_MISSING_DROITE = "F_CALL_MISSING_DROITE"
F_CALL_DROITE_ERROR = "F_CALL_DROITE_ERROR"

F_CALL_UNNECESSARY_BAS ="F_CALL_UNNECESSARY_BAS"
F_CALL_MISSING_BAS = "F_CALL_MISSING_BAS"
F_CALL_BAS_ERROR = "F_CALL_BAS_ERROR"

F_CALL_UNNECESSARY_POSER ="F_CALL_UNNECESSARY_POSER"
F_CALL_MISSING_POSER = "F_CALL_MISSING_POSER"
F_CALL_POSER_ERROR = "F_CALL_POSER_ERROR"

F_CALL_UNNECESSARY_LEVER ="F_CALL_UNNECESSARY_LEVER"
F_CALL_MISSING_LEVER = "F_CALL_MISSING_LEVER"
F_CALL_LEVER_ERROR = "F_CALL_LEVER_ERROR"

F_CALL_INCORRECT_POSITION_PRINT = "F_CALL_INCORRECT_POSITION_PRINT"

# LOOP
LO_FOR_NUMBER_ITERATION_ERROR = "LO_FOR_NUMBER_ITERATION_ERROR"
LO_FOR_NUMBER_ITERATION_ERROR_UNDER2 = "LO_FOR_NUMBER_ITERATION_ERROR_UNDER2"
LO_WHILE_NUMBER_ITERATION_ERROR = "LO_WHILE_NUMBER_ITERATION_ERROR"
LO_WHILE_NUMBER_ITERATION_ERROR_UNDER2 = "LO_WHILE_NUMBER_ITERATION_ERROR_UNDER2"
LO_BODY_MISSING_NOT_PRESENT_ANYWHERE = "LO_BODY_MISSING_NOT_PRESENT_ANYWHERE"
LO_BODY_MISPLACED = "LO_BODY_MISPLACED"
LO_BODY_ERROR = "LO_BODY_ERROR"
LO_FOR_MISSING = "LO_FOR_MISSING"
LO_WHILE_MISSING = "LO_WHILE_MISSING"
LO_CONDITION_ERROR = "LO_CONDITION_ERROR"
LO_FOR_UNNECESSARY = "LO_FOR_UNNECESSARY"
LO_WHILE_UNNECESSARY = "LO_WHILE_UNNECESSARY"
LO_FOR_MISPLACED = "LO_FOR_MISPLACED"

# EXPRESSION
EXP_ERROR_CONDITIONAL_BRANCH = "EXP_ERROR_CONDITIONAL_BRANCH"

EXP_ERROR_ASSIGNMENT_MISSING = "EXP_ERROR_ASSIGNMENT_MISSING"
EXP_ERROR_ASSIGNMENT_UNNECESSARY = "EXP_ERROR_ASSIGNMENT_UNNECESSARY"
EXP_ERROR_ASSIGNMENT_MISPLACED = "EXP_ERROR_ASSIGNMENT_MISPLACED"

EXP_ERROR_OPERATION = "EXP_ERROR_OPERATION"





# ALGORITHM AND PROGRAM
PA_PROBLEM_DECOMPOSITION_ALGORITHMIC_STRATEGIE_ERROR = "PA_PROBLEM_DECOMPOSITION_ALGORITHMIC_STRATEGIE_ERROR"


# Annotation Tags

ANNOTATION_TAG_VARIABLE_MISMATCH = "VARIABLE_MISMATCH"
ANNOTATION_TAG_CONST_VALUE_MISMATCH = "CONST_VALUE_MISMATCH"
ANNOTATION_TAG_MISSING_FOR_LOOP = "MISSING_FOR_LOOP"
ANNOTATION_TAG_MISSING_WHILE_LOOP = "MISSING_WHILE_LOOP"
ANNOTATION_TAG_MISSING_CS = "MISSING_IF_STATEMENT"
ANNOTATION_TAG_MISSING_FUNCTION_DEFINITION = "MISSING_FUNCTION_DEFINITION"
ANNOTATION_TAG_MISSING = "MISSING"
ANNOTATION_TAG_INCORRECT_POSITION = "INCORRECT_STATEMENT_POSITION"
ANNOTATION_TAG_INCORRECT_POSITION_FOR = "INCORRECT_STATEMENT_POSITION_FOR"
ANNOTATION_TAG_INCORRECT_POSITION_WHILE = "INCORRECT_STATEMENT_POSITION_WHILE"
ANNOTATION_TAG_INCORRECT_POSITION_CS = "INCORRECT_STATEMENT_POSITION_IF"
ANNOTATION_TAG_INCORRECT_POSITION_ASSIGN = "INCORRECT_STATEMENT_POSITION_ASSIGN"
ANNOTATION_TAG_INCORRECT_POSITION_CALL = "INCORRECT_STATEMENT_POSITION_CALL"
ANNOTATION_TAG_MISSING_ARGUMENT = "MISSING_ARGUMENT"
ANNOTATION_TAG_UNNECESSARY_ARGUMENT = "UNNECESSARY_ARGUMENT"
ANNOTATION_TAG_MISSING_RETURN = "MISSING_RETURN"
ANNOTATION_TAG_UNNECESSARY_RETURN = "UNNECESSARY_RETURN_IN_FUNCTION"
ANNOTATION_TAG_MISSING_VARIABLE = "MISSING_VARIABLE"
ANNOTATION_TAG_INCORRECT_OPERATION_IN_COMP = "INCORRECT_OPERATION_IN_CONDITION"
ANNOTATION_TAG_UNNECESSARY_CALL_STATEMENT = "UNNECESSARY_CALL_STATEMENT"
ANNOTATION_TAG_INCORRECT_FUNCTION_CALL = "INCORRECT_FUNCTION_CALL"
ANNOTATION_TAG_INCORRECT_OPERATION_IN_ASSIGN = "INCORRECT_OPERATION_IN_ASSIGN"
ANNOTATION_TAG_MISSING_CONST_VALUE = "MISSING_CONST_VALUE"
ANNOTATION_TAG_MISSING_CALL_STATEMENT = "MISSING_CALL_STATEMENT"
ANNOTATION_TAG_MISSING_OPERATION = "MISSING_OPERATION"
ANNOTATION_TAG_UNNECESSARY_OPERATION = "UNNECESSARY_OPERATION"
ANNOTATION_TAG_UNNECESSARY_FOR_LOOP = "UNNECESSARY_FOR_LOOP"
ANNOTATION_TAG_UNNECESSARY_WHILE_LOOP = "UNNECESSARY_WHILE_LOOP"
ANNOTATION_TAG_UNNECESSARY_FUNCTION_DEFINITION = "UNNECESSARY_FUNCTION"

ANNOTATION_TAG_LIST_MISSING_EXPRESSION_ASSIGNMENT = ["MISSING_CONST_VALUE", "MISSING_ASSIGN_STATEMENT", "MISSING_VARIABLE"]
ANNOTATION_TAG_LIST_UNNECESSARY_EXPRESSION_ASSIGNMENT = ["UNNECESSARY_CONST_VALUE", "UNNECESSARY_ASSIGN_STATEMENT", "UNNECESSARY_VAR"]

# Annotation Contexts

ANNOTATION_CONTEXT_FOR_LOOP_BODY = "For > Body"
ANNOTATION_CONTEXT_WHILE_LOOP_BODY = "While > Body"
ANNOTATION_CONTEXT_WHILE_LOOP_CONDITION = "While > Condition"
ANNOTATION_CONTEXT_CS_BODY = "If > Body"
ANNOTATION_CONTEXT_CS_CONDITION = "If > Condition"

ANNOTATION_CONTEXT_RETURN_1 = "Function"
ANNOTATION_CONTEXT_RETURN_2 = "Return > Tuple"

ANNOTATION_CONTEXT_MODULE = "Module"
ANNOTATION_CONTEXT_ASSIGN = "Assign"

ANNOTATION_CONTEXT_FOR_NODE_NAME = "For"
ANNOTATION_CONTEXT_FOR_LOOP = r".*For$"
ANNOTATION_CONTEXT_WHILE_NODE_NAME = "While"
ANNOTATION_CONTEXT_WHILE_LOOP = r".*While$"

# This regex checks if the context ends with a pattern like:
# "Call: <any_text> > Const: <any_text>"
# ANNOTATION_CONTEXT_FUNCTION_PARAMETER = r"Call:\s*.+\s*>\s*Const:\s*.+\s*$"

ANNOTATION_CONTEXT_FUNCTION_PARAMETER = r"\bCall\b(?:(?!range).)*?>\s*Const:\s*[^>]+"
ANNOTATION_CONTEXT_FUNCTION_CALL_UPDATE = r".*Call:\s*\w+$"
ANNOTATION_CONTEXT_UNNECESSARY_FUNCTION_CALL = "Call:"


ANNOTATION_CONTEXT_FUNCTION_CALL = r".*Call:.*>.*"
ANNOTATION_CONTEXT_FUNCTION_CALL_NODE = r"Call:\s*([A-Za-z_]\w*)"

ANNOTATION_CONTEXT_RANGE_FUNCTION_CALL = r"Call:\s*range"


# Precise Annotation Tags
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_PRINT_NODE_NAME = "print"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_PRINT = r"Call:\s*print"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_PRINT_ARG = r"Call:\s*print > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_AVANCER_NODE_NAME = "avancer"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_AVANCER = r"Call:\s*avancer$"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_AVANCER_ARG = r"Call:\s*avancer > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_TOURNER_NODE_NAME = "tourner"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_TOURNER = r"Call:\s*tourner$"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_TOURNER_ARG = r"Call:\s*tourner > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_COULEUR_NODE_NAME = "couleur"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_COULEUR = r"Call:\s*couleur$"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_COULEUR_ARG = r"Call:\s*couleur > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_ARC_NODE_NAME = "arc"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_ARC = r"Call:\s*arc$"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_ARC_ARG = r"Call:\s*arc > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_GAUCHE_NODE_NAME = "gauche"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_GAUCHE = r"Call:\s*gauche$"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_GAUCHE_ARG = r"Call:\s*gauche > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_DROITE_NODE_NAME = "droite"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_DROITE = r"Call:\s*droite"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_DROITE_ARG = r"Call:\s*droite > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_HAUT_NODE_NAME = "haut"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_HAUT = r"Call:\s*haut"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_HAUT_ARG = r"Call:\s*haut > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_BAS_NODE_NAME = "bas"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_BAS = r"Call:\s*bas"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_BAS_ARG = r"Call:\s*bas > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_POSER_NODE_NAME = "poser"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_POSER = r"Call:\s*poser"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_POSER_ARG = r"Call:\s*poser > .*"

ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_LEVER_NODE_NAME = "lever"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_LEVER = r"Call:\s*lever"
ANNOTATION_CONTEXT_CALL_NATIVE_FUNCTION_LEVER_ARG = r"Call:\s*lever > .*"

ANNOTATION_CONTEXT_OPERATION = r"Operation:.*"

ANNOTATION_CONTEXT_VAR = r".*Assign\s>\sConst:\s\d+$"




EXP_ERROR_OPERATION_EXCEPTION_ANNOTATION_TAGS = [ANNOTATION_TAG_VARIABLE_MISMATCH]
F_CALL_PRINT_ERROR_ARG_EXCEPTION_ANNOTATION_TAGS = [ANNOTATION_TAG_VARIABLE_MISMATCH, ANNOTATION_TAG_UNNECESSARY_CALL_STATEMENT]
F_CALL_DESIGN_ERROR_ARG_EXCEPTION_ANNOTATION_TAGS = [ANNOTATION_TAG_VARIABLE_MISMATCH]
F_CALL_ROBOT_ERROR_ARG_EXCEPTION_ANNOTATION_TAGS = [ANNOTATION_TAG_VARIABLE_MISMATCH]
