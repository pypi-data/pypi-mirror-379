# Generated by Django 5.2.6 on 2025-09-24 07:15

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Currency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    models.CharField(
                        help_text="Currency code (e.g., USD, BTC, ETH)", max_length=10, unique=True
                    ),
                ),
                ("name", models.CharField(help_text="Full currency name", max_length=100)),
                (
                    "symbol",
                    models.CharField(help_text="Currency symbol (e.g., $, ₿, Ξ)", max_length=10),
                ),
                (
                    "currency_type",
                    models.CharField(
                        choices=[("fiat", "Fiat Currency"), ("crypto", "Cryptocurrency")],
                        help_text="Type of currency",
                        max_length=10,
                    ),
                ),
                (
                    "decimal_places",
                    models.PositiveSmallIntegerField(
                        default=2, help_text="Number of decimal places for this currency"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this currency is active for payments"
                    ),
                ),
                (
                    "min_payment_amount",
                    models.FloatField(
                        default=1.0, help_text="Minimum payment amount for this currency"
                    ),
                ),
                (
                    "usd_rate",
                    models.FloatField(
                        default=1.0,
                        help_text="Exchange rate to USD (1 unit of this currency = X USD)",
                    ),
                ),
                (
                    "rate_updated_at",
                    models.DateTimeField(
                        blank=True, help_text="When the exchange rate was last updated", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Currency",
                "verbose_name_plural": "Currencies",
                "db_table": "payment_currencies",
                "ordering": ["code"],
                "indexes": [
                    models.Index(fields=["code"], name="payment_cur_code_e2a506_idx"),
                    models.Index(fields=["currency_type"], name="payment_cur_currenc_6057a9_idx"),
                    models.Index(fields=["is_active"], name="payment_cur_is_acti_8d558f_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="EndpointGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="Endpoint group name", max_length=100, unique=True),
                ),
                ("display_name", models.CharField(help_text="Human-readable name", max_length=200)),
                ("description", models.TextField(blank=True, help_text="Group description")),
                (
                    "basic_price",
                    models.FloatField(
                        default=0.0,
                        help_text="Basic tier monthly price",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "premium_price",
                    models.FloatField(
                        default=0.0,
                        help_text="Premium tier monthly price",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "enterprise_price",
                    models.FloatField(
                        default=0.0,
                        help_text="Enterprise tier monthly price",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "basic_limit",
                    models.PositiveIntegerField(
                        default=1000, help_text="Basic tier monthly usage limit"
                    ),
                ),
                (
                    "premium_limit",
                    models.PositiveIntegerField(
                        default=10000, help_text="Premium tier monthly usage limit"
                    ),
                ),
                (
                    "enterprise_limit",
                    models.PositiveIntegerField(
                        default=0, help_text="Enterprise tier monthly usage limit (0 = unlimited)"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Is this endpoint group active"),
                ),
                (
                    "require_api_key",
                    models.BooleanField(default=True, help_text="Require API key for access"),
                ),
            ],
            options={
                "verbose_name": "Endpoint Group",
                "verbose_name_plural": "Endpoint Groups",
                "db_table": "endpoint_groups",
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="endpoint_gr_name_970d2f_idx"),
                    models.Index(fields=["is_active"], name="endpoint_gr_is_acti_a9b5f6_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="PaymentEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "payment_id",
                    models.CharField(db_index=True, help_text="Payment identifier", max_length=255),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("payment_created", "Payment Created"),
                            ("webhook_received", "Webhook Received"),
                            ("webhook_processed", "Webhook Processed"),
                            ("balance_updated", "Balance Updated"),
                            ("refund_processed", "Refund Processed"),
                            ("status_changed", "Status Changed"),
                            ("error_occurred", "Error Occurred"),
                        ],
                        db_index=True,
                        help_text="Type of event",
                        max_length=50,
                    ),
                ),
                (
                    "sequence_number",
                    models.PositiveBigIntegerField(help_text="Sequential number per payment"),
                ),
                ("event_data", models.JSONField(help_text="Event data payload")),
                (
                    "processed_by",
                    models.CharField(
                        help_text="Worker/server that processed this event", max_length=100
                    ),
                ),
                (
                    "correlation_id",
                    models.CharField(
                        blank=True,
                        help_text="Correlation ID for tracing",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "idempotency_key",
                    models.CharField(
                        help_text="Idempotency key to prevent duplicates",
                        max_length=255,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Event",
                "verbose_name_plural": "Payment Events",
                "db_table": "payment_events",
                "ordering": ["sequence_number"],
                "indexes": [
                    models.Index(
                        fields=["payment_id", "sequence_number"],
                        name="payment_eve_payment_aaf2d1_idx",
                    ),
                    models.Index(
                        fields=["event_type", "created_at"], name="payment_eve_event_t_e821f3_idx"
                    ),
                    models.Index(fields=["idempotency_key"], name="payment_eve_idempot_c47628_idx"),
                    models.Index(fields=["correlation_id"], name="payment_eve_correla_fa1dc3_idx"),
                    models.Index(fields=["created_at"], name="payment_eve_created_0c1f4a_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("basic", "Basic"),
                            ("premium", "Premium"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="basic",
                        help_text="Subscription tier",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        help_text="Subscription status",
                        max_length=20,
                    ),
                ),
                (
                    "monthly_price",
                    models.FloatField(
                        help_text="Monthly subscription price",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "usage_limit",
                    models.PositiveIntegerField(
                        default=1000, help_text="Monthly usage limit (0 = unlimited)"
                    ),
                ),
                (
                    "usage_current",
                    models.PositiveIntegerField(default=0, help_text="Current month usage"),
                ),
                (
                    "last_billed",
                    models.DateTimeField(blank=True, help_text="Last billing date", null=True),
                ),
                (
                    "next_billing",
                    models.DateTimeField(blank=True, help_text="Next billing date", null=True),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Subscription expiration", null=True
                    ),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(blank=True, help_text="Cancellation date", null=True),
                ),
                (
                    "metadata",
                    models.JSONField(default=dict, help_text="Additional subscription metadata"),
                ),
                (
                    "endpoint_group",
                    models.ForeignKey(
                        help_text="Endpoint group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="django_cfg_payments.endpointgroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Subscriber",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "db_table": "user_subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Tariff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Tariff name", max_length=100, unique=True)),
                (
                    "display_name",
                    models.CharField(help_text="Human-readable tariff name", max_length=200),
                ),
                ("description", models.TextField(blank=True, help_text="Tariff description")),
                (
                    "monthly_price",
                    models.FloatField(
                        default=0.0,
                        help_text="Monthly price in USD",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "request_limit",
                    models.PositiveIntegerField(
                        default=1000, help_text="Monthly request limit (0 = unlimited)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, help_text="Is this tariff active")),
            ],
            options={
                "verbose_name": "Tariff",
                "verbose_name_plural": "Tariffs",
                "db_table": "tariffs",
                "ordering": ["monthly_price"],
                "indexes": [
                    models.Index(fields=["is_active"], name="tariffs_is_acti_e0eeb6_idx"),
                    models.Index(fields=["monthly_price"], name="tariffs_monthly_fc7022_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="TariffEndpointGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, help_text="Is this endpoint group enabled for this tariff"
                    ),
                ),
                (
                    "endpoint_group",
                    models.ForeignKey(
                        help_text="Endpoint group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tariffs",
                        to="django_cfg_payments.endpointgroup",
                    ),
                ),
                (
                    "tariff",
                    models.ForeignKey(
                        help_text="Tariff plan",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoint_groups",
                        to="django_cfg_payments.tariff",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tariff Endpoint Group",
                "verbose_name_plural": "Tariff Endpoint Groups",
                "db_table": "tariff_endpoint_groups",
            },
        ),
        migrations.CreateModel(
            name="UniversalPayment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amount_usd",
                    models.FloatField(
                        help_text="Payment amount in USD",
                        validators=[django.core.validators.MinValueValidator(1.0)],
                    ),
                ),
                (
                    "currency_code",
                    models.CharField(help_text="Currency used for payment", max_length=10),
                ),
                (
                    "actual_amount_usd",
                    models.FloatField(
                        blank=True, help_text="Actual received amount in USD", null=True
                    ),
                ),
                (
                    "actual_currency_code",
                    models.CharField(
                        blank=True, help_text="Actual received currency", max_length=10, null=True
                    ),
                ),
                (
                    "fee_amount_usd",
                    models.FloatField(
                        blank=True,
                        help_text="Fee amount in USD",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("nowpayments", "NowPayments"),
                            ("cryptapi", "CryptAPI"),
                            ("cryptomus", "Cryptomus"),
                            ("stripe", "Stripe"),
                            ("internal", "Internal"),
                        ],
                        help_text="Payment provider",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirming", "Confirming"),
                            ("confirmed", "Confirmed"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="Payment status",
                        max_length=20,
                    ),
                ),
                (
                    "provider_payment_id",
                    models.CharField(
                        blank=True,
                        help_text="Provider's payment ID",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "internal_payment_id",
                    models.CharField(
                        help_text="Internal payment identifier", max_length=100, unique=True
                    ),
                ),
                (
                    "pay_address",
                    models.CharField(
                        blank=True,
                        help_text="Cryptocurrency payment address",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "pay_amount",
                    models.FloatField(
                        blank=True, help_text="Amount to pay in cryptocurrency", null=True
                    ),
                ),
                (
                    "network",
                    models.CharField(
                        blank=True,
                        help_text="Blockchain network (mainnet, testnet, etc.)",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, help_text="Payment description")),
                (
                    "order_id",
                    models.CharField(
                        blank=True, help_text="Order reference ID", max_length=255, null=True
                    ),
                ),
                ("metadata", models.JSONField(default=dict, help_text="Additional metadata")),
                (
                    "webhook_data",
                    models.JSONField(
                        blank=True, help_text="Raw webhook data from provider", null=True
                    ),
                ),
                (
                    "security_nonce",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Security nonce for replay attack protection (CryptAPI, Cryptomus, etc.)",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "provider_callback_url",
                    models.CharField(
                        blank=True,
                        help_text="Full callback URL with security parameters",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "transaction_hash",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Main transaction hash/ID (txid_in for CryptAPI, hash for Cryptomus)",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "confirmation_hash",
                    models.CharField(
                        blank=True,
                        help_text="Secondary transaction hash (txid_out for CryptAPI, confirmation for others)",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "sender_address",
                    models.CharField(
                        blank=True,
                        help_text="Sender address (address_in for CryptAPI, from_address for Cryptomus)",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "receiver_address",
                    models.CharField(
                        blank=True,
                        help_text="Receiver address (address_out for CryptAPI, to_address for Cryptomus)",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "crypto_amount",
                    models.FloatField(
                        blank=True,
                        help_text="Amount in cryptocurrency units (value_coin for CryptAPI, amount for Cryptomus)",
                        null=True,
                    ),
                ),
                (
                    "confirmations_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of blockchain confirmations"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Payment expiration time", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="Payment completion time", null=True
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was processed and funds added to balance",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who initiated this payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="universal_payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Universal Payment",
                "verbose_name_plural": "Universal Payments",
                "db_table": "universal_payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amount_usd",
                    models.FloatField(
                        help_text="Transaction amount in USD (positive for credits, negative for debits)"
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("payment", "Payment"),
                            ("subscription", "Subscription"),
                            ("refund", "Refund"),
                            ("credit", "Credit"),
                            ("debit", "Debit"),
                            ("hold", "Hold"),
                            ("release", "Release"),
                            ("fee", "Fee"),
                            ("adjustment", "Adjustment"),
                        ],
                        help_text="Type of transaction",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Human-readable description of the transaction"),
                ),
                (
                    "balance_before",
                    models.FloatField(help_text="User balance before this transaction"),
                ),
                (
                    "balance_after",
                    models.FloatField(help_text="User balance after this transaction"),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True, help_text="External reference ID", max_length=255, null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(default=dict, help_text="Additional transaction metadata"),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related subscription (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transactions",
                        to="django_cfg_payments.subscription",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made this transaction",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "payment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related payment (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transactions",
                        to="django_cfg_payments.universalpayment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction",
                "verbose_name_plural": "Transactions",
                "db_table": "user_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserBalance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amount_usd",
                    models.FloatField(
                        default=0.0,
                        help_text="Current balance in USD",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "reserved_usd",
                    models.FloatField(
                        default=0.0,
                        help_text="Reserved balance in USD (for pending transactions)",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "total_earned",
                    models.FloatField(
                        default=0.0,
                        help_text="Total amount earned (lifetime)",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "total_spent",
                    models.FloatField(
                        default=0.0,
                        help_text="Total amount spent (lifetime)",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "last_transaction_at",
                    models.DateTimeField(
                        blank=True, help_text="When the last transaction occurred", null=True
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User who owns this balance",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="balance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Balance",
                "verbose_name_plural": "User Balances",
                "db_table": "user_balances",
            },
        ),
        migrations.CreateModel(
            name="APIKey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Human-readable key name", max_length=100)),
                (
                    "key_value",
                    models.CharField(
                        help_text="API key value (plain text)", max_length=255, unique=True
                    ),
                ),
                (
                    "key_prefix",
                    models.CharField(help_text="Key prefix for identification", max_length=20),
                ),
                ("is_active", models.BooleanField(default=True, help_text="Is key active")),
                (
                    "last_used",
                    models.DateTimeField(blank=True, help_text="Last usage timestamp", null=True),
                ),
                (
                    "usage_count",
                    models.PositiveBigIntegerField(default=0, help_text="Total usage count"),
                ),
                (
                    "expires_at",
                    models.DateTimeField(blank=True, help_text="Key expiration", null=True),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="API key owner",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "API Key",
                "verbose_name_plural": "API Keys",
                "db_table": "api_keys",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["user", "is_active"], name="api_keys_user_id_6e7352_idx"),
                    models.Index(fields=["key_value"], name="api_keys_key_val_a809c4_idx"),
                    models.Index(fields=["key_prefix"], name="api_keys_key_pre_9c2634_idx"),
                    models.Index(fields=["last_used"], name="api_keys_last_us_f1be76_idx"),
                    models.Index(fields=["expires_at"], name="api_keys_expires_f68b1a_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="CurrencyNetwork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "network_name",
                    models.CharField(
                        help_text="Network name (e.g., mainnet, polygon, bsc)", max_length=50
                    ),
                ),
                (
                    "network_code",
                    models.CharField(help_text="Network code for API integration", max_length=20),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this network is active"),
                ),
                (
                    "confirmation_blocks",
                    models.PositiveIntegerField(
                        default=1, help_text="Number of confirmations required"
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency this network supports",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        to="django_cfg_payments.currency",
                    ),
                ),
            ],
            options={
                "verbose_name": "Currency Network",
                "verbose_name_plural": "Currency Networks",
                "db_table": "payment_currency_networks",
                "indexes": [
                    models.Index(
                        fields=["currency", "is_active"], name="payment_cur_currenc_8709aa_idx"
                    ),
                    models.Index(fields=["network_code"], name="payment_cur_network_597115_idx"),
                ],
                "unique_together": {("currency", "network_code")},
            },
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["user", "status"], name="user_subscr_user_id_c57286_idx"),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["endpoint_group", "status"], name="user_subscr_endpoin_12e673_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["status", "expires_at"], name="user_subscr_status_e7170d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["next_billing"], name="user_subscr_next_bi_d8c922_idx"),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["created_at"], name="user_subscr_created_fe5591_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="subscription",
            unique_together={("user", "endpoint_group")},
        ),
        migrations.AlterUniqueTogether(
            name="tariffendpointgroup",
            unique_together={("tariff", "endpoint_group")},
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["user", "status"], name="universal_p_user_id_7bdba2_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(
                fields=["provider_payment_id"], name="universal_p_provide_bdcb09_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(
                fields=["internal_payment_id"], name="universal_p_interna_371bac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["status"], name="universal_p_status_e531bf_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["provider"], name="universal_p_provide_9820af_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["currency_code"], name="universal_p_currenc_56f1fc_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["created_at"], name="universal_p_created_978509_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["processed_at"], name="universal_p_process_1c8a1f_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["security_nonce"], name="universal_p_securit_4a38cc_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(fields=["transaction_hash"], name="universal_p_transac_8a27c6_idx"),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(
                fields=["confirmations_count"], name="universal_p_confirm_8df8c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="universalpayment",
            index=models.Index(
                fields=["provider", "status", "confirmations_count"],
                name="universal_p_provide_3c8a34_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transaction",
            index=models.Index(
                fields=["user", "created_at"], name="user_transa_user_id_63659d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transaction",
            index=models.Index(fields=["transaction_type"], name="user_transa_transac_dc0ae2_idx"),
        ),
        migrations.AddIndex(
            model_name="transaction",
            index=models.Index(fields=["amount_usd"], name="user_transa_amount__2eeba2_idx"),
        ),
        migrations.AddIndex(
            model_name="transaction",
            index=models.Index(fields=["created_at"], name="user_transa_created_1cb93d_idx"),
        ),
        migrations.AddIndex(
            model_name="transaction",
            index=models.Index(fields=["reference_id"], name="user_transa_referen_c8e19f_idx"),
        ),
        migrations.AddIndex(
            model_name="userbalance",
            index=models.Index(fields=["user"], name="user_balanc_user_id_9eea44_idx"),
        ),
        migrations.AddIndex(
            model_name="userbalance",
            index=models.Index(fields=["amount_usd"], name="user_balanc_amount__6ff57b_idx"),
        ),
        migrations.AddIndex(
            model_name="userbalance",
            index=models.Index(
                fields=["last_transaction_at"], name="user_balanc_last_tr_e5d8ae_idx"
            ),
        ),
    ]
