# serializer version: 1
# name: test_deannotate_module_source_preserves_specified_annotations
  '''
  import snowflake.snowpark
  
  from typing import Optional
  from snowflake.snowpark.session import Session
  from snowflake.snowpark.functions import col, sum, sproc
  
  
  @custom
  #: @sproc(native_app_params={'schema': 'math', 'application_roles': ['app_public', 'app_admin']})
  def sproc_sum(session: Session, first: int, second: int) -> int:
      return first + second
  
  #: @udf(native_app_params={
  #:     'schema': 'math',
  #:     'application_roles': ['app_public', 'app_admin']
  #: })
  #: @module.annotation
  def udf_sum(first: int, second: int) -> int:
      return first + second
  
  @custom
  def helper():
      pass
  
  
  @custom
  #: @udtf(
  #:     name="alt_int",
  #:     replace=True,
  #:     output_schema=StructType([StructField("number", IntegerType())]),
  #:     input_types=[IntegerType()],
  #: )
  #: @module.annotation
  class Alternator:
      def __init__(self):
          self._positive = True
  
      def process(self, n):
          for i in range(n):
              if self._positive:
                  yield (1,)
              else:
                  yield (-1,)
              self._positive = not self._positive
  '''
# ---
# name: test_deannotate_module_source_preserves_specified_annotations.1
  '''
  import snowflake.snowpark
  
  from typing import Optional
  from snowflake.snowpark.session import Session
  from snowflake.snowpark.functions import col, sum, sproc
  
  
  #: @custom
  #: @sproc(native_app_params={'schema': 'math', 'application_roles': ['app_public', 'app_admin']})
  def sproc_sum(session: Session, first: int, second: int) -> int:
      return first + second
  
  #: @udf(native_app_params={
  #:     'schema': 'math',
  #:     'application_roles': ['app_public', 'app_admin']
  #: })
  @module.annotation
  def udf_sum(first: int, second: int) -> int:
      return first + second
  
  @custom
  def helper():
      pass
  
  
  #: @custom
  #: @udtf(
  #:     name="alt_int",
  #:     replace=True,
  #:     output_schema=StructType([StructField("number", IntegerType())]),
  #:     input_types=[IntegerType()],
  #: )
  @module.annotation
  class Alternator:
      def __init__(self):
          self._positive = True
  
      def process(self, n):
          for i in range(n):
              if self._positive:
                  yield (1,)
              else:
                  yield (-1,)
              self._positive = not self._positive
  '''
# ---
# name: test_deannotate_module_source_removes_all_annotations
  '''
  import snowflake.snowpark
  
  from typing import Optional
  from snowflake.snowpark.session import Session
  from snowflake.snowpark.functions import col, sum, sproc
  
  
  #: @custom
  #: @sproc(native_app_params={'schema': 'math', 'application_roles': ['app_public', 'app_admin']})
  def sproc_sum(session: Session, first: int, second: int) -> int:
      return first + second
  
  #: @udf(native_app_params={
  #:     'schema': 'math',
  #:     'application_roles': ['app_public', 'app_admin']
  #: })
  #: @module.annotation
  def udf_sum(first: int, second: int) -> int:
      return first + second
  
  @custom
  def helper():
      pass
  
  
  #: @custom
  #: @udtf(
  #:     name="alt_int",
  #:     replace=True,
  #:     output_schema=StructType([StructField("number", IntegerType())]),
  #:     input_types=[IntegerType()],
  #: )
  #: @module.annotation
  class Alternator:
      def __init__(self):
          self._positive = True
  
      def process(self, n):
          for i in range(n):
              if self._positive:
                  yield (1,)
              else:
                  yield (-1,)
              self._positive = not self._positive
  '''
# ---
