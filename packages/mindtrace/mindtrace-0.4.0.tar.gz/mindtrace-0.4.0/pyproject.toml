[project]
name = "mindtrace"
version = "0.4.0"
description = "Mindtrace monorepo with modular packages"
requires-python = ">=3.12"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Mindtrace Team"}
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
  "mindtrace-core>=0.4.0",
  "mindtrace-jobs>=0.4.0",
  "mindtrace-registry>=0.4.0",
  "mindtrace-database>=0.4.0",
  "mindtrace-services>=0.4.0",
  "mindtrace-hardware>=0.4.0",
  "mindtrace-cluster>=0.4.0",
  "mindtrace-models>=0.4.0",
  "mindtrace-automation>=0.4.0",
  "mindtrace-apps>=0.4.0",
  "mindtrace-ui>=0.4.0",
  "mindtrace-datalake>=0.4.0",
  "mindtrace-storage>=0.4.0",
]

[project.optional-dependencies]
cameras-basler = ["mindtrace-hardware[cameras-basler]"]
cameras-all = ["mindtrace-hardware[cameras-all]"]
hardware-all = ["mindtrace-hardware[hardware-all]"]

[tool.uv]
dev-dependencies = [
    "pytest-cov>=6.1.1",
    "pytest-asyncio>=1.0.0",
    "pytest>=8.3.5",
    "httpx>=0.27.2",
    "pre-commit>=4.2.0",
    "twine>=6.1.0",
]

[project.urls]
Homepage = "https://mindtrace.ai"
Repository = "https://github.com/mindtrace/mindtrace"

[tool.uv.sources]
mindtrace-core = { workspace = true }
mindtrace-services = { workspace = true }
mindtrace-apps = { workspace = true }
mindtrace-cluster = { workspace = true }
mindtrace-database = { workspace = true }
mindtrace-hardware = { workspace = true }
mindtrace-jobs = { workspace = true }
mindtrace-models = { workspace = true }
mindtrace-automation = { workspace = true }
mindtrace-registry = { workspace = true }
mindtrace-ui = { workspace = true }
mindtrace-datalake = { workspace = true }
mindtrace-storage = { workspace = true }

[tool.uv.workspace]
members = [
  "mindtrace/core",
  "mindtrace/services",
  "mindtrace/apps",
  "mindtrace/cluster",
  "mindtrace/database",
  "mindtrace/hardware",
  "mindtrace/jobs",
  "mindtrace/models",
  "mindtrace/automation",
  "mindtrace/registry",
  "mindtrace/ui",
  "mindtrace/datalake",
  "mindtrace/storage",
]

[tool.ds.scripts]
test = """
    # Run all tests
    # ds test

    # Run only unit tests
    # ds test --unit

    # Run only integration tests
    # ds test --integration

    # Run specific test file or function (note the colon after 'test')
    # ds test: tests/integration/mindtrace/services/test_simple_integration.py::TestServiceIntegration::test_url_construction_logic

    # Run specific test directories (note the colon after 'test')
    # ds test: tests/unit
    # ds test: tests/integration/mindtrace/services

    # Run multiple test paths (note the colon after 'test')
    # ds test: tests/unit tests/integration/mindtrace/services

    # Run module tests only
    # ds test: services jobs

    # Run module unit tests only
    # ds test: database --unit

    bash scripts/run_tests.sh ${@:-}
"""

publish_to_pypi = """
    # Push all packages to PyPI
    # First build all packages: uv build --all-packages
    # ds publish_to_pypi                    # Push to Test PyPI (default)
    # ds publish_to_pypi testpypi          # Push to Test PyPI (explicit)
    # ds publish_to_pypi pypi              # Push to production PyPI

    bash scripts/push_to_pypi.sh ${@:-}
"""

[tool.ruff]
src = [
    ".",
    "mindtrace/apps",
    "mindtrace/automation",
    "mindtrace/cluster",
    "mindtrace/core",
    "mindtrace/database",
    "mindtrace/datalake",
    "mindtrace/hardware",
    "mindtrace/jobs",
    "mindtrace/models",
    "mindtrace/registry",
    "mindtrace/services",
    "mindtrace/storage",
    "mindtrace/ui",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "applications",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I001"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.setuptools.packages.find]
where = ["."]
include = ["mindtrace*"]

[tool.setuptools.package-data]
"*" = ["*.ini", "*.json", "*.yml", "*.yaml"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.coverage.run]
omit = ["**/.cache/**"]

[tool.coverage.report]
omit = ["**/.cache/**"]
