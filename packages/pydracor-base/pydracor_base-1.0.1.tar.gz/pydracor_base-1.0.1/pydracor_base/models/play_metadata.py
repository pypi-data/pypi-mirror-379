# coding: utf-8

"""
    DraCor API

    The version of the OpenAPI document: 1.1.4
    Contact: sluytergaeth@uni-potsdam.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayMetadata(BaseModel):
    """
    PlayMetadata
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    title: StrictStr
    subtitle: Optional[StrictStr]
    wikidata_id: Optional[StrictStr] = Field(alias="wikidataId")
    first_author: StrictStr = Field(alias="firstAuthor")
    year_normalized: Optional[StrictInt] = Field(alias="yearNormalized")
    year_written: Optional[StrictStr] = Field(alias="yearWritten")
    year_premiered: Optional[StrictStr] = Field(alias="yearPremiered")
    year_printed: Optional[StrictStr] = Field(alias="yearPrinted")
    date_premiered: Optional[StrictStr] = Field(alias="datePremiered")
    normalized_genre: Optional[StrictStr] = Field(alias="normalizedGenre")
    libretto: StrictBool
    density: Union[StrictFloat, StrictInt]
    digital_source: Optional[Any] = Field(alias="digitalSource")
    original_source_number_of_pages: Optional[StrictInt] = Field(alias="originalSourceNumberOfPages")
    original_source_pub_place: Optional[StrictStr] = Field(alias="originalSourcePubPlace")
    original_source_publisher: Optional[StrictStr] = Field(alias="originalSourcePublisher")
    original_source_year: Optional[StrictInt] = Field(alias="originalSourceYear")
    average_clustering: Union[StrictFloat, StrictInt] = Field(alias="averageClustering")
    average_degree: Union[StrictFloat, StrictInt] = Field(alias="averageDegree")
    average_path_length: Union[StrictFloat, StrictInt] = Field(alias="averagePathLength")
    diameter: StrictInt
    max_degree: StrictInt = Field(alias="maxDegree")
    max_degree_ids: StrictStr = Field(alias="maxDegreeIds")
    num_of_l: StrictInt = Field(alias="numOfL")
    num_connected_components: StrictInt = Field(alias="numConnectedComponents")
    num_edges: StrictInt = Field(alias="numEdges")
    num_of_acts: StrictInt = Field(alias="numOfActs")
    num_of_co_authors: StrictInt = Field(alias="numOfCoAuthors")
    num_of_p: StrictInt = Field(alias="numOfP")
    num_of_person_groups: StrictInt = Field(alias="numOfPersonGroups")
    num_of_segments: StrictInt = Field(alias="numOfSegments")
    num_of_speakers: StrictInt = Field(alias="numOfSpeakers")
    num_of_speakers_male: StrictInt = Field(alias="numOfSpeakersMale")
    num_of_speakers_female: StrictInt = Field(alias="numOfSpeakersFemale")
    num_of_speakers_unknown: StrictInt = Field(alias="numOfSpeakersUnknown")
    size: StrictInt
    wikipedia_link_count: Optional[StrictInt] = Field(alias="wikipediaLinkCount")
    word_count_sp: StrictInt = Field(alias="wordCountSp")
    word_count_stage: StrictInt = Field(alias="wordCountStage")
    word_count_text: StrictInt = Field(alias="wordCountText")
    __properties: ClassVar[List[str]] = ["id", "name", "title", "subtitle", "wikidataId", "firstAuthor", "yearNormalized", "yearWritten", "yearPremiered", "yearPrinted", "datePremiered", "normalizedGenre", "libretto", "density", "digitalSource", "originalSourceNumberOfPages", "originalSourcePubPlace", "originalSourcePublisher", "originalSourceYear", "averageClustering", "averageDegree", "averagePathLength", "diameter", "maxDegree", "maxDegreeIds", "numOfL", "numConnectedComponents", "numEdges", "numOfActs", "numOfCoAuthors", "numOfP", "numOfPersonGroups", "numOfSegments", "numOfSpeakers", "numOfSpeakersMale", "numOfSpeakersFemale", "numOfSpeakersUnknown", "size", "wikipediaLinkCount", "wordCountSp", "wordCountStage", "wordCountText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if subtitle (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle is None and "subtitle" in self.model_fields_set:
            _dict['subtitle'] = None

        # set to None if wikidata_id (nullable) is None
        # and model_fields_set contains the field
        if self.wikidata_id is None and "wikidata_id" in self.model_fields_set:
            _dict['wikidataId'] = None

        # set to None if year_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.year_normalized is None and "year_normalized" in self.model_fields_set:
            _dict['yearNormalized'] = None

        # set to None if year_written (nullable) is None
        # and model_fields_set contains the field
        if self.year_written is None and "year_written" in self.model_fields_set:
            _dict['yearWritten'] = None

        # set to None if year_premiered (nullable) is None
        # and model_fields_set contains the field
        if self.year_premiered is None and "year_premiered" in self.model_fields_set:
            _dict['yearPremiered'] = None

        # set to None if year_printed (nullable) is None
        # and model_fields_set contains the field
        if self.year_printed is None and "year_printed" in self.model_fields_set:
            _dict['yearPrinted'] = None

        # set to None if date_premiered (nullable) is None
        # and model_fields_set contains the field
        if self.date_premiered is None and "date_premiered" in self.model_fields_set:
            _dict['datePremiered'] = None

        # set to None if normalized_genre (nullable) is None
        # and model_fields_set contains the field
        if self.normalized_genre is None and "normalized_genre" in self.model_fields_set:
            _dict['normalizedGenre'] = None

        # set to None if digital_source (nullable) is None
        # and model_fields_set contains the field
        if self.digital_source is None and "digital_source" in self.model_fields_set:
            _dict['digitalSource'] = None

        # set to None if original_source_number_of_pages (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_number_of_pages is None and "original_source_number_of_pages" in self.model_fields_set:
            _dict['originalSourceNumberOfPages'] = None

        # set to None if original_source_pub_place (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_pub_place is None and "original_source_pub_place" in self.model_fields_set:
            _dict['originalSourcePubPlace'] = None

        # set to None if original_source_publisher (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_publisher is None and "original_source_publisher" in self.model_fields_set:
            _dict['originalSourcePublisher'] = None

        # set to None if original_source_year (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_year is None and "original_source_year" in self.model_fields_set:
            _dict['originalSourceYear'] = None

        # set to None if wikipedia_link_count (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_link_count is None and "wikipedia_link_count" in self.model_fields_set:
            _dict['wikipediaLinkCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "subtitle": obj.get("subtitle"),
            "wikidataId": obj.get("wikidataId"),
            "firstAuthor": obj.get("firstAuthor"),
            "yearNormalized": obj.get("yearNormalized"),
            "yearWritten": obj.get("yearWritten"),
            "yearPremiered": obj.get("yearPremiered"),
            "yearPrinted": obj.get("yearPrinted"),
            "datePremiered": obj.get("datePremiered"),
            "normalizedGenre": obj.get("normalizedGenre"),
            "libretto": obj.get("libretto"),
            "density": obj.get("density"),
            "digitalSource": obj.get("digitalSource"),
            "originalSourceNumberOfPages": obj.get("originalSourceNumberOfPages"),
            "originalSourcePubPlace": obj.get("originalSourcePubPlace"),
            "originalSourcePublisher": obj.get("originalSourcePublisher"),
            "originalSourceYear": obj.get("originalSourceYear"),
            "averageClustering": obj.get("averageClustering"),
            "averageDegree": obj.get("averageDegree"),
            "averagePathLength": obj.get("averagePathLength"),
            "diameter": obj.get("diameter"),
            "maxDegree": obj.get("maxDegree"),
            "maxDegreeIds": obj.get("maxDegreeIds"),
            "numOfL": obj.get("numOfL"),
            "numConnectedComponents": obj.get("numConnectedComponents"),
            "numEdges": obj.get("numEdges"),
            "numOfActs": obj.get("numOfActs"),
            "numOfCoAuthors": obj.get("numOfCoAuthors"),
            "numOfP": obj.get("numOfP"),
            "numOfPersonGroups": obj.get("numOfPersonGroups"),
            "numOfSegments": obj.get("numOfSegments"),
            "numOfSpeakers": obj.get("numOfSpeakers"),
            "numOfSpeakersMale": obj.get("numOfSpeakersMale"),
            "numOfSpeakersFemale": obj.get("numOfSpeakersFemale"),
            "numOfSpeakersUnknown": obj.get("numOfSpeakersUnknown"),
            "size": obj.get("size"),
            "wikipediaLinkCount": obj.get("wikipediaLinkCount"),
            "wordCountSp": obj.get("wordCountSp"),
            "wordCountStage": obj.get("wordCountStage"),
            "wordCountText": obj.get("wordCountText")
        })
        return _obj


