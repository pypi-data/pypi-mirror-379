# coding: utf-8

"""
    DraCor API

    The version of the OpenAPI document: 1.1.4
    Contact: sluytergaeth@uni-potsdam.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Character(BaseModel):
    """
    Character
    """ # noqa: E501
    id: StrictStr
    name: Optional[StrictStr]
    is_group: StrictBool = Field(alias="isGroup")
    sex: Optional[StrictStr]
    gender: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    betweenness: Optional[Union[StrictFloat, StrictInt]]
    closeness: Optional[Union[StrictFloat, StrictInt]]
    degree: Optional[StrictInt]
    eigenvector: Optional[Union[StrictFloat, StrictInt]]
    num_of_scenes: StrictInt = Field(alias="numOfScenes")
    num_of_speech_acts: StrictInt = Field(alias="numOfSpeechActs")
    num_of_words: StrictInt = Field(alias="numOfWords")
    weighted_degree: Optional[StrictInt] = Field(alias="weightedDegree")
    wikidata_id: Optional[StrictStr] = Field(default=None, alias="wikidataId")
    __properties: ClassVar[List[str]] = ["id", "name", "isGroup", "sex", "gender", "role", "betweenness", "closeness", "degree", "eigenvector", "numOfScenes", "numOfSpeechActs", "numOfWords", "weightedDegree", "wikidataId"]

    @field_validator('sex')
    def sex_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MALE', 'FEMALE', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('MALE', 'FEMALE', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Character from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if sex (nullable) is None
        # and model_fields_set contains the field
        if self.sex is None and "sex" in self.model_fields_set:
            _dict['sex'] = None

        # set to None if betweenness (nullable) is None
        # and model_fields_set contains the field
        if self.betweenness is None and "betweenness" in self.model_fields_set:
            _dict['betweenness'] = None

        # set to None if closeness (nullable) is None
        # and model_fields_set contains the field
        if self.closeness is None and "closeness" in self.model_fields_set:
            _dict['closeness'] = None

        # set to None if degree (nullable) is None
        # and model_fields_set contains the field
        if self.degree is None and "degree" in self.model_fields_set:
            _dict['degree'] = None

        # set to None if eigenvector (nullable) is None
        # and model_fields_set contains the field
        if self.eigenvector is None and "eigenvector" in self.model_fields_set:
            _dict['eigenvector'] = None

        # set to None if weighted_degree (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_degree is None and "weighted_degree" in self.model_fields_set:
            _dict['weightedDegree'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Character from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "isGroup": obj.get("isGroup"),
            "sex": obj.get("sex"),
            "gender": obj.get("gender"),
            "role": obj.get("role"),
            "betweenness": obj.get("betweenness"),
            "closeness": obj.get("closeness"),
            "degree": obj.get("degree"),
            "eigenvector": obj.get("eigenvector"),
            "numOfScenes": obj.get("numOfScenes"),
            "numOfSpeechActs": obj.get("numOfSpeechActs"),
            "numOfWords": obj.get("numOfWords"),
            "weightedDegree": obj.get("weightedDegree"),
            "wikidataId": obj.get("wikidataId")
        })
        return _obj


