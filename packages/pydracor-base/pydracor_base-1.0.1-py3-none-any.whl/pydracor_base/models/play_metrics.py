# coding: utf-8

"""
    DraCor API

    The version of the OpenAPI document: 1.1.4
    Contact: sluytergaeth@uni-potsdam.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydracor_base.models.node_in_play_metrics import NodeInPlayMetrics
from typing import Optional, Set
from typing_extensions import Self

class PlayMetrics(BaseModel):
    """
    PlayMetrics
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    corpus: StrictStr
    nodes: List[NodeInPlayMetrics]
    average_clustering: Union[StrictFloat, StrictInt] = Field(alias="averageClustering")
    average_degree: Union[StrictFloat, StrictInt] = Field(alias="averageDegree")
    average_path_length: Union[StrictFloat, StrictInt] = Field(alias="averagePathLength")
    density: Union[StrictFloat, StrictInt]
    diameter: StrictInt
    max_degree: StrictInt = Field(alias="maxDegree")
    max_degree_ids: List[StrictStr] = Field(alias="maxDegreeIds")
    num_connected_components: StrictInt = Field(alias="numConnectedComponents")
    num_edges: StrictInt = Field(alias="numEdges")
    size: StrictInt
    wikipedia_link_count: Optional[StrictInt] = Field(alias="wikipediaLinkCount")
    __properties: ClassVar[List[str]] = ["id", "name", "corpus", "nodes", "averageClustering", "averageDegree", "averagePathLength", "density", "diameter", "maxDegree", "maxDegreeIds", "numConnectedComponents", "numEdges", "size", "wikipediaLinkCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # set to None if wikipedia_link_count (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_link_count is None and "wikipedia_link_count" in self.model_fields_set:
            _dict['wikipediaLinkCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "corpus": obj.get("corpus"),
            "nodes": [NodeInPlayMetrics.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "averageClustering": obj.get("averageClustering"),
            "averageDegree": obj.get("averageDegree"),
            "averagePathLength": obj.get("averagePathLength"),
            "density": obj.get("density"),
            "diameter": obj.get("diameter"),
            "maxDegree": obj.get("maxDegree"),
            "maxDegreeIds": obj.get("maxDegreeIds"),
            "numConnectedComponents": obj.get("numConnectedComponents"),
            "numEdges": obj.get("numEdges"),
            "size": obj.get("size"),
            "wikipediaLinkCount": obj.get("wikipediaLinkCount")
        })
        return _obj


