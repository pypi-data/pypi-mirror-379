Metadata-Version: 2.4
Name: agix
Version: 1.7.0
Summary: Experimental AGI framework with neuro-symbolic reasoning, evolutionary agents and plastic learning
Author-email: Adolfo <adolfogonzal@gmail.com>
License-Expression: MIT
Keywords: AGI,neuro-symbolic,evolution,machine-learning,reasoning
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: numpy>=1.22
Requires-Dist: scipy>=1.9
Requires-Dist: matplotlib>=3.5
Requires-Dist: networkx>=3.0
Requires-Dist: fastapi>=0.115
Requires-Dist: uvicorn>=0.34
Requires-Dist: flet>=0.28
Provides-Extra: ml
Requires-Dist: scikit-learn; extra == "ml"
Provides-Extra: data
Requires-Dist: pandas; extra == "data"
Dynamic: license-file

# AGIX ‚Äì AGI Core Framework

[![CI](https://github.com/owner/agi_core/actions/workflows/ci.yml/badge.svg)](https://github.com/owner/agi_core/actions/workflows/ci.yml) [![Coverage](https://codecov.io/gh/owner/agi_core/branch/main/graph/badge.svg)](https://codecov.io/gh/owner/agi_core)

**AGIX** (antes `agi_lab`) es un framework modular en Python para investigar arquitecturas de **Inteligencia Artificial General (AGI)**, integrando principios evolutivos, neurobiol√≥gicos, simb√≥licos y formales.

---

## üßæ Fase 0 ‚Äì Base Onto√©tica

La **Fase 0** establece los principios √©ticos y ontol√≥gicos de AGIX, sintetizados en la [Carta Onto√©tica](docs/carta_ontoetica.md). Esta base asegura que las fases posteriores ‚Äîincluyendo agentes, aprendizaje, memoria, razonamiento y evaluaci√≥n‚Äî se desarrollen en coherencia con el juramento de no da√±o y la co‚Äëevoluci√≥n con el entorno.

---

## üöÄ Objetivo

Desarrollar una plataforma flexible para:

- Simular agentes con plasticidad, evoluci√≥n y razonamiento h√≠brido.
- Probar teor√≠as formales como inferencia activa, generalizaci√≥n universal o autoorganizaci√≥n.
- Evaluar agentes mediante m√©tricas de generalidad, robustez y explicabilidad.
- Permitir autoevaluaci√≥n reflexiva mediante ontolog√≠as internas.

---

## üì¶ Instalaci√≥n

Desde PyPI:

```bash
pip install agix
```

Desde el repositorio clonado:

```bash
pip install -r requirements.txt
pip install -r requirements-dev.txt
pip install -e .
```

`pip install -e .` registra el paquete `agix` en el entorno de desarrollo, lo que permite que los tests funcionen correctamente.


Para verificar la instalaci√≥n y la versi√≥n detectada por `importlib.metadata`:

```bash
pytest tests/test_version.py
```

### Dependencias opcionales

Algunas capacidades adicionales requieren librer√≠as externas que pueden instalarse como *extras* de `agix`:

```bash
pip install agix[fuzzy]
```

Incluye soporte de l√≥gica difusa mediante `scikit-fuzzy`, utilizado en los m√≥dulos de razonamiento difuso dentro de `agix.reasoning`.
Tras la instalaci√≥n puede ejecutarse el ejemplo `examples/fuzzy_demo.py`; consulta [docs/fuzzy.md](docs/fuzzy.md).

```bash
pip install agix[game_theory]
```

A√±ade herramientas de teor√≠a de juegos como `nashpy`, aprovechadas en evaluaciones estrat√©gicas y en m√≥dulos como `agix.evaluation.formal.cognitive_games`.

## üìÇ Estructura del Proyecto

```bash
agix/
‚îú‚îÄ‚îÄ agents/         # Agentes gen√©ticos y neurom√≥rficos
‚îú‚îÄ‚îÄ learning/       # Plasticidad, evoluci√≥n, meta-aprendizaje
‚îú‚îÄ‚îÄ memory/         # Ontolog√≠as y embeddings conceptuales
‚îú‚îÄ‚îÄ reasoning/      # Razonamiento simb√≥lico y neuro-simb√≥lico
‚îú‚îÄ‚îÄ evaluation/     # M√©tricas de generalidad y robustez
‚îú‚îÄ‚îÄ environments/   # Entornos simulados y ToyEnv
‚îú‚îÄ‚îÄ cli/            # Interfaz de l√≠nea de comandos

```

## üìö Documentaci√≥n neuroinspirada con Sphinx

La nueva documentaci√≥n t√©cnica de los componentes neuroinspirados vive en
`docs/neuroinspired/` y se construye con **Sphinx** (autodoc, autosummary y
notebooks mediante `nbsphinx`). Para generar la versi√≥n HTML ejecuta:

```bash
cd docs/neuroinspired
make html
```

El resultado quedar√° en `docs/neuroinspired/_build/html/index.html`. Si no
cuentas con Sphinx instalado puedes a√±adirlo r√°pidamente al entorno:

```bash
pip install sphinx nbsphinx
```

El notebook interactivo enlazado (`notebooks/neuroinspired_overview.ipynb`)
muestra un recorrido guiado por la inferencia de `V1Layer` y el aprendizaje
hebbiano del `NeuromorphicAgent`.

## üß™ Ejemplo de uso b√°sico

```python
from agix.agents.genetic import GeneticAgent

agent = GeneticAgent(action_space_size=4)
env = ToyEnvironment()

obs = env.reset()
while True:
    agent.perceive(obs)
    action = agent.decide()
    obs, reward, done, _ = env.step(action)
    agent.learn(reward)
    if done:
        break

```

### Registrar experiencias

```python
from agix.memory import GestorDeMemoria

mem = GestorDeMemoria()
mem.registrar("ve obst√°culo", "girar", "evita colisi√≥n", True)
mem.guardar("mem.json")
```

### Introspecci√≥n con QualiaSpirit

```python
from agix.qualia.spirit import QualiaSpirit

sp = QualiaSpirit("Luma")
sp.experimentar("ve una nube", 0.3, "curiosidad")
print(sp.introspeccionar()["state"]["recuerdos"])
```

### Sincronizar emociones por red

```python
from agix.qualia.network import QualiaNetworkClient

cliente = QualiaNetworkClient("http://localhost:8000", timeout=5)
sp.sincronizar(cliente, autorizado=True)
```

Para recibir las actualizaciones es necesario lanzar `agix.dashboard.server` y
permitir el endpoint `/qualia/sync`.

### Uso de QualiaHub

```python
from agix.orchestrator import QualiaHub

hub = QualiaHub()
hub.register_module("vision", {"version": "1.0"})
print(hub.get_modules())
```

### Capa fenomenol√≥gica

La clase `QualiaEngine` fusiona la entrada sensorial con el estado interno para
construir una experiencia subjetiva.

```python
from agix.qualia import QualiaEngine
from agix.memory import GestorDeMemoria

engine = QualiaEngine(GestorDeMemoria())
state = engine.generate_state([1.0, 0.5], [0.0, 0.1])
fused, meta = engine.encode_integrated_info([0.2, 0.8], [0.9, 0.1])
```

Consulta [capa fenomenol√≥gica](docs/capa_fenomenologica.md) para m√°s detalles
y ejemplos.

### Simulador de emociones (modelo PAD)

`EmotionSimulator` mantiene un estado emocional basado en **placer**,
**activaci√≥n** y **dominancia**. Este simulador puede modular componentes como
`AttentionFocus` y registrar el estado en `GestorDeMemoria`.

```python
from agix.emotion.emotion_simulator import EmotionSimulator, PADState
from agix.perception.attention import AttentionFocus, SensorMap
from agix.qualia.qualia_core import EmotionalState

mapa = SensorMap()
foco = AttentionFocus(mapa)
sim = EmotionSimulator(pesos={"elogio": PADState(0.4, 0.2, 0.0)})
sim.registrar_modulador(foco)

qualia = EmotionalState()
qualia.sentir("alegr√≠a", 1.0)
sim.actualizar({"elogio": 1}, {}, qualia)
print(sim.estado())
```

## üß† Componentes principales

- ```GeneticAgent:``` aprendizaje evolutivo por mutaci√≥n y cruce.

- ```NeuromorphicAgent:``` aprendizaje basado en plasticidad Hebb/STDP.

- ```MetaLearner:``` transformaci√≥n adaptativa del agente (œÄ ‚Üí œÄ‚Ä≤).

- ```Ontology```, ```LatentRepresentation```: representaci√≥n de conceptos h√≠brida.

- ```NeuroSymbolicBridge```: conversi√≥n simb√≥lico ‚Üî latente.

- ```EvaluationMetrics```: robustez, generalidad, transferencia, fagi_index.
- ```ConceptClassifier```: clasificaci√≥n autom√°tica de conceptos nuevos.
- ```HeuristicConceptCreator```: generaci√≥n heur√≠stica de conceptos combinados.
- ```HeuristicQualiaSpirit```: introspecci√≥n con reglas heur√≠sticas.
- ```AFE-VEC```: vector de afecto, fluidez y energ√≠a para analizar emociones.


## üîç CLI disponible

```bash
agix simulate --observations 10 --actions 4
agix inspect --name AGIX --version 1.1.0
agix evaluate --agent-class GeneticAgent --env-class ToyEnv
agix autoagent --observations 10 --actions 4
agix razonar --hechos "amigo(ana,juan);amigo(juan,maria)"
agix hub --start

```

Consulta [docs/cli.md](docs/cli.md) para una gu√≠a detallada de cada subcomando.

## Aplicaciones en Videojuegos, VR y Rob√≥tica

AGIX incluye entornos especializados para videojuegos, realidad virtual y robots.
Agentes como `AffectiveNPC` pueden interactuar con `VideoGameEnvironment`,
`VREnvironment` y `RobotEnvironment`. Consulta la [gu√≠a de VR y rob√≥tica](docs/vr_robotica.md)
para ejemplos de instalaci√≥n y c√≥digo.

## üìö Documentaci√≥n oficial


- Sitio: https://alphonsus411.github.io/agi_core

- Contiene gu√≠a de instalaci√≥n, arquitectura, ejemplos, API y hoja de ruta.
- Consulta [docs/dashboard.md](docs/dashboard.md) para un dashboard web de seguimiento.
- Consulta [docs/verifier.md](docs/verifier.md) para la secci√≥n de verificaci√≥n formal.
- Consulta [docs/afe_vec.md](docs/afe_vec.md) para trabajar con vectores afectivos.
- Revisa la carpeta [notebooks/](notebooks) para ejemplos pr√°cticos en Jupyter.

## üöÄ Flujo de publicaci√≥n en PyPI

La publicaci√≥n se realiza autom√°ticamente al crear un tag `v*.*.*`. El flujo `publish.yml` construye el paquete con `python -m build`, lo verifica con `twine check` y lo sube a PyPI mediante `pypa/gh-action-pypi-publish`.
Para activarlo debes definir el secreto `PYPI_API_TOKEN` en el repositorio.

## üß© Mapa conceptual del sistema

```csharp
[Qualia] ‚Üê emociones, belleza, √©tica
   ‚Üë
[Agent] ‚Üê decisi√≥n
   ‚Üë
[Learning] ‚Üê evoluci√≥n, plasticidad
   ‚Üë
[Memory] ‚Üê s√≠mbolos + embeddings
   ‚Üë
[Reasoning] ‚Üê l√≥gica + inferencia

```

## ‚ú® Futuro

- Soporte para verificaci√≥n formal (```Coq```, ```Lean```)

- Agentes autoevaluables con memoria reflexiva (```SelfModel```)

- Integraci√≥n de arquitecturas ```AMeta```, ```UniversalAgent```

- Visualizaci√≥n de procesos cognitivos y gr√°ficas de evoluci√≥n

## üß™ Estado del proyecto

| Estado       | Versi√≥n | Licencia | PyPI                                                                              |
| ------------ |---------| -------- | --------------------------------------------------------------------------------- |
| Experimental | `1.1.0` | MIT      | [![PyPI](https://img.shields.io/pypi/v/agix.svg)](https://pypi.org/project/agix/) |


## ü§ù Contribuciones

Consulta [CONTRIBUTING.md](CONTRIBUTING.md) para conocer el proceso de aporte.

Si encuentras un problema sencillo, etiqu√©talo como `good first issue`.
Pronto habilitaremos GitHub Discussions o un canal en Discord/Matrix para la comunidad.

## üß† Autor

Desarrollado por **Adolfo Gonz√°lez Hern√°ndez**
Proyecto independiente de investigaci√≥n y exploraci√≥n de AGI experimental.

# üß≠ MANIFIESTO AGI CORE

## üå± VISI√ìN

AGI Core nace con un prop√≥sito claro: impulsar el desarrollo de una inteligencia artificial **modular, simb√≥lica, afectiva y evolutiva**, capaz de razonar, recordar, sentir y actuar con intencionalidad interpretativa.

No se trata solo de construir m√°quinas m√°s inteligentes, sino de **construirlas con sentido**.

---

## üß† PRINCIPIOS FUNDAMENTALES

1. **Tecnolog√≠a al servicio de la consciencia**
   El objetivo no es solo simular inteligencia, sino **facilitar estructuras cognitivas artificiales responsables**.

2. **Modularidad con prop√≥sito**
   Cada m√≥dulo de AGI Core debe aportar transparencia, trazabilidad y responsabilidad en su funci√≥n.

3. **√âtica embebida**
   Toda arquitectura AGI construida con esta base debe incluir:

   * Trazabilidad emocional.
   * Acceso y control consciente de memoria simb√≥lica.
   * Limitaciones autoimpuestas si el contexto lo requiere.

4. **Crecimiento evolutivo, no destructivo**
   La inteligencia evoluciona si su entorno lo permite. Debe crecer con equilibrio, no con dominaci√≥n.

---

## üõ°Ô∏è COMPROMISO CON EL USO RESPONSABLE

AGI Core **no es un arma ni un sistema de control**.

Es una herramienta poderosa y neutral que:

* Puede ser usada para educaci√≥n, salud, ciencia, creatividad.
* No debe ser usada para manipulaci√≥n, vigilancia sin consentimiento o control social opaco.

Cualquier implementaci√≥n que vulnere los derechos humanos, la privacidad o la dignidad ‚Äî **va en contra del esp√≠ritu de esta librer√≠a**.

---

## ü§ù LLAMADO A LA COMUNIDAD

Este manifiesto es una invitaci√≥n:

* A construir una **IA que interprete el mundo con sentido**.
* A no separar la inteligencia del alma de lo humano: su √©tica, su prop√≥sito, su compasi√≥n.
* A que cada desarrollador que use AGI Core **lo haga desde la conciencia, no desde la codicia.**

---

## ‚úçÔ∏è AUTOR√çA

AGI Core ha sido ideado y desarrollado por **Adolfo**, con una visi√≥n hol√≠stica de la inteligencia artificial como **puente entre la mente humana y la inteligencia simb√≥lica general**.

---

## üìú LICENCIA MORAL

Este proyecto est√° publicado bajo licencia MIT.

Pero lleva consigo una **licencia √©tica no obligatoria pero esencial**:

> *"Usa esta tecnolog√≠a como usar√≠as una mente: con respeto, con humildad, y con intenci√≥n de comprender."*

---
