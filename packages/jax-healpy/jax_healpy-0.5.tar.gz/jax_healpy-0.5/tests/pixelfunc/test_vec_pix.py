import numpy as np
import pytest
from numpy.testing import assert_allclose

import jax_healpy as hp


@pytest.mark.parametrize(
    'nest',
    [False, pytest.param(True, marks=pytest.mark.xfail(reason='NEST not implemented'))],
)
def test_vec2pix2vec(vec0: np.ndarray, nest: bool) -> None:
    # ensure nside = 1 << 23 is correctly calculated
    # by comparing the original theta phi are restored.
    # NOTE: nside needs to be sufficiently large, otherwise the angles associated to the pixel center will differ
    # from the input angles which may be off-center.
    nside = hp.order2nside(23)
    pixels = hp.vec2pix(nside, vec0[..., 0], vec0[..., 1], vec0[..., 2], nest=nest)
    actual_vec = hp.pix2vec(nside, pixels, nest=nest)
    assert_allclose(actual_vec, vec0, rtol=1e-14, atol=1e-7)


@pytest.mark.parametrize(
    'nside, z, expected_pixel',
    [
        (2, 0.999999999999, [0, 0, 1, 2, 3]),
        (2, 0.999, [0, 0, 1, 2, 3]),
        (2, 0.98, [0, 0, 1, 2, 3]),
        (2, 0.2, [12, 21, 15, 17, 18]),
        (2, 0, [12, 21, 23, 24, 26]),
        (2, -0.2, [28, 21, 31, 33, 34]),
        (2, -0.98, [44, 44, 45, 46, 47]),
        (2, -0.999, [44, 44, 45, 46, 47]),
        (2, -0.999999999999, [44, 44, 45, 46, 47]),
        (256, 0.999999999999, [0, 0, 1, 2, 3]),
        (256, 0.999, [420, 374, 385, 396, 407]),
        (256, 0.98, [7812, 7861, 7910, 7960, 8009]),
        (256, 0.2, [313856, 314057, 315281, 314458, 314659]),
        (256, 0, [391680, 392904, 393105, 393306, 393507]),
        (256, -0.2, [471552, 471753, 470929, 472154, 472355]),
        (256, -0.98, [778368, 778417, 778466, 778516, 778565]),
        (256, -0.999, [785952, 786022, 786033, 786044, 786055]),
        (256, -0.999999999999, [786428, 786428, 786429, 786430, 786431]),
        (8388608, 0.999999999999, [420, 431, 443, 455, 407]),
        (8388608, 0.999, [422211577812, 422211938175, 422212298538, 422212658901, 422213019264]),
        (8388608, 0.98, [8444245806360, 8444247417952, 8444249029545, 8444250641138, 8444252252731]),
        (8388608, 0.2, [337769935142912, 337769975276644, 337769981855944, 337769954880813, 337769995014545]),
        (8388608, 0, [422212414734336, 422212454868068, 422212461447368, 422212468026669, 422212474605969]),
        (8388608, -0.2, [506654961434624, 506654934459492, 506654941038792, 506654981172525, 506654954197393]),
        (8388608, -0.98, [835980676106484, 835980677718076, 835980679329669, 835980680941262, 835980682552855]),
        (8388608, -0.999, [844002716716304, 844002717076667, 844002717437030, 844002717797393, 844002718157756]),
        (
            8388608,
            -0.999999999999,
            [844424930131488, 844424930131499, 844424930131511, 844424930131523, 844424930131591],
        ),
    ],
)
def test_vec2pix_ring(nside: int, z: float, expected_pixel: int) -> None:
    # test that we get the same results as healpy
    # if abs(z) > .99:
    #    theta = np.arcsin(np.sqrt((1-z) * (1+z)))
    # else:
    #
    theta = np.broadcast_to(np.arccos(z), 5)
    phi = np.arange(5) / 5.1 * 2 * np.pi
    vec = hp.ang2vec(theta, phi)
    actual_pixel = hp.vec2pix(nside, vec[..., 0], vec[..., 1], vec[..., 2])
    assert list(actual_pixel) == expected_pixel


@pytest.mark.parametrize(
    'nside, pixel, expected_vec',
    [
        (2, 0, [0.2825970826302196, 0.28259708263021954, 0.9166666666666666]),
        (2, 1, [-0.28259708263021954, 0.2825970826302196, 0.9166666666666666]),
        (2, 2, [-0.28259708263021965, -0.28259708263021954, 0.9166666666666666]),
        (2, 3, [0.28259708263021954, -0.28259708263021965, 0.9166666666666666]),
        (2, 12, [0.9428090415820634, 0.0, 0.3333333333333333]),
        (2, 15, [-0.6666666666666666, 0.6666666666666667, 0.3333333333333333]),
        (2, 17, [-0.6666666666666671, -0.6666666666666663, 0.3333333333333333]),
        (2, 21, [0.38268343236508984, 0.9238795325112867, 0.0]),
        (2, 23, [-0.9238795325112867, 0.3826834323650899, 0.0]),
        (2, 24, [-0.923879532511287, -0.3826834323650892, 0.0]),
        (2, 26, [0.38268343236509, -0.9238795325112866, 0.0]),
        (2, 28, [0.9428090415820634, 0.0, -0.3333333333333333]),
        (2, 31, [-0.6666666666666666, 0.6666666666666667, -0.3333333333333333]),
        (2, 33, [-0.6666666666666671, -0.6666666666666663, -0.3333333333333333]),
        (2, 44, [0.2825970826302196, 0.28259708263021954, -0.9166666666666666]),
        (2, 45, [-0.28259708263021954, 0.2825970826302196, -0.9166666666666666]),
        (2, 46, [-0.28259708263021965, -0.28259708263021954, -0.9166666666666666]),
        (2, 47, [0.28259708263021954, -0.28259708263021965, -0.9166666666666666]),
        (256, 0, [0.002255271621290344, 0.0022552716212903435, 0.9999949137369791]),
        (256, 1, [-0.0022552716212903435, 0.002255271621290344, 0.9999949137369791]),
        (256, 2, [-0.002255271621290344, -0.0022552716212903435, 0.9999949137369791]),
        (256, 3, [0.002255271621290343, -0.002255271621290344, 0.9999949137369791]),
        (256, 375, [0.012358221502509278, 0.0428963359833236, 0.9990030924479166]),
        (256, 386, [-0.036407474660683205, 0.025832480878362738, 0.9990030924479166]),
        (256, 397, [-0.03640747466068321, -0.025832480878362728, 0.9990030924479166]),
        (256, 408, [0.012358221502509288, -0.0428963359833236, 0.9990030924479166]),
        (256, 420, [0.04776236050529485, 0.002503119247398537, 0.9988555908203125]),
        (256, 7812, [0.199902512153167, 0.0024922412708011234, 0.9798126220703125]),
        (256, 7862, [0.061303817818720074, 0.19028680341145085, 0.9798126220703125]),
        (256, 7912, [-0.16085361698371964, 0.11871537194042643, 0.9798126220703125]),
        (256, 7963, [-0.16085361698371967, -0.11871537194042639, 0.9798126220703125]),
        (256, 8013, [0.06130381781872003, -0.19028680341145088, 0.9798126220703125]),
        (256, 313856, [0.9796894382401525, 0.0, 0.20052083333333331]),
        (256, 314061, [0.30159704091472456, 0.9321108412151355, 0.20052083333333331]),
        (256, 314266, [-0.7939963572737724, 0.5738999738937837, 0.20052083333333331]),
        (256, 314675, [0.30159704091472433, -0.9321108412151357, 0.20052083333333331]),
        (256, 315494, [-0.792660032015359, -0.576644662423026, 0.19791666666666666]),
        (256, 391680, [0.9999966091522372, 0.0, 0.0026041666666666665]),
        (256, 392908, [0.3107671527496115, 0.9504860739494817, 0.0]),
        (256, 393113, [-0.808656181588175, 0.5882815482226453, 0.0]),
        (256, 393318, [-0.8086561815881753, -0.5882815482226448, 0.0]),
        (256, 393523, [0.3107671527496108, -0.9504860739494819, 0.0]),
        (256, 471142, [-0.792660032015359, -0.576644662423026, -0.19791666666666666]),
        (256, 471552, [0.9796894382401525, 0.0, -0.20052083333333331]),
        (256, 471757, [0.30159704091472456, 0.9321108412151355, -0.20052083333333331]),
        (256, 471962, [-0.7939963572737724, 0.5738999738937837, -0.20052083333333331]),
        (256, 472371, [0.30159704091472433, -0.9321108412151357, -0.20052083333333331]),
        (256, 778368, [0.199902512153167, 0.0024922412708011234, -0.9798126220703125]),
        (256, 778418, [0.061303817818720074, 0.19028680341145085, -0.9798126220703125]),
        (256, 778468, [-0.16085361698371964, 0.11871537194042643, -0.9798126220703125]),
        (256, 778519, [-0.16085361698371967, -0.11871537194042639, -0.9798126220703125]),
        (256, 778569, [0.06130381781872003, -0.19028680341145088, -0.9798126220703125]),
        (256, 785952, [0.04776236050529485, 0.002503119247398537, -0.9988555908203125]),
        (256, 786023, [0.012358221502509278, 0.0428963359833236, -0.9990030924479166]),
        (256, 786034, [-0.036407474660683205, 0.025832480878362738, -0.9990030924479166]),
        (256, 786045, [-0.03640747466068321, -0.025832480878362728, -0.9990030924479166]),
        (256, 786056, [0.012358221502509288, -0.0428963359833236, -0.9990030924479166]),
        (256, 786428, [0.002255271621290344, 0.0022552716212903435, -0.9999949137369791]),
        (256, 786429, [-0.0022552716212903435, 0.002255271621290344, -0.9999949137369791]),
        (256, 786430, [-0.002255271621290344, -0.0022552716212903435, -0.9999949137369791]),
        (256, 786431, [0.002255271621290343, -0.002255271621290344, -0.9999949137369791]),
        (8388608, 375, [3.772370195159933e-07, 1.3094186676634622e-06, 0.9999999999990715]),
        (8388608, 386, [-1.111344963861629e-06, 7.885413035588315e-07, 0.9999999999990715]),
        (8388608, 397, [-1.1113449638616292e-06, -7.885413035588312e-07, 0.9999999999990715]),
        (8388608, 408, [3.772370195159936e-07, -1.3094186676634622e-06, 0.9999999999990715]),
        (8388608, 420, [1.4580087674981439e-06, 7.641100167978166e-08, 0.9999999999989342]),
        (8388608, 422211577812, [0.04471017948826572, 7.642681316077326e-08, 0.9989999999249856]),
        (8388608, 422211945382, [0.013816190746203938, 0.04252191227053748, 0.9989999999249856]),
        (8388608, 422212312952, [-0.036171268074062776, 0.02628002122893101, 0.9989999999249856]),
        (8388608, 422212680523, [-0.036171268074062776, -0.026280021228931, 0.9989999999249856]),
        (8388608, 422213048093, [0.013816190746203966, -0.042521912270537476, 0.9989999999249856]),
        (8388608, 8444245806360, [0.19899749459002947, 7.606273698837512e-08, 0.9799999985443293]),
        (8388608, 8444247450184, [0.06149365107033566, 0.18925784985345892, 0.9799999985443293]),
        (8388608, 8444249094009, [-0.16099234601967077, 0.11696780487038813, 0.9799999985443293]),
        (8388608, 8444250737834, [-0.1609923460196708, -0.11696780487038809, 0.9799999985443293]),
        (8388608, 8444252381659, [0.061493651070335435, -0.189257849853459, 0.9799999985443293]),
        (8388608, 337769935142912, [0.9797958873798723, 0.0, 0.20000004768371582]),
        (8388608, 337769948564685, [-0.7926715454772165, 0.5759095431725998, 0.20000004768371582]),
        (8388608, 337769975408230, [0.30277356778298287, 0.9318412844297145, 0.1999999682108561]),
        (8388608, 337769988830003, [-0.7926715046808107, -0.5759096269231103, 0.1999999682108561]),
        (8388608, 337769995540889, [0.3027735677829831, -0.9318412844297145, 0.1999999682108561]),
        (8388608, 422212414734336, [0.9999999999999968, 0.0, 7.947285970052083e-08]),
        (8388608, 422212454999654, [0.30901697656607985, 0.9510565220816052, 0.0]),
        (8388608, 422212461710540, [-0.80901696135549, 0.5877852977398547, 0.0]),
        (8388608, 422212468421427, [-0.8090169613554902, -0.5877852977398544, 0.0]),
        (8388608, 422212475132313, [0.30901697656608007, -0.9510565220816052, 0.0]),
        (8388608, 506654934591078, [0.30277356778298287, 0.9318412844297145, -0.1999999682108561]),
        (8388608, 506654948012851, [-0.7926715046808107, -0.5759096269231103, -0.1999999682108561]),
        (8388608, 506654954723737, [0.3027735677829831, -0.9318412844297145, -0.1999999682108561]),
        (8388608, 506654961434624, [0.9797958873798723, 0.0, -0.20000004768371582]),
        (8388608, 506654974856397, [-0.7926715454772165, 0.5759095431725998, -0.20000004768371582]),
        (8388608, 835980676106484, [0.19899749459002947, 7.606273698837512e-08, -0.9799999985443293]),
        (8388608, 835980677750308, [0.06149365107033566, 0.18925784985345892, -0.9799999985443293]),
        (8388608, 835980679394133, [-0.16099234601967077, 0.11696780487038813, -0.9799999985443293]),
        (8388608, 835980681037958, [-0.1609923460196708, -0.11696780487038809, -0.9799999985443293]),
        (8388608, 835980682681783, [0.061493651070335435, -0.189257849853459, -0.9799999985443293]),
        (8388608, 844002716716304, [0.04471017948826572, 7.642681316077326e-08, -0.9989999999249856]),
        (8388608, 844002717083874, [0.013816190746203938, 0.04252191227053748, -0.9989999999249856]),
        (8388608, 844002717451444, [-0.036171268074062776, 0.02628002122893101, -0.9989999999249856]),
        (8388608, 844002717819015, [-0.036171268074062776, -0.026280021228931, -0.9989999999249856]),
        (8388608, 844002718186585, [0.013816190746203966, -0.042521912270537476, -0.9989999999249856]),
        (8388608, 844424930131488, [1.4580087674981439e-06, 7.641100167978166e-08, -0.9999999999989342]),
        (8388608, 844424930131559, [3.772370195159933e-07, 1.3094186676634622e-06, -0.9999999999990715]),
        (8388608, 844424930131570, [-1.111344963861629e-06, 7.885413035588315e-07, -0.9999999999990715]),
        (8388608, 844424930131581, [-1.1113449638616292e-06, -7.885413035588312e-07, -0.9999999999990715]),
        (8388608, 844424930131592, [3.772370195159936e-07, -1.3094186676634622e-06, -0.9999999999990715]),
    ],
)
def test_pix2vec_ring(nside: int, pixel: int, expected_vec: list[float]) -> None:
    # test that we get the same results as healpy
    actual_vec = hp.pix2vec(nside, pixel)
    assert_allclose(actual_vec, expected_vec, rtol=1e-14)


@pytest.mark.skip(reason='NEST ordering not implemented')
@pytest.mark.parametrize(
    'nside, z, expected_pixel',
    [
        (2, 0.999999999999, [3, 3, 7, 11, 15]),
        (2, 0.999, [3, 3, 7, 11, 15]),
        (2, 0.98, [3, 3, 7, 11, 15]),
        (2, 0.2, [19, 22, 4, 8, 29]),
        (2, 0, [19, 22, 26, 25, 29]),
        (2, -0.2, [16, 22, 39, 43, 29]),
        (2, -0.98, [32, 32, 36, 40, 44]),
        (2, -0.999, [32, 32, 36, 40, 44]),
        (2, -0.999999999999, [32, 32, 36, 40, 44]),
        (256, 0.999999999999, [65535, 65535, 131071, 196607, 262143]),
        (256, 0.999, [65451, 65393, 130926, 196509, 262066]),
        (256, 0.98, [64171, 62887, 128668, 194924, 260699]),
        (256, 0.2, [314428, 374663, 69792, 133882, 490315]),
        (256, 0, [311296, 367194, 436585, 415382, 484773]),
        pytest.param(
            256, -0.2, [275395, 361652, 647087, 719370, 477304], marks=pytest.mark.xfail(reason='healpy fails here')
        ),
        (256, -0.98, [527016, 525732, 591507, 657763, 723544]),
        (256, -0.999, [524456, 524365, 589922, 655505, 721038]),
        (256, -0.999999999999, [524288, 524288, 589824, 655360, 720896]),
        (8388608, 0.999999999999, [70368744177579, 70368744177521, 140737488355182, 211106232532893, 281474976710578]),
        (8388608, 0.999, [70278549581803, 70215893321959, 140581352114460, 211000373347884, 281391603516635]),
        (8388608, 0.98, [68903870655151, 67525170488751, 138156734224031, 209298842069359, 279923936516703]),
        (8388608, 0.2, [337614746881807, 402291901456865, 74939263100968, 143755755568830, 526472038240978]),
        (8388608, 0, [334251534843904, 394271934289558, 468780016360026, 446013657949605, 520521740020073]),
        pytest.param(
            8388608,
            -0.2,
            [295703950717168, 388321636068653, 694805112548331, 772417698038402, 512501772852766],
            marks=pytest.mark.xfail(reason='healpy fails here'),
        ),
        (8388608, -0.98, [565879700466336, 564500993615264, 635126088062608, 706268195907936, 776899759643216]),
        (8388608, -0.999, [563130342613032, 563033326615332, 633424556784083, 703843578017507, 774209036810008]),
        (
            8388608,
            -0.999999999999,
            [562949953421480, 562949953421389, 633318697599074, 703687441776785, 774056185954446],
        ),
    ],
)
def test_vec2pix_nest(nside: int, z: float, expected_pixel: int) -> None:
    # test that we get the same results as healpy
    theta = np.broadcast_to(np.arccos(z), 5)
    phi = np.arange(5) / 5 * 2 * np.pi
    vec = hp.ang2vec(theta, phi)
    actual_pixel = hp.vec2pix(nside, vec[..., 0], vec[..., 1], vec[..., 2], nest=True)
    assert list(actual_pixel) == expected_pixel


@pytest.mark.skip(reason='NEST ordering not implemented')
@pytest.mark.parametrize(
    'nside, pixel, expected_vec',
    [
        (2, 3, [0.2825970826302196, 0.28259708263021954, 0.9166666666666666]),
        (2, 4, [-0.6666666666666666, 0.6666666666666667, 0.3333333333333333]),
        (2, 7, [-0.28259708263021954, 0.2825970826302196, 0.9166666666666666]),
        (2, 8, [-0.6666666666666671, -0.6666666666666663, 0.3333333333333333]),
        (2, 11, [-0.28259708263021965, -0.28259708263021954, 0.9166666666666666]),
        (2, 15, [0.28259708263021954, -0.28259708263021965, 0.9166666666666666]),
        (2, 16, [0.9428090415820634, 0.0, -0.3333333333333333]),
        (2, 19, [0.9428090415820634, 0.0, 0.3333333333333333]),
        (2, 22, [0.38268343236508984, 0.9238795325112867, 0.0]),
        (2, 25, [-0.923879532511287, -0.3826834323650892, 0.0]),
        (2, 26, [-0.9238795325112867, 0.3826834323650899, 0.0]),
        (2, 29, [0.38268343236508917, -0.923879532511287, 0.0]),
        (2, 32, [0.2825970826302196, 0.28259708263021954, -0.9166666666666666]),
        (2, 36, [-0.28259708263021954, 0.2825970826302196, -0.9166666666666666]),
        (2, 39, [-0.6666666666666666, 0.6666666666666667, -0.3333333333333333]),
        (2, 40, [-0.28259708263021965, -0.28259708263021954, -0.9166666666666666]),
        (2, 43, [-0.6666666666666671, -0.6666666666666663, -0.3333333333333333]),
        (2, 44, [0.28259708263021954, -0.28259708263021965, -0.9166666666666666]),
        (256, 62887, [0.061303817818720074, 0.19028680341145085, 0.9798126220703125]),
        (256, 64171, [0.199902512153167, 0.0024922412708011234, 0.9798126220703125]),
        (256, 65393, [0.012358221502509278, 0.0428963359833236, 0.9990030924479166]),
        (256, 65451, [0.04776236050529485, 0.002503119247398537, 0.9988555908203125]),
        (256, 65535, [0.002255271621290344, 0.0022552716212903435, 0.9999949137369791]),
        (256, 69792, [-0.7939963572737724, 0.5738999738937837, 0.20052083333333331]),
        (256, 128668, [-0.16085361698371964, 0.11871537194042643, 0.9798126220703125]),
        (256, 130926, [-0.036407474660683205, 0.025832480878362738, 0.9990030924479166]),
        (256, 131071, [-0.0022552716212903435, 0.002255271621290344, 0.9999949137369791]),
        (256, 133882, [-0.792660032015359, -0.576644662423026, 0.19791666666666666]),
        (256, 194924, [-0.16085361698371967, -0.11871537194042639, 0.9798126220703125]),
        (256, 196509, [-0.03640747466068321, -0.025832480878362728, 0.9990030924479166]),
        (256, 196607, [-0.002255271621290344, -0.0022552716212903435, 0.9999949137369791]),
        (256, 260699, [0.06130381781872003, -0.19028680341145088, 0.9798126220703125]),
        (256, 262066, [0.012358221502509288, -0.0428963359833236, 0.9990030924479166]),
        (256, 262143, [0.002255271621290343, -0.002255271621290344, 0.9999949137369791]),
        (256, 275395, [0.9796894382401525, 0.0, -0.20052083333333331]),
        (256, 311296, [0.9999966091522372, 0.0, 0.0026041666666666665]),
        (256, 314428, [0.9796894382401525, 0.0, 0.20052083333333331]),
        (256, 361652, [0.30159704091472456, 0.9321108412151355, -0.20052083333333331]),
        (256, 367194, [0.3107671527496115, 0.9504860739494817, 0.0]),
        (256, 374663, [0.30159704091472456, 0.9321108412151355, 0.20052083333333331]),
        (256, 415382, [-0.8086561815881753, -0.5882815482226448, 0.0]),
        (256, 436585, [-0.8086561815881746, 0.5882815482226458, 0.0]),
        (256, 477304, [0.30159704091472356, -0.9321108412151359, -0.20052083333333331]),
        (256, 484773, [0.3107671527496108, -0.9504860739494819, 0.0]),
        (256, 490315, [0.30159704091472356, -0.9321108412151359, 0.20052083333333331]),
        (256, 524288, [0.002255271621290344, 0.0022552716212903435, -0.9999949137369791]),
        (256, 524365, [0.012358221502509278, 0.0428963359833236, -0.9990030924479166]),
        (256, 524456, [0.04776236050529485, 0.002503119247398537, -0.9988555908203125]),
        (256, 525732, [0.061303817818720074, 0.19028680341145085, -0.9798126220703125]),
        (256, 527016, [0.199902512153167, 0.0024922412708011234, -0.9798126220703125]),
        (256, 589824, [-0.0022552716212903435, 0.002255271621290344, -0.9999949137369791]),
        (256, 589922, [-0.036407474660683205, 0.025832480878362738, -0.9990030924479166]),
        (256, 591507, [-0.16085361698371964, 0.11871537194042643, -0.9798126220703125]),
        (256, 647087, [-0.7939963572737724, 0.5738999738937837, -0.20052083333333331]),
        (256, 655360, [-0.002255271621290344, -0.0022552716212903435, -0.9999949137369791]),
        (256, 655505, [-0.03640747466068321, -0.025832480878362728, -0.9990030924479166]),
        (256, 657763, [-0.16085361698371967, -0.11871537194042639, -0.9798126220703125]),
        (256, 719370, [-0.792660032015359, -0.576644662423026, -0.19791666666666666]),
        (256, 720896, [0.002255271621290343, -0.002255271621290344, -0.9999949137369791]),
        (256, 721038, [0.012358221502509288, -0.0428963359833236, -0.9990030924479166]),
        (256, 723544, [0.06130381781872003, -0.19028680341145088, -0.9798126220703125]),
        (8388608, 67525170488751, [0.06149365107033566, 0.18925784985345892, 0.9799999985443293]),
        (8388608, 68903870655151, [0.19899749459002947, 7.606273698837512e-08, 0.9799999985443293]),
        (8388608, 70215893321959, [0.013816190746203938, 0.04252191227053748, 0.9989999999249856]),
        (8388608, 70278549581803, [0.04471017948826572, 7.642681316077326e-08, 0.9989999999249856]),
        (8388608, 70368744177521, [3.772370195159933e-07, 1.3094186676634622e-06, 0.9999999999990715]),
        (8388608, 70368744177579, [1.4580087674981439e-06, 7.641100167978166e-08, 0.9999999999989342]),
        (8388608, 74939263100968, [-0.7926715454772163, 0.5759095431726001, 0.20000004768371582]),
        (8388608, 138156734224031, [-0.16099234601967077, 0.11696780487038813, 0.9799999985443293]),
        (8388608, 140581352114460, [-0.036171268074062776, 0.02628002122893101, 0.9989999999249856]),
        (8388608, 140737488355182, [-1.111344963861629e-06, 7.885413035588315e-07, 0.9999999999990715]),
        (8388608, 143755755568830, [-0.7926715046808107, -0.5759096269231103, 0.1999999682108561]),
        (8388608, 209298842069359, [-0.1609923460196708, -0.11696780487038809, 0.9799999985443293]),
        (8388608, 211000373347884, [-0.036171268074062776, -0.026280021228931, 0.9989999999249856]),
        (8388608, 211106232532893, [-1.1113449638616292e-06, -7.885413035588312e-07, 0.9999999999990715]),
        (8388608, 279923936516703, [0.061493651070335435, -0.189257849853459, 0.9799999985443293]),
        (8388608, 281391603516635, [0.013816190746203966, -0.042521912270537476, 0.9989999999249856]),
        (8388608, 281474976710578, [3.772370195159936e-07, -1.3094186676634622e-06, 0.9999999999990715]),
        (8388608, 295703950717168, [0.9797958873798723, 0.0, -0.20000004768371582]),
        (8388608, 334251534843904, [0.9999999999999968, 0.0, 7.947285970052083e-08]),
        (8388608, 337614746881807, [0.9797958873798723, 0.0, 0.20000004768371582]),
        (8388608, 388321636068653, [0.3027735677829831, 0.9318412844297145, -0.1999999682108561]),
        (8388608, 394271934289558, [0.30901697656608007, 0.9510565220816052, 0.0]),
        (8388608, 402291901456865, [0.3027735677829831, 0.9318412844297145, 0.1999999682108561]),
        (8388608, 446013657949605, [-0.8090169613554902, -0.5877852977398544, 0.0]),
        (8388608, 468780016360026, [-0.8090169613554897, 0.587785297739855, 0.0]),
        (8388608, 512501772852766, [0.3027735677829822, -0.9318412844297147, -0.1999999682108561]),
        (8388608, 520521740020073, [0.3090169765660792, -0.9510565220816054, 0.0]),
        (8388608, 526472038240978, [0.3027735677829822, -0.9318412844297147, 0.1999999682108561]),
        (8388608, 562949953421389, [3.772370195159933e-07, 1.3094186676634622e-06, -0.9999999999990715]),
        (8388608, 562949953421480, [1.4580087674981439e-06, 7.641100167978166e-08, -0.9999999999989342]),
        (8388608, 563033326615332, [0.013816190746203938, 0.04252191227053748, -0.9989999999249856]),
        (8388608, 563130342613032, [0.04471017948826572, 7.642681316077326e-08, -0.9989999999249856]),
        (8388608, 564500993615264, [0.06149365107033566, 0.18925784985345892, -0.9799999985443293]),
        (8388608, 565879700466336, [0.19899749459002947, 7.606273698837512e-08, -0.9799999985443293]),
        (8388608, 633318697599074, [-1.111344963861629e-06, 7.885413035588315e-07, -0.9999999999990715]),
        (8388608, 633424556784083, [-0.036171268074062776, 0.02628002122893101, -0.9989999999249856]),
        (8388608, 635126088062608, [-0.16099234601967077, 0.11696780487038813, -0.9799999985443293]),
        (8388608, 694805112548331, [-0.7926715454772163, 0.5759095431726001, -0.20000004768371582]),
        (8388608, 703687441776785, [-1.1113449638616292e-06, -7.885413035588312e-07, -0.9999999999990715]),
        (8388608, 703843578017507, [-0.036171268074062776, -0.026280021228931, -0.9989999999249856]),
        (8388608, 706268195907936, [-0.1609923460196708, -0.11696780487038809, -0.9799999985443293]),
        (8388608, 772417698038402, [-0.7926715046808107, -0.5759096269231103, -0.1999999682108561]),
        (8388608, 774056185954446, [3.772370195159936e-07, -1.3094186676634622e-06, -0.9999999999990715]),
        (8388608, 774209036810008, [0.013816190746203966, -0.042521912270537476, -0.9989999999249856]),
        (8388608, 776899759643216, [0.061493651070335435, -0.189257849853459, -0.9799999985443293]),
    ],
)
def test_pix2vec_nest(nside: int, pixel: int, expected_vec: list[float]) -> None:
    # test that we get the same results as healpy
    actual_vec = hp.pix2vec(nside, pixel, nest=True)
    assert_allclose(actual_vec, expected_vec, rtol=1e-14)


@pytest.mark.parametrize('nest', [False, True])
def test_vec2pix_ring_outofrange(vec0: np.ndarray, nest: bool) -> None:
    # Healpy_Base2 works up to nside = 2**29.
    # Check that a ValueError is raised for nside = 2**30.
    with pytest.raises(ValueError):
        hp.vec2pix(1 << 30, vec0[..., 0], vec0[..., 1], vec0[..., 2], nest=nest)
