# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freeclimb.models.capabilities import Capabilities
from pydantic import StrictStr
from typing import Optional, Set
from typing_extensions import Self


class AvailableNumber(
    BaseModel, populate_by_name=True, validate_assignment=True, protected_namespaces=()
):
    """
    AvailableNumber
    """  # noqa: E501

    capabilities: Optional[Capabilities] = None
    campaign_id: Optional[StrictStr] = Field(
        default=None,
        description="The campaign ID generated by the campaign registry",
        alias="campaignId",
    )
    phone_number: Optional[StrictStr] = Field(
        default=None,
        description="The phone number, in E.164 format (+ country code and phone number: +18003608245).",
        alias="phoneNumber",
    )
    voice_enabled: Optional[StrictBool] = Field(
        default=None,
        description="Typically set to true for all numbers.",
        alias="voiceEnabled",
    )
    sms_enabled: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether the phone number can send and receive SMS messages.",
        alias="smsEnabled",
    )
    region: Optional[StrictStr] = Field(
        default=None, description="The state or province of this phone number."
    )
    country: Optional[StrictStr] = Field(
        default=None, description="The country of this phone number."
    )

    __properties: ClassVar[List[str]] = [
        "capabilities",
        "campaignId",
        "phoneNumber",
        "voiceEnabled",
        "smsEnabled",
        "region",
        "country",
    ]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict["capabilities"] = self.capabilities.to_dict()
        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict["campaignId"] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict["phoneNumber"] = None

        # set to None if voice_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.voice_enabled is None and "voice_enabled" in self.model_fields_set:
            _dict["voiceEnabled"] = None

        # set to None if sms_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.sms_enabled is None and "sms_enabled" in self.model_fields_set:
            _dict["smsEnabled"] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict["region"] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict["country"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "capabilities": (
                    Capabilities.from_dict(obj["capabilities"])
                    if obj.get("capabilities") is not None
                    else None
                ),
                "campaignId": obj.get("campaignId"),
                "phoneNumber": obj.get("phoneNumber"),
                "voiceEnabled": obj.get("voiceEnabled"),
                "smsEnabled": obj.get("smsEnabled"),
                "region": obj.get("region"),
                "country": obj.get("country"),
            }
        )
        return _obj
