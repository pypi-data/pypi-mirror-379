# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freeclimb.models.log_level import LogLevel
from pydantic import StrictStr
from typing import Optional, Set
from typing_extensions import Self


class LogResult(
    BaseModel, populate_by_name=True, validate_assignment=True, protected_namespaces=()
):
    """
    LogResult
    """  # noqa: E501

    timestamp: Optional[StrictInt] = Field(
        default=None,
        description="Time that the log was generated. The time is represented as microseconds since the Unix Epoch.",
    )
    level: Optional[LogLevel] = None
    request_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of the request associated with the log. The requestId is propagated across all logs generated by FreeClimb when processing a request.",
        alias="requestId",
    )
    account_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of the account that this log was generated under.",
        alias="accountId",
    )
    call_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of the Call associated with the log. Can be set to null if the log was generated without regard to a specific Call.",
        alias="callId",
    )
    message: Optional[StrictStr] = Field(
        default=None, description="A simple string describing the event being logged."
    )
    metadata: Optional[Dict[str, Any]] = Field(
        default=None,
        description="JSON document containing metadata about the event. Some log messages may include request and response header content in this field.",
    )

    __properties: ClassVar[List[str]] = [
        "timestamp",
        "level",
        "requestId",
        "accountId",
        "callId",
        "message",
        "metadata",
    ]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict["timestamp"] = None

        # set to None if level (nullable) is None
        # and model_fields_set contains the field
        if self.level is None and "level" in self.model_fields_set:
            _dict["level"] = None

        # set to None if request_id (nullable) is None
        # and model_fields_set contains the field
        if self.request_id is None and "request_id" in self.model_fields_set:
            _dict["requestId"] = None

        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict["accountId"] = None

        # set to None if call_id (nullable) is None
        # and model_fields_set contains the field
        if self.call_id is None and "call_id" in self.model_fields_set:
            _dict["callId"] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict["message"] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict["metadata"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "timestamp": obj.get("timestamp"),
                "level": obj.get("level"),
                "requestId": obj.get("requestId"),
                "accountId": obj.get("accountId"),
                "callId": obj.get("callId"),
                "message": obj.get("message"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
