# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.queue_result import QueueResult


class TestQueueResult(unittest.TestCase):
    """QueueResult unit test stubs"""

    def setUp(self):
        self.model = QueueResult()

    def test_uri(self):
        """Test QueueResult.uri"""

        self.model.uri = "TEST_STRING"
        assert self.model.uri == "TEST_STRING"

    def test_date_created(self):
        """Test QueueResult.date_created"""

        self.model.date_created = "TEST_STRING"
        assert self.model.date_created == "TEST_STRING"

    def test_date_updated(self):
        """Test QueueResult.date_updated"""

        self.model.date_updated = "TEST_STRING"
        assert self.model.date_updated == "TEST_STRING"

    def test_revision(self):
        """Test QueueResult.revision"""
        self.model.revision = 1
        assert self.model.revision == 1

    def test_account_id(self):
        """Test QueueResult.account_id"""

        self.model.account_id = "TEST_STRING"
        assert self.model.account_id == "TEST_STRING"

    def test_queue_id(self):
        """Test QueueResult.queue_id"""

        self.model.queue_id = "TEST_STRING"
        assert self.model.queue_id == "TEST_STRING"

    def test_alias(self):
        """Test QueueResult.alias"""

        self.model.alias = "TEST_STRING"
        assert self.model.alias == "TEST_STRING"

    def test_max_size(self):
        """Test QueueResult.max_size"""
        self.model.max_size = 1
        assert self.model.max_size == 1

    def test_current_size(self):
        """Test QueueResult.current_size"""
        self.model.current_size = 1
        assert self.model.current_size == 1

    def test_average_queue_removal_time(self):
        """Test QueueResult.average_queue_removal_time"""
        self.model.average_queue_removal_time = 1
        assert self.model.average_queue_removal_time == 1

    def test_subresource_uris(self):
        """Test QueueResult.subresource_uris"""
        object = {}
        self.model.subresource_uris = object
        assert self.model.subresource_uris == object


if __name__ == "__main__":
    unittest.main()
