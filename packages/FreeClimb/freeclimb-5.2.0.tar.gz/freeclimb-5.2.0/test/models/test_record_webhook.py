# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.record_webhook import RecordWebhook


class TestRecordWebhook(unittest.TestCase):
    """RecordWebhook unit test stubs"""

    def setUp(self):
        self.model = RecordWebhook()

    def test_request_type(self):
        """Test RecordWebhook.request_type"""

    def test_account_id(self):
        """Test RecordWebhook.account_id"""

        self.model.account_id = "TEST_STRING"
        assert self.model.account_id == "TEST_STRING"

    def test_call_id(self):
        """Test RecordWebhook.call_id"""

        self.model.call_id = "TEST_STRING"
        assert self.model.call_id == "TEST_STRING"

    def test_var_from(self):
        """Test RecordWebhook.var_from"""

        self.model.var_from = "TEST_STRING"
        assert self.model.var_from == "TEST_STRING"

    def test_to(self):
        """Test RecordWebhook.to"""

        self.model.to = "TEST_STRING"
        assert self.model.to == "TEST_STRING"

    def test_call_status(self):
        """Test RecordWebhook.call_status"""
        self.model.call_status = CallStatus.QUEUED
        assert self.model.call_status == CallStatus.QUEUED
        self.model.call_status = CallStatus.RINGING
        assert self.model.call_status == CallStatus.RINGING
        self.model.call_status = CallStatus.IN_PROGRESS
        assert self.model.call_status == CallStatus.IN_PROGRESS
        self.model.call_status = CallStatus.CANCELED
        assert self.model.call_status == CallStatus.CANCELED
        self.model.call_status = CallStatus.COMPLETED
        assert self.model.call_status == CallStatus.COMPLETED
        self.model.call_status = CallStatus.FAILED
        assert self.model.call_status == CallStatus.FAILED
        self.model.call_status = CallStatus.BUSY
        assert self.model.call_status == CallStatus.BUSY
        self.model.call_status = CallStatus.NO_ANSWER
        assert self.model.call_status == CallStatus.NO_ANSWER

    def test_direction(self):
        """Test RecordWebhook.direction"""
        self.model.direction = CallDirection.INBOUND
        assert self.model.direction == CallDirection.INBOUND
        self.model.direction = CallDirection.OUTBOUND_API
        assert self.model.direction == CallDirection.OUTBOUND_API
        self.model.direction = CallDirection.OUTBOUND_DIAL
        assert self.model.direction == CallDirection.OUTBOUND_DIAL

    def test_conference_id(self):
        """Test RecordWebhook.conference_id"""

        self.model.conference_id = "TEST_STRING"
        assert self.model.conference_id == "TEST_STRING"

    def test_queue_id(self):
        """Test RecordWebhook.queue_id"""

        self.model.queue_id = "TEST_STRING"
        assert self.model.queue_id == "TEST_STRING"

    def test_recording_id(self):
        """Test RecordWebhook.recording_id"""

        self.model.recording_id = "TEST_STRING"
        assert self.model.recording_id == "TEST_STRING"

    def test_recording_url(self):
        """Test RecordWebhook.recording_url"""
        self.model.recording_url = "TEST_STRING"
        assert self.model.recording_url == "TEST_STRING"

    def test_recording_size(self):
        """Test RecordWebhook.recording_size"""

        self.model.recording_size = "TEST_STRING"
        assert self.model.recording_size == "TEST_STRING"

    def test_recording_format(self):
        """Test RecordWebhook.recording_format"""

        self.model.recording_format = "TEST_STRING"
        assert self.model.recording_format == "TEST_STRING"

    def test_recording_duration_sec(self):
        """Test RecordWebhook.recording_duration_sec"""
        self.model.recording_duration_sec = 1
        assert self.model.recording_duration_sec == 1

    def test_term_reason(self):
        """Test RecordWebhook.term_reason"""
        self.model.term_reason = RecordUtteranceTermReason.FINISH_KEY
        assert self.model.term_reason == RecordUtteranceTermReason.FINISH_KEY
        self.model.term_reason = RecordUtteranceTermReason.TIMEOUT
        assert self.model.term_reason == RecordUtteranceTermReason.TIMEOUT
        self.model.term_reason = RecordUtteranceTermReason.HANGUP
        assert self.model.term_reason == RecordUtteranceTermReason.HANGUP
        self.model.term_reason = RecordUtteranceTermReason.MAX_LENGTH
        assert self.model.term_reason == RecordUtteranceTermReason.MAX_LENGTH

    def test_parent_call_id(self):
        """Test RecordWebhook.parent_call_id"""

        self.model.parent_call_id = "TEST_STRING"
        assert self.model.parent_call_id == "TEST_STRING"

    def test_privacy_mode(self):
        """Test RecordWebhook.privacy_mode"""
        self.model.privacy_mode = False
        assert self.model.privacy_mode == False

    def test_deserialize(self):
        payload = '{ "requestType": "record" }'
        assert isinstance(RecordWebhook.deserialize(payload), RecordWebhook)


if __name__ == "__main__":
    unittest.main()
