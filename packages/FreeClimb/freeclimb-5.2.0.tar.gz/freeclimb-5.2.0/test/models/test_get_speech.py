# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.get_speech import GetSpeech


class TestGetSpeech(unittest.TestCase):
    """GetSpeech unit test stubs"""

    def setUp(self):
        self.model = GetSpeech(
            action_url="TS",
            grammar_file="TS",
        )

    def test_action_url(self):
        """Test GetSpeech.action_url"""
        self.model.action_url = "TEST_STRING"
        assert self.model.action_url == "TEST_STRING"

    def test_grammar_type(self):
        """Test GetSpeech.grammar_type"""
        self.model.grammar_type = GrammarType.URL
        assert self.model.grammar_type == GrammarType.URL
        self.model.grammar_type = GrammarType.BUILT_IN
        assert self.model.grammar_type == GrammarType.BUILT_IN

    def test_grammar_file(self):
        """Test GetSpeech.grammar_file"""

        self.model.grammar_file = "TEST_STRING"
        assert self.model.grammar_file == "TEST_STRING"

    def test_grammar_rule(self):
        """Test GetSpeech.grammar_rule"""

        self.model.grammar_rule = "TEST_STRING"
        assert self.model.grammar_rule == "TEST_STRING"

    def test_play_beep(self):
        """Test GetSpeech.play_beep"""
        self.model.play_beep = False
        assert self.model.play_beep == False

    def test_prompts(self):
        """Test GetSpeech.prompts"""
        testList = []
        self.model.prompts = testList
        assert self.model.prompts == testList

    def test_no_input_timeout_ms(self):
        """Test GetSpeech.no_input_timeout_ms"""
        self.model.no_input_timeout_ms = 1
        assert self.model.no_input_timeout_ms == 1

    def test_recognition_timeout_ms(self):
        """Test GetSpeech.recognition_timeout_ms"""
        self.model.recognition_timeout_ms = 1
        assert self.model.recognition_timeout_ms == 1

    def test_confidence_threshold(self):
        """Test GetSpeech.confidence_threshold"""

        self.model.confidence_threshold = float(1)
        assert self.model.confidence_threshold == float(1)

    def test_sensitivity_level(self):
        """Test GetSpeech.sensitivity_level"""

        self.model.sensitivity_level = float(1)
        assert self.model.sensitivity_level == float(1)

    def test_speech_complete_timeout_ms(self):
        """Test GetSpeech.speech_complete_timeout_ms"""
        self.model.speech_complete_timeout_ms = 1
        assert self.model.speech_complete_timeout_ms == 1

    def test_speech_incomplete_timeout_ms(self):
        """Test GetSpeech.speech_incomplete_timeout_ms"""
        self.model.speech_incomplete_timeout_ms = 1
        assert self.model.speech_incomplete_timeout_ms == 1

    def test_privacy_mode(self):
        """Test GetSpeech.privacy_mode"""
        self.model.privacy_mode = False
        assert self.model.privacy_mode == False


if __name__ == "__main__":
    unittest.main()
