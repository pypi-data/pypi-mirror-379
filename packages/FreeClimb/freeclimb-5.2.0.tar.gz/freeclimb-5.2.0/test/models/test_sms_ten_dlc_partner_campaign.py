# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.sms_ten_dlc_partner_campaign import SMSTenDLCPartnerCampaign


class TestSMSTenDLCPartnerCampaign(unittest.TestCase):
    """SMSTenDLCPartnerCampaign unit test stubs"""

    def setUp(self):
        self.model = SMSTenDLCPartnerCampaign(
            campaign_id="TS",
            brand_id="TS",
            usecase="TS",
            description="TS",
        )

    def test_account_id(self):
        """Test SMSTenDLCPartnerCampaign.account_id"""

        self.model.account_id = "TEST_STRING"
        assert self.model.account_id == "TEST_STRING"

    def test_campaign_id(self):
        """Test SMSTenDLCPartnerCampaign.campaign_id"""

        self.model.campaign_id = "TEST_STRING"
        assert self.model.campaign_id == "TEST_STRING"

    def test_status(self):
        """Test SMSTenDLCPartnerCampaign.status"""
        self.model.status = SMSTenDLCPartnerCampaignStatus.ACTIVE
        assert self.model.status == SMSTenDLCPartnerCampaignStatus.ACTIVE
        self.model.status = SMSTenDLCPartnerCampaignStatus.EXPIRED
        assert self.model.status == SMSTenDLCPartnerCampaignStatus.EXPIRED

    def test_create_date(self):
        """Test SMSTenDLCPartnerCampaign.create_date"""
        self.model.create_date = datetime.fromtimestamp(1691592436)
        assert self.model.create_date == datetime.fromtimestamp(1691592436)

    def test_brand_id(self):
        """Test SMSTenDLCPartnerCampaign.brand_id"""
        self.model.brand_id = "T" * 8
        assert self.model.brand_id == "T" * 8

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.brand_id = "T" * (8 + 1)

    def test_usecase(self):
        """Test SMSTenDLCPartnerCampaign.usecase"""
        self.model.usecase = "T" * 20
        assert self.model.usecase == "T" * 20

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.usecase = "T" * (20 + 1)

    def test_description(self):
        """Test SMSTenDLCPartnerCampaign.description"""
        self.model.description = "T" * 4096
        assert self.model.description == "T" * 4096

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.description = "T" * (4096 + 1)

    def test_embedded_link(self):
        """Test SMSTenDLCPartnerCampaign.embedded_link"""
        self.model.embedded_link = False
        assert self.model.embedded_link == False

    def test_embedded_phone(self):
        """Test SMSTenDLCPartnerCampaign.embedded_phone"""
        self.model.embedded_phone = False
        assert self.model.embedded_phone == False

    def test_affiliate_marketing(self):
        """Test SMSTenDLCPartnerCampaign.affiliate_marketing"""
        self.model.affiliate_marketing = False
        assert self.model.affiliate_marketing == False

    def test_number_pool(self):
        """Test SMSTenDLCPartnerCampaign.number_pool"""
        self.model.number_pool = False
        assert self.model.number_pool == False

    def test_age_gated(self):
        """Test SMSTenDLCPartnerCampaign.age_gated"""
        self.model.age_gated = False
        assert self.model.age_gated == False

    def test_direct_lending(self):
        """Test SMSTenDLCPartnerCampaign.direct_lending"""
        self.model.direct_lending = False
        assert self.model.direct_lending == False

    def test_subscriber_optin(self):
        """Test SMSTenDLCPartnerCampaign.subscriber_optin"""
        self.model.subscriber_optin = False
        assert self.model.subscriber_optin == False

    def test_subscriber_optout(self):
        """Test SMSTenDLCPartnerCampaign.subscriber_optout"""
        self.model.subscriber_optout = False
        assert self.model.subscriber_optout == False

    def test_subscriber_help(self):
        """Test SMSTenDLCPartnerCampaign.subscriber_help"""
        self.model.subscriber_help = False
        assert self.model.subscriber_help == False

    def test_sample1(self):
        """Test SMSTenDLCPartnerCampaign.sample1"""
        self.model.sample1 = "T" * 1024
        assert self.model.sample1 == "T" * 1024

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.sample1 = "T" * (1024 + 1)

    def test_sample2(self):
        """Test SMSTenDLCPartnerCampaign.sample2"""
        self.model.sample2 = "T" * 1024
        assert self.model.sample2 == "T" * 1024

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.sample2 = "T" * (1024 + 1)

    def test_sample3(self):
        """Test SMSTenDLCPartnerCampaign.sample3"""
        self.model.sample3 = "T" * 1024
        assert self.model.sample3 == "T" * 1024

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.sample3 = "T" * (1024 + 1)

    def test_sample4(self):
        """Test SMSTenDLCPartnerCampaign.sample4"""
        self.model.sample4 = "T" * 1024
        assert self.model.sample4 == "T" * 1024

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.sample4 = "T" * (1024 + 1)

    def test_sample5(self):
        """Test SMSTenDLCPartnerCampaign.sample5"""
        self.model.sample5 = "T" * 1024
        assert self.model.sample5 == "T" * 1024

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.sample5 = "T" * (1024 + 1)

    def test_message_flow(self):
        """Test SMSTenDLCPartnerCampaign.message_flow"""
        self.model.message_flow = "T" * 2048
        assert self.model.message_flow == "T" * 2048

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.message_flow = "T" * (2048 + 1)

    def test_help_message(self):
        """Test SMSTenDLCPartnerCampaign.help_message"""
        self.model.help_message = "T" * 255
        assert self.model.help_message == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.help_message = "T" * (255 + 1)

    def test_optin_keywords(self):
        """Test SMSTenDLCPartnerCampaign.optin_keywords"""
        self.model.optin_keywords = "T" * 255
        assert self.model.optin_keywords == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.optin_keywords = "T" * (255 + 1)

    def test_optout_keywords(self):
        """Test SMSTenDLCPartnerCampaign.optout_keywords"""
        self.model.optout_keywords = "T" * 255
        assert self.model.optout_keywords == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.optout_keywords = "T" * (255 + 1)

    def test_help_keywords(self):
        """Test SMSTenDLCPartnerCampaign.help_keywords"""
        self.model.help_keywords = "T" * 255
        assert self.model.help_keywords == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.help_keywords = "T" * (255 + 1)

    def test_optin_message(self):
        """Test SMSTenDLCPartnerCampaign.optin_message"""
        self.model.optin_message = "T" * 255
        assert self.model.optin_message == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.optin_message = "T" * (255 + 1)

    def test_optout_message(self):
        """Test SMSTenDLCPartnerCampaign.optout_message"""
        self.model.optout_message = "T" * 255
        assert self.model.optout_message == "T" * 255

        with self.assertRaises(pydantic_core._pydantic_core.ValidationError) as info:
            self.model.optout_message = "T" * (255 + 1)

    def test_brand(self):
        """Test SMSTenDLCPartnerCampaign.brand"""
        object = freeclimb.models.sms_ten_dlc_partner_campaign_brand.SMSTenDLCPartnerCampaignBrand(
            account_id="",
            brand_id="",
            first_name="John",
            last_name="Doe",
            display_name="ABC Mobile",
            company_name="ABC Inc.",
            phone="+12024567890",
            email="",
            website="http://www.abcmobile.com",
            optional_attributes={},
            evp_vetting_score=56,
        )
        self.model.brand = object
        assert self.model.brand == object


if __name__ == "__main__":
    unittest.main()
