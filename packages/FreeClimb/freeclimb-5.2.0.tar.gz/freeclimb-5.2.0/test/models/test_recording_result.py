# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.recording_result import RecordingResult


class TestRecordingResult(unittest.TestCase):
    """RecordingResult unit test stubs"""

    def setUp(self):
        self.model = RecordingResult()

    def test_uri(self):
        """Test RecordingResult.uri"""

        self.model.uri = "TEST_STRING"
        assert self.model.uri == "TEST_STRING"

    def test_date_created(self):
        """Test RecordingResult.date_created"""

        self.model.date_created = "TEST_STRING"
        assert self.model.date_created == "TEST_STRING"

    def test_date_updated(self):
        """Test RecordingResult.date_updated"""

        self.model.date_updated = "TEST_STRING"
        assert self.model.date_updated == "TEST_STRING"

    def test_revision(self):
        """Test RecordingResult.revision"""
        self.model.revision = 1
        assert self.model.revision == 1

    def test_recording_id(self):
        """Test RecordingResult.recording_id"""

        self.model.recording_id = "TEST_STRING"
        assert self.model.recording_id == "TEST_STRING"

    def test_account_id(self):
        """Test RecordingResult.account_id"""

        self.model.account_id = "TEST_STRING"
        assert self.model.account_id == "TEST_STRING"

    def test_call_id(self):
        """Test RecordingResult.call_id"""

        self.model.call_id = "TEST_STRING"
        assert self.model.call_id == "TEST_STRING"

    def test_duration_sec(self):
        """Test RecordingResult.duration_sec"""
        self.model.duration_sec = 1
        assert self.model.duration_sec == 1

    def test_conference_id(self):
        """Test RecordingResult.conference_id"""

        self.model.conference_id = "TEST_STRING"
        assert self.model.conference_id == "TEST_STRING"


if __name__ == "__main__":
    unittest.main()
