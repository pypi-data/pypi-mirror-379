# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import pydantic_core
from datetime import datetime
import freeclimb
from freeclimb import *
from freeclimb.models.message_status_webhook import MessageStatusWebhook


class TestMessageStatusWebhook(unittest.TestCase):
    """MessageStatusWebhook unit test stubs"""

    def setUp(self):
        self.model = MessageStatusWebhook()

    def test_request_type(self):
        """Test MessageStatusWebhook.request_type"""

    def test_account_id(self):
        """Test MessageStatusWebhook.account_id"""

        self.model.account_id = "TEST_STRING"
        assert self.model.account_id == "TEST_STRING"

    def test_message_id(self):
        """Test MessageStatusWebhook.message_id"""

        self.model.message_id = "TEST_STRING"
        assert self.model.message_id == "TEST_STRING"

    def test_call_id(self):
        """Test MessageStatusWebhook.call_id"""

        self.model.call_id = "TEST_STRING"
        assert self.model.call_id == "TEST_STRING"

    def test_var_from(self):
        """Test MessageStatusWebhook.var_from"""

        self.model.var_from = "TEST_STRING"
        assert self.model.var_from == "TEST_STRING"

    def test_to(self):
        """Test MessageStatusWebhook.to"""

        self.model.to = "TEST_STRING"
        assert self.model.to == "TEST_STRING"

    def test_text(self):
        """Test MessageStatusWebhook.text"""

        self.model.text = "TEST_STRING"
        assert self.model.text == "TEST_STRING"

    def test_direction(self):
        """Test MessageStatusWebhook.direction"""

        self.model.direction = "TEST_STRING"
        assert self.model.direction == "TEST_STRING"

    def test_application_id(self):
        """Test MessageStatusWebhook.application_id"""

        self.model.application_id = "TEST_STRING"
        assert self.model.application_id == "TEST_STRING"

    def test_status(self):
        """Test MessageStatusWebhook.status"""
        self.model.status = MessageStatus.NEW
        assert self.model.status == MessageStatus.NEW
        self.model.status = MessageStatus.QUEUED
        assert self.model.status == MessageStatus.QUEUED
        self.model.status = MessageStatus.REJECTED
        assert self.model.status == MessageStatus.REJECTED
        self.model.status = MessageStatus.SENDING
        assert self.model.status == MessageStatus.SENDING
        self.model.status = MessageStatus.SENT
        assert self.model.status == MessageStatus.SENT
        self.model.status = MessageStatus.FAILED
        assert self.model.status == MessageStatus.FAILED
        self.model.status = MessageStatus.RECEIVED
        assert self.model.status == MessageStatus.RECEIVED
        self.model.status = MessageStatus.UNDELIVERED
        assert self.model.status == MessageStatus.UNDELIVERED
        self.model.status = MessageStatus.EXPIRED
        assert self.model.status == MessageStatus.EXPIRED
        self.model.status = MessageStatus.DELETED
        assert self.model.status == MessageStatus.DELETED
        self.model.status = MessageStatus.UNKNOWN
        assert self.model.status == MessageStatus.UNKNOWN

    def test_phone_number_id(self):
        """Test MessageStatusWebhook.phone_number_id"""

        self.model.phone_number_id = "TEST_STRING"
        assert self.model.phone_number_id == "TEST_STRING"

    def test_deserialize(self):
        payload = '{ "requestType": "messageStatus" }'
        assert isinstance(
            MessageStatusWebhook.deserialize(payload), MessageStatusWebhook
        )


if __name__ == "__main__":
    unittest.main()
