# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import freeclimb
from freeclimb.models.play_beep import PlayBeep
from freeclimb.models.call_status import CallStatus
from freeclimb.models.message_direction import MessageDirection
from freeclimb.models.update_call_request_status import UpdateCallRequestStatus
from freeclimb.models.update_conference_request_status import (
    UpdateConferenceRequestStatus,
)

from freeclimb.models.account_request import AccountRequest
from freeclimb.models.account_result import AccountResult
from freeclimb.models.application_list import ApplicationList
from freeclimb.models.application_request import ApplicationRequest
from freeclimb.models.application_result import ApplicationResult
from freeclimb.models.available_number_list import AvailableNumberList
from freeclimb.models.buy_incoming_number_request import BuyIncomingNumberRequest
from freeclimb.models.call_list import CallList
from freeclimb.models.call_result import CallResult
from freeclimb.models.conference_list import ConferenceList
from freeclimb.models.conference_participant_list import ConferenceParticipantList
from freeclimb.models.conference_participant_result import ConferenceParticipantResult
from freeclimb.models.conference_result import ConferenceResult
from freeclimb.models.completion_result import CompletionResult
from freeclimb.models.completion_request import CompletionRequest
from freeclimb.models.create_conference_request import CreateConferenceRequest
from freeclimb.models.create_web_rtc_token import CreateWebRTCToken
from freeclimb.models.filter_logs_request import FilterLogsRequest
from freeclimb.models.incoming_number_list import IncomingNumberList
from freeclimb.models.incoming_number_request import IncomingNumberRequest
from freeclimb.models.incoming_number_result import IncomingNumberResult
from freeclimb.models.log_list import LogList
from freeclimb.models.make_call_request import MakeCallRequest
from freeclimb.models.message_request import MessageRequest
from freeclimb.models.message_result import MessageResult
from freeclimb.models.messages_list import MessagesList
from freeclimb.models.queue_list import QueueList
from freeclimb.models.queue_member import QueueMember
from freeclimb.models.queue_member_list import QueueMemberList
from freeclimb.models.queue_request import QueueRequest
from freeclimb.models.queue_result import QueueResult
from freeclimb.models.recording_list import RecordingList
from freeclimb.models.recording_result import RecordingResult
from freeclimb.models.sms_ten_dlc_partner_campaigns_list_result import (
    SMSTenDLCPartnerCampaignsListResult,
)
from freeclimb.models.sms_ten_dlc_brands_list_result import SMSTenDLCBrandsListResult
from freeclimb.models.sms_ten_dlc_campaigns_list_result import (
    SMSTenDLCCampaignsListResult,
)
from freeclimb.models.sms_toll_free_campaigns_list_result import (
    SMSTollFreeCampaignsListResult,
)
from freeclimb.models.sms_ten_dlc_brand import SMSTenDLCBrand
from freeclimb.models.sms_toll_free_campaign import SMSTollFreeCampaign
from freeclimb.models.sms_ten_dlc_campaign import SMSTenDLCCampaign
from freeclimb.models.sms_ten_dlc_partner_campaign import SMSTenDLCPartnerCampaign
from freeclimb.models.update_call_request import UpdateCallRequest
from freeclimb.models.update_conference_participant_request import (
    UpdateConferenceParticipantRequest,
)
from freeclimb.models.update_conference_request import UpdateConferenceRequest
from freeclimb.models.export_list import ExportList
from freeclimb.models.export_request import ExportRequest
from freeclimb.models.export_result import ExportResult
from freeclimb.models.export_result_output import ExportResultOutput
import unittest

from freeclimb.api.default_api import DefaultApi


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self) -> None:
        configuration = freeclimb.Configuration(
            host="http://127.0.0.1:4010",
            username="TEST_ACCOUNT_ID",
            password="TEST_API_KEY",
        )

        api_client = freeclimb.ApiClient(configuration)
        self.api = freeclimb.DefaultApi(api_client)

    def tearDown(self) -> None:
        pass

    def test_buy_a_phone_number(self) -> None:
        """Test case for buy_a_phone_number

        Buy a Phone Number
        """

        buy_incoming_number_request = (
            buy_incoming_number_request_buy_a_phone_number_test_value
        )

        api_response = self.api.buy_a_phone_number(
            buy_incoming_number_request=buy_incoming_number_request
        )

        assert isinstance(api_response, IncomingNumberResult)

    def test_create_a_conference(self) -> None:
        """Test case for create_a_conference

        Create a Conference
        """

        create_conference_request = (
            create_conference_request_create_a_conference_test_value
        )

        api_response = self.api.create_a_conference(
            create_conference_request=create_conference_request
        )

        assert isinstance(api_response, ConferenceResult)

    def test_create_a_queue(self) -> None:
        """Test case for create_a_queue

        Create a Queue
        """

        queue_request = queue_request_create_a_queue_test_value

        api_response = self.api.create_a_queue(queue_request=queue_request)

        assert isinstance(api_response, QueueResult)

    def test_create_an_application(self) -> None:
        """Test case for create_an_application

        Create an application
        """

        application_request = application_request_create_an_application_test_value

        api_response = self.api.create_an_application(
            application_request=application_request
        )

        assert isinstance(api_response, ApplicationResult)

    def test_create_export(self) -> None:
        """Test case for create_export

        Create an Export
        """

        export_request = export_request_create_export_test_value

        api_response = self.api.create_export(export_request=export_request)

        assert isinstance(api_response, ExportResult)

    def test_create_knowledge_base_completion(self) -> None:
        """Test case for create_knowledge_base_completion

        Query the knowledge base
        """

        knowledge_base_id = (
            knowledge_base_id_create_knowledge_base_completion_test_value
        )

        completion_request = (
            completion_request_create_knowledge_base_completion_test_value
        )

        api_response = self.api.create_knowledge_base_completion(
            knowledge_base_id=knowledge_base_id, completion_request=completion_request
        )

        assert isinstance(api_response, CompletionResult)

    def test_delete_a_recording(self) -> None:
        """Test case for delete_a_recording

        Delete a Recording
        """

        recording_id = recording_id_delete_a_recording_test_value

        api_response = self.api.delete_a_recording(recording_id=recording_id)

    def test_delete_an_application(self) -> None:
        """Test case for delete_an_application

        Delete an application
        """

        application_id = application_id_delete_an_application_test_value

        api_response = self.api.delete_an_application(application_id=application_id)

    def test_delete_an_export(self) -> None:
        """Test case for delete_an_export

        Delete an Export
        """

        export_id = export_id_delete_an_export_test_value

        api_response = self.api.delete_an_export(export_id=export_id)

    def test_delete_an_incoming_number(self) -> None:
        """Test case for delete_an_incoming_number

        Delete an Incoming Number
        """

        phone_number_id = phone_number_id_delete_an_incoming_number_test_value

        api_response = self.api.delete_an_incoming_number(
            phone_number_id=phone_number_id
        )

    def test_dequeue_a_member(self) -> None:
        """Test case for dequeue_a_member

        Dequeue a Member
        """

        queue_id = queue_id_dequeue_a_member_test_value

        call_id = call_id_dequeue_a_member_test_value

        api_response = self.api.dequeue_a_member(queue_id=queue_id, call_id=call_id)

        assert isinstance(api_response, QueueMember)

    def test_dequeue_head_member(self) -> None:
        """Test case for dequeue_head_member

        Dequeue Head Member
        """

        queue_id = queue_id_dequeue_head_member_test_value

        api_response = self.api.dequeue_head_member(queue_id=queue_id)

        assert isinstance(api_response, QueueMember)

    def test_download_a_recording_file(self) -> None:
        """Test case for download_a_recording_file

        Download a Recording File
        """

        recording_id = recording_id_download_a_recording_file_test_value

        api_response = self.api.download_a_recording_file(recording_id=recording_id)

        assert isinstance(api_response, bytes)

    def test_download_an_export(self) -> None:
        """Test case for download_an_export

        Download an Export
        """

        export_id = export_id_download_an_export_test_value

        api_response = self.api.download_an_export(export_id=export_id)

        assert isinstance(api_response, str)

    def test_filter_logs(self) -> None:
        """Test case for filter_logs

        Filter Logs
        """

        filter_logs_request = filter_logs_request_filter_logs_test_value

        api_response = self.api.filter_logs(filter_logs_request=filter_logs_request)

        assert isinstance(api_response, LogList)

    def test_get_a_call(self) -> None:
        """Test case for get_a_call

        Get a Call
        """

        call_id = call_id_get_a_call_test_value

        api_response = self.api.get_a_call(call_id=call_id)

        assert isinstance(api_response, CallResult)

    def test_get_a_conference(self) -> None:
        """Test case for get_a_conference

        Get a Conference
        """

        conference_id = conference_id_get_a_conference_test_value

        api_response = self.api.get_a_conference(conference_id=conference_id)

        assert isinstance(api_response, ConferenceResult)

    def test_get_a_member(self) -> None:
        """Test case for get_a_member

        Get a Member
        """

        queue_id = queue_id_get_a_member_test_value

        call_id = call_id_get_a_member_test_value

        api_response = self.api.get_a_member(queue_id=queue_id, call_id=call_id)

        assert isinstance(api_response, QueueMember)

    def test_get_a_participant(self) -> None:
        """Test case for get_a_participant

        Get a Participant
        """

        conference_id = conference_id_get_a_participant_test_value

        call_id = call_id_get_a_participant_test_value

        api_response = self.api.get_a_participant(
            conference_id=conference_id, call_id=call_id
        )

        assert isinstance(api_response, ConferenceParticipantResult)

    def test_get_a_queue(self) -> None:
        """Test case for get_a_queue

        Get a Queue
        """

        queue_id = queue_id_get_a_queue_test_value

        api_response = self.api.get_a_queue(queue_id=queue_id)

        assert isinstance(api_response, QueueResult)

    def test_get_a_recording(self) -> None:
        """Test case for get_a_recording

        Get a Recording
        """

        recording_id = recording_id_get_a_recording_test_value

        api_response = self.api.get_a_recording(recording_id=recording_id)

        assert isinstance(api_response, RecordingResult)

    def test_get_an_account(self) -> None:
        """Test case for get_an_account

        Get an Account
        """

        api_response = self.api.get_an_account()

        assert isinstance(api_response, AccountResult)

    def test_get_an_application(self) -> None:
        """Test case for get_an_application

        Get an Application
        """

        application_id = application_id_get_an_application_test_value

        api_response = self.api.get_an_application(application_id=application_id)

        assert isinstance(api_response, ApplicationResult)

    def test_get_an_export(self) -> None:
        """Test case for get_an_export

        Get an Export
        """

        export_id = export_id_get_an_export_test_value

        api_response = self.api.get_an_export(export_id=export_id)

        assert isinstance(api_response, ExportResult)

    def test_get_an_incoming_number(self) -> None:
        """Test case for get_an_incoming_number

        Get an Incoming Number
        """

        phone_number_id = phone_number_id_get_an_incoming_number_test_value

        api_response = self.api.get_an_incoming_number(phone_number_id=phone_number_id)

        assert isinstance(api_response, IncomingNumberResult)

    def test_get_an_sms_message(self) -> None:
        """Test case for get_an_sms_message

        Get an SMS Message
        """

        message_id = message_id_get_an_sms_message_test_value

        api_response = self.api.get_an_sms_message(message_id=message_id)

        assert isinstance(api_response, MessageResult)

    def test_get_head_member(self) -> None:
        """Test case for get_head_member

        Get Head Member
        """

        queue_id = queue_id_get_head_member_test_value

        api_response = self.api.get_head_member(queue_id=queue_id)

        assert isinstance(api_response, QueueMember)

    def test_get_ten_dlc_sms_brand(self) -> None:
        """Test case for get_ten_dlc_sms_brand

        Get a 10DLC SMS Brand
        """

        brand_id = brand_id_get_ten_dlc_sms_brand_test_value

        api_response = self.api.get_ten_dlc_sms_brand(brand_id=brand_id)

        assert isinstance(api_response, SMSTenDLCBrand)

    def test_get_ten_dlc_sms_brands(self) -> None:
        """Test case for get_ten_dlc_sms_brands

        Get list of SMS 10DLC Brands
        """

        api_response = self.api.get_ten_dlc_sms_brands()

        assert isinstance(api_response, SMSTenDLCBrandsListResult)

    def test_get_ten_dlc_sms_campaign(self) -> None:
        """Test case for get_ten_dlc_sms_campaign

        Get a 10DLC SMS Campaign
        """

        campaign_id = campaign_id_get_ten_dlc_sms_campaign_test_value

        api_response = self.api.get_ten_dlc_sms_campaign(campaign_id=campaign_id)

        assert isinstance(api_response, SMSTenDLCCampaign)

    def test_get_ten_dlc_sms_campaigns(self) -> None:
        """Test case for get_ten_dlc_sms_campaigns

        Get list of SMS 10DLC Campaigns
        """

        brand_id = brand_id_get_ten_dlc_sms_campaigns_test_value

        api_response = self.api.get_ten_dlc_sms_campaigns(brand_id=brand_id)

        assert isinstance(api_response, SMSTenDLCCampaignsListResult)

    def test_get_ten_dlc_sms_partner_campaign(self) -> None:
        """Test case for get_ten_dlc_sms_partner_campaign

        Get a 10DLC SMS Partner Campaign
        """

        campaign_id = campaign_id_get_ten_dlc_sms_partner_campaign_test_value

        api_response = self.api.get_ten_dlc_sms_partner_campaign(
            campaign_id=campaign_id
        )

        assert isinstance(api_response, SMSTenDLCPartnerCampaign)

    def test_get_ten_dlc_sms_partner_campaigns(self) -> None:
        """Test case for get_ten_dlc_sms_partner_campaigns

        Get list of SMS 10DLC Partner Campaigns
        """

        brand_id = brand_id_get_ten_dlc_sms_partner_campaigns_test_value

        api_response = self.api.get_ten_dlc_sms_partner_campaigns(brand_id=brand_id)

        assert isinstance(api_response, SMSTenDLCPartnerCampaignsListResult)

    def test_get_toll_free_sms_campaign(self) -> None:
        """Test case for get_toll_free_sms_campaign

        Get a TollFree SMS Campaign
        """

        campaign_id = campaign_id_get_toll_free_sms_campaign_test_value

        api_response = self.api.get_toll_free_sms_campaign(campaign_id=campaign_id)

        assert isinstance(api_response, SMSTollFreeCampaign)

    def test_get_toll_free_sms_campaigns(self) -> None:
        """Test case for get_toll_free_sms_campaigns

        Get list of TollFree Campaigns
        """

        api_response = self.api.get_toll_free_sms_campaigns()

        assert isinstance(api_response, SMSTollFreeCampaignsListResult)

    def test_list_active_queues(self) -> None:
        """Test case for list_active_queues

        List Active Queues
        """

        alias = alias_list_active_queues_test_value

        api_response = self.api.list_active_queues(alias=alias)

        assert isinstance(api_response, QueueList)

    def test_list_all_account_logs(self) -> None:
        """Test case for list_all_account_logs

        List All Account Logs
        """

        api_response = self.api.list_all_account_logs()

        assert isinstance(api_response, LogList)

    def test_list_applications(self) -> None:
        """Test case for list_applications

        List applications
        """

        alias = alias_list_applications_test_value

        api_response = self.api.list_applications(alias=alias)

        assert isinstance(api_response, ApplicationList)

    def test_list_available_numbers(self) -> None:
        """Test case for list_available_numbers

        List available numbers
        """

        phone_number = phone_number_list_available_numbers_test_value

        region = region_list_available_numbers_test_value

        country = country_list_available_numbers_test_value

        voice_enabled = voice_enabled_list_available_numbers_test_value

        sms_enabled = sms_enabled_list_available_numbers_test_value

        capabilities_voice = capabilities_voice_list_available_numbers_test_value

        capabilities_sms = capabilities_sms_list_available_numbers_test_value

        capabilities_toll_free = (
            capabilities_toll_free_list_available_numbers_test_value
        )

        capabilities_ten_dlc = capabilities_ten_dlc_list_available_numbers_test_value

        capabilities_short_code = (
            capabilities_short_code_list_available_numbers_test_value
        )

        api_response = self.api.list_available_numbers(
            phone_number=phone_number,
            region=region,
            country=country,
            voice_enabled=voice_enabled,
            sms_enabled=sms_enabled,
            capabilities_voice=capabilities_voice,
            capabilities_sms=capabilities_sms,
            capabilities_toll_free=capabilities_toll_free,
            capabilities_ten_dlc=capabilities_ten_dlc,
            capabilities_short_code=capabilities_short_code,
        )

        assert isinstance(api_response, AvailableNumberList)

    def test_list_call_logs(self) -> None:
        """Test case for list_call_logs

        List Call Logs
        """

        call_id = call_id_list_call_logs_test_value

        api_response = self.api.list_call_logs(call_id=call_id)

        assert isinstance(api_response, LogList)

    def test_list_call_recordings(self) -> None:
        """Test case for list_call_recordings

        List Call Recordings
        """

        call_id = call_id_list_call_recordings_test_value

        date_created = date_created_list_call_recordings_test_value

        api_response = self.api.list_call_recordings(
            call_id=call_id, date_created=date_created
        )

        assert isinstance(api_response, RecordingList)

    def test_list_calls(self) -> None:
        """Test case for list_calls

        List Calls
        """

        active = active_list_calls_test_value

        to = to_list_calls_test_value

        var_from = var_from_list_calls_test_value

        status = status_list_calls_test_value

        start_time = start_time_list_calls_test_value

        end_time = end_time_list_calls_test_value

        parent_call_id = parent_call_id_list_calls_test_value

        application_id = application_id_list_calls_test_value

        risk_score_min = risk_score_min_list_calls_test_value

        risk_score_max = risk_score_max_list_calls_test_value

        api_response = self.api.list_calls(
            active=active,
            to=to,
            var_from=var_from,
            status=status,
            start_time=start_time,
            end_time=end_time,
            parent_call_id=parent_call_id,
            application_id=application_id,
            risk_score_min=risk_score_min,
            risk_score_max=risk_score_max,
        )

        assert isinstance(api_response, CallList)

    def test_list_conference_recordings(self) -> None:
        """Test case for list_conference_recordings

        List Conference Recordings
        """

        conference_id = conference_id_list_conference_recordings_test_value

        call_id = call_id_list_conference_recordings_test_value

        date_created = date_created_list_conference_recordings_test_value

        api_response = self.api.list_conference_recordings(
            conference_id=conference_id, call_id=call_id, date_created=date_created
        )

        assert isinstance(api_response, RecordingList)

    def test_list_conferences(self) -> None:
        """Test case for list_conferences

        List Conferences
        """

        status = status_list_conferences_test_value

        alias = alias_list_conferences_test_value

        date_created = date_created_list_conferences_test_value

        date_updated = date_updated_list_conferences_test_value

        api_response = self.api.list_conferences(
            status=status,
            alias=alias,
            date_created=date_created,
            date_updated=date_updated,
        )

        assert isinstance(api_response, ConferenceList)

    def test_list_exports(self) -> None:
        """Test case for list_exports

        List Exports
        """

        status = status_list_exports_test_value

        cursor = cursor_list_exports_test_value

        api_response = self.api.list_exports(status=status, cursor=cursor)

        assert isinstance(api_response, ExportList)

    def test_list_incoming_numbers(self) -> None:
        """Test case for list_incoming_numbers

        List Incoming Numbers
        """

        phone_number = phone_number_list_incoming_numbers_test_value

        alias = alias_list_incoming_numbers_test_value

        region = region_list_incoming_numbers_test_value

        country = country_list_incoming_numbers_test_value

        application_id = application_id_list_incoming_numbers_test_value

        has_application = has_application_list_incoming_numbers_test_value

        voice_enabled = voice_enabled_list_incoming_numbers_test_value

        sms_enabled = sms_enabled_list_incoming_numbers_test_value

        has_campaign = has_campaign_list_incoming_numbers_test_value

        capabilities_voice = capabilities_voice_list_incoming_numbers_test_value

        capabilities_sms = capabilities_sms_list_incoming_numbers_test_value

        capabilities_toll_free = capabilities_toll_free_list_incoming_numbers_test_value

        capabilities_ten_dlc = capabilities_ten_dlc_list_incoming_numbers_test_value

        capabilities_short_code = (
            capabilities_short_code_list_incoming_numbers_test_value
        )

        tfn_campaign_id = tfn_campaign_id_list_incoming_numbers_test_value

        offnet = offnet_list_incoming_numbers_test_value

        api_response = self.api.list_incoming_numbers(
            phone_number=phone_number,
            alias=alias,
            region=region,
            country=country,
            application_id=application_id,
            has_application=has_application,
            voice_enabled=voice_enabled,
            sms_enabled=sms_enabled,
            has_campaign=has_campaign,
            capabilities_voice=capabilities_voice,
            capabilities_sms=capabilities_sms,
            capabilities_toll_free=capabilities_toll_free,
            capabilities_ten_dlc=capabilities_ten_dlc,
            capabilities_short_code=capabilities_short_code,
            tfn_campaign_id=tfn_campaign_id,
            offnet=offnet,
        )

        assert isinstance(api_response, IncomingNumberList)

    def test_list_members(self) -> None:
        """Test case for list_members

        List Members
        """

        queue_id = queue_id_list_members_test_value

        api_response = self.api.list_members(queue_id=queue_id)

        assert isinstance(api_response, QueueMemberList)

    def test_list_participants(self) -> None:
        """Test case for list_participants

        List Participants
        """

        conference_id = conference_id_list_participants_test_value

        talk = talk_list_participants_test_value

        listen = listen_list_participants_test_value

        dtmf_pass_through = dtmf_pass_through_list_participants_test_value

        api_response = self.api.list_participants(
            conference_id=conference_id,
            talk=talk,
            listen=listen,
            dtmf_pass_through=dtmf_pass_through,
        )

        assert isinstance(api_response, ConferenceParticipantList)

    def test_list_recordings(self) -> None:
        """Test case for list_recordings

        List Recordings
        """

        call_id = call_id_list_recordings_test_value

        conference_id = conference_id_list_recordings_test_value

        date_created = date_created_list_recordings_test_value

        api_response = self.api.list_recordings(
            call_id=call_id, conference_id=conference_id, date_created=date_created
        )

        assert isinstance(api_response, RecordingList)

    def test_list_sms_messages(self) -> None:
        """Test case for list_sms_messages

        List SMS Messages
        """

        to = to_list_sms_messages_test_value

        var_from = var_from_list_sms_messages_test_value

        begin_time = begin_time_list_sms_messages_test_value

        end_time = end_time_list_sms_messages_test_value

        direction = direction_list_sms_messages_test_value

        campaign_id = campaign_id_list_sms_messages_test_value

        brand_id = brand_id_list_sms_messages_test_value

        is10_dlc = is10_dlc_list_sms_messages_test_value

        api_response = self.api.list_sms_messages(
            to=to,
            var_from=var_from,
            begin_time=begin_time,
            end_time=end_time,
            direction=direction,
            campaign_id=campaign_id,
            brand_id=brand_id,
            is10_dlc=is10_dlc,
        )

        assert isinstance(api_response, MessagesList)

    def test_make_a_call(self) -> None:
        """Test case for make_a_call

        Make a Call
        """

        make_call_request = make_call_request_make_a_call_test_value

        api_response = self.api.make_a_call(make_call_request=make_call_request)

        assert isinstance(api_response, CallResult)

    def test_make_a_webrtc_jwt(self) -> None:
        """Test case for make_a_webrtc_jwt

        Make a JWT for WebRTC calling
        """

        create_web_rtc_token = create_web_rtc_token_make_a_webrtc_jwt_test_value

        api_response = self.api.make_a_webrtc_jwt(
            create_web_rtc_token=create_web_rtc_token
        )

        assert isinstance(api_response, str)

    def test_remove_a_participant(self) -> None:
        """Test case for remove_a_participant

        Remove a Participant
        """

        conference_id = conference_id_remove_a_participant_test_value

        call_id = call_id_remove_a_participant_test_value

        api_response = self.api.remove_a_participant(
            conference_id=conference_id, call_id=call_id
        )

    def test_send_an_sms_message(self) -> None:
        """Test case for send_an_sms_message

        Send an SMS Message
        """

        message_request = message_request_send_an_sms_message_test_value

        api_response = self.api.send_an_sms_message(message_request=message_request)

        assert isinstance(api_response, MessageResult)

    def test_stream_a_recording_file(self) -> None:
        """Test case for stream_a_recording_file

        Stream a Recording File
        """

        recording_id = recording_id_stream_a_recording_file_test_value

        api_response = self.api.stream_a_recording_file(recording_id=recording_id)

        assert isinstance(api_response, bytes)

    def test_update_a_conference(self) -> None:
        """Test case for update_a_conference

        Update a Conference
        """

        conference_id = conference_id_update_a_conference_test_value

        update_conference_request = (
            update_conference_request_update_a_conference_test_value
        )

        api_response = self.api.update_a_conference(
            conference_id=conference_id,
            update_conference_request=update_conference_request,
        )

    def test_update_a_live_call(self) -> None:
        """Test case for update_a_live_call

        Update a Live Call
        """

        call_id = call_id_update_a_live_call_test_value

        update_call_request = update_call_request_update_a_live_call_test_value

        api_response = self.api.update_a_live_call(
            call_id=call_id, update_call_request=update_call_request
        )

    def test_update_a_participant(self) -> None:
        """Test case for update_a_participant

        Update a Participant
        """

        conference_id = conference_id_update_a_participant_test_value

        call_id = call_id_update_a_participant_test_value

        update_conference_participant_request = (
            update_conference_participant_request_update_a_participant_test_value
        )

        api_response = self.api.update_a_participant(
            conference_id=conference_id,
            call_id=call_id,
            update_conference_participant_request=update_conference_participant_request,
        )

        assert isinstance(api_response, ConferenceParticipantResult)

    def test_update_a_queue(self) -> None:
        """Test case for update_a_queue

        Update a Queue
        """

        queue_id = queue_id_update_a_queue_test_value

        queue_request = queue_request_update_a_queue_test_value

        api_response = self.api.update_a_queue(
            queue_id=queue_id, queue_request=queue_request
        )

        assert isinstance(api_response, QueueResult)

    def test_update_an_account(self) -> None:
        """Test case for update_an_account

        Manage an account
        """

        account_request = account_request_update_an_account_test_value

        api_response = self.api.update_an_account(account_request=account_request)

    def test_update_an_application(self) -> None:
        """Test case for update_an_application

        Update an application
        """

        application_id = application_id_update_an_application_test_value

        application_request = application_request_update_an_application_test_value

        api_response = self.api.update_an_application(
            application_id=application_id, application_request=application_request
        )

        assert isinstance(api_response, ApplicationResult)

    def test_update_an_incoming_number(self) -> None:
        """Test case for update_an_incoming_number

        Update an Incoming Number
        """

        phone_number_id = phone_number_id_update_an_incoming_number_test_value

        incoming_number_request = (
            incoming_number_request_update_an_incoming_number_test_value
        )

        api_response = self.api.update_an_incoming_number(
            phone_number_id=phone_number_id,
            incoming_number_request=incoming_number_request,
        )

        assert isinstance(api_response, IncomingNumberResult)

    def test_filter_logs_get_next_page(self):
        """Test case for get_next_page using filter_logs response

        Get Next Page for Filter Logs  # noqa: E501
        """

        filter_logs_request = filter_logs_request_filter_logs_test_value

        api_response = self.api.filter_logs(filter_logs_request=filter_logs_request)
        api_response.next_page_uri = "/Accounts/{accountId}/Logs?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, LogList)

    def test_get_ten_dlc_sms_brands_get_next_page(self):
        """Test case for get_next_page using get_ten_dlc_sms_brands response

        Get Next Page for Get list of SMS 10DLC Brands  # noqa: E501
        """

        api_response = self.api.get_ten_dlc_sms_brands()
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Messages/10DLC/Brands?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, SMSTenDLCBrandsListResult)

    def test_get_ten_dlc_sms_campaigns_get_next_page(self):
        """Test case for get_next_page using get_ten_dlc_sms_campaigns response

        Get Next Page for Get list of SMS 10DLC Campaigns  # noqa: E501
        """

        brand_id = brand_id_get_ten_dlc_sms_campaigns_test_value

        api_response = self.api.get_ten_dlc_sms_campaigns(brand_id=brand_id)
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Messages/10DLC/Campaigns?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, SMSTenDLCCampaignsListResult)

    def test_get_ten_dlc_sms_partner_campaigns_get_next_page(self):
        """Test case for get_next_page using get_ten_dlc_sms_partner_campaigns response

        Get Next Page for Get list of SMS 10DLC Partner Campaigns  # noqa: E501
        """

        brand_id = brand_id_get_ten_dlc_sms_partner_campaigns_test_value

        api_response = self.api.get_ten_dlc_sms_partner_campaigns(brand_id=brand_id)
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Messages/10DLC/PartnerCampaigns?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, SMSTenDLCPartnerCampaignsListResult)

    def test_get_toll_free_sms_campaigns_get_next_page(self):
        """Test case for get_next_page using get_toll_free_sms_campaigns response

        Get Next Page for Get list of TollFree Campaigns  # noqa: E501
        """

        api_response = self.api.get_toll_free_sms_campaigns()
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Messages/TollFree/Campaigns?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, SMSTollFreeCampaignsListResult)

    def test_list_active_queues_get_next_page(self):
        """Test case for get_next_page using list_active_queues response

        Get Next Page for List Active Queues  # noqa: E501
        """

        alias = alias_list_active_queues_test_value

        api_response = self.api.list_active_queues(alias=alias)
        api_response.next_page_uri = "/Accounts/{accountId}/Queues?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, QueueList)

    def test_list_all_account_logs_get_next_page(self):
        """Test case for get_next_page using list_all_account_logs response

        Get Next Page for List All Account Logs  # noqa: E501
        """

        api_response = self.api.list_all_account_logs()
        api_response.next_page_uri = "/Accounts/{accountId}/Logs?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, LogList)

    def test_list_applications_get_next_page(self):
        """Test case for get_next_page using list_applications response

        Get Next Page for List applications  # noqa: E501
        """

        alias = alias_list_applications_test_value

        api_response = self.api.list_applications(alias=alias)
        api_response.next_page_uri = "/Accounts/{accountId}/Applications?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, ApplicationList)

    def test_list_available_numbers_get_next_page(self):
        """Test case for get_next_page using list_available_numbers response

        Get Next Page for List available numbers  # noqa: E501
        """

        phone_number = phone_number_list_available_numbers_test_value
        region = region_list_available_numbers_test_value
        country = country_list_available_numbers_test_value
        voice_enabled = voice_enabled_list_available_numbers_test_value
        sms_enabled = sms_enabled_list_available_numbers_test_value
        capabilities_voice = capabilities_voice_list_available_numbers_test_value
        capabilities_sms = capabilities_sms_list_available_numbers_test_value
        capabilities_toll_free = (
            capabilities_toll_free_list_available_numbers_test_value
        )
        capabilities_ten_dlc = capabilities_ten_dlc_list_available_numbers_test_value
        capabilities_short_code = (
            capabilities_short_code_list_available_numbers_test_value
        )

        api_response = self.api.list_available_numbers(
            phone_number=phone_number,
            region=region,
            country=country,
            voice_enabled=voice_enabled,
            sms_enabled=sms_enabled,
            capabilities_voice=capabilities_voice,
            capabilities_sms=capabilities_sms,
            capabilities_toll_free=capabilities_toll_free,
            capabilities_ten_dlc=capabilities_ten_dlc,
            capabilities_short_code=capabilities_short_code,
        )
        api_response.next_page_uri = "/AvailablePhoneNumbers?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, AvailableNumberList)

    def test_list_call_logs_get_next_page(self):
        """Test case for get_next_page using list_call_logs response

        Get Next Page for List Call Logs  # noqa: E501
        """

        call_id = call_id_list_call_logs_test_value

        api_response = self.api.list_call_logs(call_id=call_id)
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Calls/{callId}/Logs?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, LogList)

    def test_list_call_recordings_get_next_page(self):
        """Test case for get_next_page using list_call_recordings response

        Get Next Page for List Call Recordings  # noqa: E501
        """

        call_id = call_id_list_call_recordings_test_value
        date_created = date_created_list_call_recordings_test_value

        api_response = self.api.list_call_recordings(
            call_id=call_id, date_created=date_created
        )
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Calls/{callId}/Recordings?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, RecordingList)

    def test_list_calls_get_next_page(self):
        """Test case for get_next_page using list_calls response

        Get Next Page for List Calls  # noqa: E501
        """

        active = active_list_calls_test_value
        to = to_list_calls_test_value
        var_from = var_from_list_calls_test_value
        status = status_list_calls_test_value
        start_time = start_time_list_calls_test_value
        end_time = end_time_list_calls_test_value
        parent_call_id = parent_call_id_list_calls_test_value
        application_id = application_id_list_calls_test_value
        risk_score_min = risk_score_min_list_calls_test_value
        risk_score_max = risk_score_max_list_calls_test_value

        api_response = self.api.list_calls(
            active=active,
            to=to,
            var_from=var_from,
            status=status,
            start_time=start_time,
            end_time=end_time,
            parent_call_id=parent_call_id,
            application_id=application_id,
            risk_score_min=risk_score_min,
            risk_score_max=risk_score_max,
        )
        api_response.next_page_uri = "/Accounts/{accountId}/Calls?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, CallList)

    def test_list_conference_recordings_get_next_page(self):
        """Test case for get_next_page using list_conference_recordings response

        Get Next Page for List Conference Recordings  # noqa: E501
        """

        conference_id = conference_id_list_conference_recordings_test_value
        call_id = call_id_list_conference_recordings_test_value
        date_created = date_created_list_conference_recordings_test_value

        api_response = self.api.list_conference_recordings(
            conference_id=conference_id, call_id=call_id, date_created=date_created
        )
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Conferences/{conferenceId}/Recordings?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, RecordingList)

    def test_list_conferences_get_next_page(self):
        """Test case for get_next_page using list_conferences response

        Get Next Page for List Conferences  # noqa: E501
        """

        status = status_list_conferences_test_value
        alias = alias_list_conferences_test_value
        date_created = date_created_list_conferences_test_value
        date_updated = date_updated_list_conferences_test_value

        api_response = self.api.list_conferences(
            status=status,
            alias=alias,
            date_created=date_created,
            date_updated=date_updated,
        )
        api_response.next_page_uri = "/Accounts/{accountId}/Conferences?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, ConferenceList)

    def test_list_exports_get_next_page(self):
        """Test case for get_next_page using list_exports response

        Get Next Page for List Exports  # noqa: E501
        """

        status = status_list_exports_test_value
        cursor = cursor_list_exports_test_value

        api_response = self.api.list_exports(status=status, cursor=cursor)
        api_response.next_page_uri = "/Accounts/{accountId}/Exports?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, ExportList)

    def test_list_incoming_numbers_get_next_page(self):
        """Test case for get_next_page using list_incoming_numbers response

        Get Next Page for List Incoming Numbers  # noqa: E501
        """

        phone_number = phone_number_list_incoming_numbers_test_value
        alias = alias_list_incoming_numbers_test_value
        region = region_list_incoming_numbers_test_value
        country = country_list_incoming_numbers_test_value
        application_id = application_id_list_incoming_numbers_test_value
        has_application = has_application_list_incoming_numbers_test_value
        voice_enabled = voice_enabled_list_incoming_numbers_test_value
        sms_enabled = sms_enabled_list_incoming_numbers_test_value
        has_campaign = has_campaign_list_incoming_numbers_test_value
        capabilities_voice = capabilities_voice_list_incoming_numbers_test_value
        capabilities_sms = capabilities_sms_list_incoming_numbers_test_value
        capabilities_toll_free = capabilities_toll_free_list_incoming_numbers_test_value
        capabilities_ten_dlc = capabilities_ten_dlc_list_incoming_numbers_test_value
        capabilities_short_code = (
            capabilities_short_code_list_incoming_numbers_test_value
        )
        tfn_campaign_id = tfn_campaign_id_list_incoming_numbers_test_value
        offnet = offnet_list_incoming_numbers_test_value

        api_response = self.api.list_incoming_numbers(
            phone_number=phone_number,
            alias=alias,
            region=region,
            country=country,
            application_id=application_id,
            has_application=has_application,
            voice_enabled=voice_enabled,
            sms_enabled=sms_enabled,
            has_campaign=has_campaign,
            capabilities_voice=capabilities_voice,
            capabilities_sms=capabilities_sms,
            capabilities_toll_free=capabilities_toll_free,
            capabilities_ten_dlc=capabilities_ten_dlc,
            capabilities_short_code=capabilities_short_code,
            tfn_campaign_id=tfn_campaign_id,
            offnet=offnet,
        )
        api_response.next_page_uri = (
            "/Accounts/{accountId}/IncomingPhoneNumbers?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, IncomingNumberList)

    def test_list_members_get_next_page(self):
        """Test case for get_next_page using list_members response

        Get Next Page for List Members  # noqa: E501
        """

        queue_id = queue_id_list_members_test_value

        api_response = self.api.list_members(queue_id=queue_id)
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Queues/{queueId}/Members?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, QueueMemberList)

    def test_list_participants_get_next_page(self):
        """Test case for get_next_page using list_participants response

        Get Next Page for List Participants  # noqa: E501
        """

        conference_id = conference_id_list_participants_test_value
        talk = talk_list_participants_test_value
        listen = listen_list_participants_test_value
        dtmf_pass_through = dtmf_pass_through_list_participants_test_value

        api_response = self.api.list_participants(
            conference_id=conference_id,
            talk=talk,
            listen=listen,
            dtmf_pass_through=dtmf_pass_through,
        )
        api_response.next_page_uri = (
            "/Accounts/{accountId}/Conferences/{conferenceId}/Participants?cursor=1"
        )
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, ConferenceParticipantList)

    def test_list_recordings_get_next_page(self):
        """Test case for get_next_page using list_recordings response

        Get Next Page for List Recordings  # noqa: E501
        """

        call_id = call_id_list_recordings_test_value
        conference_id = conference_id_list_recordings_test_value
        date_created = date_created_list_recordings_test_value

        api_response = self.api.list_recordings(
            call_id=call_id, conference_id=conference_id, date_created=date_created
        )
        api_response.next_page_uri = "/Accounts/{accountId}/Recordings?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, RecordingList)

    def test_list_sms_messages_get_next_page(self):
        """Test case for get_next_page using list_sms_messages response

        Get Next Page for List SMS Messages  # noqa: E501
        """

        to = to_list_sms_messages_test_value
        var_from = var_from_list_sms_messages_test_value
        begin_time = begin_time_list_sms_messages_test_value
        end_time = end_time_list_sms_messages_test_value
        direction = direction_list_sms_messages_test_value
        campaign_id = campaign_id_list_sms_messages_test_value
        brand_id = brand_id_list_sms_messages_test_value
        is10_dlc = is10_dlc_list_sms_messages_test_value

        api_response = self.api.list_sms_messages(
            to=to,
            var_from=var_from,
            begin_time=begin_time,
            end_time=end_time,
            direction=direction,
            campaign_id=campaign_id,
            brand_id=brand_id,
            is10_dlc=is10_dlc,
        )
        api_response.next_page_uri = "/Accounts/{accountId}/Messages?cursor=1"
        next_page_api_response = self.api.get_next_page(api_response)

        assert isinstance(next_page_api_response, MessagesList)


buy_incoming_number_request_buy_a_phone_number_test_value = BuyIncomingNumberRequest(
    phone_number="phone_number_example",
    alias="alias_example",
    application_id="application_id_example",
)

create_conference_request_create_a_conference_test_value = CreateConferenceRequest(
    alias="alias_example",
    play_beep=PlayBeep.ALWAYS,
    record=True,
    wait_url="https://wait_url_example.com",
    status_callback_url="https://status_callback_url_example.com",
)

queue_request_create_a_queue_test_value = QueueRequest(
    alias="alias_example",
    max_size=100,
)


application_request_create_an_application_test_value = ApplicationRequest(
    alias="alias_example",
    voice_url="https://voice_url_example.com",
    voice_fallback_url="https://voice_fallback_url_example.com",
    call_connect_url="https://call_connect_url_example.com",
    status_callback_url="https://status_callback_url_example.com",
    sms_url="https://sms_url_example.com",
    sms_fallback_url="https://sms_fallback_url_example.com",
)

recording_id_delete_a_recording_test_value = "recordingId_example"

application_id_delete_an_application_test_value = "applicationId_example"

phone_number_id_delete_an_incoming_number_test_value = "phoneNumberId_example"

queue_id_dequeue_a_member_test_value = "queueId_example"

call_id_dequeue_a_member_test_value = "callId_example"

queue_id_dequeue_head_member_test_value = "queueId_example"

recording_id_download_a_recording_file_test_value = "recordingId_example"

filter_logs_request_filter_logs_test_value = FilterLogsRequest(
    pql="pql_example",
)
call_id_get_a_call_test_value = "callId_example"

conference_id_get_a_conference_test_value = "conferenceId_example"

queue_id_get_a_member_test_value = "queueId_example"

call_id_get_a_member_test_value = "callId_example"

conference_id_get_a_participant_test_value = "conferenceId_example"

call_id_get_a_participant_test_value = "callId_example"

queue_id_get_a_queue_test_value = "queueId_example"

recording_id_get_a_recording_test_value = "recordingId_example"

application_id_get_an_application_test_value = "applicationId_example"

phone_number_id_get_an_incoming_number_test_value = "phoneNumberId_example"

message_id_get_an_sms_message_test_value = "messageId_example"

queue_id_get_head_member_test_value = "queueId_example"

alias_list_active_queues_test_value = "alias_example"

alias_list_applications_test_value = "alias_example"

phone_number_list_available_numbers_test_value = "phoneNumberId_example"

region_list_available_numbers_test_value = "region_example"

country_list_available_numbers_test_value = "country_example"

voice_enabled_list_available_numbers_test_value = True

sms_enabled_list_available_numbers_test_value = True

capabilities_voice_list_available_numbers_test_value = True

capabilities_sms_list_available_numbers_test_value = True

capabilities_toll_free_list_available_numbers_test_value = True

capabilities_ten_dlc_list_available_numbers_test_value = True

capabilities_short_code_list_available_numbers_test_value = True

call_id_list_call_logs_test_value = "callId_example"

call_id_list_call_recordings_test_value = "callId_example"

date_created_list_call_recordings_test_value = "dateCreated_example"

active_list_calls_test_value = False

to_list_calls_test_value = "to_example"

var_from_list_calls_test_value = "from_example"

status_list_calls_test_value = CallStatus.QUEUED

start_time_list_calls_test_value = "startTime_example"

end_time_list_calls_test_value = "endTime_example"

parent_call_id_list_calls_test_value = "parentCallId_example"

application_id_list_calls_test_value = [
    "AP0123456789ABCDEFabcedf000000000000000001",
    "AP0123456789ABCDEFabcedf000000000000000002",
    "AP0123456789ABCDEFabcedf000000000000000003",
]

status_list_conferences_test_value = "status_example"

alias_list_conferences_test_value = "alias_example"

date_created_list_conferences_test_value = "dateCreated_example"

date_updated_list_conferences_test_value = "dateUpdated_example"

phone_number_list_incoming_numbers_test_value = "phoneNumberId_example"

alias_list_incoming_numbers_test_value = "alias_example"

region_list_incoming_numbers_test_value = "region_example"

country_list_incoming_numbers_test_value = "country_example"

application_id_list_incoming_numbers_test_value = "applicationId_example"

has_application_list_incoming_numbers_test_value = False

voice_enabled_list_incoming_numbers_test_value = True

sms_enabled_list_incoming_numbers_test_value = True

capabilities_voice_list_incoming_numbers_test_value = True

capabilities_sms_list_incoming_numbers_test_value = True

capabilities_toll_free_list_incoming_numbers_test_value = True

capabilities_ten_dlc_list_incoming_numbers_test_value = True

capabilities_short_code_list_incoming_numbers_test_value = True

queue_id_list_members_test_value = "queueId_example"

conference_id_list_participants_test_value = "conferenceId_example"

talk_list_participants_test_value = True

listen_list_participants_test_value = True

to_list_sms_messages_test_value = "to_example"

var_from_list_sms_messages_test_value = "from_example"

begin_time_list_sms_messages_test_value = "beginTime_example"

end_time_list_sms_messages_test_value = "endTime_example"

direction_list_sms_messages_test_value = MessageDirection.INBOUND

conference_id_remove_a_participant_test_value = "conferenceId_example"

call_id_remove_a_participant_test_value = "callId_example"

recording_id_stream_a_recording_file_test_value = "recordingId_example"

conference_id_update_a_conference_test_value = "conferenceId_example"

call_id_update_a_live_call_test_value = "callId_example"

conference_id_update_a_participant_test_value = "conferenceId_example"

call_id_update_a_participant_test_value = "callId_example"

queue_id_update_a_queue_test_value = "queueId_example"

application_id_update_an_application_test_value = "applicationId_example"

phone_number_id_update_an_incoming_number_test_value = "phoneNumberId_example"

offnet_list_incoming_numbers_test_value = True

call_id_list_recordings_test_value = "callId_example"

conference_id_list_recordings_test_value = "conferenceId_example"

date_created_list_recordings_test_value = "dateCreated_example"

brand_id_get_ten_dlc_sms_campaigns_test_value = "BX56XX4"

brand_id_get_ten_dlc_sms_partner_campaigns_test_value = "BX56XX4"

brand_id_get_ten_dlc_sms_brand_test_value = "BX56XX4"

campaign_id_get_ten_dlc_sms_campaign_test_value = "CX56XX4"

campaign_id_get_ten_dlc_sms_partner_campaign_test_value = "CX56XX4"

has_campaign_list_incoming_numbers_test_value = True

campaign_id_list_sms_messages_test_value = "CX56XX4"

brand_id_list_sms_messages_test_value = "BX56XX4"

is10_dlc_list_sms_messages_test_value = True

queue_request_update_a_queue_test_value = QueueRequest(
    alias="alias_example",
    max_size=100,
)

application_request_update_an_application_test_value = ApplicationRequest(
    alias="alias_example",
    voice_url="https://voice_url_example.com",
    voice_fallback_url="https://voice_fallback_url_example.com",
    call_connect_url="https://call_connect_url_example.com",
    status_callback_url="https://status_callback_url_example.com",
    sms_url="https://sms_url_example.com",
    sms_fallback_url="https://sms_fallback_url_example.com",
)
make_call_request_make_a_call_test_value = MakeCallRequest(
    var_from="_from_example",
    to="to_example",
    application_id="application_id_example",
    send_digits="send_digits_example",
    if_machine="if_machine_example",
    if_machine_url="https://if_machine_url_example.com",
    timeout=30,
    parent_call_id="parent_call_id_example",
    privacy_mode=True,
    call_connect_url="https://call_connect_url_example.com",
)

message_request_send_an_sms_message_test_value = MessageRequest(
    var_from="_from_example",
    to="to_example",
    text="Example Text",
)

update_conference_request_update_a_conference_test_value = UpdateConferenceRequest(
    alias="alias_example",
    play_beep=PlayBeep.ALWAYS,
    status=UpdateConferenceRequestStatus.EMPTY,
)

update_call_request_update_a_live_call_test_value = UpdateCallRequest(
    status=UpdateCallRequestStatus.CANCELED,
)

update_conference_participant_request_update_a_participant_test_value = (
    UpdateConferenceParticipantRequest(
        talk=True,
        listen=True,
    )
)

account_request_update_an_account_test_value = AccountRequest(
    alias="alias_example",
    label="label_example",
)

incoming_number_request_update_an_incoming_number_test_value = IncomingNumberRequest(
    application_id="application_id_example",
    alias="alias_example",
)

tfn_campaign_id_list_incoming_numbers_test_value = "tfn_campaign_id_example"

call_id_list_conference_recordings_test_value = "call_id_example"

campaign_id_get_toll_free_sms_campaign_test_value = "conference_id_example"

conference_id_list_conference_recordings_test_value = "conference_id_example"

date_created_list_conference_recordings_test_value = "date_created_example"

create_web_rtc_token_make_a_webrtc_jwt_test_value = CreateWebRTCToken(
    to="to_example", var_from="from_example", uses=1
)

knowledge_base_id_create_knowledge_base_completion_test_value = (
    "knowledge_base_id_example"
)

completion_request_create_knowledge_base_completion_test_value = CompletionRequest(
    query="query_example"
)

dtmf_pass_through_list_participants_test_value = True

cursor_list_exports_test_value = "cursor_example"

status_list_exports_test_value = None

risk_score_min_list_calls_test_value = 10

risk_score_max_list_calls_test_value = 90

export_request_create_export_test_value = None

export_id_get_an_export_test_value = "get_export_id_example"

export_id_download_an_export_test_value = "download_export_id_example"

status_list_exports_test_value = None

export_id_delete_an_export_test_value = "delete_export_id_example"

if __name__ == "__main__":
    unittest.main()
