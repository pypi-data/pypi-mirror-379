# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from freeclimb.models.percl_command import PerclCommand
from pydantic import StrictStr
from typing import Optional, Set
from typing_extensions import Self


class AddToConference(
    PerclCommand,
    populate_by_name=True,
    validate_assignment=True,
    protected_namespaces=(),
):
    """
    The `AddToConference` command adds a Participant to a Conference. Two Call legs can be bridged together by creating a Conference and adding both Call legs to it via `AddToConference`.
    """  # noqa: E501

    allow_call_control: Optional[StrictBool] = Field(
        default=None,
        description="If `true`, Call control will be enabled for this Participant's Call leg.",
        alias="allowCallControl",
    )
    call_control_sequence: Optional[StrictStr] = Field(
        default=None,
        description="Defines a sequence of digits that, when entered by this caller, invokes the `callControlUrl`. Only digits plus '*', and '#' may be used.",
        alias="callControlSequence",
    )
    call_control_url: Optional[StrictStr] = Field(
        default=None,
        description="URL to be invoked when this Participant enters the digit sequence defined in the `callControlSequence` attribute.",
        alias="callControlUrl",
    )
    conference_id: StrictStr = Field(
        description="ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.",
        alias="conferenceId",
    )
    leave_conference_url: Optional[StrictStr] = Field(
        default=None,
        description="URL to be invoked when the Participant leaves the Conference. ",
        alias="leaveConferenceUrl",
    )
    listen: Optional[StrictBool] = Field(
        default=None,
        description="If `true`, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or `SetListen` PerCL command.",
    )
    notification_url: Optional[StrictStr] = Field(
        default=None,
        description="When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.",
        alias="notificationUrl",
    )
    start_conf_on_enter: Optional[StrictBool] = Field(
        default=None,
        description="Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to `true` for moderators and `false` for all other Participants.",
        alias="startConfOnEnter",
    )
    talk: Optional[StrictBool] = Field(
        default=None,
        description="If `true`, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or `SetTalk` PerCL command. ",
    )
    dtmf_pass_through: Optional[StrictBool] = Field(
        default=None,
        description="If `true`, the Participant joins the Conference with dtmfPassThrough privileges. This may be modified later via the REST API or `SetDTMFPassThrough` PerCL command. ",
        alias="dtmfPassThrough",
    )
    command: StrictStr = "AddToConference"

    __properties: ClassVar[List[str]] = [
        "command",
        "allowCallControl",
        "callControlSequence",
        "callControlUrl",
        "conferenceId",
        "leaveConferenceUrl",
        "listen",
        "notificationUrl",
        "startConfOnEnter",
        "talk",
        "dtmfPassThrough",
    ]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddToConference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddToConference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "command": obj.get("command"),
                "allowCallControl": obj.get("allowCallControl"),
                "callControlSequence": obj.get("callControlSequence"),
                "callControlUrl": obj.get("callControlUrl"),
                "conferenceId": obj.get("conferenceId"),
                "leaveConferenceUrl": obj.get("leaveConferenceUrl"),
                "listen": obj.get("listen"),
                "notificationUrl": obj.get("notificationUrl"),
                "startConfOnEnter": obj.get("startConfOnEnter"),
                "talk": obj.get("talk"),
                "dtmfPassThrough": obj.get("dtmfPassThrough"),
            }
        )
        return _obj
