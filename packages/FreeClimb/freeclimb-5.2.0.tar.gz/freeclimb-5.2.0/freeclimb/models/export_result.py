# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from freeclimb.models.export_resource_type import ExportResourceType
from freeclimb.models.export_result_output import ExportResultOutput
from freeclimb.models.export_status import ExportStatus
from pydantic import StrictStr
from typing import Optional, Set
from typing_extensions import Self


class ExportResult(
    BaseModel, populate_by_name=True, validate_assignment=True, protected_namespaces=()
):
    """
    ExportResult
    """  # noqa: E501

    account_id: Optional[StrictStr] = Field(
        description="String that uniquely identifies this account resource.",
        alias="accountId",
    )
    uri: StrictStr
    date_created: StrictStr = Field(alias="dateCreated")
    date_updated: StrictStr = Field(alias="dateUpdated")
    revision: Annotated[int, Field(strict=True, ge=0)]
    export_id: Optional[StrictStr] = Field(
        description="String that uniquely identifies this export resource",
        alias="exportId",
    )
    status: ExportStatus
    size: StrictInt
    resource_type: ExportResourceType = Field(alias="resourceType")
    query: Dict[str, Any] = Field(
        description="Query params used to filter exported documents"
    )
    format: List[StrictStr] = Field(description="Desired fields of exported documents")
    output: ExportResultOutput

    __properties: ClassVar[List[str]] = [
        "accountId",
        "uri",
        "dateCreated",
        "dateUpdated",
        "revision",
        "exportId",
        "status",
        "size",
        "resourceType",
        "query",
        "format",
        "output",
    ]

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict["output"] = self.output.to_dict()
        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict["accountId"] = None

        # set to None if export_id (nullable) is None
        # and model_fields_set contains the field
        if self.export_id is None and "export_id" in self.model_fields_set:
            _dict["exportId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "accountId": obj.get("accountId"),
                "uri": obj.get("uri"),
                "dateCreated": obj.get("dateCreated"),
                "dateUpdated": obj.get("dateUpdated"),
                "revision": obj.get("revision"),
                "exportId": obj.get("exportId"),
                "status": obj.get("status"),
                "size": obj.get("size"),
                "resourceType": obj.get("resourceType"),
                "query": obj.get("query"),
                "format": obj.get("format"),
                "output": (
                    ExportResultOutput.from_dict(obj["output"])
                    if obj.get("output") is not None
                    else None
                ),
            }
        )
        return _obj
