# coding: utf-8

"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from freeclimb.models.sms_toll_free_campaign_registration_status import (
    SMSTollFreeCampaignRegistrationStatus,
)
from pydantic import StrictStr
from typing import Optional, Set
from typing_extensions import Self


class TFNCampaign(
    BaseModel, populate_by_name=True, validate_assignment=True, protected_namespaces=()
):
    """
    TFNCampaign
    """  # noqa: E501

    account_id: Optional[StrictStr] = Field(
        description="ID of the account that created this participant.",
        alias="accountId",
    )
    campaign_id: Annotated[str, Field(strict=True)] = Field(
        description="TFNCampaignId", alias="campaignId"
    )
    use_case: StrictStr = Field(alias="useCase")
    registration_status: SMSTollFreeCampaignRegistrationStatus = Field(
        alias="registrationStatus"
    )
    date_created: StrictStr = Field(alias="dateCreated")
    date_updated: StrictStr = Field(alias="dateUpdated")
    date_created_iso: StrictStr = Field(alias="dateCreatedISO")
    date_updated_iso: StrictStr = Field(alias="dateUpdatedISO")
    revision: StrictInt

    __properties: ClassVar[List[str]] = [
        "accountId",
        "campaignId",
        "useCase",
        "registrationStatus",
        "dateCreated",
        "dateUpdated",
        "dateCreatedISO",
        "dateUpdatedISO",
        "revision",
    ]

    @field_validator("campaign_id")
    def campaign_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"cmptfn_[a-fA-F0-9]{40}", value):
            raise ValueError(
                r"must validate the regular expression /cmptfn_[a-fA-F0-9]{40}/"
            )
        return value

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TFNCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict["accountId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TFNCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "accountId": obj.get("accountId"),
                "campaignId": obj.get("campaignId"),
                "useCase": obj.get("useCase"),
                "registrationStatus": obj.get("registrationStatus"),
                "dateCreated": obj.get("dateCreated"),
                "dateUpdated": obj.get("dateUpdated"),
                "dateCreatedISO": obj.get("dateCreatedISO"),
                "dateUpdatedISO": obj.get("dateUpdatedISO"),
                "revision": obj.get("revision"),
            }
        )
        return _obj
