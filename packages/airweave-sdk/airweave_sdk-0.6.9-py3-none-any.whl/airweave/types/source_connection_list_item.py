# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .authentication_method import AuthenticationMethod
from .source_connection_status import SourceConnectionStatus
from .sync_job_status import SyncJobStatus
from .sync_summary import SyncSummary


class SourceConnectionListItem(UniversalBaseModel):
    """
    Minimal source connection for list views with computed fields.
    """

    id: str
    name: str
    short_name: str
    readable_collection_id: str
    created_at: dt.datetime
    modified_at: dt.datetime
    is_authenticated: bool
    readable_auth_provider_id: typing.Optional[str] = None
    connection_init_session_id: typing.Optional[str] = None
    is_active: typing.Optional[bool] = None
    last_sync: typing.Optional[SyncSummary] = None
    entity_count: typing.Optional[int] = None
    last_job_status: typing.Optional[SyncJobStatus] = None
    auth_method: AuthenticationMethod = pydantic.Field()
    """
    Compute authentication method from database fields.
    """

    status: SourceConnectionStatus = pydantic.Field()
    """
    Compute connection status from current state.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
