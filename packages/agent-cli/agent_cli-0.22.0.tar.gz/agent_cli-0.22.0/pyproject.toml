[build-system]
requires = ["setuptools>=42", "wheel", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-cli"
description = "A suite of AI-powered command-line tools for text correction, audio transcription, and voice assistance."
dynamic = ["version"]
authors = [{ name = "Bas Nijholt", email = "bas@nijho.lt" }]
dependencies = [
    "wyoming",
    "pyaudio",
    "rich",
    "pyperclip",
    "pydantic-ai-slim[openai,duckduckgo,vertexai]",
    "typer",
    "openai",
    "dotenv",
    "google-genai>=1.25.0",
]
requires-python = ">=3.11"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/basnijholt/agent-cli"

[project.optional-dependencies]
server = [
    "fastapi[standard]",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "pydantic-ai-slim[openai]",
    "pytest-timeout",
    "pytest-mock",
]
dev = [
    "agent-cli[test]",
    "pre-commit>=3.0.0",
    "versioningit",
    "markdown-code-runner",
    "ruff",
    "notebook",
]
speed = ["audiostretchy>=1.3.0"]

# Duplicate of test+dev optional-dependencies groups
[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "pydantic-ai-slim[openai]",
    "pytest-timeout",
    "pytest-mock",
    "pre-commit>=3.0.0",
    "versioningit",
    "markdown-code-runner",
    "ruff",
    "notebook",
    "audiostretchy>=1.3.0",
    "pre-commit-uv>=4.1.4",
]

[project.scripts]
agent-cli = "agent_cli.cli:app"

[tool.setuptools.packages.find]
include = ["agent_cli.*", "agent_cli"]

[tool.setuptools.package-data]
"agent_cli" = ["py.typed", "scripts/**/*"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
timeout = 10
addopts = [
    "--cov=agent_cli",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--no-cov-on-fail",
    "-v",
]

[tool.coverage.run]
omit = []

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    'if __name__ == "__main__":',
]

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "T20",
    "ANN101",
    "S101",
    "S603",
    "PD901",
    "ANN401",
    "D402",
    "PLW0603",
    "D401",
    "SLF001",
    "PLR0913",
    "TD002",
    "ANN002",
    "ANN003",
    "E501",
    "TRY300",
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean-typed keyword-only argument in function definition
    "BLE001",  # Do not catch blind exception: `Exception`
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001", "D103", "E501", "PLR2004", "S101", "ANN201", "FBT003"]
"tests/test_examples.py" = ["E501"]
".github/*" = ["INP001"]
"example/*" = ["INP001", "D100"]
"docs/*" = ["INP001", "E501"]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.mypy]
python_version = "3.11"

[tool.versioningit]

[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.0"
