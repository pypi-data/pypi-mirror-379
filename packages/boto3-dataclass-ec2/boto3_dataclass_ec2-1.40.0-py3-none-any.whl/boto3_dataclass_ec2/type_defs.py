# -*- coding: utf-8 -*-

import typing as T
import dataclasses
from functools import cached_property

if T.TYPE_CHECKING:  # pragma: no cover
    from mypy_boto3_ec2 import type_defs


def field(name: str):
    def getter(self):
        return self.boto3_raw_data[name]

    return cached_property(getter)


@dataclasses.dataclass(frozen=True)
class AcceleratorCountRequest:
    boto3_raw_data: "type_defs.AcceleratorCountRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AcceleratorCountRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceleratorCountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceleratorCount:
    boto3_raw_data: "type_defs.AcceleratorCountTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AcceleratorCountTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceleratorCountTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceleratorTotalMemoryMiBRequest:
    boto3_raw_data: "type_defs.AcceleratorTotalMemoryMiBRequestTypeDef" = (
        dataclasses.field()
    )

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AcceleratorTotalMemoryMiBRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceleratorTotalMemoryMiBRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceleratorTotalMemoryMiB:
    boto3_raw_data: "type_defs.AcceleratorTotalMemoryMiBTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AcceleratorTotalMemoryMiBTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceleratorTotalMemoryMiBTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddressTransfer:
    boto3_raw_data: "type_defs.AddressTransferTypeDef" = dataclasses.field()

    PublicIp = field("PublicIp")
    AllocationId = field("AllocationId")
    TransferAccountId = field("TransferAccountId")
    TransferOfferExpirationTimestamp = field("TransferOfferExpirationTimestamp")
    TransferOfferAcceptedTimestamp = field("TransferOfferAcceptedTimestamp")
    AddressTransferStatus = field("AddressTransferStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddressTransferTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AddressTransferTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseMetadata:
    boto3_raw_data: "type_defs.ResponseMetadataTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    HTTPStatusCode = field("HTTPStatusCode")
    HTTPHeaders = field("HTTPHeaders")
    RetryAttempts = field("RetryAttempts")
    HostId = field("HostId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResponseMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptCapacityReservationBillingOwnershipRequest:
    boto3_raw_data: (
        "type_defs.AcceptCapacityReservationBillingOwnershipRequestTypeDef"
    ) = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptCapacityReservationBillingOwnershipRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AcceptCapacityReservationBillingOwnershipRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetConfigurationRequest:
    boto3_raw_data: "type_defs.TargetConfigurationRequestTypeDef" = dataclasses.field()

    OfferingId = field("OfferingId")
    InstanceCount = field("InstanceCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetConfigurationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayMulticastDomainAssociationsRequest:
    boto3_raw_data: (
        "type_defs.AcceptTransitGatewayMulticastDomainAssociationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    SubnetIds = field("SubnetIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayMulticastDomainAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AcceptTransitGatewayMulticastDomainAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayPeeringAttachmentRequest:
    boto3_raw_data: "type_defs.AcceptTransitGatewayPeeringAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayPeeringAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptTransitGatewayPeeringAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayVpcAttachmentRequest:
    boto3_raw_data: "type_defs.AcceptTransitGatewayVpcAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayVpcAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptTransitGatewayVpcAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptVpcEndpointConnectionsRequest:
    boto3_raw_data: "type_defs.AcceptVpcEndpointConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceId = field("ServiceId")
    VpcEndpointIds = field("VpcEndpointIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptVpcEndpointConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptVpcEndpointConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptVpcPeeringConnectionRequest:
    boto3_raw_data: "type_defs.AcceptVpcPeeringConnectionRequestTypeDef" = (
        dataclasses.field()
    )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptVpcPeeringConnectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptVpcPeeringConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptVpcPeeringConnectionRequestVpcPeeringConnectionAccept:
    boto3_raw_data: (
        "type_defs.AcceptVpcPeeringConnectionRequestVpcPeeringConnectionAcceptTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptVpcPeeringConnectionRequestVpcPeeringConnectionAcceptTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AcceptVpcPeeringConnectionRequestVpcPeeringConnectionAcceptTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccountAttributeValue:
    boto3_raw_data: "type_defs.AccountAttributeValueTypeDef" = dataclasses.field()

    AttributeValue = field("AttributeValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AccountAttributeValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AccountAttributeValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActiveInstance:
    boto3_raw_data: "type_defs.ActiveInstanceTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    InstanceType = field("InstanceType")
    SpotInstanceRequestId = field("SpotInstanceRequestId")
    InstanceHealth = field("InstanceHealth")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActiveInstanceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActiveInstanceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActiveVpnTunnelStatus:
    boto3_raw_data: "type_defs.ActiveVpnTunnelStatusTypeDef" = dataclasses.field()

    Phase1EncryptionAlgorithm = field("Phase1EncryptionAlgorithm")
    Phase2EncryptionAlgorithm = field("Phase2EncryptionAlgorithm")
    Phase1IntegrityAlgorithm = field("Phase1IntegrityAlgorithm")
    Phase2IntegrityAlgorithm = field("Phase2IntegrityAlgorithm")
    Phase1DHGroup = field("Phase1DHGroup")
    Phase2DHGroup = field("Phase2DHGroup")
    IkeVersion = field("IkeVersion")
    ProvisioningStatus = field("ProvisioningStatus")
    ProvisioningStatusReason = field("ProvisioningStatusReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActiveVpnTunnelStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActiveVpnTunnelStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddIpamOperatingRegion:
    boto3_raw_data: "type_defs.AddIpamOperatingRegionTypeDef" = dataclasses.field()

    RegionName = field("RegionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AddIpamOperatingRegionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddIpamOperatingRegionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddIpamOrganizationalUnitExclusion:
    boto3_raw_data: "type_defs.AddIpamOrganizationalUnitExclusionTypeDef" = (
        dataclasses.field()
    )

    OrganizationsEntityPath = field("OrganizationsEntityPath")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AddIpamOrganizationalUnitExclusionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddIpamOrganizationalUnitExclusionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddPrefixListEntry:
    boto3_raw_data: "type_defs.AddPrefixListEntryTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AddPrefixListEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddPrefixListEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddedPrincipal:
    boto3_raw_data: "type_defs.AddedPrincipalTypeDef" = dataclasses.field()

    PrincipalType = field("PrincipalType")
    Principal = field("Principal")
    ServicePermissionId = field("ServicePermissionId")
    ServiceId = field("ServiceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddedPrincipalTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AddedPrincipalTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisComponent:
    boto3_raw_data: "type_defs.AnalysisComponentTypeDef" = dataclasses.field()

    Id = field("Id")
    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisComponentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisComponentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupTypePair:
    boto3_raw_data: "type_defs.RuleGroupTypePairTypeDef" = dataclasses.field()

    RuleGroupArn = field("RuleGroupArn")
    RuleGroupType = field("RuleGroupType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RuleGroupTypePairTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupTypePairTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleOption:
    boto3_raw_data: "type_defs.RuleOptionTypeDef" = dataclasses.field()

    Keyword = field("Keyword")
    Settings = field("Settings")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RuleOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RuleOptionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PtrUpdateStatus:
    boto3_raw_data: "type_defs.PtrUpdateStatusTypeDef" = dataclasses.field()

    Value = field("Value")
    Status = field("Status")
    Reason = field("Reason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PtrUpdateStatusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PtrUpdateStatusTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Tag:
    boto3_raw_data: "type_defs.TagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdvertiseByoipCidrRequest:
    boto3_raw_data: "type_defs.AdvertiseByoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Asn = field("Asn")
    DryRun = field("DryRun")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AdvertiseByoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdvertiseByoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateIpamPoolCidrRequest:
    boto3_raw_data: "type_defs.AllocateIpamPoolCidrRequestTypeDef" = dataclasses.field()

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    Cidr = field("Cidr")
    NetmaskLength = field("NetmaskLength")
    ClientToken = field("ClientToken")
    Description = field("Description")
    PreviewNextCidr = field("PreviewNextCidr")
    AllowedCidrs = field("AllowedCidrs")
    DisallowedCidrs = field("DisallowedCidrs")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateIpamPoolCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateIpamPoolCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPoolAllocation:
    boto3_raw_data: "type_defs.IpamPoolAllocationTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    IpamPoolAllocationId = field("IpamPoolAllocationId")
    Description = field("Description")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceRegion = field("ResourceRegion")
    ResourceOwner = field("ResourceOwner")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamPoolAllocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPoolAllocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlternatePathHint:
    boto3_raw_data: "type_defs.AlternatePathHintTypeDef" = dataclasses.field()

    ComponentId = field("ComponentId")
    ComponentArn = field("ComponentArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AlternatePathHintTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlternatePathHintTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortRange:
    boto3_raw_data: "type_defs.PortRangeTypeDef" = dataclasses.field()

    From = field("From")
    To = field("To")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PortRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PortRangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisLoadBalancerListener:
    boto3_raw_data: "type_defs.AnalysisLoadBalancerListenerTypeDef" = (
        dataclasses.field()
    )

    LoadBalancerPort = field("LoadBalancerPort")
    InstancePort = field("InstancePort")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisLoadBalancerListenerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisLoadBalancerListenerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisRouteTableRoute:
    boto3_raw_data: "type_defs.AnalysisRouteTableRouteTypeDef" = dataclasses.field()

    DestinationCidr = field("DestinationCidr")
    DestinationPrefixListId = field("DestinationPrefixListId")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    GatewayId = field("GatewayId")
    InstanceId = field("InstanceId")
    NatGatewayId = field("NatGatewayId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    Origin = field("Origin")
    TransitGatewayId = field("TransitGatewayId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    State = field("State")
    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    LocalGatewayId = field("LocalGatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisRouteTableRouteTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisRouteTableRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ApplySecurityGroupsToClientVpnTargetNetworkRequest:
    boto3_raw_data: (
        "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkRequestTypeDef"
    ) = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    VpcId = field("VpcId")
    SecurityGroupIds = field("SecurityGroupIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsnAssociation:
    boto3_raw_data: "type_defs.AsnAssociationTypeDef" = dataclasses.field()

    Asn = field("Asn")
    Cidr = field("Cidr")
    StatusMessage = field("StatusMessage")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AsnAssociationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AsnAssociationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsnAuthorizationContext:
    boto3_raw_data: "type_defs.AsnAuthorizationContextTypeDef" = dataclasses.field()

    Message = field("Message")
    Signature = field("Signature")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AsnAuthorizationContextTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsnAuthorizationContextTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignIpv6AddressesRequest:
    boto3_raw_data: "type_defs.AssignIpv6AddressesRequestTypeDef" = dataclasses.field()

    NetworkInterfaceId = field("NetworkInterfaceId")
    Ipv6PrefixCount = field("Ipv6PrefixCount")
    Ipv6Prefixes = field("Ipv6Prefixes")
    Ipv6Addresses = field("Ipv6Addresses")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssignIpv6AddressesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignIpv6AddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignPrivateIpAddressesRequestNetworkInterfaceAssignPrivateIpAddresses:
    boto3_raw_data: "type_defs.AssignPrivateIpAddressesRequestNetworkInterfaceAssignPrivateIpAddressesTypeDef" = (dataclasses.field())

    Ipv4Prefixes = field("Ipv4Prefixes")
    Ipv4PrefixCount = field("Ipv4PrefixCount")
    PrivateIpAddresses = field("PrivateIpAddresses")
    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    AllowReassignment = field("AllowReassignment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssignPrivateIpAddressesRequestNetworkInterfaceAssignPrivateIpAddressesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssignPrivateIpAddressesRequestNetworkInterfaceAssignPrivateIpAddressesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignPrivateIpAddressesRequest:
    boto3_raw_data: "type_defs.AssignPrivateIpAddressesRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Ipv4Prefixes = field("Ipv4Prefixes")
    Ipv4PrefixCount = field("Ipv4PrefixCount")
    PrivateIpAddresses = field("PrivateIpAddresses")
    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    AllowReassignment = field("AllowReassignment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssignPrivateIpAddressesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignPrivateIpAddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignedPrivateIpAddress:
    boto3_raw_data: "type_defs.AssignedPrivateIpAddressTypeDef" = dataclasses.field()

    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssignedPrivateIpAddressTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignedPrivateIpAddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv4PrefixSpecification:
    boto3_raw_data: "type_defs.Ipv4PrefixSpecificationTypeDef" = dataclasses.field()

    Ipv4Prefix = field("Ipv4Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ipv4PrefixSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv4PrefixSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignPrivateNatGatewayAddressRequest:
    boto3_raw_data: "type_defs.AssignPrivateNatGatewayAddressRequestTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")
    PrivateIpAddresses = field("PrivateIpAddresses")
    PrivateIpAddressCount = field("PrivateIpAddressCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssignPrivateNatGatewayAddressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignPrivateNatGatewayAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NatGatewayAddress:
    boto3_raw_data: "type_defs.NatGatewayAddressTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIp = field("PrivateIp")
    PublicIp = field("PublicIp")
    AssociationId = field("AssociationId")
    IsPrimary = field("IsPrimary")
    FailureMessage = field("FailureMessage")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NatGatewayAddressTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NatGatewayAddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateAddressRequestClassicAddressAssociate:
    boto3_raw_data: (
        "type_defs.AssociateAddressRequestClassicAddressAssociateTypeDef"
    ) = dataclasses.field()

    AllocationId = field("AllocationId")
    InstanceId = field("InstanceId")
    DryRun = field("DryRun")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")
    AllowReassociation = field("AllowReassociation")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateAddressRequestClassicAddressAssociateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateAddressRequestClassicAddressAssociateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateAddressRequest:
    boto3_raw_data: "type_defs.AssociateAddressRequestTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    InstanceId = field("InstanceId")
    PublicIp = field("PublicIp")
    DryRun = field("DryRun")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")
    AllowReassociation = field("AllowReassociation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateAddressRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateAddressRequestVpcAddressAssociate:
    boto3_raw_data: "type_defs.AssociateAddressRequestVpcAddressAssociateTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    PublicIp = field("PublicIp")
    DryRun = field("DryRun")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")
    AllowReassociation = field("AllowReassociation")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateAddressRequestVpcAddressAssociateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateAddressRequestVpcAddressAssociateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateCapacityReservationBillingOwnerRequest:
    boto3_raw_data: (
        "type_defs.AssociateCapacityReservationBillingOwnerRequestTypeDef"
    ) = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    UnusedReservationBillingOwnerId = field("UnusedReservationBillingOwnerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateCapacityReservationBillingOwnerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateCapacityReservationBillingOwnerRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateClientVpnTargetNetworkRequest:
    boto3_raw_data: "type_defs.AssociateClientVpnTargetNetworkRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    SubnetId = field("SubnetId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateClientVpnTargetNetworkRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateClientVpnTargetNetworkRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociationStatus:
    boto3_raw_data: "type_defs.AssociationStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AssociationStatusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociationStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateDhcpOptionsRequestDhcpOptionsAssociateWithVpc:
    boto3_raw_data: (
        "type_defs.AssociateDhcpOptionsRequestDhcpOptionsAssociateWithVpcTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateDhcpOptionsRequestDhcpOptionsAssociateWithVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateDhcpOptionsRequestDhcpOptionsAssociateWithVpcTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateDhcpOptionsRequest:
    boto3_raw_data: "type_defs.AssociateDhcpOptionsRequestTypeDef" = dataclasses.field()

    DhcpOptionsId = field("DhcpOptionsId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateDhcpOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateDhcpOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateDhcpOptionsRequestVpcAssociateDhcpOptions:
    boto3_raw_data: (
        "type_defs.AssociateDhcpOptionsRequestVpcAssociateDhcpOptionsTypeDef"
    ) = dataclasses.field()

    DhcpOptionsId = field("DhcpOptionsId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateDhcpOptionsRequestVpcAssociateDhcpOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateDhcpOptionsRequestVpcAssociateDhcpOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateEnclaveCertificateIamRoleRequest:
    boto3_raw_data: "type_defs.AssociateEnclaveCertificateIamRoleRequestTypeDef" = (
        dataclasses.field()
    )

    CertificateArn = field("CertificateArn")
    RoleArn = field("RoleArn")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateEnclaveCertificateIamRoleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateEnclaveCertificateIamRoleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IamInstanceProfileSpecification:
    boto3_raw_data: "type_defs.IamInstanceProfileSpecificationTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IamInstanceProfileSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IamInstanceProfileSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIpamByoasnRequest:
    boto3_raw_data: "type_defs.AssociateIpamByoasnRequestTypeDef" = dataclasses.field()

    Asn = field("Asn")
    Cidr = field("Cidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateIpamByoasnRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIpamByoasnRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateNatGatewayAddressRequest:
    boto3_raw_data: "type_defs.AssociateNatGatewayAddressRequestTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")
    AllocationIds = field("AllocationIds")
    PrivateIpAddresses = field("PrivateIpAddresses")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateNatGatewayAddressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateNatGatewayAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateRouteServerRequest:
    boto3_raw_data: "type_defs.AssociateRouteServerRequestTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateRouteServerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateRouteServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerAssociation:
    boto3_raw_data: "type_defs.RouteServerAssociationTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    VpcId = field("VpcId")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateRouteTableRequestRouteTableAssociateWithSubnet:
    boto3_raw_data: (
        "type_defs.AssociateRouteTableRequestRouteTableAssociateWithSubnetTypeDef"
    ) = dataclasses.field()

    GatewayId = field("GatewayId")
    PublicIpv4Pool = field("PublicIpv4Pool")
    DryRun = field("DryRun")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateRouteTableRequestRouteTableAssociateWithSubnetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateRouteTableRequestRouteTableAssociateWithSubnetTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateRouteTableRequest:
    boto3_raw_data: "type_defs.AssociateRouteTableRequestTypeDef" = dataclasses.field()

    RouteTableId = field("RouteTableId")
    GatewayId = field("GatewayId")
    PublicIpv4Pool = field("PublicIpv4Pool")
    DryRun = field("DryRun")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateRouteTableRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteTableAssociationState:
    boto3_raw_data: "type_defs.RouteTableAssociationStateTypeDef" = dataclasses.field()

    State = field("State")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteTableAssociationStateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteTableAssociationStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateSecurityGroupVpcRequest:
    boto3_raw_data: "type_defs.AssociateSecurityGroupVpcRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateSecurityGroupVpcRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateSecurityGroupVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateSubnetCidrBlockRequest:
    boto3_raw_data: "type_defs.AssociateSubnetCidrBlockRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateSubnetCidrBlockRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateSubnetCidrBlockRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayMulticastDomainRequest:
    boto3_raw_data: "type_defs.AssociateTransitGatewayMulticastDomainRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    SubnetIds = field("SubnetIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayMulticastDomainRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayMulticastDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayPolicyTableRequest:
    boto3_raw_data: "type_defs.AssociateTransitGatewayPolicyTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayPolicyTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayPolicyTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPolicyTableAssociation:
    boto3_raw_data: "type_defs.TransitGatewayPolicyTableAssociationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayPolicyTableAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPolicyTableAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.AssociateTransitGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayAssociation:
    boto3_raw_data: "type_defs.TransitGatewayAssociationTypeDef" = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTrunkInterfaceRequest:
    boto3_raw_data: "type_defs.AssociateTrunkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    BranchInterfaceId = field("BranchInterfaceId")
    TrunkInterfaceId = field("TrunkInterfaceId")
    VlanId = field("VlanId")
    GreKey = field("GreKey")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateTrunkInterfaceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTrunkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateVpcCidrBlockRequest:
    boto3_raw_data: "type_defs.AssociateVpcCidrBlockRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlockNetworkBorderGroup = field("Ipv6CidrBlockNetworkBorderGroup")
    Ipv6Pool = field("Ipv6Pool")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    AmazonProvidedIpv6CidrBlock = field("AmazonProvidedIpv6CidrBlock")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateVpcCidrBlockRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateVpcCidrBlockRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociatedRole:
    boto3_raw_data: "type_defs.AssociatedRoleTypeDef" = dataclasses.field()

    AssociatedRoleArn = field("AssociatedRoleArn")
    CertificateS3BucketName = field("CertificateS3BucketName")
    CertificateS3ObjectKey = field("CertificateS3ObjectKey")
    EncryptionKmsKeyId = field("EncryptionKmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AssociatedRoleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AssociatedRoleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociatedTargetNetwork:
    boto3_raw_data: "type_defs.AssociatedTargetNetworkTypeDef" = dataclasses.field()

    NetworkId = field("NetworkId")
    NetworkType = field("NetworkType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociatedTargetNetworkTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociatedTargetNetworkTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClassicLinkVpcRequestInstanceAttachClassicLinkVpc:
    boto3_raw_data: (
        "type_defs.AttachClassicLinkVpcRequestInstanceAttachClassicLinkVpcTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    Groups = field("Groups")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachClassicLinkVpcRequestInstanceAttachClassicLinkVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AttachClassicLinkVpcRequestInstanceAttachClassicLinkVpcTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClassicLinkVpcRequest:
    boto3_raw_data: "type_defs.AttachClassicLinkVpcRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    VpcId = field("VpcId")
    Groups = field("Groups")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachClassicLinkVpcRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachClassicLinkVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClassicLinkVpcRequestVpcAttachClassicLinkInstance:
    boto3_raw_data: (
        "type_defs.AttachClassicLinkVpcRequestVpcAttachClassicLinkInstanceTypeDef"
    ) = dataclasses.field()

    InstanceId = field("InstanceId")
    Groups = field("Groups")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachClassicLinkVpcRequestVpcAttachClassicLinkInstanceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AttachClassicLinkVpcRequestVpcAttachClassicLinkInstanceTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachInternetGatewayRequestInternetGatewayAttachToVpc:
    boto3_raw_data: (
        "type_defs.AttachInternetGatewayRequestInternetGatewayAttachToVpcTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachInternetGatewayRequestInternetGatewayAttachToVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AttachInternetGatewayRequestInternetGatewayAttachToVpcTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachInternetGatewayRequest:
    boto3_raw_data: "type_defs.AttachInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    InternetGatewayId = field("InternetGatewayId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachInternetGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachInternetGatewayRequestVpcAttachInternetGateway:
    boto3_raw_data: (
        "type_defs.AttachInternetGatewayRequestVpcAttachInternetGatewayTypeDef"
    ) = dataclasses.field()

    InternetGatewayId = field("InternetGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachInternetGatewayRequestVpcAttachInternetGatewayTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AttachInternetGatewayRequestVpcAttachInternetGatewayTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVerifiedAccessTrustProviderRequest:
    boto3_raw_data: "type_defs.AttachVerifiedAccessTrustProviderRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachVerifiedAccessTrustProviderRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVerifiedAccessTrustProviderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVolumeRequestInstanceAttachVolume:
    boto3_raw_data: "type_defs.AttachVolumeRequestInstanceAttachVolumeTypeDef" = (
        dataclasses.field()
    )

    Device = field("Device")
    VolumeId = field("VolumeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachVolumeRequestInstanceAttachVolumeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVolumeRequestInstanceAttachVolumeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVolumeRequest:
    boto3_raw_data: "type_defs.AttachVolumeRequestTypeDef" = dataclasses.field()

    Device = field("Device")
    InstanceId = field("InstanceId")
    VolumeId = field("VolumeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVolumeRequestVolumeAttachToInstance:
    boto3_raw_data: "type_defs.AttachVolumeRequestVolumeAttachToInstanceTypeDef" = (
        dataclasses.field()
    )

    Device = field("Device")
    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachVolumeRequestVolumeAttachToInstanceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVolumeRequestVolumeAttachToInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVpnGatewayRequest:
    boto3_raw_data: "type_defs.AttachVpnGatewayRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    VpnGatewayId = field("VpnGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachVpnGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVpnGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcAttachment:
    boto3_raw_data: "type_defs.VpcAttachmentTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcAttachmentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcAttachmentTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachmentEnaSrdUdpSpecification:
    boto3_raw_data: "type_defs.AttachmentEnaSrdUdpSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdUdpEnabled = field("EnaSrdUdpEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AttachmentEnaSrdUdpSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachmentEnaSrdUdpSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttributeBooleanValue:
    boto3_raw_data: "type_defs.AttributeBooleanValueTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttributeBooleanValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttributeBooleanValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegionalSummary:
    boto3_raw_data: "type_defs.RegionalSummaryTypeDef" = dataclasses.field()

    RegionName = field("RegionName")
    NumberOfMatchedAccounts = field("NumberOfMatchedAccounts")
    NumberOfUnmatchedAccounts = field("NumberOfUnmatchedAccounts")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RegionalSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RegionalSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttributeValue:
    boto3_raw_data: "type_defs.AttributeValueTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AttributeValueTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AttributeValueTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnAuthorizationRuleStatus:
    boto3_raw_data: "type_defs.ClientVpnAuthorizationRuleStatusTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClientVpnAuthorizationRuleStatusTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnAuthorizationRuleStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeClientVpnIngressRequest:
    boto3_raw_data: "type_defs.AuthorizeClientVpnIngressRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    TargetNetworkCidr = field("TargetNetworkCidr")
    AccessGroupId = field("AccessGroupId")
    AuthorizeAllGroups = field("AuthorizeAllGroups")
    Description = field("Description")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AuthorizeClientVpnIngressRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeClientVpnIngressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AvailabilityZoneMessage:
    boto3_raw_data: "type_defs.AvailabilityZoneMessageTypeDef" = dataclasses.field()

    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AvailabilityZoneMessageTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AvailabilityZoneMessageTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceCapacity:
    boto3_raw_data: "type_defs.InstanceCapacityTypeDef" = dataclasses.field()

    AvailableCapacity = field("AvailableCapacity")
    InstanceType = field("InstanceType")
    TotalCapacity = field("TotalCapacity")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceCapacityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceCapacityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BaselineEbsBandwidthMbpsRequest:
    boto3_raw_data: "type_defs.BaselineEbsBandwidthMbpsRequestTypeDef" = (
        dataclasses.field()
    )

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BaselineEbsBandwidthMbpsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BaselineEbsBandwidthMbpsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BaselineEbsBandwidthMbps:
    boto3_raw_data: "type_defs.BaselineEbsBandwidthMbpsTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BaselineEbsBandwidthMbpsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BaselineEbsBandwidthMbpsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsBlockDeviceResponse:
    boto3_raw_data: "type_defs.EbsBlockDeviceResponseTypeDef" = dataclasses.field()

    Encrypted = field("Encrypted")
    DeleteOnTermination = field("DeleteOnTermination")
    Iops = field("Iops")
    Throughput = field("Throughput")
    KmsKeyId = field("KmsKeyId")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EbsBlockDeviceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsBlockDeviceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsBlockDevice:
    boto3_raw_data: "type_defs.EbsBlockDeviceTypeDef" = dataclasses.field()

    DeleteOnTermination = field("DeleteOnTermination")
    Iops = field("Iops")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")
    KmsKeyId = field("KmsKeyId")
    Throughput = field("Throughput")
    OutpostArn = field("OutpostArn")
    AvailabilityZone = field("AvailabilityZone")
    Encrypted = field("Encrypted")
    VolumeInitializationRate = field("VolumeInitializationRate")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EbsBlockDeviceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EbsBlockDeviceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BlockPublicAccessStates:
    boto3_raw_data: "type_defs.BlockPublicAccessStatesTypeDef" = dataclasses.field()

    InternetGatewayBlockMode = field("InternetGatewayBlockMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BlockPublicAccessStatesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BlockPublicAccessStatesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BundleTaskError:
    boto3_raw_data: "type_defs.BundleTaskErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BundleTaskErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BundleTaskErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Byoasn:
    boto3_raw_data: "type_defs.ByoasnTypeDef" = dataclasses.field()

    Asn = field("Asn")
    IpamId = field("IpamId")
    StatusMessage = field("StatusMessage")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ByoasnTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ByoasnTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelBundleTaskRequest:
    boto3_raw_data: "type_defs.CancelBundleTaskRequestTypeDef" = dataclasses.field()

    BundleId = field("BundleId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelBundleTaskRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelBundleTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelCapacityReservationFleetError:
    boto3_raw_data: "type_defs.CancelCapacityReservationFleetErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelCapacityReservationFleetErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelCapacityReservationFleetErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelCapacityReservationFleetsRequest:
    boto3_raw_data: "type_defs.CancelCapacityReservationFleetsRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationFleetIds = field("CapacityReservationFleetIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelCapacityReservationFleetsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelCapacityReservationFleetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationFleetCancellationState:
    boto3_raw_data: "type_defs.CapacityReservationFleetCancellationStateTypeDef" = (
        dataclasses.field()
    )

    CurrentFleetState = field("CurrentFleetState")
    PreviousFleetState = field("PreviousFleetState")
    CapacityReservationFleetId = field("CapacityReservationFleetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationFleetCancellationStateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationFleetCancellationStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelCapacityReservationRequest:
    boto3_raw_data: "type_defs.CancelCapacityReservationRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelCapacityReservationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelCapacityReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelConversionRequest:
    boto3_raw_data: "type_defs.CancelConversionRequestTypeDef" = dataclasses.field()

    ConversionTaskId = field("ConversionTaskId")
    DryRun = field("DryRun")
    ReasonMessage = field("ReasonMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelConversionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelConversionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelDeclarativePoliciesReportRequest:
    boto3_raw_data: "type_defs.CancelDeclarativePoliciesReportRequestTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelDeclarativePoliciesReportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelDeclarativePoliciesReportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelExportTaskRequest:
    boto3_raw_data: "type_defs.CancelExportTaskRequestTypeDef" = dataclasses.field()

    ExportTaskId = field("ExportTaskId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelExportTaskRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelExportTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelImageLaunchPermissionRequest:
    boto3_raw_data: "type_defs.CancelImageLaunchPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelImageLaunchPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelImageLaunchPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelImportTaskRequest:
    boto3_raw_data: "type_defs.CancelImportTaskRequestTypeDef" = dataclasses.field()

    CancelReason = field("CancelReason")
    DryRun = field("DryRun")
    ImportTaskId = field("ImportTaskId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelImportTaskRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelImportTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelReservedInstancesListingRequest:
    boto3_raw_data: "type_defs.CancelReservedInstancesListingRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesListingId = field("ReservedInstancesListingId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelReservedInstancesListingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelReservedInstancesListingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotFleetRequestsError:
    boto3_raw_data: "type_defs.CancelSpotFleetRequestsErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelSpotFleetRequestsErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotFleetRequestsErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotFleetRequestsRequest:
    boto3_raw_data: "type_defs.CancelSpotFleetRequestsRequestTypeDef" = (
        dataclasses.field()
    )

    SpotFleetRequestIds = field("SpotFleetRequestIds")
    TerminateInstances = field("TerminateInstances")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelSpotFleetRequestsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotFleetRequestsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotFleetRequestsSuccessItem:
    boto3_raw_data: "type_defs.CancelSpotFleetRequestsSuccessItemTypeDef" = (
        dataclasses.field()
    )

    CurrentSpotFleetRequestState = field("CurrentSpotFleetRequestState")
    PreviousSpotFleetRequestState = field("PreviousSpotFleetRequestState")
    SpotFleetRequestId = field("SpotFleetRequestId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelSpotFleetRequestsSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotFleetRequestsSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotInstanceRequestsRequest:
    boto3_raw_data: "type_defs.CancelSpotInstanceRequestsRequestTypeDef" = (
        dataclasses.field()
    )

    SpotInstanceRequestIds = field("SpotInstanceRequestIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelSpotInstanceRequestsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotInstanceRequestsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelledSpotInstanceRequest:
    boto3_raw_data: "type_defs.CancelledSpotInstanceRequestTypeDef" = (
        dataclasses.field()
    )

    SpotInstanceRequestId = field("SpotInstanceRequestId")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelledSpotInstanceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelledSpotInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityAllocation:
    boto3_raw_data: "type_defs.CapacityAllocationTypeDef" = dataclasses.field()

    AllocationType = field("AllocationType")
    Count = field("Count")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityAllocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityAllocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityBlockExtensionOffering:
    boto3_raw_data: "type_defs.CapacityBlockExtensionOfferingTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockExtensionOfferingId = field("CapacityBlockExtensionOfferingId")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    StartDate = field("StartDate")
    CapacityBlockExtensionStartDate = field("CapacityBlockExtensionStartDate")
    CapacityBlockExtensionEndDate = field("CapacityBlockExtensionEndDate")
    CapacityBlockExtensionDurationHours = field("CapacityBlockExtensionDurationHours")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")
    Tenancy = field("Tenancy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CapacityBlockExtensionOfferingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityBlockExtensionOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityBlockExtension:
    boto3_raw_data: "type_defs.CapacityBlockExtensionTypeDef" = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    CapacityBlockExtensionOfferingId = field("CapacityBlockExtensionOfferingId")
    CapacityBlockExtensionDurationHours = field("CapacityBlockExtensionDurationHours")
    CapacityBlockExtensionStatus = field("CapacityBlockExtensionStatus")
    CapacityBlockExtensionPurchaseDate = field("CapacityBlockExtensionPurchaseDate")
    CapacityBlockExtensionStartDate = field("CapacityBlockExtensionStartDate")
    CapacityBlockExtensionEndDate = field("CapacityBlockExtensionEndDate")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityBlockExtensionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityBlockExtensionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityBlockOffering:
    boto3_raw_data: "type_defs.CapacityBlockOfferingTypeDef" = dataclasses.field()

    CapacityBlockOfferingId = field("CapacityBlockOfferingId")
    InstanceType = field("InstanceType")
    AvailabilityZone = field("AvailabilityZone")
    InstanceCount = field("InstanceCount")
    StartDate = field("StartDate")
    EndDate = field("EndDate")
    CapacityBlockDurationHours = field("CapacityBlockDurationHours")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")
    Tenancy = field("Tenancy")
    UltraserverType = field("UltraserverType")
    UltraserverCount = field("UltraserverCount")
    CapacityBlockDurationMinutes = field("CapacityBlockDurationMinutes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityBlockOfferingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityBlockOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationStatus:
    boto3_raw_data: "type_defs.CapacityReservationStatusTypeDef" = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    TotalCapacity = field("TotalCapacity")
    TotalAvailableCapacity = field("TotalAvailableCapacity")
    TotalUnavailableCapacity = field("TotalUnavailableCapacity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationInfo:
    boto3_raw_data: "type_defs.CapacityReservationInfoTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    AvailabilityZone = field("AvailabilityZone")
    Tenancy = field("Tenancy")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationCommitmentInfo:
    boto3_raw_data: "type_defs.CapacityReservationCommitmentInfoTypeDef" = (
        dataclasses.field()
    )

    CommittedInstanceCount = field("CommittedInstanceCount")
    CommitmentEndDate = field("CommitmentEndDate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationCommitmentInfoTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationCommitmentInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetCapacityReservation:
    boto3_raw_data: "type_defs.FleetCapacityReservationTypeDef" = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    AvailabilityZoneId = field("AvailabilityZoneId")
    InstanceType = field("InstanceType")
    InstancePlatform = field("InstancePlatform")
    AvailabilityZone = field("AvailabilityZone")
    TotalInstanceCount = field("TotalInstanceCount")
    FulfilledCapacity = field("FulfilledCapacity")
    EbsOptimized = field("EbsOptimized")
    CreateDate = field("CreateDate")
    Weight = field("Weight")
    Priority = field("Priority")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FleetCapacityReservationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetCapacityReservationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationGroup:
    boto3_raw_data: "type_defs.CapacityReservationGroupTypeDef" = dataclasses.field()

    GroupArn = field("GroupArn")
    OwnerId = field("OwnerId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationOptionsRequest:
    boto3_raw_data: "type_defs.CapacityReservationOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    UsageStrategy = field("UsageStrategy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationOptions:
    boto3_raw_data: "type_defs.CapacityReservationOptionsTypeDef" = dataclasses.field()

    UsageStrategy = field("UsageStrategy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationTargetResponse:
    boto3_raw_data: "type_defs.CapacityReservationTargetResponseTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    CapacityReservationResourceGroupArn = field("CapacityReservationResourceGroupArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationTargetResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationTargetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationTarget:
    boto3_raw_data: "type_defs.CapacityReservationTargetTypeDef" = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    CapacityReservationResourceGroupArn = field("CapacityReservationResourceGroupArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationTargetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CertificateAuthenticationRequest:
    boto3_raw_data: "type_defs.CertificateAuthenticationRequestTypeDef" = (
        dataclasses.field()
    )

    ClientRootCertificateChainArn = field("ClientRootCertificateChainArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CertificateAuthenticationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CertificateAuthenticationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CertificateAuthentication:
    boto3_raw_data: "type_defs.CertificateAuthenticationTypeDef" = dataclasses.field()

    ClientRootCertificateChain = field("ClientRootCertificateChain")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CertificateAuthenticationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CertificateAuthenticationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CidrAuthorizationContext:
    boto3_raw_data: "type_defs.CidrAuthorizationContextTypeDef" = dataclasses.field()

    Message = field("Message")
    Signature = field("Signature")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CidrAuthorizationContextTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CidrAuthorizationContextTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CidrBlock:
    boto3_raw_data: "type_defs.CidrBlockTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CidrBlockTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CidrBlockTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassicLinkDnsSupport:
    boto3_raw_data: "type_defs.ClassicLinkDnsSupportTypeDef" = dataclasses.field()

    ClassicLinkDnsSupported = field("ClassicLinkDnsSupported")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassicLinkDnsSupportTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassicLinkDnsSupportTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupIdentifier:
    boto3_raw_data: "type_defs.GroupIdentifierTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    GroupName = field("GroupName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupIdentifierTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupIdentifierTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassicLoadBalancer:
    boto3_raw_data: "type_defs.ClassicLoadBalancerTypeDef" = dataclasses.field()

    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassicLoadBalancerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassicLoadBalancerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientCertificateRevocationListStatus:
    boto3_raw_data: "type_defs.ClientCertificateRevocationListStatusTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ClientCertificateRevocationListStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientCertificateRevocationListStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientConnectOptions:
    boto3_raw_data: "type_defs.ClientConnectOptionsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")
    LambdaFunctionArn = field("LambdaFunctionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientConnectOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientConnectOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnEndpointAttributeStatus:
    boto3_raw_data: "type_defs.ClientVpnEndpointAttributeStatusTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClientVpnEndpointAttributeStatusTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnEndpointAttributeStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientLoginBannerOptions:
    boto3_raw_data: "type_defs.ClientLoginBannerOptionsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")
    BannerText = field("BannerText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientLoginBannerOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientLoginBannerOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientLoginBannerResponseOptions:
    boto3_raw_data: "type_defs.ClientLoginBannerResponseOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    BannerText = field("BannerText")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClientLoginBannerResponseOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientLoginBannerResponseOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientRouteEnforcementOptions:
    boto3_raw_data: "type_defs.ClientRouteEnforcementOptionsTypeDef" = (
        dataclasses.field()
    )

    Enforced = field("Enforced")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClientRouteEnforcementOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientRouteEnforcementOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientRouteEnforcementResponseOptions:
    boto3_raw_data: "type_defs.ClientRouteEnforcementResponseOptionsTypeDef" = (
        dataclasses.field()
    )

    Enforced = field("Enforced")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ClientRouteEnforcementResponseOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientRouteEnforcementResponseOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DirectoryServiceAuthenticationRequest:
    boto3_raw_data: "type_defs.DirectoryServiceAuthenticationRequestTypeDef" = (
        dataclasses.field()
    )

    DirectoryId = field("DirectoryId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DirectoryServiceAuthenticationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DirectoryServiceAuthenticationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FederatedAuthenticationRequest:
    boto3_raw_data: "type_defs.FederatedAuthenticationRequestTypeDef" = (
        dataclasses.field()
    )

    SAMLProviderArn = field("SAMLProviderArn")
    SelfServiceSAMLProviderArn = field("SelfServiceSAMLProviderArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FederatedAuthenticationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FederatedAuthenticationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DirectoryServiceAuthentication:
    boto3_raw_data: "type_defs.DirectoryServiceAuthenticationTypeDef" = (
        dataclasses.field()
    )

    DirectoryId = field("DirectoryId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DirectoryServiceAuthenticationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DirectoryServiceAuthenticationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FederatedAuthentication:
    boto3_raw_data: "type_defs.FederatedAuthenticationTypeDef" = dataclasses.field()

    SamlProviderArn = field("SamlProviderArn")
    SelfServiceSamlProviderArn = field("SelfServiceSamlProviderArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FederatedAuthenticationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FederatedAuthenticationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnConnectionStatus:
    boto3_raw_data: "type_defs.ClientVpnConnectionStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientVpnConnectionStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnConnectionStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnEndpointStatus:
    boto3_raw_data: "type_defs.ClientVpnEndpointStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientVpnEndpointStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnEndpointStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionLogResponseOptions:
    boto3_raw_data: "type_defs.ConnectionLogResponseOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    CloudwatchLogGroup = field("CloudwatchLogGroup")
    CloudwatchLogStream = field("CloudwatchLogStream")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConnectionLogResponseOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionLogResponseOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnRouteStatus:
    boto3_raw_data: "type_defs.ClientVpnRouteStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientVpnRouteStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnRouteStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CloudWatchLogOptionsSpecification:
    boto3_raw_data: "type_defs.CloudWatchLogOptionsSpecificationTypeDef" = (
        dataclasses.field()
    )

    LogEnabled = field("LogEnabled")
    LogGroupArn = field("LogGroupArn")
    LogOutputFormat = field("LogOutputFormat")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CloudWatchLogOptionsSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CloudWatchLogOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CloudWatchLogOptions:
    boto3_raw_data: "type_defs.CloudWatchLogOptionsTypeDef" = dataclasses.field()

    LogEnabled = field("LogEnabled")
    LogGroupArn = field("LogGroupArn")
    LogOutputFormat = field("LogOutputFormat")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CloudWatchLogOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CloudWatchLogOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CoipAddressUsage:
    boto3_raw_data: "type_defs.CoipAddressUsageTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    AwsAccountId = field("AwsAccountId")
    AwsService = field("AwsService")
    CoIp = field("CoIp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CoipAddressUsageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CoipAddressUsageTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CoipCidr:
    boto3_raw_data: "type_defs.CoipCidrTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    CoipPoolId = field("CoipPoolId")
    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CoipCidrTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CoipCidrTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfirmProductInstanceRequest:
    boto3_raw_data: "type_defs.ConfirmProductInstanceRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    ProductCode = field("ProductCode")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConfirmProductInstanceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfirmProductInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionLogOptions:
    boto3_raw_data: "type_defs.ConnectionLogOptionsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")
    CloudwatchLogGroup = field("CloudwatchLogGroup")
    CloudwatchLogStream = field("CloudwatchLogStream")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConnectionLogOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionLogOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionNotification:
    boto3_raw_data: "type_defs.ConnectionNotificationTypeDef" = dataclasses.field()

    ConnectionNotificationId = field("ConnectionNotificationId")
    ServiceId = field("ServiceId")
    VpcEndpointId = field("VpcEndpointId")
    ConnectionNotificationType = field("ConnectionNotificationType")
    ConnectionNotificationArn = field("ConnectionNotificationArn")
    ConnectionEvents = field("ConnectionEvents")
    ConnectionNotificationState = field("ConnectionNotificationState")
    ServiceRegion = field("ServiceRegion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConnectionNotificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionNotificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionTrackingConfiguration:
    boto3_raw_data: "type_defs.ConnectionTrackingConfigurationTypeDef" = (
        dataclasses.field()
    )

    TcpEstablishedTimeout = field("TcpEstablishedTimeout")
    UdpStreamTimeout = field("UdpStreamTimeout")
    UdpTimeout = field("UdpTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConnectionTrackingConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionTrackingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionTrackingSpecificationRequest:
    boto3_raw_data: "type_defs.ConnectionTrackingSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    TcpEstablishedTimeout = field("TcpEstablishedTimeout")
    UdpStreamTimeout = field("UdpStreamTimeout")
    UdpTimeout = field("UdpTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConnectionTrackingSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionTrackingSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionTrackingSpecificationResponse:
    boto3_raw_data: "type_defs.ConnectionTrackingSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    TcpEstablishedTimeout = field("TcpEstablishedTimeout")
    UdpStreamTimeout = field("UdpStreamTimeout")
    UdpTimeout = field("UdpTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConnectionTrackingSpecificationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionTrackingSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectionTrackingSpecification:
    boto3_raw_data: "type_defs.ConnectionTrackingSpecificationTypeDef" = (
        dataclasses.field()
    )

    TcpEstablishedTimeout = field("TcpEstablishedTimeout")
    UdpTimeout = field("UdpTimeout")
    UdpStreamTimeout = field("UdpStreamTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConnectionTrackingSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectionTrackingSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopyFpgaImageRequest:
    boto3_raw_data: "type_defs.CopyFpgaImageRequestTypeDef" = dataclasses.field()

    SourceFpgaImageId = field("SourceFpgaImageId")
    SourceRegion = field("SourceRegion")
    DryRun = field("DryRun")
    Description = field("Description")
    Name = field("Name")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CopyFpgaImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopyFpgaImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CpuOptionsRequest:
    boto3_raw_data: "type_defs.CpuOptionsRequestTypeDef" = dataclasses.field()

    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")
    AmdSevSnp = field("AmdSevSnp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CpuOptionsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CpuOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CpuOptions:
    boto3_raw_data: "type_defs.CpuOptionsTypeDef" = dataclasses.field()

    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")
    AmdSevSnp = field("AmdSevSnp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CpuOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CpuOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PerformanceFactorReference:
    boto3_raw_data: "type_defs.PerformanceFactorReferenceTypeDef" = dataclasses.field()

    InstanceFamily = field("InstanceFamily")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PerformanceFactorReferenceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PerformanceFactorReferenceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PerformanceFactorReferenceRequest:
    boto3_raw_data: "type_defs.PerformanceFactorReferenceRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceFamily = field("InstanceFamily")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PerformanceFactorReferenceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PerformanceFactorReferenceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservationFleetInstanceSpecification:
    boto3_raw_data: "type_defs.ReservationFleetInstanceSpecificationTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    InstancePlatform = field("InstancePlatform")
    Weight = field("Weight")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    EbsOptimized = field("EbsOptimized")
    Priority = field("Priority")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReservationFleetInstanceSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservationFleetInstanceSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClientVpnRouteRequest:
    boto3_raw_data: "type_defs.CreateClientVpnRouteRequestTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    TargetVpcSubnetId = field("TargetVpcSubnetId")
    Description = field("Description")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateClientVpnRouteRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClientVpnRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCoipCidrRequest:
    boto3_raw_data: "type_defs.CreateCoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    CoipPoolId = field("CoipPoolId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDefaultSubnetRequest:
    boto3_raw_data: "type_defs.CreateDefaultSubnetRequestTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    DryRun = field("DryRun")
    Ipv6Native = field("Ipv6Native")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDefaultSubnetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDefaultSubnetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDefaultVpcRequest:
    boto3_raw_data: "type_defs.CreateDefaultVpcRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDefaultVpcRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDefaultVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NewDhcpConfiguration:
    boto3_raw_data: "type_defs.NewDhcpConfigurationTypeDef" = dataclasses.field()

    Key = field("Key")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NewDhcpConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NewDhcpConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetCapacitySpecificationRequest:
    boto3_raw_data: "type_defs.TargetCapacitySpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    TotalTargetCapacity = field("TotalTargetCapacity")
    OnDemandTargetCapacity = field("OnDemandTargetCapacity")
    SpotTargetCapacity = field("SpotTargetCapacity")
    DefaultTargetCapacityType = field("DefaultTargetCapacityType")
    TargetCapacityUnitType = field("TargetCapacityUnitType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TargetCapacitySpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetCapacitySpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DestinationOptionsRequest:
    boto3_raw_data: "type_defs.DestinationOptionsRequestTypeDef" = dataclasses.field()

    FileFormat = field("FileFormat")
    HiveCompatiblePartitions = field("HiveCompatiblePartitions")
    PerHourPartition = field("PerHourPartition")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DestinationOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DestinationOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StorageLocation:
    boto3_raw_data: "type_defs.StorageLocationTypeDef" = dataclasses.field()

    Bucket = field("Bucket")
    Key = field("Key")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StorageLocationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StorageLocationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowTimeRangeRequest:
    boto3_raw_data: "type_defs.InstanceEventWindowTimeRangeRequestTypeDef" = (
        dataclasses.field()
    )

    StartWeekDay = field("StartWeekDay")
    StartHour = field("StartHour")
    EndWeekDay = field("EndWeekDay")
    EndHour = field("EndHour")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceEventWindowTimeRangeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowTimeRangeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportToS3TaskSpecification:
    boto3_raw_data: "type_defs.ExportToS3TaskSpecificationTypeDef" = dataclasses.field()

    DiskImageFormat = field("DiskImageFormat")
    ContainerFormat = field("ContainerFormat")
    S3Bucket = field("S3Bucket")
    S3Prefix = field("S3Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportToS3TaskSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportToS3TaskSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPoolSourceResourceRequest:
    boto3_raw_data: "type_defs.IpamPoolSourceResourceRequestTypeDef" = (
        dataclasses.field()
    )

    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceRegion = field("ResourceRegion")
    ResourceOwner = field("ResourceOwner")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IpamPoolSourceResourceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPoolSourceResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestIpamResourceTag:
    boto3_raw_data: "type_defs.RequestIpamResourceTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestIpamResourceTagTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestIpamResourceTagTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OperatorRequest:
    boto3_raw_data: "type_defs.OperatorRequestTypeDef" = dataclasses.field()

    Principal = field("Principal")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OperatorRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OperatorRequestTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteRequest:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    DryRun = field("DryRun")
    NetworkInterfaceId = field("NetworkInterfaceId")
    DestinationPrefixListId = field("DestinationPrefixListId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateLocalGatewayRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayRoute:
    boto3_raw_data: "type_defs.LocalGatewayRouteTypeDef" = dataclasses.field()

    DestinationCidrBlock = field("DestinationCidrBlock")
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    Type = field("Type")
    State = field("State")
    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    LocalGatewayRouteTableArn = field("LocalGatewayRouteTableArn")
    OwnerId = field("OwnerId")
    SubnetId = field("SubnetId")
    CoipPoolId = field("CoipPoolId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    DestinationPrefixListId = field("DestinationPrefixListId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LocalGatewayRouteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalGatewayRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MacSystemIntegrityProtectionConfigurationRequest:
    boto3_raw_data: (
        "type_defs.MacSystemIntegrityProtectionConfigurationRequestTypeDef"
    ) = dataclasses.field()

    AppleInternal = field("AppleInternal")
    BaseSystem = field("BaseSystem")
    DebuggingRestrictions = field("DebuggingRestrictions")
    DTraceRestrictions = field("DTraceRestrictions")
    FilesystemProtections = field("FilesystemProtections")
    KextSigning = field("KextSigning")
    NvramProtections = field("NvramProtections")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.MacSystemIntegrityProtectionConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.MacSystemIntegrityProtectionConfigurationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IcmpTypeCode:
    boto3_raw_data: "type_defs.IcmpTypeCodeTypeDef" = dataclasses.field()

    Code = field("Code")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IcmpTypeCodeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IcmpTypeCodeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfacePermissionRequest:
    boto3_raw_data: "type_defs.CreateNetworkInterfacePermissionRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Permission = field("Permission")
    AwsAccountId = field("AwsAccountId")
    AwsService = field("AwsService")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInterfacePermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInterfacePermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceIpv6Address:
    boto3_raw_data: "type_defs.InstanceIpv6AddressTypeDef" = dataclasses.field()

    Ipv6Address = field("Ipv6Address")
    IsPrimaryIpv6 = field("IsPrimaryIpv6")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceIpv6AddressTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceIpv6AddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv4PrefixSpecificationRequest:
    boto3_raw_data: "type_defs.Ipv4PrefixSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    Ipv4Prefix = field("Ipv4Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Ipv4PrefixSpecificationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv4PrefixSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6PrefixSpecificationRequest:
    boto3_raw_data: "type_defs.Ipv6PrefixSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    Ipv6Prefix = field("Ipv6Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Ipv6PrefixSpecificationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv6PrefixSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateIpAddressSpecification:
    boto3_raw_data: "type_defs.PrivateIpAddressSpecificationTypeDef" = (
        dataclasses.field()
    )

    Primary = field("Primary")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PrivateIpAddressSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateIpAddressSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PriceScheduleSpecification:
    boto3_raw_data: "type_defs.PriceScheduleSpecificationTypeDef" = dataclasses.field()

    Term = field("Term")
    Price = field("Price")
    CurrencyCode = field("CurrencyCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PriceScheduleSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PriceScheduleSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteRequestRouteTableCreateRoute:
    boto3_raw_data: "type_defs.CreateRouteRequestRouteTableCreateRouteTypeDef" = (
        dataclasses.field()
    )

    DestinationPrefixListId = field("DestinationPrefixListId")
    VpcEndpointId = field("VpcEndpointId")
    TransitGatewayId = field("TransitGatewayId")
    LocalGatewayId = field("LocalGatewayId")
    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    OdbNetworkArn = field("OdbNetworkArn")
    DryRun = field("DryRun")
    DestinationCidrBlock = field("DestinationCidrBlock")
    GatewayId = field("GatewayId")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    InstanceId = field("InstanceId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    NatGatewayId = field("NatGatewayId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateRouteRequestRouteTableCreateRouteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteRequestRouteTableCreateRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteRequest:
    boto3_raw_data: "type_defs.CreateRouteRequestTypeDef" = dataclasses.field()

    RouteTableId = field("RouteTableId")
    DestinationPrefixListId = field("DestinationPrefixListId")
    VpcEndpointId = field("VpcEndpointId")
    TransitGatewayId = field("TransitGatewayId")
    LocalGatewayId = field("LocalGatewayId")
    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    OdbNetworkArn = field("OdbNetworkArn")
    DryRun = field("DryRun")
    DestinationCidrBlock = field("DestinationCidrBlock")
    GatewayId = field("GatewayId")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    InstanceId = field("InstanceId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    NatGatewayId = field("NatGatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerBgpOptionsRequest:
    boto3_raw_data: "type_defs.RouteServerBgpOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    PeerAsn = field("PeerAsn")
    PeerLivenessDetection = field("PeerLivenessDetection")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerBgpOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerBgpOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceSpecification:
    boto3_raw_data: "type_defs.InstanceSpecificationTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    ExcludeBootVolume = field("ExcludeBootVolume")
    ExcludeDataVolumeIds = field("ExcludeDataVolumeIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSpotDatafeedSubscriptionRequest:
    boto3_raw_data: "type_defs.CreateSpotDatafeedSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    Bucket = field("Bucket")
    DryRun = field("DryRun")
    Prefix = field("Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSpotDatafeedSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSpotDatafeedSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3ObjectTag:
    boto3_raw_data: "type_defs.S3ObjectTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3ObjectTagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3ObjectTagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorPortRangeRequest:
    boto3_raw_data: "type_defs.TrafficMirrorPortRangeRequestTypeDef" = (
        dataclasses.field()
    )

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TrafficMirrorPortRangeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorPortRangeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayConnectRequestBgpOptions:
    boto3_raw_data: "type_defs.TransitGatewayConnectRequestBgpOptionsTypeDef" = (
        dataclasses.field()
    )

    PeerAsn = field("PeerAsn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayConnectRequestBgpOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayConnectRequestBgpOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayConnectRequestOptions:
    boto3_raw_data: "type_defs.CreateTransitGatewayConnectRequestOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayConnectRequestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayConnectRequestOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayMulticastDomainRequestOptions:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayMulticastDomainRequestOptionsTypeDef"
    ) = dataclasses.field()

    Igmpv2Support = field("Igmpv2Support")
    StaticSourcesSupport = field("StaticSourcesSupport")
    AutoAcceptSharedAssociations = field("AutoAcceptSharedAssociations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayMulticastDomainRequestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayMulticastDomainRequestOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPeeringAttachmentRequestOptions:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayPeeringAttachmentRequestOptionsTypeDef"
    ) = dataclasses.field()

    DynamicRouting = field("DynamicRouting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPeeringAttachmentRequestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayPeeringAttachmentRequestOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPrefixListReferenceRequest:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayPrefixListReferenceRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    PrefixListId = field("PrefixListId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    Blackhole = field("Blackhole")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPrefixListReferenceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayPrefixListReferenceRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRequestOptions:
    boto3_raw_data: "type_defs.TransitGatewayRequestOptionsTypeDef" = (
        dataclasses.field()
    )

    AmazonSideAsn = field("AmazonSideAsn")
    AutoAcceptSharedAttachments = field("AutoAcceptSharedAttachments")
    DefaultRouteTableAssociation = field("DefaultRouteTableAssociation")
    DefaultRouteTablePropagation = field("DefaultRouteTablePropagation")
    VpnEcmpSupport = field("VpnEcmpSupport")
    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    MulticastSupport = field("MulticastSupport")
    TransitGatewayCidrBlocks = field("TransitGatewayCidrBlocks")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayRequestOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRequestOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    DestinationCidrBlock = field("DestinationCidrBlock")
    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    Blackhole = field("Blackhole")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTransitGatewayRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayVpcAttachmentRequestOptions:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayVpcAttachmentRequestOptionsTypeDef"
    ) = dataclasses.field()

    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    Ipv6Support = field("Ipv6Support")
    ApplianceModeSupport = field("ApplianceModeSupport")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayVpcAttachmentRequestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayVpcAttachmentRequestOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointPortRange:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointPortRangeTypeDef" = (
        dataclasses.field()
    )

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointPortRangeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointPortRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointRdsOptions:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointRdsOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")
    Port = field("Port")
    RdsDbInstanceArn = field("RdsDbInstanceArn")
    RdsDbClusterArn = field("RdsDbClusterArn")
    RdsDbProxyArn = field("RdsDbProxyArn")
    RdsEndpoint = field("RdsEndpoint")
    SubnetIds = field("SubnetIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointRdsOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointRdsOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessSseSpecificationRequest:
    boto3_raw_data: "type_defs.VerifiedAccessSseSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    CustomerManagedKeyEnabled = field("CustomerManagedKeyEnabled")
    KmsKeyArn = field("KmsKeyArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessSseSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessSseSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessNativeApplicationOidcOptions:
    boto3_raw_data: (
        "type_defs.CreateVerifiedAccessNativeApplicationOidcOptionsTypeDef"
    ) = dataclasses.field()

    PublicSigningKeyEndpoint = field("PublicSigningKeyEndpoint")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessNativeApplicationOidcOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVerifiedAccessNativeApplicationOidcOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessTrustProviderDeviceOptions:
    boto3_raw_data: (
        "type_defs.CreateVerifiedAccessTrustProviderDeviceOptionsTypeDef"
    ) = dataclasses.field()

    TenantId = field("TenantId")
    PublicSigningKeyUrl = field("PublicSigningKeyUrl")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessTrustProviderDeviceOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVerifiedAccessTrustProviderDeviceOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessTrustProviderOidcOptions:
    boto3_raw_data: "type_defs.CreateVerifiedAccessTrustProviderOidcOptionsTypeDef" = (
        dataclasses.field()
    )

    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessTrustProviderOidcOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessTrustProviderOidcOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVolumePermission:
    boto3_raw_data: "type_defs.CreateVolumePermissionTypeDef" = dataclasses.field()

    UserId = field("UserId")
    Group = field("Group")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVolumePermissionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVolumePermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointConnectionNotificationRequest:
    boto3_raw_data: (
        "type_defs.CreateVpcEndpointConnectionNotificationRequestTypeDef"
    ) = dataclasses.field()

    ConnectionNotificationArn = field("ConnectionNotificationArn")
    ConnectionEvents = field("ConnectionEvents")
    DryRun = field("DryRun")
    ServiceId = field("ServiceId")
    VpcEndpointId = field("VpcEndpointId")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcEndpointConnectionNotificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVpcEndpointConnectionNotificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DnsOptionsSpecification:
    boto3_raw_data: "type_defs.DnsOptionsSpecificationTypeDef" = dataclasses.field()

    DnsRecordIpType = field("DnsRecordIpType")
    PrivateDnsOnlyForInboundResolverEndpoint = field(
        "PrivateDnsOnlyForInboundResolverEndpoint"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DnsOptionsSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DnsOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetConfiguration:
    boto3_raw_data: "type_defs.SubnetConfigurationTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    Ipv4 = field("Ipv4")
    Ipv6 = field("Ipv6")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubnetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpnConnectionRouteRequest:
    boto3_raw_data: "type_defs.CreateVpnConnectionRouteRequestTypeDef" = (
        dataclasses.field()
    )

    DestinationCidrBlock = field("DestinationCidrBlock")
    VpnConnectionId = field("VpnConnectionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateVpnConnectionRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpnConnectionRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreationDateConditionRequest:
    boto3_raw_data: "type_defs.CreationDateConditionRequestTypeDef" = (
        dataclasses.field()
    )

    MaximumDaysSinceCreated = field("MaximumDaysSinceCreated")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreationDateConditionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreationDateConditionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreationDateCondition:
    boto3_raw_data: "type_defs.CreationDateConditionTypeDef" = dataclasses.field()

    MaximumDaysSinceCreated = field("MaximumDaysSinceCreated")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreationDateConditionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreationDateConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreditSpecificationRequest:
    boto3_raw_data: "type_defs.CreditSpecificationRequestTypeDef" = dataclasses.field()

    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreditSpecificationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreditSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreditSpecification:
    boto3_raw_data: "type_defs.CreditSpecificationTypeDef" = dataclasses.field()

    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreditSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreditSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQuery:
    boto3_raw_data: "type_defs.DataQueryTypeDef" = dataclasses.field()

    Id = field("Id")
    Source = field("Source")
    Destination = field("Destination")
    Metric = field("Metric")
    Statistic = field("Statistic")
    Period = field("Period")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataQueryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataQueryTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricPoint:
    boto3_raw_data: "type_defs.MetricPointTypeDef" = dataclasses.field()

    StartDate = field("StartDate")
    EndDate = field("EndDate")
    Value = field("Value")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MetricPointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MetricPointTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCarrierGatewayRequest:
    boto3_raw_data: "type_defs.DeleteCarrierGatewayRequestTypeDef" = dataclasses.field()

    CarrierGatewayId = field("CarrierGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCarrierGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCarrierGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClientVpnEndpointRequest:
    boto3_raw_data: "type_defs.DeleteClientVpnEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteClientVpnEndpointRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClientVpnEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClientVpnRouteRequest:
    boto3_raw_data: "type_defs.DeleteClientVpnRouteRequestTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    TargetVpcSubnetId = field("TargetVpcSubnetId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteClientVpnRouteRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClientVpnRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCoipCidrRequest:
    boto3_raw_data: "type_defs.DeleteCoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    CoipPoolId = field("CoipPoolId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCoipPoolRequest:
    boto3_raw_data: "type_defs.DeleteCoipPoolRequestTypeDef" = dataclasses.field()

    CoipPoolId = field("CoipPoolId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCoipPoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCoipPoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCustomerGatewayRequest:
    boto3_raw_data: "type_defs.DeleteCustomerGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    CustomerGatewayId = field("CustomerGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCustomerGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCustomerGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDhcpOptionsRequestDhcpOptionsDelete:
    boto3_raw_data: "type_defs.DeleteDhcpOptionsRequestDhcpOptionsDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDhcpOptionsRequestDhcpOptionsDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDhcpOptionsRequestDhcpOptionsDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDhcpOptionsRequest:
    boto3_raw_data: "type_defs.DeleteDhcpOptionsRequestTypeDef" = dataclasses.field()

    DhcpOptionsId = field("DhcpOptionsId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDhcpOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDhcpOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEgressOnlyInternetGatewayRequest:
    boto3_raw_data: "type_defs.DeleteEgressOnlyInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteEgressOnlyInternetGatewayRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEgressOnlyInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFleetError:
    boto3_raw_data: "type_defs.DeleteFleetErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteFleetErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFleetErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFleetSuccessItem:
    boto3_raw_data: "type_defs.DeleteFleetSuccessItemTypeDef" = dataclasses.field()

    CurrentFleetState = field("CurrentFleetState")
    PreviousFleetState = field("PreviousFleetState")
    FleetId = field("FleetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFleetSuccessItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFleetSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFleetsRequest:
    boto3_raw_data: "type_defs.DeleteFleetsRequestTypeDef" = dataclasses.field()

    FleetIds = field("FleetIds")
    TerminateInstances = field("TerminateInstances")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFleetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFleetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFlowLogsRequest:
    boto3_raw_data: "type_defs.DeleteFlowLogsRequestTypeDef" = dataclasses.field()

    FlowLogIds = field("FlowLogIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFlowLogsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFlowLogsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFpgaImageRequest:
    boto3_raw_data: "type_defs.DeleteFpgaImageRequestTypeDef" = dataclasses.field()

    FpgaImageId = field("FpgaImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFpgaImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFpgaImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteImageUsageReportRequest:
    boto3_raw_data: "type_defs.DeleteImageUsageReportRequestTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteImageUsageReportRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteImageUsageReportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInstanceConnectEndpointRequest:
    boto3_raw_data: "type_defs.DeleteInstanceConnectEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceConnectEndpointId = field("InstanceConnectEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteInstanceConnectEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInstanceConnectEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInstanceEventWindowRequest:
    boto3_raw_data: "type_defs.DeleteInstanceEventWindowRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceEventWindowId = field("InstanceEventWindowId")
    DryRun = field("DryRun")
    ForceDelete = field("ForceDelete")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteInstanceEventWindowRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInstanceEventWindowRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowStateChange:
    boto3_raw_data: "type_defs.InstanceEventWindowStateChangeTypeDef" = (
        dataclasses.field()
    )

    InstanceEventWindowId = field("InstanceEventWindowId")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceEventWindowStateChangeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowStateChangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInternetGatewayRequestInternetGatewayDelete:
    boto3_raw_data: (
        "type_defs.DeleteInternetGatewayRequestInternetGatewayDeleteTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteInternetGatewayRequestInternetGatewayDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteInternetGatewayRequestInternetGatewayDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInternetGatewayRequest:
    boto3_raw_data: "type_defs.DeleteInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    InternetGatewayId = field("InternetGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteInternetGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamExternalResourceVerificationTokenRequest:
    boto3_raw_data: (
        "type_defs.DeleteIpamExternalResourceVerificationTokenRequestTypeDef"
    ) = dataclasses.field()

    IpamExternalResourceVerificationTokenId = field(
        "IpamExternalResourceVerificationTokenId"
    )
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIpamExternalResourceVerificationTokenRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteIpamExternalResourceVerificationTokenRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamPoolRequest:
    boto3_raw_data: "type_defs.DeleteIpamPoolRequestTypeDef" = dataclasses.field()

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    Cascade = field("Cascade")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamPoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamPoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamRequest:
    boto3_raw_data: "type_defs.DeleteIpamRequestTypeDef" = dataclasses.field()

    IpamId = field("IpamId")
    DryRun = field("DryRun")
    Cascade = field("Cascade")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamResourceDiscoveryRequest:
    boto3_raw_data: "type_defs.DeleteIpamResourceDiscoveryRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIpamResourceDiscoveryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamResourceDiscoveryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamScopeRequest:
    boto3_raw_data: "type_defs.DeleteIpamScopeRequestTypeDef" = dataclasses.field()

    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamScopeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamScopeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteKeyPairRequestKeyPairDelete:
    boto3_raw_data: "type_defs.DeleteKeyPairRequestKeyPairDeleteTypeDef" = (
        dataclasses.field()
    )

    KeyPairId = field("KeyPairId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteKeyPairRequestKeyPairDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteKeyPairRequestKeyPairDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteKeyPairRequestKeyPairInfoDelete:
    boto3_raw_data: "type_defs.DeleteKeyPairRequestKeyPairInfoDeleteTypeDef" = (
        dataclasses.field()
    )

    KeyPairId = field("KeyPairId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteKeyPairRequestKeyPairInfoDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteKeyPairRequestKeyPairInfoDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteKeyPairRequest:
    boto3_raw_data: "type_defs.DeleteKeyPairRequestTypeDef" = dataclasses.field()

    KeyName = field("KeyName")
    KeyPairId = field("KeyPairId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteKeyPairRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteKeyPairRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateRequest:
    boto3_raw_data: "type_defs.DeleteLaunchTemplateRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteLaunchTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLaunchTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateVersionsRequest:
    boto3_raw_data: "type_defs.DeleteLaunchTemplateVersionsRequestTypeDef" = (
        dataclasses.field()
    )

    Versions = field("Versions")
    DryRun = field("DryRun")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLaunchTemplateVersionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLaunchTemplateVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseError:
    boto3_raw_data: "type_defs.ResponseErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResponseErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResponseErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateVersionsResponseSuccessItem:
    boto3_raw_data: (
        "type_defs.DeleteLaunchTemplateVersionsResponseSuccessItemTypeDef"
    ) = dataclasses.field()

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    VersionNumber = field("VersionNumber")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLaunchTemplateVersionsResponseSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLaunchTemplateVersionsResponseSuccessItemTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteRequest:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    DryRun = field("DryRun")
    DestinationPrefixListId = field("DestinationPrefixListId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteLocalGatewayRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef" = (dataclasses.field())

    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = field(
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
    )
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableVpcAssociationRequest:
    boto3_raw_data: (
        "type_defs.DeleteLocalGatewayRouteTableVpcAssociationRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableVpcAssociationId = field(
        "LocalGatewayRouteTableVpcAssociationId"
    )
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableVpcAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLocalGatewayRouteTableVpcAssociationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayVirtualInterfaceGroupRequest:
    boto3_raw_data: (
        "type_defs.DeleteLocalGatewayVirtualInterfaceGroupRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayVirtualInterfaceGroupRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLocalGatewayVirtualInterfaceGroupRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayVirtualInterfaceRequest:
    boto3_raw_data: "type_defs.DeleteLocalGatewayVirtualInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayVirtualInterfaceId = field("LocalGatewayVirtualInterfaceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayVirtualInterfaceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayVirtualInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteManagedPrefixListRequest:
    boto3_raw_data: "type_defs.DeleteManagedPrefixListRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteManagedPrefixListRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteManagedPrefixListRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNatGatewayRequest:
    boto3_raw_data: "type_defs.DeleteNatGatewayRequestTypeDef" = dataclasses.field()

    NatGatewayId = field("NatGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNatGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNatGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkAclEntryRequestNetworkAclDeleteEntry:
    boto3_raw_data: (
        "type_defs.DeleteNetworkAclEntryRequestNetworkAclDeleteEntryTypeDef"
    ) = dataclasses.field()

    RuleNumber = field("RuleNumber")
    Egress = field("Egress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkAclEntryRequestNetworkAclDeleteEntryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteNetworkAclEntryRequestNetworkAclDeleteEntryTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkAclEntryRequest:
    boto3_raw_data: "type_defs.DeleteNetworkAclEntryRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkAclId = field("NetworkAclId")
    RuleNumber = field("RuleNumber")
    Egress = field("Egress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNetworkAclEntryRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkAclEntryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkAclRequestNetworkAclDelete:
    boto3_raw_data: "type_defs.DeleteNetworkAclRequestNetworkAclDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkAclRequestNetworkAclDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkAclRequestNetworkAclDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkAclRequest:
    boto3_raw_data: "type_defs.DeleteNetworkAclRequestTypeDef" = dataclasses.field()

    NetworkAclId = field("NetworkAclId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNetworkAclRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkAclRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAccessScopeAnalysisRequest:
    boto3_raw_data: (
        "type_defs.DeleteNetworkInsightsAccessScopeAnalysisRequestTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAccessScopeAnalysisRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteNetworkInsightsAccessScopeAnalysisRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAccessScopeRequest:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsAccessScopeRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAccessScopeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsAccessScopeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAnalysisRequest:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsAnalysisRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAnalysisId = field("NetworkInsightsAnalysisId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAnalysisRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsPathRequest:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsPathRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsPathId = field("NetworkInsightsPathId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteNetworkInsightsPathRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsPathRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInterfacePermissionRequest:
    boto3_raw_data: "type_defs.DeleteNetworkInterfacePermissionRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfacePermissionId = field("NetworkInterfacePermissionId")
    Force = field("Force")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInterfacePermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInterfacePermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInterfaceRequestNetworkInterfaceDelete:
    boto3_raw_data: (
        "type_defs.DeleteNetworkInterfaceRequestNetworkInterfaceDeleteTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInterfaceRequestNetworkInterfaceDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteNetworkInterfaceRequestNetworkInterfaceDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInterfaceRequest:
    boto3_raw_data: "type_defs.DeleteNetworkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteNetworkInterfaceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePlacementGroupRequestPlacementGroupDelete:
    boto3_raw_data: (
        "type_defs.DeletePlacementGroupRequestPlacementGroupDeleteTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeletePlacementGroupRequestPlacementGroupDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeletePlacementGroupRequestPlacementGroupDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePlacementGroupRequest:
    boto3_raw_data: "type_defs.DeletePlacementGroupRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePlacementGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePlacementGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePublicIpv4PoolRequest:
    boto3_raw_data: "type_defs.DeletePublicIpv4PoolRequestTypeDef" = dataclasses.field()

    PoolId = field("PoolId")
    DryRun = field("DryRun")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePublicIpv4PoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePublicIpv4PoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteQueuedReservedInstancesError:
    boto3_raw_data: "type_defs.DeleteQueuedReservedInstancesErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteQueuedReservedInstancesErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteQueuedReservedInstancesErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteQueuedReservedInstancesRequest:
    boto3_raw_data: "type_defs.DeleteQueuedReservedInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesIds = field("ReservedInstancesIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteQueuedReservedInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteQueuedReservedInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SuccessfulQueuedPurchaseDeletion:
    boto3_raw_data: "type_defs.SuccessfulQueuedPurchaseDeletionTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesId = field("ReservedInstancesId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SuccessfulQueuedPurchaseDeletionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SuccessfulQueuedPurchaseDeletionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteRequestRouteDelete:
    boto3_raw_data: "type_defs.DeleteRouteRequestRouteDeleteTypeDef" = (
        dataclasses.field()
    )

    DestinationPrefixListId = field("DestinationPrefixListId")
    DryRun = field("DryRun")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteRouteRequestRouteDeleteTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteRequestRouteDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteRequest:
    boto3_raw_data: "type_defs.DeleteRouteRequestTypeDef" = dataclasses.field()

    RouteTableId = field("RouteTableId")
    DestinationPrefixListId = field("DestinationPrefixListId")
    DryRun = field("DryRun")
    DestinationCidrBlock = field("DestinationCidrBlock")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerEndpointRequest:
    boto3_raw_data: "type_defs.DeleteRouteServerEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerEndpointId = field("RouteServerEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteRouteServerEndpointRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerPeerRequest:
    boto3_raw_data: "type_defs.DeleteRouteServerPeerRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerPeerId = field("RouteServerPeerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteServerPeerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerPeerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerRequest:
    boto3_raw_data: "type_defs.DeleteRouteServerRequestTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteServerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteTableRequestRouteTableDelete:
    boto3_raw_data: "type_defs.DeleteRouteTableRequestRouteTableDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteRouteTableRequestRouteTableDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteTableRequestRouteTableDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteTableRequest:
    boto3_raw_data: "type_defs.DeleteRouteTableRequestTypeDef" = dataclasses.field()

    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteTableRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSecurityGroupRequestSecurityGroupDelete:
    boto3_raw_data: "type_defs.DeleteSecurityGroupRequestSecurityGroupDeleteTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteSecurityGroupRequestSecurityGroupDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSecurityGroupRequestSecurityGroupDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSecurityGroupRequest:
    boto3_raw_data: "type_defs.DeleteSecurityGroupRequestTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    GroupName = field("GroupName")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSecurityGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSecurityGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSnapshotRequestSnapshotDelete:
    boto3_raw_data: "type_defs.DeleteSnapshotRequestSnapshotDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteSnapshotRequestSnapshotDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSnapshotRequestSnapshotDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSnapshotRequest:
    boto3_raw_data: "type_defs.DeleteSnapshotRequestTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSnapshotReturnCode:
    boto3_raw_data: "type_defs.DeleteSnapshotReturnCodeTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    ReturnCode = field("ReturnCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSnapshotReturnCodeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSnapshotReturnCodeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSpotDatafeedSubscriptionRequest:
    boto3_raw_data: "type_defs.DeleteSpotDatafeedSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteSpotDatafeedSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSpotDatafeedSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSubnetCidrReservationRequest:
    boto3_raw_data: "type_defs.DeleteSubnetCidrReservationRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetCidrReservationId = field("SubnetCidrReservationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteSubnetCidrReservationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSubnetCidrReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSubnetRequestSubnetDelete:
    boto3_raw_data: "type_defs.DeleteSubnetRequestSubnetDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteSubnetRequestSubnetDeleteTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSubnetRequestSubnetDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSubnetRequest:
    boto3_raw_data: "type_defs.DeleteSubnetRequestTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSubnetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSubnetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTagsRequestTagDelete:
    boto3_raw_data: "type_defs.DeleteTagsRequestTagDeleteTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTagsRequestTagDeleteTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTagsRequestTagDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorFilterRequest:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorFilterRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTrafficMirrorFilterRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorFilterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorFilterRuleRequest:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorFilterRuleRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterRuleId = field("TrafficMirrorFilterRuleId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTrafficMirrorFilterRuleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorFilterRuleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorSessionRequest:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorSessionRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorSessionId = field("TrafficMirrorSessionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTrafficMirrorSessionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorSessionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorTargetRequest:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorTargetRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorTargetId = field("TrafficMirrorTargetId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTrafficMirrorTargetRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorTargetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayConnectPeerRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayConnectPeerRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayConnectPeerId = field("TransitGatewayConnectPeerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayConnectPeerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayConnectPeerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayConnectRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayConnectRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayConnectRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayConnectRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayMulticastDomainRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayMulticastDomainRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayMulticastDomainRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayMulticastDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPeeringAttachmentRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayPeeringAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPeeringAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayPeeringAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPolicyTableRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayPolicyTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPolicyTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayPolicyTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPrefixListReferenceRequest:
    boto3_raw_data: (
        "type_defs.DeleteTransitGatewayPrefixListReferenceRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPrefixListReferenceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteTransitGatewayPrefixListReferenceRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayRequestTypeDef" = dataclasses.field()

    TransitGatewayId = field("TransitGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTransitGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTransitGatewayRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteTableAnnouncementRequest:
    boto3_raw_data: (
        "type_defs.DeleteTransitGatewayRouteTableAnnouncementRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayRouteTableAnnouncementRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteTransitGatewayRouteTableAnnouncementRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayVpcAttachmentRequest:
    boto3_raw_data: "type_defs.DeleteTransitGatewayVpcAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayVpcAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayVpcAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessEndpointRequest:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessGroupRequest:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessGroupRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteVerifiedAccessGroupRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessInstanceRequest:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessInstanceRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessInstanceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessTrustProviderRequest:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessTrustProviderRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessTrustProviderRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessTrustProviderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVolumeRequest:
    boto3_raw_data: "type_defs.DeleteVolumeRequestTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVolumeRequestVolumeDelete:
    boto3_raw_data: "type_defs.DeleteVolumeRequestVolumeDeleteTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteVolumeRequestVolumeDeleteTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVolumeRequestVolumeDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcBlockPublicAccessExclusionRequest:
    boto3_raw_data: "type_defs.DeleteVpcBlockPublicAccessExclusionRequestTypeDef" = (
        dataclasses.field()
    )

    ExclusionId = field("ExclusionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcBlockPublicAccessExclusionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcBlockPublicAccessExclusionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointConnectionNotificationsRequest:
    boto3_raw_data: (
        "type_defs.DeleteVpcEndpointConnectionNotificationsRequestTypeDef"
    ) = dataclasses.field()

    ConnectionNotificationIds = field("ConnectionNotificationIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcEndpointConnectionNotificationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteVpcEndpointConnectionNotificationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointServiceConfigurationsRequest:
    boto3_raw_data: "type_defs.DeleteVpcEndpointServiceConfigurationsRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceIds = field("ServiceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcEndpointServiceConfigurationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcEndpointServiceConfigurationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointsRequest:
    boto3_raw_data: "type_defs.DeleteVpcEndpointsRequestTypeDef" = dataclasses.field()

    VpcEndpointIds = field("VpcEndpointIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVpcEndpointsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcPeeringConnectionRequest:
    boto3_raw_data: "type_defs.DeleteVpcPeeringConnectionRequestTypeDef" = (
        dataclasses.field()
    )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcPeeringConnectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcPeeringConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcPeeringConnectionRequestVpcPeeringConnectionDelete:
    boto3_raw_data: (
        "type_defs.DeleteVpcPeeringConnectionRequestVpcPeeringConnectionDeleteTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcPeeringConnectionRequestVpcPeeringConnectionDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteVpcPeeringConnectionRequestVpcPeeringConnectionDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcRequest:
    boto3_raw_data: "type_defs.DeleteVpcRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteVpcRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcRequestVpcDelete:
    boto3_raw_data: "type_defs.DeleteVpcRequestVpcDeleteTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVpcRequestVpcDeleteTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcRequestVpcDeleteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpnConnectionRequest:
    boto3_raw_data: "type_defs.DeleteVpnConnectionRequestTypeDef" = dataclasses.field()

    VpnConnectionId = field("VpnConnectionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVpnConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpnConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpnConnectionRouteRequest:
    boto3_raw_data: "type_defs.DeleteVpnConnectionRouteRequestTypeDef" = (
        dataclasses.field()
    )

    DestinationCidrBlock = field("DestinationCidrBlock")
    VpnConnectionId = field("VpnConnectionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteVpnConnectionRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpnConnectionRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpnGatewayRequest:
    boto3_raw_data: "type_defs.DeleteVpnGatewayRequestTypeDef" = dataclasses.field()

    VpnGatewayId = field("VpnGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVpnGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpnGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprecationTimeConditionRequest:
    boto3_raw_data: "type_defs.DeprecationTimeConditionRequestTypeDef" = (
        dataclasses.field()
    )

    MaximumDaysSinceDeprecated = field("MaximumDaysSinceDeprecated")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeprecationTimeConditionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprecationTimeConditionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprecationTimeCondition:
    boto3_raw_data: "type_defs.DeprecationTimeConditionTypeDef" = dataclasses.field()

    MaximumDaysSinceDeprecated = field("MaximumDaysSinceDeprecated")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeprecationTimeConditionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprecationTimeConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionByoipCidrRequest:
    boto3_raw_data: "type_defs.DeprovisionByoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeprovisionByoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionByoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionIpamByoasnRequest:
    boto3_raw_data: "type_defs.DeprovisionIpamByoasnRequestTypeDef" = (
        dataclasses.field()
    )

    IpamId = field("IpamId")
    Asn = field("Asn")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeprovisionIpamByoasnRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionIpamByoasnRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionIpamPoolCidrRequest:
    boto3_raw_data: "type_defs.DeprovisionIpamPoolCidrRequestTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    Cidr = field("Cidr")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeprovisionIpamPoolCidrRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionIpamPoolCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionPublicIpv4PoolCidrRequest:
    boto3_raw_data: "type_defs.DeprovisionPublicIpv4PoolCidrRequestTypeDef" = (
        dataclasses.field()
    )

    PoolId = field("PoolId")
    Cidr = field("Cidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeprovisionPublicIpv4PoolCidrRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionPublicIpv4PoolCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterImageRequestImageDeregister:
    boto3_raw_data: "type_defs.DeregisterImageRequestImageDeregisterTypeDef" = (
        dataclasses.field()
    )

    DeleteAssociatedSnapshots = field("DeleteAssociatedSnapshots")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterImageRequestImageDeregisterTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeregisterImageRequestImageDeregisterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterImageRequest:
    boto3_raw_data: "type_defs.DeregisterImageRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    DeleteAssociatedSnapshots = field("DeleteAssociatedSnapshots")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeregisterImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeregisterImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterInstanceTagAttributeRequest:
    boto3_raw_data: "type_defs.DeregisterInstanceTagAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    IncludeAllTagsOfInstance = field("IncludeAllTagsOfInstance")
    InstanceTagKeys = field("InstanceTagKeys")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterInstanceTagAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeregisterInstanceTagAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceTagNotificationAttribute:
    boto3_raw_data: "type_defs.InstanceTagNotificationAttributeTypeDef" = (
        dataclasses.field()
    )

    InstanceTagKeys = field("InstanceTagKeys")
    IncludeAllTagsOfInstance = field("IncludeAllTagsOfInstance")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceTagNotificationAttributeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceTagNotificationAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterTransitGatewayMulticastGroupMembersRequest:
    boto3_raw_data: (
        "type_defs.DeregisterTransitGatewayMulticastGroupMembersRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    GroupIpAddress = field("GroupIpAddress")
    NetworkInterfaceIds = field("NetworkInterfaceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterTransitGatewayMulticastGroupMembersRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterTransitGatewayMulticastGroupMembersRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDeregisteredGroupMembers:
    boto3_raw_data: (
        "type_defs.TransitGatewayMulticastDeregisteredGroupMembersTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    DeregisteredNetworkInterfaceIds = field("DeregisteredNetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastDeregisteredGroupMembersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.TransitGatewayMulticastDeregisteredGroupMembersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterTransitGatewayMulticastGroupSourcesRequest:
    boto3_raw_data: (
        "type_defs.DeregisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    GroupIpAddress = field("GroupIpAddress")
    NetworkInterfaceIds = field("NetworkInterfaceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDeregisteredGroupSources:
    boto3_raw_data: (
        "type_defs.TransitGatewayMulticastDeregisteredGroupSourcesTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    DeregisteredNetworkInterfaceIds = field("DeregisteredNetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastDeregisteredGroupSourcesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.TransitGatewayMulticastDeregisteredGroupSourcesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountAttributesRequest:
    boto3_raw_data: "type_defs.DescribeAccountAttributesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    AttributeNames = field("AttributeNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAccountAttributesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountAttributesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PaginatorConfig:
    boto3_raw_data: "type_defs.PaginatorConfigTypeDef" = dataclasses.field()

    MaxItems = field("MaxItems")
    PageSize = field("PageSize")
    StartingToken = field("StartingToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PaginatorConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PaginatorConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressTransfersRequest:
    boto3_raw_data: "type_defs.DescribeAddressTransfersRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationIds = field("AllocationIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAddressTransfersRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressTransfersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressesAttributeRequest:
    boto3_raw_data: "type_defs.DescribeAddressesAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationIds = field("AllocationIds")
    Attribute = field("Attribute")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAddressesAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressesAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Filter:
    boto3_raw_data: "type_defs.FilterTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAggregateIdFormatRequest:
    boto3_raw_data: "type_defs.DescribeAggregateIdFormatRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAggregateIdFormatRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAggregateIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IdFormat:
    boto3_raw_data: "type_defs.IdFormatTypeDef" = dataclasses.field()

    Deadline = field("Deadline")
    Resource = field("Resource")
    UseLongIds = field("UseLongIds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IdFormatTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IdFormatTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Subscription:
    boto3_raw_data: "type_defs.SubscriptionTypeDef" = dataclasses.field()

    Source = field("Source")
    Destination = field("Destination")
    Metric = field("Metric")
    Statistic = field("Statistic")
    Period = field("Period")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SubscriptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SubscriptionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaiterConfig:
    boto3_raw_data: "type_defs.WaiterConfigTypeDef" = dataclasses.field()

    Delay = field("Delay")
    MaxAttempts = field("MaxAttempts")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WaiterConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WaiterConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeByoipCidrsRequest:
    boto3_raw_data: "type_defs.DescribeByoipCidrsRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeByoipCidrsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeByoipCidrsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionOfferingsRequest:
    boto3_raw_data: (
        "type_defs.DescribeCapacityBlockExtensionOfferingsRequestTypeDef"
    ) = dataclasses.field()

    CapacityBlockExtensionDurationHours = field("CapacityBlockExtensionDurationHours")
    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityBlockExtensionOfferingsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeConversionTasksRequest:
    boto3_raw_data: "type_defs.DescribeConversionTasksRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ConversionTaskIds = field("ConversionTaskIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeConversionTasksRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeConversionTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeclarativePoliciesReportsRequest:
    boto3_raw_data: "type_defs.DescribeDeclarativePoliciesReportsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ReportIds = field("ReportIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDeclarativePoliciesReportsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeclarativePoliciesReportsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FastLaunchLaunchTemplateSpecificationResponse:
    boto3_raw_data: "type_defs.FastLaunchLaunchTemplateSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FastLaunchLaunchTemplateSpecificationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FastLaunchLaunchTemplateSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FastLaunchSnapshotConfigurationResponse:
    boto3_raw_data: "type_defs.FastLaunchSnapshotConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    TargetResourceCount = field("TargetResourceCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FastLaunchSnapshotConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FastLaunchSnapshotConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastSnapshotRestoreSuccessItem:
    boto3_raw_data: "type_defs.DescribeFastSnapshotRestoreSuccessItemTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    AvailabilityZone = field("AvailabilityZone")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    OwnerId = field("OwnerId")
    OwnerAlias = field("OwnerAlias")
    EnablingTime = field("EnablingTime")
    OptimizingTime = field("OptimizingTime")
    EnabledTime = field("EnabledTime")
    DisablingTime = field("DisablingTime")
    DisabledTime = field("DisabledTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastSnapshotRestoreSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastSnapshotRestoreSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFpgaImageAttributeRequest:
    boto3_raw_data: "type_defs.DescribeFpgaImageAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    FpgaImageId = field("FpgaImageId")
    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFpgaImageAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFpgaImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HostOffering:
    boto3_raw_data: "type_defs.HostOfferingTypeDef" = dataclasses.field()

    CurrencyCode = field("CurrencyCode")
    Duration = field("Duration")
    HourlyPrice = field("HourlyPrice")
    InstanceFamily = field("InstanceFamily")
    OfferingId = field("OfferingId")
    PaymentOption = field("PaymentOption")
    UpfrontPrice = field("UpfrontPrice")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HostOfferingTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HostOfferingTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIdFormatRequest:
    boto3_raw_data: "type_defs.DescribeIdFormatRequestTypeDef" = dataclasses.field()

    Resource = field("Resource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIdFormatRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIdentityIdFormatRequest:
    boto3_raw_data: "type_defs.DescribeIdentityIdFormatRequestTypeDef" = (
        dataclasses.field()
    )

    PrincipalArn = field("PrincipalArn")
    Resource = field("Resource")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeIdentityIdFormatRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIdentityIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageAttributeRequestImageDescribeAttribute:
    boto3_raw_data: (
        "type_defs.DescribeImageAttributeRequestImageDescribeAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageAttributeRequestImageDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeImageAttributeRequestImageDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageAttributeRequest:
    boto3_raw_data: "type_defs.DescribeImageAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    Attribute = field("Attribute")
    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageReference:
    boto3_raw_data: "type_defs.ImageReferenceTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    ResourceType = field("ResourceType")
    Arn = field("Arn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageReferenceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageReferenceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageReportEntry:
    boto3_raw_data: "type_defs.ImageUsageReportEntryTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")
    ReportId = field("ReportId")
    UsageCount = field("UsageCount")
    AccountId = field("AccountId")
    ImageId = field("ImageId")
    ReportCreationTime = field("ReportCreationTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageUsageReportEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageReportEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceAttributeRequestInstanceDescribeAttribute:
    boto3_raw_data: (
        "type_defs.DescribeInstanceAttributeRequestInstanceDescribeAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceAttributeRequestInstanceDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeInstanceAttributeRequestInstanceDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceAttributeRequest:
    boto3_raw_data: "type_defs.DescribeInstanceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInstanceAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceCreditSpecification:
    boto3_raw_data: "type_defs.InstanceCreditSpecificationTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceCreditSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceCreditSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceEventNotificationAttributesRequest:
    boto3_raw_data: (
        "type_defs.DescribeInstanceEventNotificationAttributesRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceEventNotificationAttributesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeInstanceEventNotificationAttributesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceTopology:
    boto3_raw_data: "type_defs.InstanceTopologyTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    InstanceType = field("InstanceType")
    GroupName = field("GroupName")
    NetworkNodes = field("NetworkNodes")
    AvailabilityZone = field("AvailabilityZone")
    ZoneId = field("ZoneId")
    CapacityBlockId = field("CapacityBlockId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceTopologyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceTopologyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceTypeOffering:
    boto3_raw_data: "type_defs.InstanceTypeOfferingTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    LocationType = field("LocationType")
    Location = field("Location")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceTypeOfferingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceTypeOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamByoasnRequest:
    boto3_raw_data: "type_defs.DescribeIpamByoasnRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamByoasnRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamByoasnRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LockedSnapshotsInfo:
    boto3_raw_data: "type_defs.LockedSnapshotsInfoTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    SnapshotId = field("SnapshotId")
    LockState = field("LockState")
    LockDuration = field("LockDuration")
    CoolOffPeriod = field("CoolOffPeriod")
    CoolOffPeriodExpiresOn = field("CoolOffPeriodExpiresOn")
    LockCreatedOn = field("LockCreatedOn")
    LockDurationStartTime = field("LockDurationStartTime")
    LockExpiresOn = field("LockExpiresOn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LockedSnapshotsInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LockedSnapshotsInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MacHost:
    boto3_raw_data: "type_defs.MacHostTypeDef" = dataclasses.field()

    HostId = field("HostId")
    MacOSLatestSupportedVersions = field("MacOSLatestSupportedVersions")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MacHostTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MacHostTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MovingAddressStatus:
    boto3_raw_data: "type_defs.MovingAddressStatusTypeDef" = dataclasses.field()

    MoveStatus = field("MoveStatus")
    PublicIp = field("PublicIp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MovingAddressStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MovingAddressStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfaceAttributeRequestNetworkInterfaceDescribeAttribute:
    boto3_raw_data: "type_defs.DescribeNetworkInterfaceAttributeRequestNetworkInterfaceDescribeAttributeTypeDef" = (dataclasses.field())

    DryRun = field("DryRun")
    Attribute = field("Attribute")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfaceAttributeRequestNetworkInterfaceDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInterfaceAttributeRequestNetworkInterfaceDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfaceAttributeRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInterfaceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    DryRun = field("DryRun")
    Attribute = field("Attribute")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfaceAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfaceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrefixList:
    boto3_raw_data: "type_defs.PrefixListTypeDef" = dataclasses.field()

    Cidrs = field("Cidrs")
    PrefixListId = field("PrefixListId")
    PrefixListName = field("PrefixListName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrefixListTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PrefixListTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrincipalIdFormatRequest:
    boto3_raw_data: "type_defs.DescribePrincipalIdFormatRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    Resources = field("Resources")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePrincipalIdFormatRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrincipalIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Region:
    boto3_raw_data: "type_defs.RegionTypeDef" = dataclasses.field()

    OptInStatus = field("OptInStatus")
    RegionName = field("RegionName")
    Endpoint = field("Endpoint")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RegionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RegionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstanceRecurrenceRequest:
    boto3_raw_data: "type_defs.ScheduledInstanceRecurrenceRequestTypeDef" = (
        dataclasses.field()
    )

    Frequency = field("Frequency")
    Interval = field("Interval")
    OccurrenceDays = field("OccurrenceDays")
    OccurrenceRelativeToEnd = field("OccurrenceRelativeToEnd")
    OccurrenceUnit = field("OccurrenceUnit")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstanceRecurrenceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstanceRecurrenceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupReferencesRequest:
    boto3_raw_data: "type_defs.DescribeSecurityGroupReferencesRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupReferencesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupReferencesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupReference:
    boto3_raw_data: "type_defs.SecurityGroupReferenceTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    ReferencingVpcId = field("ReferencingVpcId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    TransitGatewayId = field("TransitGatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupReferenceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupReferenceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupVpcAssociation:
    boto3_raw_data: "type_defs.SecurityGroupVpcAssociationTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    VpcId = field("VpcId")
    VpcOwnerId = field("VpcOwnerId")
    State = field("State")
    StateReason = field("StateReason")
    GroupOwnerId = field("GroupOwnerId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupVpcAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupVpcAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotAttributeRequestSnapshotDescribeAttribute:
    boto3_raw_data: (
        "type_defs.DescribeSnapshotAttributeRequestSnapshotDescribeAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSnapshotAttributeRequestSnapshotDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeSnapshotAttributeRequestSnapshotDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotAttributeRequest:
    boto3_raw_data: "type_defs.DescribeSnapshotAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    Attribute = field("Attribute")
    SnapshotId = field("SnapshotId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSnapshotAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductCode:
    boto3_raw_data: "type_defs.ProductCodeTypeDef" = dataclasses.field()

    ProductCodeId = field("ProductCodeId")
    ProductCodeType = field("ProductCodeType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProductCodeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProductCodeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotDatafeedSubscriptionRequest:
    boto3_raw_data: "type_defs.DescribeSpotDatafeedSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotDatafeedSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotDatafeedSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetInstancesRequest:
    boto3_raw_data: "type_defs.DescribeSpotFleetInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    SpotFleetRequestId = field("SpotFleetRequestId")
    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetRequestsRequest:
    boto3_raw_data: "type_defs.DescribeSpotFleetRequestsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    SpotFleetRequestIds = field("SpotFleetRequestIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSpotFleetRequestsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetRequestsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotPrice:
    boto3_raw_data: "type_defs.SpotPriceTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    InstanceType = field("InstanceType")
    ProductDescription = field("ProductDescription")
    SpotPrice = field("SpotPrice")
    Timestamp = field("Timestamp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpotPriceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpotPriceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStaleSecurityGroupsRequest:
    boto3_raw_data: "type_defs.DescribeStaleSecurityGroupsRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStaleSecurityGroupsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStaleSecurityGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StoreImageTaskResult:
    boto3_raw_data: "type_defs.StoreImageTaskResultTypeDef" = dataclasses.field()

    AmiId = field("AmiId")
    TaskStartTime = field("TaskStartTime")
    Bucket = field("Bucket")
    S3objectKey = field("S3objectKey")
    ProgressPercentage = field("ProgressPercentage")
    StoreTaskState = field("StoreTaskState")
    StoreTaskFailureReason = field("StoreTaskFailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StoreImageTaskResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StoreImageTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagDescription:
    boto3_raw_data: "type_defs.TagDescriptionTypeDef" = dataclasses.field()

    Key = field("Key")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TagDescriptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TagDescriptionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeAttributeRequest:
    boto3_raw_data: "type_defs.DescribeVolumeAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    Attribute = field("Attribute")
    VolumeId = field("VolumeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVolumeAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumeAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeAttributeRequestVolumeDescribeAttribute:
    boto3_raw_data: (
        "type_defs.DescribeVolumeAttributeRequestVolumeDescribeAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumeAttributeRequestVolumeDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVolumeAttributeRequestVolumeDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeModification:
    boto3_raw_data: "type_defs.VolumeModificationTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    ModificationState = field("ModificationState")
    StatusMessage = field("StatusMessage")
    TargetSize = field("TargetSize")
    TargetIops = field("TargetIops")
    TargetVolumeType = field("TargetVolumeType")
    TargetThroughput = field("TargetThroughput")
    TargetMultiAttachEnabled = field("TargetMultiAttachEnabled")
    OriginalSize = field("OriginalSize")
    OriginalIops = field("OriginalIops")
    OriginalVolumeType = field("OriginalVolumeType")
    OriginalThroughput = field("OriginalThroughput")
    OriginalMultiAttachEnabled = field("OriginalMultiAttachEnabled")
    Progress = field("Progress")
    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeModificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeModificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcAttributeRequest:
    boto3_raw_data: "type_defs.DescribeVpcAttributeRequestTypeDef" = dataclasses.field()

    Attribute = field("Attribute")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcAttributeRequestVpcDescribeAttribute:
    boto3_raw_data: (
        "type_defs.DescribeVpcAttributeRequestVpcDescribeAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcAttributeRequestVpcDescribeAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcAttributeRequestVpcDescribeAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcBlockPublicAccessOptionsRequest:
    boto3_raw_data: "type_defs.DescribeVpcBlockPublicAccessOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcBlockPublicAccessOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcBlockPublicAccessOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcBlockPublicAccessOptions:
    boto3_raw_data: "type_defs.VpcBlockPublicAccessOptionsTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AwsRegion = field("AwsRegion")
    State = field("State")
    InternetGatewayBlockMode = field("InternetGatewayBlockMode")
    Reason = field("Reason")
    LastUpdateTimestamp = field("LastUpdateTimestamp")
    ManagedBy = field("ManagedBy")
    ExclusionsAllowed = field("ExclusionsAllowed")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcBlockPublicAccessOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcBlockPublicAccessOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcClassicLinkDnsSupportRequest:
    boto3_raw_data: "type_defs.DescribeVpcClassicLinkDnsSupportRequestTypeDef" = (
        dataclasses.field()
    )

    VpcIds = field("VpcIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcClassicLinkDnsSupportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcClassicLinkDnsSupportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DestinationOptionsResponse:
    boto3_raw_data: "type_defs.DestinationOptionsResponseTypeDef" = dataclasses.field()

    FileFormat = field("FileFormat")
    HiveCompatiblePartitions = field("HiveCompatiblePartitions")
    PerHourPartition = field("PerHourPartition")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DestinationOptionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DestinationOptionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClassicLinkVpcRequestInstanceDetachClassicLinkVpc:
    boto3_raw_data: (
        "type_defs.DetachClassicLinkVpcRequestInstanceDetachClassicLinkVpcTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachClassicLinkVpcRequestInstanceDetachClassicLinkVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DetachClassicLinkVpcRequestInstanceDetachClassicLinkVpcTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClassicLinkVpcRequest:
    boto3_raw_data: "type_defs.DetachClassicLinkVpcRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DetachClassicLinkVpcRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachClassicLinkVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClassicLinkVpcRequestVpcDetachClassicLinkInstance:
    boto3_raw_data: (
        "type_defs.DetachClassicLinkVpcRequestVpcDetachClassicLinkInstanceTypeDef"
    ) = dataclasses.field()

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachClassicLinkVpcRequestVpcDetachClassicLinkInstanceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DetachClassicLinkVpcRequestVpcDetachClassicLinkInstanceTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachInternetGatewayRequestInternetGatewayDetachFromVpc:
    boto3_raw_data: (
        "type_defs.DetachInternetGatewayRequestInternetGatewayDetachFromVpcTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachInternetGatewayRequestInternetGatewayDetachFromVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DetachInternetGatewayRequestInternetGatewayDetachFromVpcTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachInternetGatewayRequest:
    boto3_raw_data: "type_defs.DetachInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    InternetGatewayId = field("InternetGatewayId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DetachInternetGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachInternetGatewayRequestVpcDetachInternetGateway:
    boto3_raw_data: (
        "type_defs.DetachInternetGatewayRequestVpcDetachInternetGatewayTypeDef"
    ) = dataclasses.field()

    InternetGatewayId = field("InternetGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachInternetGatewayRequestVpcDetachInternetGatewayTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DetachInternetGatewayRequestVpcDetachInternetGatewayTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachNetworkInterfaceRequestNetworkInterfaceDetach:
    boto3_raw_data: (
        "type_defs.DetachNetworkInterfaceRequestNetworkInterfaceDetachTypeDef"
    ) = dataclasses.field()

    AttachmentId = field("AttachmentId")
    DryRun = field("DryRun")
    Force = field("Force")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachNetworkInterfaceRequestNetworkInterfaceDetachTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DetachNetworkInterfaceRequestNetworkInterfaceDetachTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachNetworkInterfaceRequest:
    boto3_raw_data: "type_defs.DetachNetworkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    AttachmentId = field("AttachmentId")
    DryRun = field("DryRun")
    Force = field("Force")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DetachNetworkInterfaceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachNetworkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVerifiedAccessTrustProviderRequest:
    boto3_raw_data: "type_defs.DetachVerifiedAccessTrustProviderRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachVerifiedAccessTrustProviderRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVerifiedAccessTrustProviderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVolumeRequestInstanceDetachVolume:
    boto3_raw_data: "type_defs.DetachVolumeRequestInstanceDetachVolumeTypeDef" = (
        dataclasses.field()
    )

    VolumeId = field("VolumeId")
    Device = field("Device")
    Force = field("Force")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachVolumeRequestInstanceDetachVolumeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVolumeRequestInstanceDetachVolumeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVolumeRequest:
    boto3_raw_data: "type_defs.DetachVolumeRequestTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    Device = field("Device")
    Force = field("Force")
    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DetachVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVolumeRequestVolumeDetachFromInstance:
    boto3_raw_data: "type_defs.DetachVolumeRequestVolumeDetachFromInstanceTypeDef" = (
        dataclasses.field()
    )

    Device = field("Device")
    Force = field("Force")
    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachVolumeRequestVolumeDetachFromInstanceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVolumeRequestVolumeDetachFromInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVpnGatewayRequest:
    boto3_raw_data: "type_defs.DetachVpnGatewayRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    VpnGatewayId = field("VpnGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DetachVpnGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVpnGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceOptions:
    boto3_raw_data: "type_defs.DeviceOptionsTypeDef" = dataclasses.field()

    TenantId = field("TenantId")
    PublicSigningKeyUrl = field("PublicSigningKeyUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeviceOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeviceOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAddressTransferRequest:
    boto3_raw_data: "type_defs.DisableAddressTransferRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisableAddressTransferRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableAddressTransferRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAllowedImagesSettingsRequest:
    boto3_raw_data: "type_defs.DisableAllowedImagesSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableAllowedImagesSettingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableAllowedImagesSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAwsNetworkPerformanceMetricSubscriptionRequest:
    boto3_raw_data: (
        "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
    ) = dataclasses.field()

    Source = field("Source")
    Destination = field("Destination")
    Metric = field("Metric")
    Statistic = field("Statistic")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableEbsEncryptionByDefaultRequest:
    boto3_raw_data: "type_defs.DisableEbsEncryptionByDefaultRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableEbsEncryptionByDefaultRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableEbsEncryptionByDefaultRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastLaunchRequest:
    boto3_raw_data: "type_defs.DisableFastLaunchRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    Force = field("Force")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableFastLaunchRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastLaunchRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoreStateError:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoreStateErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoreStateErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoreStateErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoreSuccessItem:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoreSuccessItemTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    AvailabilityZone = field("AvailabilityZone")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    OwnerId = field("OwnerId")
    OwnerAlias = field("OwnerAlias")
    EnablingTime = field("EnablingTime")
    OptimizingTime = field("OptimizingTime")
    EnabledTime = field("EnabledTime")
    DisablingTime = field("DisablingTime")
    DisabledTime = field("DisabledTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoreSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoreSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoresRequest:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoresRequestTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SourceSnapshotIds = field("SourceSnapshotIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoresRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoresRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageBlockPublicAccessRequest:
    boto3_raw_data: "type_defs.DisableImageBlockPublicAccessRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableImageBlockPublicAccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageBlockPublicAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageDeprecationRequest:
    boto3_raw_data: "type_defs.DisableImageDeprecationRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisableImageDeprecationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageDeprecationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageDeregistrationProtectionRequest:
    boto3_raw_data: "type_defs.DisableImageDeregistrationProtectionRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableImageDeregistrationProtectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageDeregistrationProtectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageRequest:
    boto3_raw_data: "type_defs.DisableImageRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableIpamOrganizationAdminAccountRequest:
    boto3_raw_data: "type_defs.DisableIpamOrganizationAdminAccountRequestTypeDef" = (
        dataclasses.field()
    )

    DelegatedAdminAccountId = field("DelegatedAdminAccountId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableIpamOrganizationAdminAccountRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableIpamOrganizationAdminAccountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableRouteServerPropagationRequest:
    boto3_raw_data: "type_defs.DisableRouteServerPropagationRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableRouteServerPropagationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableRouteServerPropagationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerPropagation:
    boto3_raw_data: "type_defs.RouteServerPropagationTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    RouteTableId = field("RouteTableId")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerPropagationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerPropagationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableSerialConsoleAccessRequest:
    boto3_raw_data: "type_defs.DisableSerialConsoleAccessRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableSerialConsoleAccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableSerialConsoleAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableSnapshotBlockPublicAccessRequest:
    boto3_raw_data: "type_defs.DisableSnapshotBlockPublicAccessRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableSnapshotBlockPublicAccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableSnapshotBlockPublicAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableTransitGatewayRouteTablePropagationRequest:
    boto3_raw_data: (
        "type_defs.DisableTransitGatewayRouteTablePropagationRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")
    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableTransitGatewayRouteTablePropagationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisableTransitGatewayRouteTablePropagationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPropagation:
    boto3_raw_data: "type_defs.TransitGatewayPropagationTypeDef" = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    State = field("State")
    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayPropagationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPropagationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVgwRoutePropagationRequest:
    boto3_raw_data: "type_defs.DisableVgwRoutePropagationRequestTypeDef" = (
        dataclasses.field()
    )

    GatewayId = field("GatewayId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableVgwRoutePropagationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableVgwRoutePropagationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVpcClassicLinkDnsSupportRequest:
    boto3_raw_data: "type_defs.DisableVpcClassicLinkDnsSupportRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableVpcClassicLinkDnsSupportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableVpcClassicLinkDnsSupportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVpcClassicLinkRequest:
    boto3_raw_data: "type_defs.DisableVpcClassicLinkRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableVpcClassicLinkRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableVpcClassicLinkRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVpcClassicLinkRequestVpcDisableClassicLink:
    boto3_raw_data: (
        "type_defs.DisableVpcClassicLinkRequestVpcDisableClassicLinkTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableVpcClassicLinkRequestVpcDisableClassicLinkTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisableVpcClassicLinkRequestVpcDisableClassicLinkTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateAddressRequestClassicAddressDisassociate:
    boto3_raw_data: (
        "type_defs.DisassociateAddressRequestClassicAddressDisassociateTypeDef"
    ) = dataclasses.field()

    AssociationId = field("AssociationId")
    PublicIp = field("PublicIp")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateAddressRequestClassicAddressDisassociateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateAddressRequestClassicAddressDisassociateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateAddressRequestNetworkInterfaceAssociationDelete:
    boto3_raw_data: (
        "type_defs.DisassociateAddressRequestNetworkInterfaceAssociationDeleteTypeDef"
    ) = dataclasses.field()

    PublicIp = field("PublicIp")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateAddressRequestNetworkInterfaceAssociationDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateAddressRequestNetworkInterfaceAssociationDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateAddressRequest:
    boto3_raw_data: "type_defs.DisassociateAddressRequestTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    PublicIp = field("PublicIp")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisassociateAddressRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateCapacityReservationBillingOwnerRequest:
    boto3_raw_data: (
        "type_defs.DisassociateCapacityReservationBillingOwnerRequestTypeDef"
    ) = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    UnusedReservationBillingOwnerId = field("UnusedReservationBillingOwnerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateCapacityReservationBillingOwnerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateCapacityReservationBillingOwnerRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateClientVpnTargetNetworkRequest:
    boto3_raw_data: "type_defs.DisassociateClientVpnTargetNetworkRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    AssociationId = field("AssociationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateClientVpnTargetNetworkRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateClientVpnTargetNetworkRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateEnclaveCertificateIamRoleRequest:
    boto3_raw_data: "type_defs.DisassociateEnclaveCertificateIamRoleRequestTypeDef" = (
        dataclasses.field()
    )

    CertificateArn = field("CertificateArn")
    RoleArn = field("RoleArn")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateEnclaveCertificateIamRoleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateEnclaveCertificateIamRoleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIamInstanceProfileRequest:
    boto3_raw_data: "type_defs.DisassociateIamInstanceProfileRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateIamInstanceProfileRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIamInstanceProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIpamByoasnRequest:
    boto3_raw_data: "type_defs.DisassociateIpamByoasnRequestTypeDef" = (
        dataclasses.field()
    )

    Asn = field("Asn")
    Cidr = field("Cidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateIpamByoasnRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIpamByoasnRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIpamResourceDiscoveryRequest:
    boto3_raw_data: "type_defs.DisassociateIpamResourceDiscoveryRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryAssociationId = field("IpamResourceDiscoveryAssociationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateIpamResourceDiscoveryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIpamResourceDiscoveryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateNatGatewayAddressRequest:
    boto3_raw_data: "type_defs.DisassociateNatGatewayAddressRequestTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")
    AssociationIds = field("AssociationIds")
    MaxDrainDurationSeconds = field("MaxDrainDurationSeconds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateNatGatewayAddressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateNatGatewayAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateRouteServerRequest:
    boto3_raw_data: "type_defs.DisassociateRouteServerRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateRouteServerRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateRouteServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateRouteTableRequestRouteTableAssociationDelete:
    boto3_raw_data: (
        "type_defs.DisassociateRouteTableRequestRouteTableAssociationDeleteTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateRouteTableRequestRouteTableAssociationDeleteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateRouteTableRequestRouteTableAssociationDeleteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateRouteTableRequestServiceResourceDisassociateRouteTable:
    boto3_raw_data: "type_defs.DisassociateRouteTableRequestServiceResourceDisassociateRouteTableTypeDef" = (dataclasses.field())

    AssociationId = field("AssociationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateRouteTableRequestServiceResourceDisassociateRouteTableTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateRouteTableRequestServiceResourceDisassociateRouteTableTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateRouteTableRequest:
    boto3_raw_data: "type_defs.DisassociateRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateRouteTableRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateSecurityGroupVpcRequest:
    boto3_raw_data: "type_defs.DisassociateSecurityGroupVpcRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateSecurityGroupVpcRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateSecurityGroupVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateSubnetCidrBlockRequest:
    boto3_raw_data: "type_defs.DisassociateSubnetCidrBlockRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateSubnetCidrBlockRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateSubnetCidrBlockRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayMulticastDomainRequest:
    boto3_raw_data: (
        "type_defs.DisassociateTransitGatewayMulticastDomainRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    SubnetIds = field("SubnetIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayMulticastDomainRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateTransitGatewayMulticastDomainRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayPolicyTableRequest:
    boto3_raw_data: "type_defs.DisassociateTransitGatewayPolicyTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayPolicyTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTransitGatewayPolicyTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.DisassociateTransitGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTransitGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTrunkInterfaceRequest:
    boto3_raw_data: "type_defs.DisassociateTrunkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTrunkInterfaceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTrunkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateVpcCidrBlockRequest:
    boto3_raw_data: "type_defs.DisassociateVpcCidrBlockRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateVpcCidrBlockRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateVpcCidrBlockRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DiskImageDescription:
    boto3_raw_data: "type_defs.DiskImageDescriptionTypeDef" = dataclasses.field()

    Checksum = field("Checksum")
    Format = field("Format")
    ImportManifestUrl = field("ImportManifestUrl")
    Size = field("Size")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DiskImageDescriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DiskImageDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DiskImageDetail:
    boto3_raw_data: "type_defs.DiskImageDetailTypeDef" = dataclasses.field()

    Format = field("Format")
    Bytes = field("Bytes")
    ImportManifestUrl = field("ImportManifestUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DiskImageDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DiskImageDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeDetail:
    boto3_raw_data: "type_defs.VolumeDetailTypeDef" = dataclasses.field()

    Size = field("Size")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VolumeDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DiskImageVolumeDescription:
    boto3_raw_data: "type_defs.DiskImageVolumeDescriptionTypeDef" = dataclasses.field()

    Id = field("Id")
    Size = field("Size")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DiskImageVolumeDescriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DiskImageVolumeDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DiskInfo:
    boto3_raw_data: "type_defs.DiskInfoTypeDef" = dataclasses.field()

    SizeInGB = field("SizeInGB")
    Count = field("Count")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DiskInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DiskInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DnsEntry:
    boto3_raw_data: "type_defs.DnsEntryTypeDef" = dataclasses.field()

    DnsName = field("DnsName")
    HostedZoneId = field("HostedZoneId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DnsEntryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DnsEntryTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DnsOptions:
    boto3_raw_data: "type_defs.DnsOptionsTypeDef" = dataclasses.field()

    DnsRecordIpType = field("DnsRecordIpType")
    PrivateDnsOnlyForInboundResolverEndpoint = field(
        "PrivateDnsOnlyForInboundResolverEndpoint"
    )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DnsOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DnsOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DnsServersOptionsModifyStructure:
    boto3_raw_data: "type_defs.DnsServersOptionsModifyStructureTypeDef" = (
        dataclasses.field()
    )

    CustomDnsServers = field("CustomDnsServers")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DnsServersOptionsModifyStructureTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DnsServersOptionsModifyStructureTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsOptimizedInfo:
    boto3_raw_data: "type_defs.EbsOptimizedInfoTypeDef" = dataclasses.field()

    BaselineBandwidthInMbps = field("BaselineBandwidthInMbps")
    BaselineThroughputInMBps = field("BaselineThroughputInMBps")
    BaselineIops = field("BaselineIops")
    MaximumBandwidthInMbps = field("MaximumBandwidthInMbps")
    MaximumThroughputInMBps = field("MaximumThroughputInMBps")
    MaximumIops = field("MaximumIops")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EbsOptimizedInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsOptimizedInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsInstanceBlockDeviceSpecification:
    boto3_raw_data: "type_defs.EbsInstanceBlockDeviceSpecificationTypeDef" = (
        dataclasses.field()
    )

    VolumeId = field("VolumeId")
    DeleteOnTermination = field("DeleteOnTermination")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EbsInstanceBlockDeviceSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsInstanceBlockDeviceSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OperatorResponse:
    boto3_raw_data: "type_defs.OperatorResponseTypeDef" = dataclasses.field()

    Managed = field("Managed")
    Principal = field("Principal")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OperatorResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OperatorResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsStatusDetails:
    boto3_raw_data: "type_defs.EbsStatusDetailsTypeDef" = dataclasses.field()

    ImpairedSince = field("ImpairedSince")
    Name = field("Name")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EbsStatusDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EfaInfo:
    boto3_raw_data: "type_defs.EfaInfoTypeDef" = dataclasses.field()

    MaximumEfaInterfaces = field("MaximumEfaInterfaces")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EfaInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EfaInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InternetGatewayAttachment:
    boto3_raw_data: "type_defs.InternetGatewayAttachmentTypeDef" = dataclasses.field()

    State = field("State")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InternetGatewayAttachmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InternetGatewayAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticGpuAssociation:
    boto3_raw_data: "type_defs.ElasticGpuAssociationTypeDef" = dataclasses.field()

    ElasticGpuId = field("ElasticGpuId")
    ElasticGpuAssociationId = field("ElasticGpuAssociationId")
    ElasticGpuAssociationState = field("ElasticGpuAssociationState")
    ElasticGpuAssociationTime = field("ElasticGpuAssociationTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ElasticGpuAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticGpuAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticGpuHealth:
    boto3_raw_data: "type_defs.ElasticGpuHealthTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ElasticGpuHealthTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticGpuHealthTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticGpuSpecificationResponse:
    boto3_raw_data: "type_defs.ElasticGpuSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ElasticGpuSpecificationResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticGpuSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticGpuSpecification:
    boto3_raw_data: "type_defs.ElasticGpuSpecificationTypeDef" = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ElasticGpuSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticGpuSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticInferenceAcceleratorAssociation:
    boto3_raw_data: "type_defs.ElasticInferenceAcceleratorAssociationTypeDef" = (
        dataclasses.field()
    )

    ElasticInferenceAcceleratorArn = field("ElasticInferenceAcceleratorArn")
    ElasticInferenceAcceleratorAssociationId = field(
        "ElasticInferenceAcceleratorAssociationId"
    )
    ElasticInferenceAcceleratorAssociationState = field(
        "ElasticInferenceAcceleratorAssociationState"
    )
    ElasticInferenceAcceleratorAssociationTime = field(
        "ElasticInferenceAcceleratorAssociationTime"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ElasticInferenceAcceleratorAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticInferenceAcceleratorAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticInferenceAccelerator:
    boto3_raw_data: "type_defs.ElasticInferenceAcceleratorTypeDef" = dataclasses.field()

    Type = field("Type")
    Count = field("Count")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ElasticInferenceAcceleratorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ElasticInferenceAcceleratorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnaSrdUdpSpecificationRequest:
    boto3_raw_data: "type_defs.EnaSrdUdpSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    EnaSrdUdpEnabled = field("EnaSrdUdpEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnaSrdUdpSpecificationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnaSrdUdpSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnaSrdUdpSpecification:
    boto3_raw_data: "type_defs.EnaSrdUdpSpecificationTypeDef" = dataclasses.field()

    EnaSrdUdpEnabled = field("EnaSrdUdpEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnaSrdUdpSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnaSrdUdpSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAddressTransferRequest:
    boto3_raw_data: "type_defs.EnableAddressTransferRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    TransferAccountId = field("TransferAccountId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableAddressTransferRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableAddressTransferRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAllowedImagesSettingsRequest:
    boto3_raw_data: "type_defs.EnableAllowedImagesSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    AllowedImagesSettingsState = field("AllowedImagesSettingsState")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableAllowedImagesSettingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableAllowedImagesSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAwsNetworkPerformanceMetricSubscriptionRequest:
    boto3_raw_data: (
        "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
    ) = dataclasses.field()

    Source = field("Source")
    Destination = field("Destination")
    Metric = field("Metric")
    Statistic = field("Statistic")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableEbsEncryptionByDefaultRequest:
    boto3_raw_data: "type_defs.EnableEbsEncryptionByDefaultRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableEbsEncryptionByDefaultRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableEbsEncryptionByDefaultRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FastLaunchLaunchTemplateSpecificationRequest:
    boto3_raw_data: "type_defs.FastLaunchLaunchTemplateSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    Version = field("Version")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FastLaunchLaunchTemplateSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FastLaunchLaunchTemplateSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FastLaunchSnapshotConfigurationRequest:
    boto3_raw_data: "type_defs.FastLaunchSnapshotConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    TargetResourceCount = field("TargetResourceCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FastLaunchSnapshotConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FastLaunchSnapshotConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoreStateError:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoreStateErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableFastSnapshotRestoreStateErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoreStateErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoreSuccessItem:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoreSuccessItemTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    AvailabilityZone = field("AvailabilityZone")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    OwnerId = field("OwnerId")
    OwnerAlias = field("OwnerAlias")
    EnablingTime = field("EnablingTime")
    OptimizingTime = field("OptimizingTime")
    EnabledTime = field("EnabledTime")
    DisablingTime = field("DisablingTime")
    DisabledTime = field("DisabledTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableFastSnapshotRestoreSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoreSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoresRequest:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoresRequestTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SourceSnapshotIds = field("SourceSnapshotIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableFastSnapshotRestoresRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoresRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageBlockPublicAccessRequest:
    boto3_raw_data: "type_defs.EnableImageBlockPublicAccessRequestTypeDef" = (
        dataclasses.field()
    )

    ImageBlockPublicAccessState = field("ImageBlockPublicAccessState")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImageBlockPublicAccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageBlockPublicAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageDeregistrationProtectionRequest:
    boto3_raw_data: "type_defs.EnableImageDeregistrationProtectionRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    WithCooldown = field("WithCooldown")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImageDeregistrationProtectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageDeregistrationProtectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageRequest:
    boto3_raw_data: "type_defs.EnableImageRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableIpamOrganizationAdminAccountRequest:
    boto3_raw_data: "type_defs.EnableIpamOrganizationAdminAccountRequestTypeDef" = (
        dataclasses.field()
    )

    DelegatedAdminAccountId = field("DelegatedAdminAccountId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableIpamOrganizationAdminAccountRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableIpamOrganizationAdminAccountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableReachabilityAnalyzerOrganizationSharingRequest:
    boto3_raw_data: (
        "type_defs.EnableReachabilityAnalyzerOrganizationSharingRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableReachabilityAnalyzerOrganizationSharingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableReachabilityAnalyzerOrganizationSharingRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableRouteServerPropagationRequest:
    boto3_raw_data: "type_defs.EnableRouteServerPropagationRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableRouteServerPropagationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableRouteServerPropagationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSerialConsoleAccessRequest:
    boto3_raw_data: "type_defs.EnableSerialConsoleAccessRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnableSerialConsoleAccessRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSerialConsoleAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSnapshotBlockPublicAccessRequest:
    boto3_raw_data: "type_defs.EnableSnapshotBlockPublicAccessRequestTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableSnapshotBlockPublicAccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSnapshotBlockPublicAccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableTransitGatewayRouteTablePropagationRequest:
    boto3_raw_data: (
        "type_defs.EnableTransitGatewayRouteTablePropagationRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")
    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableTransitGatewayRouteTablePropagationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableTransitGatewayRouteTablePropagationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVgwRoutePropagationRequest:
    boto3_raw_data: "type_defs.EnableVgwRoutePropagationRequestTypeDef" = (
        dataclasses.field()
    )

    GatewayId = field("GatewayId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnableVgwRoutePropagationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVgwRoutePropagationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVolumeIORequest:
    boto3_raw_data: "type_defs.EnableVolumeIORequestTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableVolumeIORequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVolumeIORequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVolumeIORequestVolumeEnableIo:
    boto3_raw_data: "type_defs.EnableVolumeIORequestVolumeEnableIoTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableVolumeIORequestVolumeEnableIoTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVolumeIORequestVolumeEnableIoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVpcClassicLinkDnsSupportRequest:
    boto3_raw_data: "type_defs.EnableVpcClassicLinkDnsSupportRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableVpcClassicLinkDnsSupportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVpcClassicLinkDnsSupportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVpcClassicLinkRequest:
    boto3_raw_data: "type_defs.EnableVpcClassicLinkRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableVpcClassicLinkRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVpcClassicLinkRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVpcClassicLinkRequestVpcEnableClassicLink:
    boto3_raw_data: (
        "type_defs.EnableVpcClassicLinkRequestVpcEnableClassicLinkTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableVpcClassicLinkRequestVpcEnableClassicLinkTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableVpcClassicLinkRequestVpcEnableClassicLinkTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnclaveOptionsRequest:
    boto3_raw_data: "type_defs.EnclaveOptionsRequestTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnclaveOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnclaveOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnclaveOptions:
    boto3_raw_data: "type_defs.EnclaveOptionsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EnclaveOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EnclaveOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EventInformation:
    boto3_raw_data: "type_defs.EventInformationTypeDef" = dataclasses.field()

    EventDescription = field("EventDescription")
    EventSubType = field("EventSubType")
    InstanceId = field("InstanceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EventInformationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EventInformationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteTableRoute:
    boto3_raw_data: "type_defs.TransitGatewayRouteTableRouteTypeDef" = (
        dataclasses.field()
    )

    DestinationCidr = field("DestinationCidr")
    State = field("State")
    RouteOrigin = field("RouteOrigin")
    PrefixListId = field("PrefixListId")
    AttachmentId = field("AttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayRouteTableRouteTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTableRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportClientVpnClientCertificateRevocationListRequest:
    boto3_raw_data: (
        "type_defs.ExportClientVpnClientCertificateRevocationListRequestTypeDef"
    ) = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportClientVpnClientCertificateRevocationListRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ExportClientVpnClientCertificateRevocationListRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportClientVpnClientConfigurationRequest:
    boto3_raw_data: "type_defs.ExportClientVpnClientConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportClientVpnClientConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportClientVpnClientConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportTaskS3LocationRequest:
    boto3_raw_data: "type_defs.ExportTaskS3LocationRequestTypeDef" = dataclasses.field()

    S3Bucket = field("S3Bucket")
    S3Prefix = field("S3Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportTaskS3LocationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportTaskS3LocationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportTaskS3Location:
    boto3_raw_data: "type_defs.ExportTaskS3LocationTypeDef" = dataclasses.field()

    S3Bucket = field("S3Bucket")
    S3Prefix = field("S3Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportTaskS3LocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportTaskS3LocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportToS3Task:
    boto3_raw_data: "type_defs.ExportToS3TaskTypeDef" = dataclasses.field()

    ContainerFormat = field("ContainerFormat")
    DiskImageFormat = field("DiskImageFormat")
    S3Bucket = field("S3Bucket")
    S3Key = field("S3Key")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExportToS3TaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExportToS3TaskTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceExportDetails:
    boto3_raw_data: "type_defs.InstanceExportDetailsTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    TargetEnvironment = field("TargetEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceExportDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceExportDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportVerifiedAccessInstanceClientConfigurationRequest:
    boto3_raw_data: (
        "type_defs.ExportVerifiedAccessInstanceClientConfigurationRequestTypeDef"
    ) = dataclasses.field()

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportVerifiedAccessInstanceClientConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ExportVerifiedAccessInstanceClientConfigurationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstanceUserTrustProviderClientConfiguration:
    boto3_raw_data: (
        "type_defs.VerifiedAccessInstanceUserTrustProviderClientConfigurationTypeDef"
    ) = dataclasses.field()

    Type = field("Type")
    Scopes = field("Scopes")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    PublicSigningKeyEndpoint = field("PublicSigningKeyEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    PkceEnabled = field("PkceEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessInstanceUserTrustProviderClientConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessInstanceUserTrustProviderClientConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterPortRange:
    boto3_raw_data: "type_defs.FilterPortRangeTypeDef" = dataclasses.field()

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterPortRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterPortRangeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetEbsBlockDeviceRequest:
    boto3_raw_data: "type_defs.FleetEbsBlockDeviceRequestTypeDef" = dataclasses.field()

    Encrypted = field("Encrypted")
    DeleteOnTermination = field("DeleteOnTermination")
    Iops = field("Iops")
    Throughput = field("Throughput")
    KmsKeyId = field("KmsKeyId")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FleetEbsBlockDeviceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetEbsBlockDeviceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetCapacitySpecification:
    boto3_raw_data: "type_defs.TargetCapacitySpecificationTypeDef" = dataclasses.field()

    TotalTargetCapacity = field("TotalTargetCapacity")
    OnDemandTargetCapacity = field("OnDemandTargetCapacity")
    SpotTargetCapacity = field("SpotTargetCapacity")
    DefaultTargetCapacityType = field("DefaultTargetCapacityType")
    TargetCapacityUnitType = field("TargetCapacityUnitType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetCapacitySpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetCapacitySpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateSpecificationRequest:
    boto3_raw_data: "type_defs.FleetLaunchTemplateSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FleetLaunchTemplateSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateSpecification:
    boto3_raw_data: "type_defs.FleetLaunchTemplateSpecificationTypeDef" = (
        dataclasses.field()
    )

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FleetLaunchTemplateSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Placement:
    boto3_raw_data: "type_defs.PlacementTypeDef" = dataclasses.field()

    AvailabilityZoneId = field("AvailabilityZoneId")
    Affinity = field("Affinity")
    GroupName = field("GroupName")
    PartitionNumber = field("PartitionNumber")
    HostId = field("HostId")
    Tenancy = field("Tenancy")
    SpreadDomain = field("SpreadDomain")
    HostResourceGroupArn = field("HostResourceGroupArn")
    GroupId = field("GroupId")
    AvailabilityZone = field("AvailabilityZone")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PlacementTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PlacementTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PlacementResponse:
    boto3_raw_data: "type_defs.PlacementResponseTypeDef" = dataclasses.field()

    GroupName = field("GroupName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PlacementResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PlacementResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetSpotCapacityRebalanceRequest:
    boto3_raw_data: "type_defs.FleetSpotCapacityRebalanceRequestTypeDef" = (
        dataclasses.field()
    )

    ReplacementStrategy = field("ReplacementStrategy")
    TerminationDelay = field("TerminationDelay")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FleetSpotCapacityRebalanceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetSpotCapacityRebalanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetSpotCapacityRebalance:
    boto3_raw_data: "type_defs.FleetSpotCapacityRebalanceTypeDef" = dataclasses.field()

    ReplacementStrategy = field("ReplacementStrategy")
    TerminationDelay = field("TerminationDelay")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FleetSpotCapacityRebalanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetSpotCapacityRebalanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaDeviceMemoryInfo:
    boto3_raw_data: "type_defs.FpgaDeviceMemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FpgaDeviceMemoryInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FpgaDeviceMemoryInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadPermission:
    boto3_raw_data: "type_defs.LoadPermissionTypeDef" = dataclasses.field()

    UserId = field("UserId")
    Group = field("Group")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LoadPermissionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LoadPermissionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaImageState:
    boto3_raw_data: "type_defs.FpgaImageStateTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FpgaImageStateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FpgaImageStateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PciId:
    boto3_raw_data: "type_defs.PciIdTypeDef" = dataclasses.field()

    DeviceId = field("DeviceId")
    VendorId = field("VendorId")
    SubsystemId = field("SubsystemId")
    SubsystemVendorId = field("SubsystemVendorId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PciIdTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PciIdTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetActiveVpnTunnelStatusRequest:
    boto3_raw_data: "type_defs.GetActiveVpnTunnelStatusRequestTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetActiveVpnTunnelStatusRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetActiveVpnTunnelStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAllowedImagesSettingsRequest:
    boto3_raw_data: "type_defs.GetAllowedImagesSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetAllowedImagesSettingsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAllowedImagesSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAssociatedEnclaveCertificateIamRolesRequest:
    boto3_raw_data: (
        "type_defs.GetAssociatedEnclaveCertificateIamRolesRequestTypeDef"
    ) = dataclasses.field()

    CertificateArn = field("CertificateArn")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAssociatedEnclaveCertificateIamRolesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetAssociatedEnclaveCertificateIamRolesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAssociatedIpv6PoolCidrsRequest:
    boto3_raw_data: "type_defs.GetAssociatedIpv6PoolCidrsRequestTypeDef" = (
        dataclasses.field()
    )

    PoolId = field("PoolId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAssociatedIpv6PoolCidrsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAssociatedIpv6PoolCidrsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6CidrAssociation:
    boto3_raw_data: "type_defs.Ipv6CidrAssociationTypeDef" = dataclasses.field()

    Ipv6Cidr = field("Ipv6Cidr")
    AssociatedResource = field("AssociatedResource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ipv6CidrAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv6CidrAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetCapacityReservationUsageRequest:
    boto3_raw_data: "type_defs.GetCapacityReservationUsageRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetCapacityReservationUsageRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetCapacityReservationUsageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceUsage:
    boto3_raw_data: "type_defs.InstanceUsageTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    UsedInstanceCount = field("UsedInstanceCount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceUsageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceUsageTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConsoleOutputRequestInstanceConsoleOutput:
    boto3_raw_data: "type_defs.GetConsoleOutputRequestInstanceConsoleOutputTypeDef" = (
        dataclasses.field()
    )

    Latest = field("Latest")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetConsoleOutputRequestInstanceConsoleOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConsoleOutputRequestInstanceConsoleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConsoleOutputRequest:
    boto3_raw_data: "type_defs.GetConsoleOutputRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Latest = field("Latest")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConsoleOutputRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConsoleOutputRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConsoleScreenshotRequest:
    boto3_raw_data: "type_defs.GetConsoleScreenshotRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")
    WakeUp = field("WakeUp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConsoleScreenshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConsoleScreenshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDeclarativePoliciesReportSummaryRequest:
    boto3_raw_data: "type_defs.GetDeclarativePoliciesReportSummaryRequestTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetDeclarativePoliciesReportSummaryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDeclarativePoliciesReportSummaryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDefaultCreditSpecificationRequest:
    boto3_raw_data: "type_defs.GetDefaultCreditSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceFamily = field("InstanceFamily")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetDefaultCreditSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDefaultCreditSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceFamilyCreditSpecification:
    boto3_raw_data: "type_defs.InstanceFamilyCreditSpecificationTypeDef" = (
        dataclasses.field()
    )

    InstanceFamily = field("InstanceFamily")
    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceFamilyCreditSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceFamilyCreditSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEbsDefaultKmsKeyIdRequest:
    boto3_raw_data: "type_defs.GetEbsDefaultKmsKeyIdRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetEbsDefaultKmsKeyIdRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEbsDefaultKmsKeyIdRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEbsEncryptionByDefaultRequest:
    boto3_raw_data: "type_defs.GetEbsEncryptionByDefaultRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetEbsEncryptionByDefaultRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEbsEncryptionByDefaultRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetGroupsForCapacityReservationRequest:
    boto3_raw_data: "type_defs.GetGroupsForCapacityReservationRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetGroupsForCapacityReservationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetGroupsForCapacityReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetHostReservationPurchasePreviewRequest:
    boto3_raw_data: "type_defs.GetHostReservationPurchasePreviewRequestTypeDef" = (
        dataclasses.field()
    )

    HostIdSet = field("HostIdSet")
    OfferingId = field("OfferingId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetHostReservationPurchasePreviewRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetHostReservationPurchasePreviewRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Purchase:
    boto3_raw_data: "type_defs.PurchaseTypeDef" = dataclasses.field()

    CurrencyCode = field("CurrencyCode")
    Duration = field("Duration")
    HostIdSet = field("HostIdSet")
    HostReservationId = field("HostReservationId")
    HourlyPrice = field("HourlyPrice")
    InstanceFamily = field("InstanceFamily")
    PaymentOption = field("PaymentOption")
    UpfrontPrice = field("UpfrontPrice")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PurchaseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PurchaseTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetImageBlockPublicAccessStateRequest:
    boto3_raw_data: "type_defs.GetImageBlockPublicAccessStateRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetImageBlockPublicAccessStateRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetImageBlockPublicAccessStateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceMetadataDefaultsRequest:
    boto3_raw_data: "type_defs.GetInstanceMetadataDefaultsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetInstanceMetadataDefaultsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceMetadataDefaultsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMetadataDefaultsResponse:
    boto3_raw_data: "type_defs.InstanceMetadataDefaultsResponseTypeDef" = (
        dataclasses.field()
    )

    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    InstanceMetadataTags = field("InstanceMetadataTags")
    ManagedBy = field("ManagedBy")
    ManagedExceptionMessage = field("ManagedExceptionMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceMetadataDefaultsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMetadataDefaultsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceTpmEkPubRequest:
    boto3_raw_data: "type_defs.GetInstanceTpmEkPubRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    KeyType = field("KeyType")
    KeyFormat = field("KeyFormat")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInstanceTpmEkPubRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceTpmEkPubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceTypeInfoFromInstanceRequirements:
    boto3_raw_data: "type_defs.InstanceTypeInfoFromInstanceRequirementsTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceTypeInfoFromInstanceRequirementsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceTypeInfoFromInstanceRequirementsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceUefiDataRequest:
    boto3_raw_data: "type_defs.GetInstanceUefiDataRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInstanceUefiDataRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceUefiDataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamAddressHistoryRecord:
    boto3_raw_data: "type_defs.IpamAddressHistoryRecordTypeDef" = dataclasses.field()

    ResourceOwnerId = field("ResourceOwnerId")
    ResourceRegion = field("ResourceRegion")
    ResourceType = field("ResourceType")
    ResourceId = field("ResourceId")
    ResourceCidr = field("ResourceCidr")
    ResourceName = field("ResourceName")
    ResourceComplianceStatus = field("ResourceComplianceStatus")
    ResourceOverlapStatus = field("ResourceOverlapStatus")
    VpcId = field("VpcId")
    SampledStartTime = field("SampledStartTime")
    SampledEndTime = field("SampledEndTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamAddressHistoryRecordTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamAddressHistoryRecordTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetLaunchTemplateDataRequest:
    boto3_raw_data: "type_defs.GetLaunchTemplateDataRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetLaunchTemplateDataRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetLaunchTemplateDataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListAssociationsRequest:
    boto3_raw_data: "type_defs.GetManagedPrefixListAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetManagedPrefixListAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrefixListAssociation:
    boto3_raw_data: "type_defs.PrefixListAssociationTypeDef" = dataclasses.field()

    ResourceId = field("ResourceId")
    ResourceOwner = field("ResourceOwner")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PrefixListAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrefixListAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListEntriesRequest:
    boto3_raw_data: "type_defs.GetManagedPrefixListEntriesRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")
    TargetVersion = field("TargetVersion")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListEntriesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetManagedPrefixListEntriesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrefixListEntry:
    boto3_raw_data: "type_defs.PrefixListEntryTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Description = field("Description")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrefixListEntryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PrefixListEntryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetNetworkInsightsAccessScopeAnalysisFindingsRequest:
    boto3_raw_data: (
        "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetNetworkInsightsAccessScopeContentRequest:
    boto3_raw_data: "type_defs.GetNetworkInsightsAccessScopeContentRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetNetworkInsightsAccessScopeContentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetNetworkInsightsAccessScopeContentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetPasswordDataRequestInstancePasswordData:
    boto3_raw_data: "type_defs.GetPasswordDataRequestInstancePasswordDataTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetPasswordDataRequestInstancePasswordDataTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetPasswordDataRequestInstancePasswordDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetPasswordDataRequest:
    boto3_raw_data: "type_defs.GetPasswordDataRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetPasswordDataRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetPasswordDataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservationValue:
    boto3_raw_data: "type_defs.ReservationValueTypeDef" = dataclasses.field()

    HourlyPrice = field("HourlyPrice")
    RemainingTotalValue = field("RemainingTotalValue")
    RemainingUpfrontValue = field("RemainingUpfrontValue")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ReservationValueTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservationValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerAssociationsRequest:
    boto3_raw_data: "type_defs.GetRouteServerAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetRouteServerAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerPropagationsRequest:
    boto3_raw_data: "type_defs.GetRouteServerPropagationsRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetRouteServerPropagationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerPropagationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSerialConsoleAccessStatusRequest:
    boto3_raw_data: "type_defs.GetSerialConsoleAccessStatusRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSerialConsoleAccessStatusRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSerialConsoleAccessStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSnapshotBlockPublicAccessStateRequest:
    boto3_raw_data: "type_defs.GetSnapshotBlockPublicAccessStateRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSnapshotBlockPublicAccessStateRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSnapshotBlockPublicAccessStateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotPlacementScore:
    boto3_raw_data: "type_defs.SpotPlacementScoreTypeDef" = dataclasses.field()

    Region = field("Region")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Score = field("Score")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotPlacementScoreTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotPlacementScoreTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayAttachmentPropagation:
    boto3_raw_data: "type_defs.TransitGatewayAttachmentPropagationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayAttachmentPropagationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayAttachmentPropagationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteTableAssociation:
    boto3_raw_data: "type_defs.TransitGatewayRouteTableAssociationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayRouteTableAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTableAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteTablePropagation:
    boto3_raw_data: "type_defs.TransitGatewayRouteTablePropagationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    State = field("State")
    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayRouteTablePropagationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTablePropagationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessEndpointPolicyRequest:
    boto3_raw_data: "type_defs.GetVerifiedAccessEndpointPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessEndpointPolicyRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessEndpointPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessEndpointTargetsRequest:
    boto3_raw_data: "type_defs.GetVerifiedAccessEndpointTargetsRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessEndpointTargetsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessEndpointTargetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointTarget:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointTargetTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    VerifiedAccessEndpointTargetIpAddress = field(
        "VerifiedAccessEndpointTargetIpAddress"
    )
    VerifiedAccessEndpointTargetDns = field("VerifiedAccessEndpointTargetDns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointTargetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessGroupPolicyRequest:
    boto3_raw_data: "type_defs.GetVerifiedAccessGroupPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessGroupPolicyRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessGroupPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnConnectionDeviceSampleConfigurationRequest:
    boto3_raw_data: (
        "type_defs.GetVpnConnectionDeviceSampleConfigurationRequestTypeDef"
    ) = dataclasses.field()

    VpnConnectionId = field("VpnConnectionId")
    VpnConnectionDeviceTypeId = field("VpnConnectionDeviceTypeId")
    InternetKeyExchangeVersion = field("InternetKeyExchangeVersion")
    SampleType = field("SampleType")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnConnectionDeviceSampleConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetVpnConnectionDeviceSampleConfigurationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnConnectionDeviceTypesRequest:
    boto3_raw_data: "type_defs.GetVpnConnectionDeviceTypesRequestTypeDef" = (
        dataclasses.field()
    )

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnConnectionDeviceTypesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVpnConnectionDeviceTypesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnConnectionDeviceType:
    boto3_raw_data: "type_defs.VpnConnectionDeviceTypeTypeDef" = dataclasses.field()

    VpnConnectionDeviceTypeId = field("VpnConnectionDeviceTypeId")
    Vendor = field("Vendor")
    Platform = field("Platform")
    Software = field("Software")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpnConnectionDeviceTypeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnConnectionDeviceTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnTunnelReplacementStatusRequest:
    boto3_raw_data: "type_defs.GetVpnTunnelReplacementStatusRequestTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnTunnelReplacementStatusRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVpnTunnelReplacementStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MaintenanceDetails:
    boto3_raw_data: "type_defs.MaintenanceDetailsTypeDef" = dataclasses.field()

    PendingMaintenance = field("PendingMaintenance")
    MaintenanceAutoAppliedAfter = field("MaintenanceAutoAppliedAfter")
    LastMaintenanceApplied = field("LastMaintenanceApplied")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MaintenanceDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MaintenanceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GpuDeviceMemoryInfo:
    boto3_raw_data: "type_defs.GpuDeviceMemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GpuDeviceMemoryInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GpuDeviceMemoryInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HibernationOptionsRequest:
    boto3_raw_data: "type_defs.HibernationOptionsRequestTypeDef" = dataclasses.field()

    Configured = field("Configured")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HibernationOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HibernationOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HibernationOptions:
    boto3_raw_data: "type_defs.HibernationOptionsTypeDef" = dataclasses.field()

    Configured = field("Configured")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HibernationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HibernationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HostInstance:
    boto3_raw_data: "type_defs.HostInstanceTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    InstanceType = field("InstanceType")
    OwnerId = field("OwnerId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HostInstanceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HostInstanceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HostProperties:
    boto3_raw_data: "type_defs.HostPropertiesTypeDef" = dataclasses.field()

    Cores = field("Cores")
    InstanceType = field("InstanceType")
    InstanceFamily = field("InstanceFamily")
    Sockets = field("Sockets")
    TotalVCpus = field("TotalVCpus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HostPropertiesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HostPropertiesTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IKEVersionsListValue:
    boto3_raw_data: "type_defs.IKEVersionsListValueTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IKEVersionsListValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IKEVersionsListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IKEVersionsRequestListValue:
    boto3_raw_data: "type_defs.IKEVersionsRequestListValueTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IKEVersionsRequestListValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IKEVersionsRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IamInstanceProfile:
    boto3_raw_data: "type_defs.IamInstanceProfileTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Id = field("Id")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IamInstanceProfileTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IamInstanceProfileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchPermission:
    boto3_raw_data: "type_defs.LaunchPermissionTypeDef" = dataclasses.field()

    OrganizationArn = field("OrganizationArn")
    OrganizationalUnitArn = field("OrganizationalUnitArn")
    UserId = field("UserId")
    Group = field("Group")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LaunchPermissionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchPermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserBucket:
    boto3_raw_data: "type_defs.UserBucketTypeDef" = dataclasses.field()

    S3Bucket = field("S3Bucket")
    S3Key = field("S3Key")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserBucketTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserBucketTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageMetadata:
    boto3_raw_data: "type_defs.ImageMetadataTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    Name = field("Name")
    OwnerId = field("OwnerId")
    State = field("State")
    ImageOwnerAlias = field("ImageOwnerAlias")
    CreationDate = field("CreationDate")
    DeprecationTime = field("DeprecationTime")
    ImageAllowed = field("ImageAllowed")
    IsPublic = field("IsPublic")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageRecycleBinInfo:
    boto3_raw_data: "type_defs.ImageRecycleBinInfoTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    Name = field("Name")
    Description = field("Description")
    RecycleBinEnterTime = field("RecycleBinEnterTime")
    RecycleBinExitTime = field("RecycleBinExitTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageRecycleBinInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageRecycleBinInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StateReason:
    boto3_raw_data: "type_defs.StateReasonTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StateReasonTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StateReasonTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageResourceTypeOptionRequest:
    boto3_raw_data: "type_defs.ImageUsageResourceTypeOptionRequestTypeDef" = (
        dataclasses.field()
    )

    OptionName = field("OptionName")
    OptionValues = field("OptionValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImageUsageResourceTypeOptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageResourceTypeOptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageResourceTypeOption:
    boto3_raw_data: "type_defs.ImageUsageResourceTypeOptionTypeDef" = (
        dataclasses.field()
    )

    OptionName = field("OptionName")
    OptionValues = field("OptionValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageUsageResourceTypeOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageResourceTypeOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportClientVpnClientCertificateRevocationListRequest:
    boto3_raw_data: (
        "type_defs.ImportClientVpnClientCertificateRevocationListRequestTypeDef"
    ) = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    CertificateRevocationList = field("CertificateRevocationList")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportClientVpnClientCertificateRevocationListRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ImportClientVpnClientCertificateRevocationListRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportImageLicenseConfigurationRequest:
    boto3_raw_data: "type_defs.ImportImageLicenseConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportImageLicenseConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportImageLicenseConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportImageLicenseConfigurationResponse:
    boto3_raw_data: "type_defs.ImportImageLicenseConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportImageLicenseConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportImageLicenseConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserData:
    boto3_raw_data: "type_defs.UserDataTypeDef" = dataclasses.field()

    Data = field("Data")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserDataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserDataTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceDeviceMemoryInfo:
    boto3_raw_data: "type_defs.InferenceDeviceMemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceDeviceMemoryInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceDeviceMemoryInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InitializationStatusDetails:
    boto3_raw_data: "type_defs.InitializationStatusDetailsTypeDef" = dataclasses.field()

    InitializationType = field("InitializationType")
    Progress = field("Progress")
    EstimatedTimeToCompleteInSeconds = field("EstimatedTimeToCompleteInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InitializationStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InitializationStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceAttachmentEnaSrdUdpSpecification:
    boto3_raw_data: "type_defs.InstanceAttachmentEnaSrdUdpSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdUdpEnabled = field("EnaSrdUdpEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceAttachmentEnaSrdUdpSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceAttachmentEnaSrdUdpSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceConnectEndpointDnsNames:
    boto3_raw_data: "type_defs.InstanceConnectEndpointDnsNamesTypeDef" = (
        dataclasses.field()
    )

    DnsName = field("DnsName")
    FipsDnsName = field("FipsDnsName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceConnectEndpointDnsNamesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceConnectEndpointDnsNamesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceCount:
    boto3_raw_data: "type_defs.InstanceCountTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceCountTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceCountTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceCreditSpecificationRequest:
    boto3_raw_data: "type_defs.InstanceCreditSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceCreditSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceCreditSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowTimeRange:
    boto3_raw_data: "type_defs.InstanceEventWindowTimeRangeTypeDef" = (
        dataclasses.field()
    )

    StartWeekDay = field("StartWeekDay")
    StartHour = field("StartHour")
    EndWeekDay = field("EndWeekDay")
    EndHour = field("EndHour")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceEventWindowTimeRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowTimeRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceState:
    boto3_raw_data: "type_defs.InstanceStateTypeDef" = dataclasses.field()

    Code = field("Code")
    Name = field("Name")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceStateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceStateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceIpv4Prefix:
    boto3_raw_data: "type_defs.InstanceIpv4PrefixTypeDef" = dataclasses.field()

    Ipv4Prefix = field("Ipv4Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceIpv4PrefixTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceIpv4PrefixTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceIpv6AddressRequest:
    boto3_raw_data: "type_defs.InstanceIpv6AddressRequestTypeDef" = dataclasses.field()

    Ipv6Address = field("Ipv6Address")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceIpv6AddressRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceIpv6AddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceIpv6Prefix:
    boto3_raw_data: "type_defs.InstanceIpv6PrefixTypeDef" = dataclasses.field()

    Ipv6Prefix = field("Ipv6Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceIpv6PrefixTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceIpv6PrefixTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMaintenanceOptionsRequest:
    boto3_raw_data: "type_defs.InstanceMaintenanceOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    AutoRecovery = field("AutoRecovery")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceMaintenanceOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMaintenanceOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMaintenanceOptions:
    boto3_raw_data: "type_defs.InstanceMaintenanceOptionsTypeDef" = dataclasses.field()

    AutoRecovery = field("AutoRecovery")
    RebootMigration = field("RebootMigration")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceMaintenanceOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMaintenanceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMetadataOptionsRequest:
    boto3_raw_data: "type_defs.InstanceMetadataOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceMetadataOptionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMetadataOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMetadataOptionsResponse:
    boto3_raw_data: "type_defs.InstanceMetadataOptionsResponseTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstanceMetadataOptionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMetadataOptionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Monitoring:
    boto3_raw_data: "type_defs.MonitoringTypeDef" = dataclasses.field()

    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MonitoringTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MonitoringTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkInterfaceAssociation:
    boto3_raw_data: "type_defs.InstanceNetworkInterfaceAssociationTypeDef" = (
        dataclasses.field()
    )

    CarrierIp = field("CarrierIp")
    CustomerOwnedIp = field("CustomerOwnedIp")
    IpOwnerId = field("IpOwnerId")
    PublicDnsName = field("PublicDnsName")
    PublicIp = field("PublicIp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkInterfaceAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkInterfaceAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkPerformanceOptionsRequest:
    boto3_raw_data: "type_defs.InstanceNetworkPerformanceOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    BandwidthWeighting = field("BandwidthWeighting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkPerformanceOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkPerformanceOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkPerformanceOptions:
    boto3_raw_data: "type_defs.InstanceNetworkPerformanceOptionsTypeDef" = (
        dataclasses.field()
    )

    BandwidthWeighting = field("BandwidthWeighting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkPerformanceOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkPerformanceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemoryGiBPerVCpu:
    boto3_raw_data: "type_defs.MemoryGiBPerVCpuTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemoryGiBPerVCpuTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MemoryGiBPerVCpuTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemoryMiB:
    boto3_raw_data: "type_defs.MemoryMiBTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemoryMiBTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MemoryMiBTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkBandwidthGbps:
    boto3_raw_data: "type_defs.NetworkBandwidthGbpsTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkBandwidthGbpsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkBandwidthGbpsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceCount:
    boto3_raw_data: "type_defs.NetworkInterfaceCountTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceCountTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceCountTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalLocalStorageGB:
    boto3_raw_data: "type_defs.TotalLocalStorageGBTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalLocalStorageGBTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalLocalStorageGBTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VCpuCountRange:
    boto3_raw_data: "type_defs.VCpuCountRangeTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VCpuCountRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VCpuCountRangeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemoryGiBPerVCpuRequest:
    boto3_raw_data: "type_defs.MemoryGiBPerVCpuRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MemoryGiBPerVCpuRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MemoryGiBPerVCpuRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemoryMiBRequest:
    boto3_raw_data: "type_defs.MemoryMiBRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemoryMiBRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MemoryMiBRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkBandwidthGbpsRequest:
    boto3_raw_data: "type_defs.NetworkBandwidthGbpsRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkBandwidthGbpsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkBandwidthGbpsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceCountRequest:
    boto3_raw_data: "type_defs.NetworkInterfaceCountRequestTypeDef" = (
        dataclasses.field()
    )

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceCountRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceCountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalLocalStorageGBRequest:
    boto3_raw_data: "type_defs.TotalLocalStorageGBRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalLocalStorageGBRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalLocalStorageGBRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VCpuCountRangeRequest:
    boto3_raw_data: "type_defs.VCpuCountRangeRequestTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VCpuCountRangeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VCpuCountRangeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStatusDetails:
    boto3_raw_data: "type_defs.InstanceStatusDetailsTypeDef" = dataclasses.field()

    ImpairedSince = field("ImpairedSince")
    Name = field("Name")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStatusEvent:
    boto3_raw_data: "type_defs.InstanceStatusEventTypeDef" = dataclasses.field()

    InstanceEventId = field("InstanceEventId")
    Code = field("Code")
    Description = field("Description")
    NotAfter = field("NotAfter")
    NotBefore = field("NotBefore")
    NotBeforeDeadline = field("NotBeforeDeadline")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceStatusEventTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceStatusEventTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LicenseConfiguration:
    boto3_raw_data: "type_defs.LicenseConfigurationTypeDef" = dataclasses.field()

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LicenseConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LicenseConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateDnsNameOptionsResponse:
    boto3_raw_data: "type_defs.PrivateDnsNameOptionsResponseTypeDef" = (
        dataclasses.field()
    )

    HostnameType = field("HostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PrivateDnsNameOptionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateDnsNameOptionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemoryInfo:
    boto3_raw_data: "type_defs.MemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemoryInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MemoryInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NitroTpmInfo:
    boto3_raw_data: "type_defs.NitroTpmInfoTypeDef" = dataclasses.field()

    SupportedVersions = field("SupportedVersions")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NitroTpmInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NitroTpmInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PlacementGroupInfo:
    boto3_raw_data: "type_defs.PlacementGroupInfoTypeDef" = dataclasses.field()

    SupportedStrategies = field("SupportedStrategies")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PlacementGroupInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PlacementGroupInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessorInfo:
    boto3_raw_data: "type_defs.ProcessorInfoTypeDef" = dataclasses.field()

    SupportedArchitectures = field("SupportedArchitectures")
    SustainedClockSpeedInGhz = field("SustainedClockSpeedInGhz")
    SupportedFeatures = field("SupportedFeatures")
    Manufacturer = field("Manufacturer")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessorInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProcessorInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VCpuInfo:
    boto3_raw_data: "type_defs.VCpuInfoTypeDef" = dataclasses.field()

    DefaultVCpus = field("DefaultVCpus")
    DefaultCores = field("DefaultCores")
    DefaultThreadsPerCore = field("DefaultThreadsPerCore")
    ValidCores = field("ValidCores")
    ValidThreadsPerCore = field("ValidThreadsPerCore")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VCpuInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VCpuInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpRange:
    boto3_raw_data: "type_defs.IpRangeTypeDef" = dataclasses.field()

    Description = field("Description")
    CidrIp = field("CidrIp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpRangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6Range:
    boto3_raw_data: "type_defs.Ipv6RangeTypeDef" = dataclasses.field()

    Description = field("Description")
    CidrIpv6 = field("CidrIpv6")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.Ipv6RangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.Ipv6RangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrefixListId:
    boto3_raw_data: "type_defs.PrefixListIdTypeDef" = dataclasses.field()

    Description = field("Description")
    PrefixListId = field("PrefixListId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrefixListIdTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PrefixListIdTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserIdGroupPair:
    boto3_raw_data: "type_defs.UserIdGroupPairTypeDef" = dataclasses.field()

    Description = field("Description")
    UserId = field("UserId")
    GroupName = field("GroupName")
    GroupId = field("GroupId")
    VpcId = field("VpcId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    PeeringStatus = field("PeeringStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserIdGroupPairTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserIdGroupPairTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamCidrAuthorizationContext:
    boto3_raw_data: "type_defs.IpamCidrAuthorizationContextTypeDef" = (
        dataclasses.field()
    )

    Message = field("Message")
    Signature = field("Signature")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamCidrAuthorizationContextTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamCidrAuthorizationContextTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamDiscoveryFailureReason:
    boto3_raw_data: "type_defs.IpamDiscoveryFailureReasonTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamDiscoveryFailureReasonTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamDiscoveryFailureReasonTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPublicAddressSecurityGroup:
    boto3_raw_data: "type_defs.IpamPublicAddressSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    GroupId = field("GroupId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IpamPublicAddressSecurityGroupTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPublicAddressSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamResourceTag:
    boto3_raw_data: "type_defs.IpamResourceTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamResourceTagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpamResourceTagTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamOperatingRegion:
    boto3_raw_data: "type_defs.IpamOperatingRegionTypeDef" = dataclasses.field()

    RegionName = field("RegionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamOperatingRegionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamOperatingRegionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamOrganizationalUnitExclusion:
    boto3_raw_data: "type_defs.IpamOrganizationalUnitExclusionTypeDef" = (
        dataclasses.field()
    )

    OrganizationsEntityPath = field("OrganizationsEntityPath")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IpamOrganizationalUnitExclusionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamOrganizationalUnitExclusionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPoolCidrFailureReason:
    boto3_raw_data: "type_defs.IpamPoolCidrFailureReasonTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamPoolCidrFailureReasonTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPoolCidrFailureReasonTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPoolSourceResource:
    boto3_raw_data: "type_defs.IpamPoolSourceResourceTypeDef" = dataclasses.field()

    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceRegion = field("ResourceRegion")
    ResourceOwner = field("ResourceOwner")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamPoolSourceResourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPoolSourceResourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPublicAddressTag:
    boto3_raw_data: "type_defs.IpamPublicAddressTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamPublicAddressTagTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPublicAddressTagTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv4PrefixSpecificationResponse:
    boto3_raw_data: "type_defs.Ipv4PrefixSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    Ipv4Prefix = field("Ipv4Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Ipv4PrefixSpecificationResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv4PrefixSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6CidrBlock:
    boto3_raw_data: "type_defs.Ipv6CidrBlockTypeDef" = dataclasses.field()

    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.Ipv6CidrBlockTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.Ipv6CidrBlockTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PoolCidrBlock:
    boto3_raw_data: "type_defs.PoolCidrBlockTypeDef" = dataclasses.field()

    Cidr = field("Cidr")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PoolCidrBlockTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PoolCidrBlockTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6PrefixSpecificationResponse:
    boto3_raw_data: "type_defs.Ipv6PrefixSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    Ipv6Prefix = field("Ipv6Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Ipv6PrefixSpecificationResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv6PrefixSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6PrefixSpecification:
    boto3_raw_data: "type_defs.Ipv6PrefixSpecificationTypeDef" = dataclasses.field()

    Ipv6Prefix = field("Ipv6Prefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ipv6PrefixSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv6PrefixSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LastError:
    boto3_raw_data: "type_defs.LastErrorTypeDef" = dataclasses.field()

    Message = field("Message")
    Code = field("Code")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LastErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LastErrorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunInstancesMonitoringEnabled:
    boto3_raw_data: "type_defs.RunInstancesMonitoringEnabledTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RunInstancesMonitoringEnabledTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RunInstancesMonitoringEnabledTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotPlacement:
    boto3_raw_data: "type_defs.SpotPlacementTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    GroupName = field("GroupName")
    Tenancy = field("Tenancy")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpotPlacementTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpotPlacementTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEbsBlockDeviceRequest:
    boto3_raw_data: "type_defs.LaunchTemplateEbsBlockDeviceRequestTypeDef" = (
        dataclasses.field()
    )

    Encrypted = field("Encrypted")
    DeleteOnTermination = field("DeleteOnTermination")
    Iops = field("Iops")
    KmsKeyId = field("KmsKeyId")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")
    Throughput = field("Throughput")
    VolumeInitializationRate = field("VolumeInitializationRate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateEbsBlockDeviceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEbsBlockDeviceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEbsBlockDevice:
    boto3_raw_data: "type_defs.LaunchTemplateEbsBlockDeviceTypeDef" = (
        dataclasses.field()
    )

    Encrypted = field("Encrypted")
    DeleteOnTermination = field("DeleteOnTermination")
    Iops = field("Iops")
    KmsKeyId = field("KmsKeyId")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")
    Throughput = field("Throughput")
    VolumeInitializationRate = field("VolumeInitializationRate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateEbsBlockDeviceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEbsBlockDeviceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateCpuOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateCpuOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")
    AmdSevSnp = field("AmdSevSnp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateCpuOptionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateCpuOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateCpuOptions:
    boto3_raw_data: "type_defs.LaunchTemplateCpuOptionsTypeDef" = dataclasses.field()

    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")
    AmdSevSnp = field("AmdSevSnp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateCpuOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateCpuOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateElasticInferenceAcceleratorResponse:
    boto3_raw_data: (
        "type_defs.LaunchTemplateElasticInferenceAcceleratorResponseTypeDef"
    ) = dataclasses.field()

    Type = field("Type")
    Count = field("Count")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateElasticInferenceAcceleratorResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateElasticInferenceAcceleratorResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateElasticInferenceAccelerator:
    boto3_raw_data: "type_defs.LaunchTemplateElasticInferenceAcceleratorTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")
    Count = field("Count")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateElasticInferenceAcceleratorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateElasticInferenceAcceleratorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEnaSrdUdpSpecification:
    boto3_raw_data: "type_defs.LaunchTemplateEnaSrdUdpSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdUdpEnabled = field("EnaSrdUdpEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateEnaSrdUdpSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEnaSrdUdpSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEnclaveOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateEnclaveOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateEnclaveOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEnclaveOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEnclaveOptions:
    boto3_raw_data: "type_defs.LaunchTemplateEnclaveOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateEnclaveOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEnclaveOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateHibernationOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateHibernationOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    Configured = field("Configured")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateHibernationOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateHibernationOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateHibernationOptions:
    boto3_raw_data: "type_defs.LaunchTemplateHibernationOptionsTypeDef" = (
        dataclasses.field()
    )

    Configured = field("Configured")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateHibernationOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateHibernationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateIamInstanceProfileSpecificationRequest:
    boto3_raw_data: (
        "type_defs.LaunchTemplateIamInstanceProfileSpecificationRequestTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateIamInstanceProfileSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateIamInstanceProfileSpecificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateIamInstanceProfileSpecification:
    boto3_raw_data: "type_defs.LaunchTemplateIamInstanceProfileSpecificationTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateIamInstanceProfileSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateIamInstanceProfileSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMaintenanceOptionsRequest:
    boto3_raw_data: (
        "type_defs.LaunchTemplateInstanceMaintenanceOptionsRequestTypeDef"
    ) = dataclasses.field()

    AutoRecovery = field("AutoRecovery")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMaintenanceOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateInstanceMaintenanceOptionsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMaintenanceOptions:
    boto3_raw_data: "type_defs.LaunchTemplateInstanceMaintenanceOptionsTypeDef" = (
        dataclasses.field()
    )

    AutoRecovery = field("AutoRecovery")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMaintenanceOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateInstanceMaintenanceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateSpotMarketOptions:
    boto3_raw_data: "type_defs.LaunchTemplateSpotMarketOptionsTypeDef" = (
        dataclasses.field()
    )

    MaxPrice = field("MaxPrice")
    SpotInstanceType = field("SpotInstanceType")
    BlockDurationMinutes = field("BlockDurationMinutes")
    ValidUntil = field("ValidUntil")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateSpotMarketOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateSpotMarketOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMetadataOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateInstanceMetadataOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMetadataOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateInstanceMetadataOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMetadataOptions:
    boto3_raw_data: "type_defs.LaunchTemplateInstanceMetadataOptionsTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMetadataOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateInstanceMetadataOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateLicenseConfigurationRequest:
    boto3_raw_data: "type_defs.LaunchTemplateLicenseConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateLicenseConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateLicenseConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateLicenseConfiguration:
    boto3_raw_data: "type_defs.LaunchTemplateLicenseConfigurationTypeDef" = (
        dataclasses.field()
    )

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateLicenseConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateLicenseConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateNetworkPerformanceOptionsRequest:
    boto3_raw_data: (
        "type_defs.LaunchTemplateNetworkPerformanceOptionsRequestTypeDef"
    ) = dataclasses.field()

    BandwidthWeighting = field("BandwidthWeighting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateNetworkPerformanceOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateNetworkPerformanceOptionsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateNetworkPerformanceOptions:
    boto3_raw_data: "type_defs.LaunchTemplateNetworkPerformanceOptionsTypeDef" = (
        dataclasses.field()
    )

    BandwidthWeighting = field("BandwidthWeighting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateNetworkPerformanceOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateNetworkPerformanceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatePlacementRequest:
    boto3_raw_data: "type_defs.LaunchTemplatePlacementRequestTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Affinity = field("Affinity")
    GroupName = field("GroupName")
    HostId = field("HostId")
    Tenancy = field("Tenancy")
    SpreadDomain = field("SpreadDomain")
    HostResourceGroupArn = field("HostResourceGroupArn")
    PartitionNumber = field("PartitionNumber")
    GroupId = field("GroupId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplatePlacementRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatePlacementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatePlacement:
    boto3_raw_data: "type_defs.LaunchTemplatePlacementTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Affinity = field("Affinity")
    GroupName = field("GroupName")
    HostId = field("HostId")
    Tenancy = field("Tenancy")
    SpreadDomain = field("SpreadDomain")
    HostResourceGroupArn = field("HostResourceGroupArn")
    PartitionNumber = field("PartitionNumber")
    GroupId = field("GroupId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplatePlacementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatePlacementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatePrivateDnsNameOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplatePrivateDnsNameOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    HostnameType = field("HostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplatePrivateDnsNameOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatePrivateDnsNameOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatePrivateDnsNameOptions:
    boto3_raw_data: "type_defs.LaunchTemplatePrivateDnsNameOptionsTypeDef" = (
        dataclasses.field()
    )

    HostnameType = field("HostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplatePrivateDnsNameOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatePrivateDnsNameOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateSpecification:
    boto3_raw_data: "type_defs.LaunchTemplateSpecificationTypeDef" = dataclasses.field()

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatesMonitoringRequest:
    boto3_raw_data: "type_defs.LaunchTemplatesMonitoringRequestTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplatesMonitoringRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatesMonitoringRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplatesMonitoring:
    boto3_raw_data: "type_defs.LaunchTemplatesMonitoringTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplatesMonitoringTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplatesMonitoringTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LicenseConfigurationRequest:
    boto3_raw_data: "type_defs.LicenseConfigurationRequestTypeDef" = dataclasses.field()

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LicenseConfigurationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LicenseConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesInRecycleBinRequest:
    boto3_raw_data: "type_defs.ListImagesInRecycleBinRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListImagesInRecycleBinRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesInRecycleBinRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSnapshotsInRecycleBinRequest:
    boto3_raw_data: "type_defs.ListSnapshotsInRecycleBinRequestTypeDef" = (
        dataclasses.field()
    )

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListSnapshotsInRecycleBinRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSnapshotsInRecycleBinRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotRecycleBinInfo:
    boto3_raw_data: "type_defs.SnapshotRecycleBinInfoTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    RecycleBinEnterTime = field("RecycleBinEnterTime")
    RecycleBinExitTime = field("RecycleBinExitTime")
    Description = field("Description")
    VolumeId = field("VolumeId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotRecycleBinInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotRecycleBinInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadPermissionRequest:
    boto3_raw_data: "type_defs.LoadPermissionRequestTypeDef" = dataclasses.field()

    Group = field("Group")
    UserId = field("UserId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LoadPermissionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MacSystemIntegrityProtectionConfiguration:
    boto3_raw_data: "type_defs.MacSystemIntegrityProtectionConfigurationTypeDef" = (
        dataclasses.field()
    )

    AppleInternal = field("AppleInternal")
    BaseSystem = field("BaseSystem")
    DebuggingRestrictions = field("DebuggingRestrictions")
    DTraceRestrictions = field("DTraceRestrictions")
    FilesystemProtections = field("FilesystemProtections")
    KextSigning = field("KextSigning")
    NvramProtections = field("NvramProtections")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.MacSystemIntegrityProtectionConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MacSystemIntegrityProtectionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MediaDeviceMemoryInfo:
    boto3_raw_data: "type_defs.MediaDeviceMemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MediaDeviceMemoryInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MediaDeviceMemoryInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyAddressAttributeRequest:
    boto3_raw_data: "type_defs.ModifyAddressAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    DomainName = field("DomainName")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyAddressAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyAddressAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyAvailabilityZoneGroupRequest:
    boto3_raw_data: "type_defs.ModifyAvailabilityZoneGroupRequestTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    OptInStatus = field("OptInStatus")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyAvailabilityZoneGroupRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyAvailabilityZoneGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyDefaultCreditSpecificationRequest:
    boto3_raw_data: "type_defs.ModifyDefaultCreditSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceFamily = field("InstanceFamily")
    CpuCredits = field("CpuCredits")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyDefaultCreditSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyDefaultCreditSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyEbsDefaultKmsKeyIdRequest:
    boto3_raw_data: "type_defs.ModifyEbsDefaultKmsKeyIdRequestTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyEbsDefaultKmsKeyIdRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyEbsDefaultKmsKeyIdRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyHostsRequest:
    boto3_raw_data: "type_defs.ModifyHostsRequestTypeDef" = dataclasses.field()

    HostIds = field("HostIds")
    HostRecovery = field("HostRecovery")
    InstanceType = field("InstanceType")
    InstanceFamily = field("InstanceFamily")
    HostMaintenance = field("HostMaintenance")
    AutoPlacement = field("AutoPlacement")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyHostsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyHostsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIdFormatRequest:
    boto3_raw_data: "type_defs.ModifyIdFormatRequestTypeDef" = dataclasses.field()

    Resource = field("Resource")
    UseLongIds = field("UseLongIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIdFormatRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIdentityIdFormatRequest:
    boto3_raw_data: "type_defs.ModifyIdentityIdFormatRequestTypeDef" = (
        dataclasses.field()
    )

    Resource = field("Resource")
    UseLongIds = field("UseLongIds")
    PrincipalArn = field("PrincipalArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyIdentityIdFormatRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIdentityIdFormatRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceConnectEndpointRequest:
    boto3_raw_data: "type_defs.ModifyInstanceConnectEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceConnectEndpointId = field("InstanceConnectEndpointId")
    DryRun = field("DryRun")
    IpAddressType = field("IpAddressType")
    SecurityGroupIds = field("SecurityGroupIds")
    PreserveClientIp = field("PreserveClientIp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceConnectEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceConnectEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCpuOptionsRequest:
    boto3_raw_data: "type_defs.ModifyInstanceCpuOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstanceCpuOptionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceCpuOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SuccessfulInstanceCreditSpecificationItem:
    boto3_raw_data: "type_defs.SuccessfulInstanceCreditSpecificationItemTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SuccessfulInstanceCreditSpecificationItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SuccessfulInstanceCreditSpecificationItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMaintenanceOptionsRequest:
    boto3_raw_data: "type_defs.ModifyInstanceMaintenanceOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    AutoRecovery = field("AutoRecovery")
    RebootMigration = field("RebootMigration")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMaintenanceOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMaintenanceOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMetadataDefaultsRequest:
    boto3_raw_data: "type_defs.ModifyInstanceMetadataDefaultsRequestTypeDef" = (
        dataclasses.field()
    )

    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    InstanceMetadataTags = field("InstanceMetadataTags")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMetadataDefaultsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMetadataDefaultsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMetadataOptionsRequest:
    boto3_raw_data: "type_defs.ModifyInstanceMetadataOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpEndpoint = field("HttpEndpoint")
    DryRun = field("DryRun")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMetadataOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMetadataOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceNetworkPerformanceRequest:
    boto3_raw_data: "type_defs.ModifyInstanceNetworkPerformanceRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    BandwidthWeighting = field("BandwidthWeighting")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceNetworkPerformanceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceNetworkPerformanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstancePlacementRequest:
    boto3_raw_data: "type_defs.ModifyInstancePlacementRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    GroupName = field("GroupName")
    PartitionNumber = field("PartitionNumber")
    HostResourceGroupArn = field("HostResourceGroupArn")
    GroupId = field("GroupId")
    Tenancy = field("Tenancy")
    Affinity = field("Affinity")
    HostId = field("HostId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstancePlacementRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstancePlacementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RemoveIpamOperatingRegion:
    boto3_raw_data: "type_defs.RemoveIpamOperatingRegionTypeDef" = dataclasses.field()

    RegionName = field("RegionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RemoveIpamOperatingRegionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RemoveIpamOperatingRegionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamResourceCidrRequest:
    boto3_raw_data: "type_defs.ModifyIpamResourceCidrRequestTypeDef" = (
        dataclasses.field()
    )

    ResourceId = field("ResourceId")
    ResourceCidr = field("ResourceCidr")
    ResourceRegion = field("ResourceRegion")
    CurrentIpamScopeId = field("CurrentIpamScopeId")
    Monitored = field("Monitored")
    DryRun = field("DryRun")
    DestinationIpamScopeId = field("DestinationIpamScopeId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyIpamResourceCidrRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamResourceCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RemoveIpamOrganizationalUnitExclusion:
    boto3_raw_data: "type_defs.RemoveIpamOrganizationalUnitExclusionTypeDef" = (
        dataclasses.field()
    )

    OrganizationsEntityPath = field("OrganizationsEntityPath")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RemoveIpamOrganizationalUnitExclusionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RemoveIpamOrganizationalUnitExclusionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamScopeRequest:
    boto3_raw_data: "type_defs.ModifyIpamScopeRequestTypeDef" = dataclasses.field()

    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamScopeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamScopeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyLaunchTemplateRequest:
    boto3_raw_data: "type_defs.ModifyLaunchTemplateRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    DefaultVersion = field("DefaultVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyLaunchTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyLaunchTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyLocalGatewayRouteRequest:
    boto3_raw_data: "type_defs.ModifyLocalGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    DestinationCidrBlock = field("DestinationCidrBlock")
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    DryRun = field("DryRun")
    DestinationPrefixListId = field("DestinationPrefixListId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyLocalGatewayRouteRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyLocalGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RemovePrefixListEntry:
    boto3_raw_data: "type_defs.RemovePrefixListEntryTypeDef" = dataclasses.field()

    Cidr = field("Cidr")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RemovePrefixListEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RemovePrefixListEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceAttachmentChanges:
    boto3_raw_data: "type_defs.NetworkInterfaceAttachmentChangesTypeDef" = (
        dataclasses.field()
    )

    DefaultEnaQueueCount = field("DefaultEnaQueueCount")
    EnaQueueCount = field("EnaQueueCount")
    AttachmentId = field("AttachmentId")
    DeleteOnTermination = field("DeleteOnTermination")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NetworkInterfaceAttachmentChangesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceAttachmentChangesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyPrivateDnsNameOptionsRequest:
    boto3_raw_data: "type_defs.ModifyPrivateDnsNameOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")
    PrivateDnsHostnameType = field("PrivateDnsHostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyPrivateDnsNameOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyPrivateDnsNameOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyPublicIpDnsNameOptionsRequest:
    boto3_raw_data: "type_defs.ModifyPublicIpDnsNameOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    HostnameType = field("HostnameType")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyPublicIpDnsNameOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyPublicIpDnsNameOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesConfiguration:
    boto3_raw_data: "type_defs.ReservedInstancesConfigurationTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")
    InstanceCount = field("InstanceCount")
    InstanceType = field("InstanceType")
    Platform = field("Platform")
    Scope = field("Scope")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReservedInstancesConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyRouteServerRequest:
    boto3_raw_data: "type_defs.ModifyRouteServerRequestTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    PersistRoutes = field("PersistRoutes")
    PersistRoutesDuration = field("PersistRoutesDuration")
    SnsNotificationsEnabled = field("SnsNotificationsEnabled")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyRouteServerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyRouteServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySnapshotTierRequest:
    boto3_raw_data: "type_defs.ModifySnapshotTierRequestTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    StorageTier = field("StorageTier")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifySnapshotTierRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySnapshotTierRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorFilterNetworkServicesRequest:
    boto3_raw_data: (
        "type_defs.ModifyTrafficMirrorFilterNetworkServicesRequestTypeDef"
    ) = dataclasses.field()

    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    AddNetworkServices = field("AddNetworkServices")
    RemoveNetworkServices = field("RemoveNetworkServices")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTrafficMirrorFilterNetworkServicesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyTrafficMirrorFilterNetworkServicesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorSessionRequest:
    boto3_raw_data: "type_defs.ModifyTrafficMirrorSessionRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorSessionId = field("TrafficMirrorSessionId")
    TrafficMirrorTargetId = field("TrafficMirrorTargetId")
    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    PacketLength = field("PacketLength")
    SessionNumber = field("SessionNumber")
    VirtualNetworkId = field("VirtualNetworkId")
    Description = field("Description")
    RemoveFields = field("RemoveFields")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTrafficMirrorSessionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTrafficMirrorSessionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayOptions:
    boto3_raw_data: "type_defs.ModifyTransitGatewayOptionsTypeDef" = dataclasses.field()

    AddTransitGatewayCidrBlocks = field("AddTransitGatewayCidrBlocks")
    RemoveTransitGatewayCidrBlocks = field("RemoveTransitGatewayCidrBlocks")
    VpnEcmpSupport = field("VpnEcmpSupport")
    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    AutoAcceptSharedAttachments = field("AutoAcceptSharedAttachments")
    DefaultRouteTableAssociation = field("DefaultRouteTableAssociation")
    AssociationDefaultRouteTableId = field("AssociationDefaultRouteTableId")
    DefaultRouteTablePropagation = field("DefaultRouteTablePropagation")
    PropagationDefaultRouteTableId = field("PropagationDefaultRouteTableId")
    AmazonSideAsn = field("AmazonSideAsn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyTransitGatewayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayPrefixListReferenceRequest:
    boto3_raw_data: (
        "type_defs.ModifyTransitGatewayPrefixListReferenceRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    PrefixListId = field("PrefixListId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    Blackhole = field("Blackhole")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTransitGatewayPrefixListReferenceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyTransitGatewayPrefixListReferenceRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayVpcAttachmentRequestOptions:
    boto3_raw_data: (
        "type_defs.ModifyTransitGatewayVpcAttachmentRequestOptionsTypeDef"
    ) = dataclasses.field()

    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    Ipv6Support = field("Ipv6Support")
    ApplianceModeSupport = field("ApplianceModeSupport")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTransitGatewayVpcAttachmentRequestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyTransitGatewayVpcAttachmentRequestOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointPortRange:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointPortRangeTypeDef" = (
        dataclasses.field()
    )

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointPortRangeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointPortRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessSseSpecificationResponse:
    boto3_raw_data: "type_defs.VerifiedAccessSseSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    CustomerManagedKeyEnabled = field("CustomerManagedKeyEnabled")
    KmsKeyArn = field("KmsKeyArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessSseSpecificationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessSseSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointRdsOptions:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointRdsOptionsTypeDef" = (
        dataclasses.field()
    )

    SubnetIds = field("SubnetIds")
    Port = field("Port")
    RdsEndpoint = field("RdsEndpoint")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointRdsOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointRdsOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessGroupRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessGroupRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Description = field("Description")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyVerifiedAccessGroupRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessInstanceRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessInstanceRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Description = field("Description")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    CidrEndpointsCustomSubDomain = field("CidrEndpointsCustomSubDomain")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessInstanceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessNativeApplicationOidcOptions:
    boto3_raw_data: (
        "type_defs.ModifyVerifiedAccessNativeApplicationOidcOptionsTypeDef"
    ) = dataclasses.field()

    PublicSigningKeyEndpoint = field("PublicSigningKeyEndpoint")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessNativeApplicationOidcOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVerifiedAccessNativeApplicationOidcOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessTrustProviderDeviceOptions:
    boto3_raw_data: (
        "type_defs.ModifyVerifiedAccessTrustProviderDeviceOptionsTypeDef"
    ) = dataclasses.field()

    PublicSigningKeyUrl = field("PublicSigningKeyUrl")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessTrustProviderDeviceOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVerifiedAccessTrustProviderDeviceOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessTrustProviderOidcOptions:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessTrustProviderOidcOptionsTypeDef" = (
        dataclasses.field()
    )

    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessTrustProviderOidcOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessTrustProviderOidcOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVolumeRequest:
    boto3_raw_data: "type_defs.ModifyVolumeRequestTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    DryRun = field("DryRun")
    Size = field("Size")
    VolumeType = field("VolumeType")
    Iops = field("Iops")
    Throughput = field("Throughput")
    MultiAttachEnabled = field("MultiAttachEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcBlockPublicAccessExclusionRequest:
    boto3_raw_data: "type_defs.ModifyVpcBlockPublicAccessExclusionRequestTypeDef" = (
        dataclasses.field()
    )

    ExclusionId = field("ExclusionId")
    InternetGatewayExclusionMode = field("InternetGatewayExclusionMode")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcBlockPublicAccessExclusionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcBlockPublicAccessExclusionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcBlockPublicAccessOptionsRequest:
    boto3_raw_data: "type_defs.ModifyVpcBlockPublicAccessOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    InternetGatewayBlockMode = field("InternetGatewayBlockMode")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcBlockPublicAccessOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcBlockPublicAccessOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointConnectionNotificationRequest:
    boto3_raw_data: (
        "type_defs.ModifyVpcEndpointConnectionNotificationRequestTypeDef"
    ) = dataclasses.field()

    ConnectionNotificationId = field("ConnectionNotificationId")
    DryRun = field("DryRun")
    ConnectionNotificationArn = field("ConnectionNotificationArn")
    ConnectionEvents = field("ConnectionEvents")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointConnectionNotificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVpcEndpointConnectionNotificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServiceConfigurationRequest:
    boto3_raw_data: "type_defs.ModifyVpcEndpointServiceConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceId = field("ServiceId")
    DryRun = field("DryRun")
    PrivateDnsName = field("PrivateDnsName")
    RemovePrivateDnsName = field("RemovePrivateDnsName")
    AcceptanceRequired = field("AcceptanceRequired")
    AddNetworkLoadBalancerArns = field("AddNetworkLoadBalancerArns")
    RemoveNetworkLoadBalancerArns = field("RemoveNetworkLoadBalancerArns")
    AddGatewayLoadBalancerArns = field("AddGatewayLoadBalancerArns")
    RemoveGatewayLoadBalancerArns = field("RemoveGatewayLoadBalancerArns")
    AddSupportedIpAddressTypes = field("AddSupportedIpAddressTypes")
    RemoveSupportedIpAddressTypes = field("RemoveSupportedIpAddressTypes")
    AddSupportedRegions = field("AddSupportedRegions")
    RemoveSupportedRegions = field("RemoveSupportedRegions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServiceConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointServiceConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServicePayerResponsibilityRequest:
    boto3_raw_data: (
        "type_defs.ModifyVpcEndpointServicePayerResponsibilityRequestTypeDef"
    ) = dataclasses.field()

    ServiceId = field("ServiceId")
    PayerResponsibility = field("PayerResponsibility")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServicePayerResponsibilityRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVpcEndpointServicePayerResponsibilityRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServicePermissionsRequest:
    boto3_raw_data: "type_defs.ModifyVpcEndpointServicePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceId = field("ServiceId")
    DryRun = field("DryRun")
    AddAllowedPrincipals = field("AddAllowedPrincipals")
    RemoveAllowedPrincipals = field("RemoveAllowedPrincipals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServicePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointServicePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeeringConnectionOptionsRequest:
    boto3_raw_data: "type_defs.PeeringConnectionOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    AllowDnsResolutionFromRemoteVpc = field("AllowDnsResolutionFromRemoteVpc")
    AllowEgressFromLocalClassicLinkToRemoteVpc = field(
        "AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    AllowEgressFromLocalVpcToRemoteClassicLink = field(
        "AllowEgressFromLocalVpcToRemoteClassicLink"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PeeringConnectionOptionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PeeringConnectionOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeeringConnectionOptions:
    boto3_raw_data: "type_defs.PeeringConnectionOptionsTypeDef" = dataclasses.field()

    AllowDnsResolutionFromRemoteVpc = field("AllowDnsResolutionFromRemoteVpc")
    AllowEgressFromLocalClassicLinkToRemoteVpc = field(
        "AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    AllowEgressFromLocalVpcToRemoteClassicLink = field(
        "AllowEgressFromLocalVpcToRemoteClassicLink"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PeeringConnectionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PeeringConnectionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcTenancyRequest:
    boto3_raw_data: "type_defs.ModifyVpcTenancyRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    InstanceTenancy = field("InstanceTenancy")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpcTenancyRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcTenancyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnConnectionOptionsRequest:
    boto3_raw_data: "type_defs.ModifyVpnConnectionOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    LocalIpv4NetworkCidr = field("LocalIpv4NetworkCidr")
    RemoteIpv4NetworkCidr = field("RemoteIpv4NetworkCidr")
    LocalIpv6NetworkCidr = field("LocalIpv6NetworkCidr")
    RemoteIpv6NetworkCidr = field("RemoteIpv6NetworkCidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpnConnectionOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnConnectionOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnConnectionRequest:
    boto3_raw_data: "type_defs.ModifyVpnConnectionRequestTypeDef" = dataclasses.field()

    VpnConnectionId = field("VpnConnectionId")
    TransitGatewayId = field("TransitGatewayId")
    CustomerGatewayId = field("CustomerGatewayId")
    VpnGatewayId = field("VpnGatewayId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpnConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnTunnelCertificateRequest:
    boto3_raw_data: "type_defs.ModifyVpnTunnelCertificateRequestTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpnTunnelCertificateRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnTunnelCertificateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1DHGroupNumbersRequestListValue:
    boto3_raw_data: "type_defs.Phase1DHGroupNumbersRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase1DHGroupNumbersRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1DHGroupNumbersRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1EncryptionAlgorithmsRequestListValue:
    boto3_raw_data: "type_defs.Phase1EncryptionAlgorithmsRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase1EncryptionAlgorithmsRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1EncryptionAlgorithmsRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1IntegrityAlgorithmsRequestListValue:
    boto3_raw_data: "type_defs.Phase1IntegrityAlgorithmsRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase1IntegrityAlgorithmsRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1IntegrityAlgorithmsRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2DHGroupNumbersRequestListValue:
    boto3_raw_data: "type_defs.Phase2DHGroupNumbersRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase2DHGroupNumbersRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2DHGroupNumbersRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2EncryptionAlgorithmsRequestListValue:
    boto3_raw_data: "type_defs.Phase2EncryptionAlgorithmsRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase2EncryptionAlgorithmsRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2EncryptionAlgorithmsRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2IntegrityAlgorithmsRequestListValue:
    boto3_raw_data: "type_defs.Phase2IntegrityAlgorithmsRequestListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase2IntegrityAlgorithmsRequestListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2IntegrityAlgorithmsRequestListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitorInstancesRequestInstanceMonitor:
    boto3_raw_data: "type_defs.MonitorInstancesRequestInstanceMonitorTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.MonitorInstancesRequestInstanceMonitorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitorInstancesRequestInstanceMonitorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitorInstancesRequest:
    boto3_raw_data: "type_defs.MonitorInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitorInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitorInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveAddressToVpcRequest:
    boto3_raw_data: "type_defs.MoveAddressToVpcRequestTypeDef" = dataclasses.field()

    PublicIp = field("PublicIp")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MoveAddressToVpcRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveAddressToVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveByoipCidrToIpamRequest:
    boto3_raw_data: "type_defs.MoveByoipCidrToIpamRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    IpamPoolId = field("IpamPoolId")
    IpamPoolOwner = field("IpamPoolOwner")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MoveByoipCidrToIpamRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveByoipCidrToIpamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveCapacityReservationInstancesRequest:
    boto3_raw_data: "type_defs.MoveCapacityReservationInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    SourceCapacityReservationId = field("SourceCapacityReservationId")
    DestinationCapacityReservationId = field("DestinationCapacityReservationId")
    InstanceCount = field("InstanceCount")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.MoveCapacityReservationInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveCapacityReservationInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionedBandwidth:
    boto3_raw_data: "type_defs.ProvisionedBandwidthTypeDef" = dataclasses.field()

    ProvisionTime = field("ProvisionTime")
    Provisioned = field("Provisioned")
    RequestTime = field("RequestTime")
    Requested = field("Requested")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionedBandwidthTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionedBandwidthTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NativeApplicationOidcOptions:
    boto3_raw_data: "type_defs.NativeApplicationOidcOptionsTypeDef" = (
        dataclasses.field()
    )

    PublicSigningKeyEndpoint = field("PublicSigningKeyEndpoint")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NativeApplicationOidcOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NativeApplicationOidcOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkAclAssociation:
    boto3_raw_data: "type_defs.NetworkAclAssociationTypeDef" = dataclasses.field()

    NetworkAclAssociationId = field("NetworkAclAssociationId")
    NetworkAclId = field("NetworkAclId")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkAclAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkAclAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkCardInfo:
    boto3_raw_data: "type_defs.NetworkCardInfoTypeDef" = dataclasses.field()

    NetworkCardIndex = field("NetworkCardIndex")
    NetworkPerformance = field("NetworkPerformance")
    MaximumNetworkInterfaces = field("MaximumNetworkInterfaces")
    BaselineBandwidthInGbps = field("BaselineBandwidthInGbps")
    PeakBandwidthInGbps = field("PeakBandwidthInGbps")
    DefaultEnaQueueCountPerInterface = field("DefaultEnaQueueCountPerInterface")
    MaximumEnaQueueCount = field("MaximumEnaQueueCount")
    MaximumEnaQueueCountPerInterface = field("MaximumEnaQueueCountPerInterface")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkCardInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkCardInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceAssociation:
    boto3_raw_data: "type_defs.NetworkInterfaceAssociationTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    AssociationId = field("AssociationId")
    IpOwnerId = field("IpOwnerId")
    PublicDnsName = field("PublicDnsName")
    PublicIp = field("PublicIp")
    CustomerOwnedIp = field("CustomerOwnedIp")
    CarrierIp = field("CarrierIp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceIpv6Address:
    boto3_raw_data: "type_defs.NetworkInterfaceIpv6AddressTypeDef" = dataclasses.field()

    Ipv6Address = field("Ipv6Address")
    PublicIpv6DnsName = field("PublicIpv6DnsName")
    IsPrimaryIpv6 = field("IsPrimaryIpv6")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceIpv6AddressTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceIpv6AddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfacePermissionState:
    boto3_raw_data: "type_defs.NetworkInterfacePermissionStateTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NetworkInterfacePermissionStateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfacePermissionStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PublicIpDnsNameOptions:
    boto3_raw_data: "type_defs.PublicIpDnsNameOptionsTypeDef" = dataclasses.field()

    DnsHostnameType = field("DnsHostnameType")
    PublicIpv4DnsName = field("PublicIpv4DnsName")
    PublicIpv6DnsName = field("PublicIpv6DnsName")
    PublicDualStackDnsName = field("PublicDualStackDnsName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PublicIpDnsNameOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PublicIpDnsNameOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeuronDeviceCoreInfo:
    boto3_raw_data: "type_defs.NeuronDeviceCoreInfoTypeDef" = dataclasses.field()

    Count = field("Count")
    Version = field("Version")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NeuronDeviceCoreInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NeuronDeviceCoreInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeuronDeviceMemoryInfo:
    boto3_raw_data: "type_defs.NeuronDeviceMemoryInfoTypeDef" = dataclasses.field()

    SizeInMiB = field("SizeInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NeuronDeviceMemoryInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NeuronDeviceMemoryInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OidcOptions:
    boto3_raw_data: "type_defs.OidcOptionsTypeDef" = dataclasses.field()

    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Scope = field("Scope")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OidcOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OidcOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PacketHeaderStatementRequest:
    boto3_raw_data: "type_defs.PacketHeaderStatementRequestTypeDef" = (
        dataclasses.field()
    )

    SourceAddresses = field("SourceAddresses")
    DestinationAddresses = field("DestinationAddresses")
    SourcePorts = field("SourcePorts")
    DestinationPorts = field("DestinationPorts")
    SourcePrefixLists = field("SourcePrefixLists")
    DestinationPrefixLists = field("DestinationPrefixLists")
    Protocols = field("Protocols")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PacketHeaderStatementRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PacketHeaderStatementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PacketHeaderStatement:
    boto3_raw_data: "type_defs.PacketHeaderStatementTypeDef" = dataclasses.field()

    SourceAddresses = field("SourceAddresses")
    DestinationAddresses = field("DestinationAddresses")
    SourcePorts = field("SourcePorts")
    DestinationPorts = field("DestinationPorts")
    SourcePrefixLists = field("SourcePrefixLists")
    DestinationPrefixLists = field("DestinationPrefixLists")
    Protocols = field("Protocols")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PacketHeaderStatementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PacketHeaderStatementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestFilterPortRange:
    boto3_raw_data: "type_defs.RequestFilterPortRangeTypeDef" = dataclasses.field()

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestFilterPortRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestFilterPortRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceStatementRequest:
    boto3_raw_data: "type_defs.ResourceStatementRequestTypeDef" = dataclasses.field()

    Resources = field("Resources")
    ResourceTypes = field("ResourceTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceStatementRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceStatementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceStatement:
    boto3_raw_data: "type_defs.ResourceStatementTypeDef" = dataclasses.field()

    Resources = field("Resources")
    ResourceTypes = field("ResourceTypes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceStatementTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceStatementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeeringAttachmentStatus:
    boto3_raw_data: "type_defs.PeeringAttachmentStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PeeringAttachmentStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PeeringAttachmentStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeeringTgwInfo:
    boto3_raw_data: "type_defs.PeeringTgwInfoTypeDef" = dataclasses.field()

    TransitGatewayId = field("TransitGatewayId")
    CoreNetworkId = field("CoreNetworkId")
    OwnerId = field("OwnerId")
    Region = field("Region")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PeeringTgwInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PeeringTgwInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1DHGroupNumbersListValue:
    boto3_raw_data: "type_defs.Phase1DHGroupNumbersListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Phase1DHGroupNumbersListValueTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1DHGroupNumbersListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1EncryptionAlgorithmsListValue:
    boto3_raw_data: "type_defs.Phase1EncryptionAlgorithmsListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase1EncryptionAlgorithmsListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1EncryptionAlgorithmsListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase1IntegrityAlgorithmsListValue:
    boto3_raw_data: "type_defs.Phase1IntegrityAlgorithmsListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase1IntegrityAlgorithmsListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase1IntegrityAlgorithmsListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2DHGroupNumbersListValue:
    boto3_raw_data: "type_defs.Phase2DHGroupNumbersListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.Phase2DHGroupNumbersListValueTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2DHGroupNumbersListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2EncryptionAlgorithmsListValue:
    boto3_raw_data: "type_defs.Phase2EncryptionAlgorithmsListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase2EncryptionAlgorithmsListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2EncryptionAlgorithmsListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase2IntegrityAlgorithmsListValue:
    boto3_raw_data: "type_defs.Phase2IntegrityAlgorithmsListValueTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.Phase2IntegrityAlgorithmsListValueTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Phase2IntegrityAlgorithmsListValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PriceSchedule:
    boto3_raw_data: "type_defs.PriceScheduleTypeDef" = dataclasses.field()

    Active = field("Active")
    CurrencyCode = field("CurrencyCode")
    Price = field("Price")
    Term = field("Term")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PriceScheduleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PriceScheduleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PricingDetail:
    boto3_raw_data: "type_defs.PricingDetailTypeDef" = dataclasses.field()

    Count = field("Count")
    Price = field("Price")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PricingDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PricingDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateDnsDetails:
    boto3_raw_data: "type_defs.PrivateDnsDetailsTypeDef" = dataclasses.field()

    PrivateDnsName = field("PrivateDnsName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrivateDnsDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateDnsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateDnsNameConfiguration:
    boto3_raw_data: "type_defs.PrivateDnsNameConfigurationTypeDef" = dataclasses.field()

    State = field("State")
    Type = field("Type")
    Value = field("Value")
    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PrivateDnsNameConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateDnsNameConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateDnsNameOptionsOnLaunch:
    boto3_raw_data: "type_defs.PrivateDnsNameOptionsOnLaunchTypeDef" = (
        dataclasses.field()
    )

    HostnameType = field("HostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PrivateDnsNameOptionsOnLaunchTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateDnsNameOptionsOnLaunchTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrivateDnsNameOptionsRequest:
    boto3_raw_data: "type_defs.PrivateDnsNameOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    HostnameType = field("HostnameType")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PrivateDnsNameOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrivateDnsNameOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PropagatingVgw:
    boto3_raw_data: "type_defs.PropagatingVgwTypeDef" = dataclasses.field()

    GatewayId = field("GatewayId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PropagatingVgwTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PropagatingVgwTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionPublicIpv4PoolCidrRequest:
    boto3_raw_data: "type_defs.ProvisionPublicIpv4PoolCidrRequestTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    PoolId = field("PoolId")
    NetmaskLength = field("NetmaskLength")
    DryRun = field("DryRun")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProvisionPublicIpv4PoolCidrRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionPublicIpv4PoolCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PublicIpv4PoolRange:
    boto3_raw_data: "type_defs.PublicIpv4PoolRangeTypeDef" = dataclasses.field()

    FirstAddress = field("FirstAddress")
    LastAddress = field("LastAddress")
    AddressCount = field("AddressCount")
    AvailableAddressCount = field("AvailableAddressCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PublicIpv4PoolRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PublicIpv4PoolRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseCapacityBlockExtensionRequest:
    boto3_raw_data: "type_defs.PurchaseCapacityBlockExtensionRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockExtensionOfferingId = field("CapacityBlockExtensionOfferingId")
    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PurchaseCapacityBlockExtensionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseCapacityBlockExtensionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseRequest:
    boto3_raw_data: "type_defs.PurchaseRequestTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    PurchaseToken = field("PurchaseToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PurchaseRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PurchaseRequestTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstanceLimitPrice:
    boto3_raw_data: "type_defs.ReservedInstanceLimitPriceTypeDef" = dataclasses.field()

    Amount = field("Amount")
    CurrencyCode = field("CurrencyCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedInstanceLimitPriceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstanceLimitPriceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RebootInstancesRequestInstanceReboot:
    boto3_raw_data: "type_defs.RebootInstancesRequestInstanceRebootTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RebootInstancesRequestInstanceRebootTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RebootInstancesRequestInstanceRebootTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RebootInstancesRequest:
    boto3_raw_data: "type_defs.RebootInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RebootInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RebootInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecurringCharge:
    boto3_raw_data: "type_defs.RecurringChargeTypeDef" = dataclasses.field()

    Amount = field("Amount")
    Frequency = field("Frequency")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RecurringChargeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RecurringChargeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferencedSecurityGroup:
    boto3_raw_data: "type_defs.ReferencedSecurityGroupTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    PeeringStatus = field("PeeringStatus")
    UserId = field("UserId")
    VpcId = field("VpcId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReferencedSecurityGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferencedSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterInstanceTagAttributeRequest:
    boto3_raw_data: "type_defs.RegisterInstanceTagAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    IncludeAllTagsOfInstance = field("IncludeAllTagsOfInstance")
    InstanceTagKeys = field("InstanceTagKeys")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterInstanceTagAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterInstanceTagAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterTransitGatewayMulticastGroupMembersRequest:
    boto3_raw_data: (
        "type_defs.RegisterTransitGatewayMulticastGroupMembersRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    NetworkInterfaceIds = field("NetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterTransitGatewayMulticastGroupMembersRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterTransitGatewayMulticastGroupMembersRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastRegisteredGroupMembers:
    boto3_raw_data: "type_defs.TransitGatewayMulticastRegisteredGroupMembersTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    RegisteredNetworkInterfaceIds = field("RegisteredNetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastRegisteredGroupMembersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastRegisteredGroupMembersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterTransitGatewayMulticastGroupSourcesRequest:
    boto3_raw_data: (
        "type_defs.RegisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    NetworkInterfaceIds = field("NetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterTransitGatewayMulticastGroupSourcesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastRegisteredGroupSources:
    boto3_raw_data: "type_defs.TransitGatewayMulticastRegisteredGroupSourcesTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    RegisteredNetworkInterfaceIds = field("RegisteredNetworkInterfaceIds")
    GroupIpAddress = field("GroupIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastRegisteredGroupSourcesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastRegisteredGroupSourcesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectCapacityReservationBillingOwnershipRequest:
    boto3_raw_data: (
        "type_defs.RejectCapacityReservationBillingOwnershipRequestTypeDef"
    ) = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectCapacityReservationBillingOwnershipRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RejectCapacityReservationBillingOwnershipRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayMulticastDomainAssociationsRequest:
    boto3_raw_data: (
        "type_defs.RejectTransitGatewayMulticastDomainAssociationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    SubnetIds = field("SubnetIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayMulticastDomainAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RejectTransitGatewayMulticastDomainAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayPeeringAttachmentRequest:
    boto3_raw_data: "type_defs.RejectTransitGatewayPeeringAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayPeeringAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectTransitGatewayPeeringAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayVpcAttachmentRequest:
    boto3_raw_data: "type_defs.RejectTransitGatewayVpcAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayVpcAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectTransitGatewayVpcAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectVpcEndpointConnectionsRequest:
    boto3_raw_data: "type_defs.RejectVpcEndpointConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceId = field("ServiceId")
    VpcEndpointIds = field("VpcEndpointIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectVpcEndpointConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectVpcEndpointConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectVpcPeeringConnectionRequest:
    boto3_raw_data: "type_defs.RejectVpcPeeringConnectionRequestTypeDef" = (
        dataclasses.field()
    )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectVpcPeeringConnectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectVpcPeeringConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectVpcPeeringConnectionRequestVpcPeeringConnectionReject:
    boto3_raw_data: (
        "type_defs.RejectVpcPeeringConnectionRequestVpcPeeringConnectionRejectTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectVpcPeeringConnectionRequestVpcPeeringConnectionRejectTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RejectVpcPeeringConnectionRequestVpcPeeringConnectionRejectTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseAddressRequestClassicAddressRelease:
    boto3_raw_data: "type_defs.ReleaseAddressRequestClassicAddressReleaseTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    PublicIp = field("PublicIp")
    NetworkBorderGroup = field("NetworkBorderGroup")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReleaseAddressRequestClassicAddressReleaseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseAddressRequestClassicAddressReleaseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseAddressRequest:
    boto3_raw_data: "type_defs.ReleaseAddressRequestTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    PublicIp = field("PublicIp")
    NetworkBorderGroup = field("NetworkBorderGroup")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReleaseAddressRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseAddressRequestVpcAddressRelease:
    boto3_raw_data: "type_defs.ReleaseAddressRequestVpcAddressReleaseTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    PublicIp = field("PublicIp")
    NetworkBorderGroup = field("NetworkBorderGroup")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReleaseAddressRequestVpcAddressReleaseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseAddressRequestVpcAddressReleaseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseHostsRequest:
    boto3_raw_data: "type_defs.ReleaseHostsRequestTypeDef" = dataclasses.field()

    HostIds = field("HostIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReleaseHostsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseHostsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseIpamPoolAllocationRequest:
    boto3_raw_data: "type_defs.ReleaseIpamPoolAllocationRequestTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    Cidr = field("Cidr")
    IpamPoolAllocationId = field("IpamPoolAllocationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReleaseIpamPoolAllocationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseIpamPoolAllocationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceNetworkAclAssociationRequestNetworkAclReplaceAssociation:
    boto3_raw_data: "type_defs.ReplaceNetworkAclAssociationRequestNetworkAclReplaceAssociationTypeDef" = (dataclasses.field())

    AssociationId = field("AssociationId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceNetworkAclAssociationRequestNetworkAclReplaceAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReplaceNetworkAclAssociationRequestNetworkAclReplaceAssociationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceNetworkAclAssociationRequest:
    boto3_raw_data: "type_defs.ReplaceNetworkAclAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    NetworkAclId = field("NetworkAclId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceNetworkAclAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceNetworkAclAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRouteRequestRouteReplace:
    boto3_raw_data: "type_defs.ReplaceRouteRequestRouteReplaceTypeDef" = (
        dataclasses.field()
    )

    DestinationPrefixListId = field("DestinationPrefixListId")
    VpcEndpointId = field("VpcEndpointId")
    LocalTarget = field("LocalTarget")
    TransitGatewayId = field("TransitGatewayId")
    LocalGatewayId = field("LocalGatewayId")
    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    OdbNetworkArn = field("OdbNetworkArn")
    DryRun = field("DryRun")
    GatewayId = field("GatewayId")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    InstanceId = field("InstanceId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    NatGatewayId = field("NatGatewayId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReplaceRouteRequestRouteReplaceTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceRouteRequestRouteReplaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRouteRequest:
    boto3_raw_data: "type_defs.ReplaceRouteRequestTypeDef" = dataclasses.field()

    RouteTableId = field("RouteTableId")
    DestinationPrefixListId = field("DestinationPrefixListId")
    VpcEndpointId = field("VpcEndpointId")
    LocalTarget = field("LocalTarget")
    TransitGatewayId = field("TransitGatewayId")
    LocalGatewayId = field("LocalGatewayId")
    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    OdbNetworkArn = field("OdbNetworkArn")
    DryRun = field("DryRun")
    DestinationCidrBlock = field("DestinationCidrBlock")
    GatewayId = field("GatewayId")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    InstanceId = field("InstanceId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    NatGatewayId = field("NatGatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReplaceRouteRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRouteTableAssociationRequestRouteTableAssociationReplaceSubnet:
    boto3_raw_data: "type_defs.ReplaceRouteTableAssociationRequestRouteTableAssociationReplaceSubnetTypeDef" = (dataclasses.field())

    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceRouteTableAssociationRequestRouteTableAssociationReplaceSubnetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReplaceRouteTableAssociationRequestRouteTableAssociationReplaceSubnetTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRouteTableAssociationRequest:
    boto3_raw_data: "type_defs.ReplaceRouteTableAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    RouteTableId = field("RouteTableId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceRouteTableAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceRouteTableAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceTransitGatewayRouteRequest:
    boto3_raw_data: "type_defs.ReplaceTransitGatewayRouteRequestTypeDef" = (
        dataclasses.field()
    )

    DestinationCidrBlock = field("DestinationCidrBlock")
    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    Blackhole = field("Blackhole")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceTransitGatewayRouteRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceTransitGatewayRouteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceVpnTunnelRequest:
    boto3_raw_data: "type_defs.ReplaceVpnTunnelRequestTypeDef" = dataclasses.field()

    VpnConnectionId = field("VpnConnectionId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")
    ApplyPendingMaintenance = field("ApplyPendingMaintenance")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReplaceVpnTunnelRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceVpnTunnelRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesId:
    boto3_raw_data: "type_defs.ReservedInstancesIdTypeDef" = dataclasses.field()

    ReservedInstancesId = field("ReservedInstancesId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedInstancesIdTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesIdTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetAddressAttributeRequest:
    boto3_raw_data: "type_defs.ResetAddressAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    AllocationId = field("AllocationId")
    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResetAddressAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetAddressAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetEbsDefaultKmsKeyIdRequest:
    boto3_raw_data: "type_defs.ResetEbsDefaultKmsKeyIdRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetEbsDefaultKmsKeyIdRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetEbsDefaultKmsKeyIdRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetFpgaImageAttributeRequest:
    boto3_raw_data: "type_defs.ResetFpgaImageAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    FpgaImageId = field("FpgaImageId")
    DryRun = field("DryRun")
    Attribute = field("Attribute")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetFpgaImageAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetFpgaImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetImageAttributeRequestImageResetAttribute:
    boto3_raw_data: "type_defs.ResetImageAttributeRequestImageResetAttributeTypeDef" = (
        dataclasses.field()
    )

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetImageAttributeRequestImageResetAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetImageAttributeRequestImageResetAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetImageAttributeRequest:
    boto3_raw_data: "type_defs.ResetImageAttributeRequestTypeDef" = dataclasses.field()

    Attribute = field("Attribute")
    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResetImageAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetInstanceAttributeRequestInstanceResetAttribute:
    boto3_raw_data: (
        "type_defs.ResetInstanceAttributeRequestInstanceResetAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetInstanceAttributeRequestInstanceResetAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetInstanceAttributeRequestInstanceResetAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetInstanceAttributeRequestInstanceResetKernel:
    boto3_raw_data: (
        "type_defs.ResetInstanceAttributeRequestInstanceResetKernelTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetInstanceAttributeRequestInstanceResetKernelTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetInstanceAttributeRequestInstanceResetKernelTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetInstanceAttributeRequestInstanceResetRamdisk:
    boto3_raw_data: (
        "type_defs.ResetInstanceAttributeRequestInstanceResetRamdiskTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetInstanceAttributeRequestInstanceResetRamdiskTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetInstanceAttributeRequestInstanceResetRamdiskTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetInstanceAttributeRequestInstanceResetSourceDestCheck:
    boto3_raw_data: (
        "type_defs.ResetInstanceAttributeRequestInstanceResetSourceDestCheckTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetInstanceAttributeRequestInstanceResetSourceDestCheckTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetInstanceAttributeRequestInstanceResetSourceDestCheckTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetInstanceAttributeRequest:
    boto3_raw_data: "type_defs.ResetInstanceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetInstanceAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetInstanceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetNetworkInterfaceAttributeRequestNetworkInterfaceResetAttribute:
    boto3_raw_data: "type_defs.ResetNetworkInterfaceAttributeRequestNetworkInterfaceResetAttributeTypeDef" = (dataclasses.field())

    DryRun = field("DryRun")
    SourceDestCheck = field("SourceDestCheck")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetNetworkInterfaceAttributeRequestNetworkInterfaceResetAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetNetworkInterfaceAttributeRequestNetworkInterfaceResetAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetNetworkInterfaceAttributeRequest:
    boto3_raw_data: "type_defs.ResetNetworkInterfaceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    DryRun = field("DryRun")
    SourceDestCheck = field("SourceDestCheck")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetNetworkInterfaceAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetNetworkInterfaceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetSnapshotAttributeRequestSnapshotResetAttribute:
    boto3_raw_data: (
        "type_defs.ResetSnapshotAttributeRequestSnapshotResetAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ResetSnapshotAttributeRequestSnapshotResetAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ResetSnapshotAttributeRequestSnapshotResetAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetSnapshotAttributeRequest:
    boto3_raw_data: "type_defs.ResetSnapshotAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    Attribute = field("Attribute")
    SnapshotId = field("SnapshotId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetSnapshotAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetSnapshotAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceTypeOption:
    boto3_raw_data: "type_defs.ResourceTypeOptionTypeDef" = dataclasses.field()

    OptionName = field("OptionName")
    OptionValues = field("OptionValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceTypeOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceTypeOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreAddressToClassicRequest:
    boto3_raw_data: "type_defs.RestoreAddressToClassicRequestTypeDef" = (
        dataclasses.field()
    )

    PublicIp = field("PublicIp")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RestoreAddressToClassicRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreAddressToClassicRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreImageFromRecycleBinRequest:
    boto3_raw_data: "type_defs.RestoreImageFromRecycleBinRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RestoreImageFromRecycleBinRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreImageFromRecycleBinRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreManagedPrefixListVersionRequest:
    boto3_raw_data: "type_defs.RestoreManagedPrefixListVersionRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    PreviousVersion = field("PreviousVersion")
    CurrentVersion = field("CurrentVersion")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RestoreManagedPrefixListVersionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreManagedPrefixListVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreSnapshotFromRecycleBinRequest:
    boto3_raw_data: "type_defs.RestoreSnapshotFromRecycleBinRequestTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RestoreSnapshotFromRecycleBinRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreSnapshotFromRecycleBinRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreSnapshotTierRequest:
    boto3_raw_data: "type_defs.RestoreSnapshotTierRequestTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    TemporaryRestoreDays = field("TemporaryRestoreDays")
    PermanentRestore = field("PermanentRestore")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RestoreSnapshotTierRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreSnapshotTierRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeClientVpnIngressRequest:
    boto3_raw_data: "type_defs.RevokeClientVpnIngressRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    TargetNetworkCidr = field("TargetNetworkCidr")
    AccessGroupId = field("AccessGroupId")
    RevokeAllGroups = field("RevokeAllGroups")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RevokeClientVpnIngressRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeClientVpnIngressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokedSecurityGroupRule:
    boto3_raw_data: "type_defs.RevokedSecurityGroupRuleTypeDef" = dataclasses.field()

    SecurityGroupRuleId = field("SecurityGroupRuleId")
    GroupId = field("GroupId")
    IsEgress = field("IsEgress")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIpv4 = field("CidrIpv4")
    CidrIpv6 = field("CidrIpv6")
    PrefixListId = field("PrefixListId")
    ReferencedGroupId = field("ReferencedGroupId")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RevokedSecurityGroupRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokedSecurityGroupRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerBfdStatus:
    boto3_raw_data: "type_defs.RouteServerBfdStatusTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerBfdStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerBfdStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerBgpOptions:
    boto3_raw_data: "type_defs.RouteServerBgpOptionsTypeDef" = dataclasses.field()

    PeerAsn = field("PeerAsn")
    PeerLivenessDetection = field("PeerLivenessDetection")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerBgpOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerBgpOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerBgpStatus:
    boto3_raw_data: "type_defs.RouteServerBgpStatusTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerBgpStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerBgpStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerRouteInstallationDetail:
    boto3_raw_data: "type_defs.RouteServerRouteInstallationDetailTypeDef" = (
        dataclasses.field()
    )

    RouteTableId = field("RouteTableId")
    RouteInstallationStatus = field("RouteInstallationStatus")
    RouteInstallationStatusReason = field("RouteInstallationStatusReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RouteServerRouteInstallationDetailTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerRouteInstallationDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Route:
    boto3_raw_data: "type_defs.RouteTypeDef" = dataclasses.field()

    DestinationCidrBlock = field("DestinationCidrBlock")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    DestinationPrefixListId = field("DestinationPrefixListId")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    GatewayId = field("GatewayId")
    InstanceId = field("InstanceId")
    InstanceOwnerId = field("InstanceOwnerId")
    NatGatewayId = field("NatGatewayId")
    TransitGatewayId = field("TransitGatewayId")
    LocalGatewayId = field("LocalGatewayId")
    CarrierGatewayId = field("CarrierGatewayId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    Origin = field("Origin")
    State = field("State")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")
    CoreNetworkArn = field("CoreNetworkArn")
    OdbNetworkArn = field("OdbNetworkArn")
    IpAddress = field("IpAddress")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RouteTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3StorageOutput:
    boto3_raw_data: "type_defs.S3StorageOutputTypeDef" = dataclasses.field()

    AWSAccessKeyId = field("AWSAccessKeyId")
    Bucket = field("Bucket")
    Prefix = field("Prefix")
    UploadPolicy = field("UploadPolicy")
    UploadPolicySignature = field("UploadPolicySignature")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3StorageOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3StorageOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstanceRecurrence:
    boto3_raw_data: "type_defs.ScheduledInstanceRecurrenceTypeDef" = dataclasses.field()

    Frequency = field("Frequency")
    Interval = field("Interval")
    OccurrenceDaySet = field("OccurrenceDaySet")
    OccurrenceRelativeToEnd = field("OccurrenceRelativeToEnd")
    OccurrenceUnit = field("OccurrenceUnit")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledInstanceRecurrenceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstanceRecurrenceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesEbs:
    boto3_raw_data: "type_defs.ScheduledInstancesEbsTypeDef" = dataclasses.field()

    DeleteOnTermination = field("DeleteOnTermination")
    Encrypted = field("Encrypted")
    Iops = field("Iops")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledInstancesEbsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesEbsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesIamInstanceProfile:
    boto3_raw_data: "type_defs.ScheduledInstancesIamInstanceProfileTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstancesIamInstanceProfileTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesIamInstanceProfileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesIpv6Address:
    boto3_raw_data: "type_defs.ScheduledInstancesIpv6AddressTypeDef" = (
        dataclasses.field()
    )

    Ipv6Address = field("Ipv6Address")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ScheduledInstancesIpv6AddressTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesIpv6AddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesMonitoring:
    boto3_raw_data: "type_defs.ScheduledInstancesMonitoringTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledInstancesMonitoringTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesMonitoringTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesPlacement:
    boto3_raw_data: "type_defs.ScheduledInstancesPlacementTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    GroupName = field("GroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledInstancesPlacementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesPlacementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesPrivateIpAddressConfig:
    boto3_raw_data: "type_defs.ScheduledInstancesPrivateIpAddressConfigTypeDef" = (
        dataclasses.field()
    )

    Primary = field("Primary")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstancesPrivateIpAddressConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesPrivateIpAddressConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastGroup:
    boto3_raw_data: "type_defs.TransitGatewayMulticastGroupTypeDef" = (
        dataclasses.field()
    )

    GroupIpAddress = field("GroupIpAddress")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    SubnetId = field("SubnetId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceOwnerId = field("ResourceOwnerId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    GroupMember = field("GroupMember")
    GroupSource = field("GroupSource")
    MemberType = field("MemberType")
    SourceType = field("SourceType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayMulticastGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupIdentifier:
    boto3_raw_data: "type_defs.SecurityGroupIdentifierTypeDef" = dataclasses.field()

    GroupId = field("GroupId")
    GroupName = field("GroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupIdentifierTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupIdentifierTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupRuleDescription:
    boto3_raw_data: "type_defs.SecurityGroupRuleDescriptionTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupRuleId = field("SecurityGroupRuleId")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupRuleDescriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupRuleDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupRuleRequest:
    boto3_raw_data: "type_defs.SecurityGroupRuleRequestTypeDef" = dataclasses.field()

    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIpv4 = field("CidrIpv4")
    CidrIpv6 = field("CidrIpv6")
    PrefixListId = field("PrefixListId")
    ReferencedGroupId = field("ReferencedGroupId")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupRuleRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupRuleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SendDiagnosticInterruptRequest:
    boto3_raw_data: "type_defs.SendDiagnosticInterruptRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SendDiagnosticInterruptRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SendDiagnosticInterruptRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceTypeDetail:
    boto3_raw_data: "type_defs.ServiceTypeDetailTypeDef" = dataclasses.field()

    ServiceType = field("ServiceType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ServiceTypeDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceTypeDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SupportedRegionDetail:
    boto3_raw_data: "type_defs.SupportedRegionDetailTypeDef" = dataclasses.field()

    Region = field("Region")
    ServiceState = field("ServiceState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SupportedRegionDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SupportedRegionDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserBucketDetails:
    boto3_raw_data: "type_defs.UserBucketDetailsTypeDef" = dataclasses.field()

    S3Bucket = field("S3Bucket")
    S3Key = field("S3Key")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserBucketDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UserBucketDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotCapacityRebalance:
    boto3_raw_data: "type_defs.SpotCapacityRebalanceTypeDef" = dataclasses.field()

    ReplacementStrategy = field("ReplacementStrategy")
    TerminationDelay = field("TerminationDelay")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotCapacityRebalanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotCapacityRebalanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotInstanceStateFault:
    boto3_raw_data: "type_defs.SpotInstanceStateFaultTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotInstanceStateFaultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotInstanceStateFaultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetMonitoring:
    boto3_raw_data: "type_defs.SpotFleetMonitoringTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotFleetMonitoringTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetMonitoringTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotInstanceStatus:
    boto3_raw_data: "type_defs.SpotInstanceStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")
    UpdateTime = field("UpdateTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotInstanceStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotInstanceStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartInstancesRequestInstanceStart:
    boto3_raw_data: "type_defs.StartInstancesRequestInstanceStartTypeDef" = (
        dataclasses.field()
    )

    AdditionalInfo = field("AdditionalInfo")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartInstancesRequestInstanceStartTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartInstancesRequestInstanceStartTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartInstancesRequest:
    boto3_raw_data: "type_defs.StartInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    AdditionalInfo = field("AdditionalInfo")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StartInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartVpcEndpointServicePrivateDnsVerificationRequest:
    boto3_raw_data: (
        "type_defs.StartVpcEndpointServicePrivateDnsVerificationRequestTypeDef"
    ) = dataclasses.field()

    ServiceId = field("ServiceId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartVpcEndpointServicePrivateDnsVerificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.StartVpcEndpointServicePrivateDnsVerificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInstancesRequestInstanceStop:
    boto3_raw_data: "type_defs.StopInstancesRequestInstanceStopTypeDef" = (
        dataclasses.field()
    )

    Hibernate = field("Hibernate")
    SkipOsShutdown = field("SkipOsShutdown")
    DryRun = field("DryRun")
    Force = field("Force")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopInstancesRequestInstanceStopTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInstancesRequestInstanceStopTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInstancesRequest:
    boto3_raw_data: "type_defs.StopInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    Hibernate = field("Hibernate")
    SkipOsShutdown = field("SkipOsShutdown")
    DryRun = field("DryRun")
    Force = field("Force")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetAssociation:
    boto3_raw_data: "type_defs.SubnetAssociationTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SubnetAssociationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetCidrBlockState:
    boto3_raw_data: "type_defs.SubnetCidrBlockStateTypeDef" = dataclasses.field()

    State = field("State")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubnetCidrBlockStateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetCidrBlockStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetIpPrefixes:
    boto3_raw_data: "type_defs.SubnetIpPrefixesTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    IpPrefixes = field("IpPrefixes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SubnetIpPrefixesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetIpPrefixesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetConfiguration:
    boto3_raw_data: "type_defs.TargetConfigurationTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    OfferingId = field("OfferingId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetGroup:
    boto3_raw_data: "type_defs.TargetGroupTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TargetGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TargetGroupTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateClientVpnConnectionsRequest:
    boto3_raw_data: "type_defs.TerminateClientVpnConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    ConnectionId = field("ConnectionId")
    Username = field("Username")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TerminateClientVpnConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateClientVpnConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateInstancesRequestInstanceTerminate:
    boto3_raw_data: "type_defs.TerminateInstancesRequestInstanceTerminateTypeDef" = (
        dataclasses.field()
    )

    Force = field("Force")
    SkipOsShutdown = field("SkipOsShutdown")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TerminateInstancesRequestInstanceTerminateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateInstancesRequestInstanceTerminateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateInstancesRequest:
    boto3_raw_data: "type_defs.TerminateInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    Force = field("Force")
    SkipOsShutdown = field("SkipOsShutdown")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TerminateInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorPortRange:
    boto3_raw_data: "type_defs.TrafficMirrorPortRangeTypeDef" = dataclasses.field()

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficMirrorPortRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorPortRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayAttachmentAssociation:
    boto3_raw_data: "type_defs.TransitGatewayAttachmentAssociationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayAttachmentAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayAttachmentAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayAttachmentBgpConfiguration:
    boto3_raw_data: "type_defs.TransitGatewayAttachmentBgpConfigurationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAsn = field("TransitGatewayAsn")
    PeerAsn = field("PeerAsn")
    TransitGatewayAddress = field("TransitGatewayAddress")
    PeerAddress = field("PeerAddress")
    BgpStatus = field("BgpStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayAttachmentBgpConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayAttachmentBgpConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayConnectOptions:
    boto3_raw_data: "type_defs.TransitGatewayConnectOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayConnectOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayConnectOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDomainOptions:
    boto3_raw_data: "type_defs.TransitGatewayMulticastDomainOptionsTypeDef" = (
        dataclasses.field()
    )

    Igmpv2Support = field("Igmpv2Support")
    StaticSourcesSupport = field("StaticSourcesSupport")
    AutoAcceptSharedAssociations = field("AutoAcceptSharedAssociations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastDomainOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastDomainOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayOptions:
    boto3_raw_data: "type_defs.TransitGatewayOptionsTypeDef" = dataclasses.field()

    AmazonSideAsn = field("AmazonSideAsn")
    TransitGatewayCidrBlocks = field("TransitGatewayCidrBlocks")
    AutoAcceptSharedAttachments = field("AutoAcceptSharedAttachments")
    DefaultRouteTableAssociation = field("DefaultRouteTableAssociation")
    AssociationDefaultRouteTableId = field("AssociationDefaultRouteTableId")
    DefaultRouteTablePropagation = field("DefaultRouteTablePropagation")
    PropagationDefaultRouteTableId = field("PropagationDefaultRouteTableId")
    VpnEcmpSupport = field("VpnEcmpSupport")
    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    MulticastSupport = field("MulticastSupport")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPeeringAttachmentOptions:
    boto3_raw_data: "type_defs.TransitGatewayPeeringAttachmentOptionsTypeDef" = (
        dataclasses.field()
    )

    DynamicRouting = field("DynamicRouting")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayPeeringAttachmentOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPeeringAttachmentOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPolicyRuleMetaData:
    boto3_raw_data: "type_defs.TransitGatewayPolicyRuleMetaDataTypeDef" = (
        dataclasses.field()
    )

    MetaDataKey = field("MetaDataKey")
    MetaDataValue = field("MetaDataValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayPolicyRuleMetaDataTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPolicyRuleMetaDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPrefixListAttachment:
    boto3_raw_data: "type_defs.TransitGatewayPrefixListAttachmentTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceType = field("ResourceType")
    ResourceId = field("ResourceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayPrefixListAttachmentTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPrefixListAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteAttachment:
    boto3_raw_data: "type_defs.TransitGatewayRouteAttachmentTypeDef" = (
        dataclasses.field()
    )

    ResourceId = field("ResourceId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceType = field("ResourceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayRouteAttachmentTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayVpcAttachmentOptions:
    boto3_raw_data: "type_defs.TransitGatewayVpcAttachmentOptionsTypeDef" = (
        dataclasses.field()
    )

    DnsSupport = field("DnsSupport")
    SecurityGroupReferencingSupport = field("SecurityGroupReferencingSupport")
    Ipv6Support = field("Ipv6Support")
    ApplianceModeSupport = field("ApplianceModeSupport")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayVpcAttachmentOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayVpcAttachmentOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignIpv6AddressesRequest:
    boto3_raw_data: "type_defs.UnassignIpv6AddressesRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Ipv6Prefixes = field("Ipv6Prefixes")
    Ipv6Addresses = field("Ipv6Addresses")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnassignIpv6AddressesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnassignIpv6AddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignPrivateIpAddressesRequestNetworkInterfaceUnassignPrivateIpAddresses:
    boto3_raw_data: "type_defs.UnassignPrivateIpAddressesRequestNetworkInterfaceUnassignPrivateIpAddressesTypeDef" = (dataclasses.field())

    Ipv4Prefixes = field("Ipv4Prefixes")
    PrivateIpAddresses = field("PrivateIpAddresses")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnassignPrivateIpAddressesRequestNetworkInterfaceUnassignPrivateIpAddressesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UnassignPrivateIpAddressesRequestNetworkInterfaceUnassignPrivateIpAddressesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignPrivateIpAddressesRequest:
    boto3_raw_data: "type_defs.UnassignPrivateIpAddressesRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Ipv4Prefixes = field("Ipv4Prefixes")
    PrivateIpAddresses = field("PrivateIpAddresses")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnassignPrivateIpAddressesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnassignPrivateIpAddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignPrivateNatGatewayAddressRequest:
    boto3_raw_data: "type_defs.UnassignPrivateNatGatewayAddressRequestTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")
    PrivateIpAddresses = field("PrivateIpAddresses")
    MaxDrainDurationSeconds = field("MaxDrainDurationSeconds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnassignPrivateNatGatewayAddressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnassignPrivateNatGatewayAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnlockSnapshotRequest:
    boto3_raw_data: "type_defs.UnlockSnapshotRequestTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnlockSnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnlockSnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnmonitorInstancesRequestInstanceUnmonitor:
    boto3_raw_data: "type_defs.UnmonitorInstancesRequestInstanceUnmonitorTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnmonitorInstancesRequestInstanceUnmonitorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnmonitorInstancesRequestInstanceUnmonitorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnmonitorInstancesRequest:
    boto3_raw_data: "type_defs.UnmonitorInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnmonitorInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnmonitorInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnsuccessfulInstanceCreditSpecificationItemError:
    boto3_raw_data: (
        "type_defs.UnsuccessfulInstanceCreditSpecificationItemErrorTypeDef"
    ) = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnsuccessfulInstanceCreditSpecificationItemErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UnsuccessfulInstanceCreditSpecificationItemErrorTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnsuccessfulItemError:
    boto3_raw_data: "type_defs.UnsuccessfulItemErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnsuccessfulItemErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnsuccessfulItemErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ValidationError:
    boto3_raw_data: "type_defs.ValidationErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ValidationErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ValidationErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointPortRange:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointPortRangeTypeDef" = (
        dataclasses.field()
    )

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointPortRangeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointPortRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointRdsOptions:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointRdsOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")
    Port = field("Port")
    RdsDbInstanceArn = field("RdsDbInstanceArn")
    RdsDbClusterArn = field("RdsDbClusterArn")
    RdsDbProxyArn = field("RdsDbProxyArn")
    RdsEndpoint = field("RdsEndpoint")
    SubnetIds = field("SubnetIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointRdsOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointRdsOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointStatus:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointStatusTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstanceCustomSubDomain:
    boto3_raw_data: "type_defs.VerifiedAccessInstanceCustomSubDomainTypeDef" = (
        dataclasses.field()
    )

    SubDomain = field("SubDomain")
    Nameservers = field("Nameservers")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessInstanceCustomSubDomainTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessInstanceCustomSubDomainTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstanceOpenVpnClientConfigurationRoute:
    boto3_raw_data: (
        "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationRouteTypeDef"
    ) = dataclasses.field()

    Cidr = field("Cidr")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationRouteTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationRouteTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessTrustProviderCondensed:
    boto3_raw_data: "type_defs.VerifiedAccessTrustProviderCondensedTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")
    Description = field("Description")
    TrustProviderType = field("TrustProviderType")
    UserTrustProviderType = field("UserTrustProviderType")
    DeviceTrustProviderType = field("DeviceTrustProviderType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessTrustProviderCondensedTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessTrustProviderCondensedTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogCloudWatchLogsDestinationOptions:
    boto3_raw_data: (
        "type_defs.VerifiedAccessLogCloudWatchLogsDestinationOptionsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    LogGroup = field("LogGroup")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessLogCloudWatchLogsDestinationOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessLogCloudWatchLogsDestinationOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogDeliveryStatus:
    boto3_raw_data: "type_defs.VerifiedAccessLogDeliveryStatusTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VerifiedAccessLogDeliveryStatusTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogDeliveryStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogKinesisDataFirehoseDestinationOptions:
    boto3_raw_data: (
        "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationOptionsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    DeliveryStream = field("DeliveryStream")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogS3DestinationOptions:
    boto3_raw_data: "type_defs.VerifiedAccessLogS3DestinationOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    BucketName = field("BucketName")
    Prefix = field("Prefix")
    BucketOwner = field("BucketOwner")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessLogS3DestinationOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogS3DestinationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VgwTelemetry:
    boto3_raw_data: "type_defs.VgwTelemetryTypeDef" = dataclasses.field()

    AcceptedRouteCount = field("AcceptedRouteCount")
    LastStatusChange = field("LastStatusChange")
    OutsideIpAddress = field("OutsideIpAddress")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    CertificateArn = field("CertificateArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VgwTelemetryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VgwTelemetryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeAttachment:
    boto3_raw_data: "type_defs.VolumeAttachmentTypeDef" = dataclasses.field()

    DeleteOnTermination = field("DeleteOnTermination")
    AssociatedResource = field("AssociatedResource")
    InstanceOwningService = field("InstanceOwningService")
    VolumeId = field("VolumeId")
    InstanceId = field("InstanceId")
    Device = field("Device")
    State = field("State")
    AttachTime = field("AttachTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeAttachmentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusAction:
    boto3_raw_data: "type_defs.VolumeStatusActionTypeDef" = dataclasses.field()

    Code = field("Code")
    Description = field("Description")
    EventId = field("EventId")
    EventType = field("EventType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusActionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusAttachmentStatus:
    boto3_raw_data: "type_defs.VolumeStatusAttachmentStatusTypeDef" = (
        dataclasses.field()
    )

    IoPerformance = field("IoPerformance")
    InstanceId = field("InstanceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusAttachmentStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusAttachmentStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusDetails:
    boto3_raw_data: "type_defs.VolumeStatusDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusEvent:
    boto3_raw_data: "type_defs.VolumeStatusEventTypeDef" = dataclasses.field()

    Description = field("Description")
    EventId = field("EventId")
    EventType = field("EventType")
    NotAfter = field("NotAfter")
    NotBefore = field("NotBefore")
    InstanceId = field("InstanceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusEventTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusEventTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcCidrBlockState:
    boto3_raw_data: "type_defs.VpcCidrBlockStateTypeDef" = dataclasses.field()

    State = field("State")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcCidrBlockStateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcCidrBlockStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEncryptionControlExclusion:
    boto3_raw_data: "type_defs.VpcEncryptionControlExclusionTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    StateMessage = field("StateMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpcEncryptionControlExclusionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcEncryptionControlExclusionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcPeeringConnectionOptionsDescription:
    boto3_raw_data: "type_defs.VpcPeeringConnectionOptionsDescriptionTypeDef" = (
        dataclasses.field()
    )

    AllowDnsResolutionFromRemoteVpc = field("AllowDnsResolutionFromRemoteVpc")
    AllowEgressFromLocalClassicLinkToRemoteVpc = field(
        "AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    AllowEgressFromLocalVpcToRemoteClassicLink = field(
        "AllowEgressFromLocalVpcToRemoteClassicLink"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VpcPeeringConnectionOptionsDescriptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcPeeringConnectionOptionsDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcPeeringConnectionStateReason:
    boto3_raw_data: "type_defs.VpcPeeringConnectionStateReasonTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpcPeeringConnectionStateReasonTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcPeeringConnectionStateReasonTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnStaticRoute:
    boto3_raw_data: "type_defs.VpnStaticRouteTypeDef" = dataclasses.field()

    DestinationCidrBlock = field("DestinationCidrBlock")
    Source = field("Source")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpnStaticRouteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpnStaticRouteTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WithdrawByoipCidrRequest:
    boto3_raw_data: "type_defs.WithdrawByoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WithdrawByoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WithdrawByoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptAddressTransferResult:
    boto3_raw_data: "type_defs.AcceptAddressTransferResultTypeDef" = dataclasses.field()

    @cached_property
    def AddressTransfer(self):  # pragma: no cover
        return AddressTransfer.make_one(self.boto3_raw_data["AddressTransfer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AcceptAddressTransferResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptAddressTransferResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptCapacityReservationBillingOwnershipResult:
    boto3_raw_data: (
        "type_defs.AcceptCapacityReservationBillingOwnershipResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptCapacityReservationBillingOwnershipResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AcceptCapacityReservationBillingOwnershipResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptReservedInstancesExchangeQuoteResult:
    boto3_raw_data: "type_defs.AcceptReservedInstancesExchangeQuoteResultTypeDef" = (
        dataclasses.field()
    )

    ExchangeId = field("ExchangeId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptReservedInstancesExchangeQuoteResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptReservedInstancesExchangeQuoteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateAddressResult:
    boto3_raw_data: "type_defs.AllocateAddressResultTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    PublicIpv4Pool = field("PublicIpv4Pool")
    NetworkBorderGroup = field("NetworkBorderGroup")
    Domain = field("Domain")
    CustomerOwnedIp = field("CustomerOwnedIp")
    CustomerOwnedIpv4Pool = field("CustomerOwnedIpv4Pool")
    CarrierIp = field("CarrierIp")
    PublicIp = field("PublicIp")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateAddressResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateHostsResult:
    boto3_raw_data: "type_defs.AllocateHostsResultTypeDef" = dataclasses.field()

    HostIds = field("HostIds")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateHostsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateHostsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ApplySecurityGroupsToClientVpnTargetNetworkResult:
    boto3_raw_data: (
        "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkResultTypeDef"
    ) = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ApplySecurityGroupsToClientVpnTargetNetworkResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignIpv6AddressesResult:
    boto3_raw_data: "type_defs.AssignIpv6AddressesResultTypeDef" = dataclasses.field()

    AssignedIpv6Addresses = field("AssignedIpv6Addresses")
    AssignedIpv6Prefixes = field("AssignedIpv6Prefixes")
    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssignIpv6AddressesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignIpv6AddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateAddressResult:
    boto3_raw_data: "type_defs.AssociateAddressResultTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateAddressResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateCapacityReservationBillingOwnerResult:
    boto3_raw_data: (
        "type_defs.AssociateCapacityReservationBillingOwnerResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateCapacityReservationBillingOwnerResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssociateCapacityReservationBillingOwnerResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateEnclaveCertificateIamRoleResult:
    boto3_raw_data: "type_defs.AssociateEnclaveCertificateIamRoleResultTypeDef" = (
        dataclasses.field()
    )

    CertificateS3BucketName = field("CertificateS3BucketName")
    CertificateS3ObjectKey = field("CertificateS3ObjectKey")
    EncryptionKmsKeyId = field("EncryptionKmsKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateEnclaveCertificateIamRoleResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateEnclaveCertificateIamRoleResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateSecurityGroupVpcResult:
    boto3_raw_data: "type_defs.AssociateSecurityGroupVpcResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateSecurityGroupVpcResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateSecurityGroupVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClassicLinkVpcResult:
    boto3_raw_data: "type_defs.AttachClassicLinkVpcResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachClassicLinkVpcResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachClassicLinkVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachNetworkInterfaceResult:
    boto3_raw_data: "type_defs.AttachNetworkInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    AttachmentId = field("AttachmentId")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachNetworkInterfaceResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachNetworkInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelCapacityReservationResult:
    boto3_raw_data: "type_defs.CancelCapacityReservationResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelCapacityReservationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelCapacityReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelDeclarativePoliciesReportResult:
    boto3_raw_data: "type_defs.CancelDeclarativePoliciesReportResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelDeclarativePoliciesReportResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelDeclarativePoliciesReportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelImageLaunchPermissionResult:
    boto3_raw_data: "type_defs.CancelImageLaunchPermissionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelImageLaunchPermissionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelImageLaunchPermissionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelImportTaskResult:
    boto3_raw_data: "type_defs.CancelImportTaskResultTypeDef" = dataclasses.field()

    ImportTaskId = field("ImportTaskId")
    PreviousState = field("PreviousState")
    State = field("State")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelImportTaskResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelImportTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfirmProductInstanceResult:
    boto3_raw_data: "type_defs.ConfirmProductInstanceResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")
    OwnerId = field("OwnerId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConfirmProductInstanceResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfirmProductInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopyFpgaImageResult:
    boto3_raw_data: "type_defs.CopyFpgaImageResultTypeDef" = dataclasses.field()

    FpgaImageId = field("FpgaImageId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CopyFpgaImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopyFpgaImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopyImageResult:
    boto3_raw_data: "type_defs.CopyImageResultTypeDef" = dataclasses.field()

    ImageId = field("ImageId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CopyImageResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CopyImageResultTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFpgaImageResult:
    boto3_raw_data: "type_defs.CreateFpgaImageResultTypeDef" = dataclasses.field()

    FpgaImageId = field("FpgaImageId")
    FpgaImageGlobalId = field("FpgaImageGlobalId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFpgaImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFpgaImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageResult:
    boto3_raw_data: "type_defs.CreateImageResultTypeDef" = dataclasses.field()

    ImageId = field("ImageId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateImageResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageUsageReportResult:
    boto3_raw_data: "type_defs.CreateImageUsageReportResultTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageUsageReportResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageUsageReportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePublicIpv4PoolResult:
    boto3_raw_data: "type_defs.CreatePublicIpv4PoolResultTypeDef" = dataclasses.field()

    PoolId = field("PoolId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePublicIpv4PoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePublicIpv4PoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRestoreImageTaskResult:
    boto3_raw_data: "type_defs.CreateRestoreImageTaskResultTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRestoreImageTaskResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRestoreImageTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteResult:
    boto3_raw_data: "type_defs.CreateRouteResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateRouteResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateStoreImageTaskResult:
    boto3_raw_data: "type_defs.CreateStoreImageTaskResultTypeDef" = dataclasses.field()

    ObjectKey = field("ObjectKey")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateStoreImageTaskResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateStoreImageTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEgressOnlyInternetGatewayResult:
    boto3_raw_data: "type_defs.DeleteEgressOnlyInternetGatewayResultTypeDef" = (
        dataclasses.field()
    )

    ReturnCode = field("ReturnCode")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteEgressOnlyInternetGatewayResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEgressOnlyInternetGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFpgaImageResult:
    boto3_raw_data: "type_defs.DeleteFpgaImageResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFpgaImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFpgaImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteImageUsageReportResult:
    boto3_raw_data: "type_defs.DeleteImageUsageReportResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteImageUsageReportResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteImageUsageReportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteKeyPairResult:
    boto3_raw_data: "type_defs.DeleteKeyPairResultTypeDef" = dataclasses.field()

    Return = field("Return")
    KeyPairId = field("KeyPairId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteKeyPairResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteKeyPairResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNatGatewayResult:
    boto3_raw_data: "type_defs.DeleteNatGatewayResultTypeDef" = dataclasses.field()

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNatGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNatGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAccessScopeAnalysisResult:
    boto3_raw_data: (
        "type_defs.DeleteNetworkInsightsAccessScopeAnalysisResultTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAccessScopeAnalysisResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteNetworkInsightsAccessScopeAnalysisResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAccessScopeResult:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsAccessScopeResultTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAccessScopeResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsAccessScopeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsAnalysisResult:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsAnalysisResultTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAnalysisId = field("NetworkInsightsAnalysisId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInsightsAnalysisResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsAnalysisResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInsightsPathResult:
    boto3_raw_data: "type_defs.DeleteNetworkInsightsPathResultTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsPathId = field("NetworkInsightsPathId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteNetworkInsightsPathResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInsightsPathResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNetworkInterfacePermissionResult:
    boto3_raw_data: "type_defs.DeleteNetworkInterfacePermissionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNetworkInterfacePermissionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNetworkInterfacePermissionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePublicIpv4PoolResult:
    boto3_raw_data: "type_defs.DeletePublicIpv4PoolResultTypeDef" = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePublicIpv4PoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePublicIpv4PoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSecurityGroupResult:
    boto3_raw_data: "type_defs.DeleteSecurityGroupResultTypeDef" = dataclasses.field()

    Return = field("Return")
    GroupId = field("GroupId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSecurityGroupResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSecurityGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorFilterResult:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorFilterResultTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterId = field("TrafficMirrorFilterId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTrafficMirrorFilterResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorFilterResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorFilterRuleResult:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorFilterRuleResultTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterRuleId = field("TrafficMirrorFilterRuleId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTrafficMirrorFilterRuleResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorFilterRuleResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorSessionResult:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorSessionResultTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorSessionId = field("TrafficMirrorSessionId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTrafficMirrorSessionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorSessionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrafficMirrorTargetResult:
    boto3_raw_data: "type_defs.DeleteTrafficMirrorTargetResultTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorTargetId = field("TrafficMirrorTargetId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTrafficMirrorTargetResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrafficMirrorTargetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcPeeringConnectionResult:
    boto3_raw_data: "type_defs.DeleteVpcPeeringConnectionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteVpcPeeringConnectionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcPeeringConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionPublicIpv4PoolCidrResult:
    boto3_raw_data: "type_defs.DeprovisionPublicIpv4PoolCidrResultTypeDef" = (
        dataclasses.field()
    )

    PoolId = field("PoolId")
    DeprovisionedAddresses = field("DeprovisionedAddresses")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeprovisionPublicIpv4PoolCidrResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionPublicIpv4PoolCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressTransfersResult:
    boto3_raw_data: "type_defs.DescribeAddressTransfersResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AddressTransfers(self):  # pragma: no cover
        return AddressTransfer.make_many(self.boto3_raw_data["AddressTransfers"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAddressTransfersResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressTransfersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClassicLinkVpcResult:
    boto3_raw_data: "type_defs.DetachClassicLinkVpcResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DetachClassicLinkVpcResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachClassicLinkVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAddressTransferResult:
    boto3_raw_data: "type_defs.DisableAddressTransferResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AddressTransfer(self):  # pragma: no cover
        return AddressTransfer.make_one(self.boto3_raw_data["AddressTransfer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableAddressTransferResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableAddressTransferResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAllowedImagesSettingsResult:
    boto3_raw_data: "type_defs.DisableAllowedImagesSettingsResultTypeDef" = (
        dataclasses.field()
    )

    AllowedImagesSettingsState = field("AllowedImagesSettingsState")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableAllowedImagesSettingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableAllowedImagesSettingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableAwsNetworkPerformanceMetricSubscriptionResult:
    boto3_raw_data: (
        "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
    ) = dataclasses.field()

    Output = field("Output")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableEbsEncryptionByDefaultResult:
    boto3_raw_data: "type_defs.DisableEbsEncryptionByDefaultResultTypeDef" = (
        dataclasses.field()
    )

    EbsEncryptionByDefault = field("EbsEncryptionByDefault")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableEbsEncryptionByDefaultResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableEbsEncryptionByDefaultResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageBlockPublicAccessResult:
    boto3_raw_data: "type_defs.DisableImageBlockPublicAccessResultTypeDef" = (
        dataclasses.field()
    )

    ImageBlockPublicAccessState = field("ImageBlockPublicAccessState")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableImageBlockPublicAccessResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageBlockPublicAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageDeprecationResult:
    boto3_raw_data: "type_defs.DisableImageDeprecationResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisableImageDeprecationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageDeprecationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageDeregistrationProtectionResult:
    boto3_raw_data: "type_defs.DisableImageDeregistrationProtectionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableImageDeregistrationProtectionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageDeregistrationProtectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImageResult:
    boto3_raw_data: "type_defs.DisableImageResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableIpamOrganizationAdminAccountResult:
    boto3_raw_data: "type_defs.DisableIpamOrganizationAdminAccountResultTypeDef" = (
        dataclasses.field()
    )

    Success = field("Success")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableIpamOrganizationAdminAccountResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableIpamOrganizationAdminAccountResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableSerialConsoleAccessResult:
    boto3_raw_data: "type_defs.DisableSerialConsoleAccessResultTypeDef" = (
        dataclasses.field()
    )

    SerialConsoleAccessEnabled = field("SerialConsoleAccessEnabled")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisableSerialConsoleAccessResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableSerialConsoleAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableSnapshotBlockPublicAccessResult:
    boto3_raw_data: "type_defs.DisableSnapshotBlockPublicAccessResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableSnapshotBlockPublicAccessResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableSnapshotBlockPublicAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVpcClassicLinkDnsSupportResult:
    boto3_raw_data: "type_defs.DisableVpcClassicLinkDnsSupportResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableVpcClassicLinkDnsSupportResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableVpcClassicLinkDnsSupportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableVpcClassicLinkResult:
    boto3_raw_data: "type_defs.DisableVpcClassicLinkResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableVpcClassicLinkResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableVpcClassicLinkResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateCapacityReservationBillingOwnerResult:
    boto3_raw_data: (
        "type_defs.DisassociateCapacityReservationBillingOwnerResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateCapacityReservationBillingOwnerResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateCapacityReservationBillingOwnerResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateEnclaveCertificateIamRoleResult:
    boto3_raw_data: "type_defs.DisassociateEnclaveCertificateIamRoleResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateEnclaveCertificateIamRoleResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateEnclaveCertificateIamRoleResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateSecurityGroupVpcResult:
    boto3_raw_data: "type_defs.DisassociateSecurityGroupVpcResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateSecurityGroupVpcResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateSecurityGroupVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTrunkInterfaceResult:
    boto3_raw_data: "type_defs.DisassociateTrunkInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")
    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateTrunkInterfaceResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTrunkInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmptyResponseMetadata:
    boto3_raw_data: "type_defs.EmptyResponseMetadataTypeDef" = dataclasses.field()

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EmptyResponseMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmptyResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAddressTransferResult:
    boto3_raw_data: "type_defs.EnableAddressTransferResultTypeDef" = dataclasses.field()

    @cached_property
    def AddressTransfer(self):  # pragma: no cover
        return AddressTransfer.make_one(self.boto3_raw_data["AddressTransfer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableAddressTransferResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableAddressTransferResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAllowedImagesSettingsResult:
    boto3_raw_data: "type_defs.EnableAllowedImagesSettingsResultTypeDef" = (
        dataclasses.field()
    )

    AllowedImagesSettingsState = field("AllowedImagesSettingsState")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableAllowedImagesSettingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableAllowedImagesSettingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableAwsNetworkPerformanceMetricSubscriptionResult:
    boto3_raw_data: (
        "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
    ) = dataclasses.field()

    Output = field("Output")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableAwsNetworkPerformanceMetricSubscriptionResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableEbsEncryptionByDefaultResult:
    boto3_raw_data: "type_defs.EnableEbsEncryptionByDefaultResultTypeDef" = (
        dataclasses.field()
    )

    EbsEncryptionByDefault = field("EbsEncryptionByDefault")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableEbsEncryptionByDefaultResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableEbsEncryptionByDefaultResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageBlockPublicAccessResult:
    boto3_raw_data: "type_defs.EnableImageBlockPublicAccessResultTypeDef" = (
        dataclasses.field()
    )

    ImageBlockPublicAccessState = field("ImageBlockPublicAccessState")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImageBlockPublicAccessResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageBlockPublicAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageDeprecationResult:
    boto3_raw_data: "type_defs.EnableImageDeprecationResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableImageDeprecationResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageDeprecationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageDeregistrationProtectionResult:
    boto3_raw_data: "type_defs.EnableImageDeregistrationProtectionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImageDeregistrationProtectionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageDeregistrationProtectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageResult:
    boto3_raw_data: "type_defs.EnableImageResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EnableImageResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableIpamOrganizationAdminAccountResult:
    boto3_raw_data: "type_defs.EnableIpamOrganizationAdminAccountResultTypeDef" = (
        dataclasses.field()
    )

    Success = field("Success")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableIpamOrganizationAdminAccountResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableIpamOrganizationAdminAccountResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableReachabilityAnalyzerOrganizationSharingResult:
    boto3_raw_data: (
        "type_defs.EnableReachabilityAnalyzerOrganizationSharingResultTypeDef"
    ) = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableReachabilityAnalyzerOrganizationSharingResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableReachabilityAnalyzerOrganizationSharingResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSerialConsoleAccessResult:
    boto3_raw_data: "type_defs.EnableSerialConsoleAccessResultTypeDef" = (
        dataclasses.field()
    )

    SerialConsoleAccessEnabled = field("SerialConsoleAccessEnabled")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnableSerialConsoleAccessResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSerialConsoleAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSnapshotBlockPublicAccessResult:
    boto3_raw_data: "type_defs.EnableSnapshotBlockPublicAccessResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableSnapshotBlockPublicAccessResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSnapshotBlockPublicAccessResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVpcClassicLinkDnsSupportResult:
    boto3_raw_data: "type_defs.EnableVpcClassicLinkDnsSupportResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableVpcClassicLinkDnsSupportResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVpcClassicLinkDnsSupportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableVpcClassicLinkResult:
    boto3_raw_data: "type_defs.EnableVpcClassicLinkResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableVpcClassicLinkResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableVpcClassicLinkResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportClientVpnClientConfigurationResult:
    boto3_raw_data: "type_defs.ExportClientVpnClientConfigurationResultTypeDef" = (
        dataclasses.field()
    )

    ClientConfiguration = field("ClientConfiguration")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportClientVpnClientConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportClientVpnClientConfigurationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportTransitGatewayRoutesResult:
    boto3_raw_data: "type_defs.ExportTransitGatewayRoutesResultTypeDef" = (
        dataclasses.field()
    )

    S3Location = field("S3Location")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ExportTransitGatewayRoutesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportTransitGatewayRoutesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConsoleOutputResult:
    boto3_raw_data: "type_defs.GetConsoleOutputResultTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Timestamp = field("Timestamp")
    Output = field("Output")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConsoleOutputResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConsoleOutputResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConsoleScreenshotResult:
    boto3_raw_data: "type_defs.GetConsoleScreenshotResultTypeDef" = dataclasses.field()

    ImageData = field("ImageData")
    InstanceId = field("InstanceId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConsoleScreenshotResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConsoleScreenshotResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEbsDefaultKmsKeyIdResult:
    boto3_raw_data: "type_defs.GetEbsDefaultKmsKeyIdResultTypeDef" = dataclasses.field()

    KmsKeyId = field("KmsKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetEbsDefaultKmsKeyIdResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEbsDefaultKmsKeyIdResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEbsEncryptionByDefaultResult:
    boto3_raw_data: "type_defs.GetEbsEncryptionByDefaultResultTypeDef" = (
        dataclasses.field()
    )

    EbsEncryptionByDefault = field("EbsEncryptionByDefault")
    SseType = field("SseType")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetEbsEncryptionByDefaultResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEbsEncryptionByDefaultResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFlowLogsIntegrationTemplateResult:
    boto3_raw_data: "type_defs.GetFlowLogsIntegrationTemplateResultTypeDef" = (
        dataclasses.field()
    )

    Result = field("Result")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetFlowLogsIntegrationTemplateResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFlowLogsIntegrationTemplateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetImageBlockPublicAccessStateResult:
    boto3_raw_data: "type_defs.GetImageBlockPublicAccessStateResultTypeDef" = (
        dataclasses.field()
    )

    ImageBlockPublicAccessState = field("ImageBlockPublicAccessState")
    ManagedBy = field("ManagedBy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetImageBlockPublicAccessStateResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetImageBlockPublicAccessStateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceTpmEkPubResult:
    boto3_raw_data: "type_defs.GetInstanceTpmEkPubResultTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    KeyType = field("KeyType")
    KeyFormat = field("KeyFormat")
    KeyValue = field("KeyValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInstanceTpmEkPubResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceTpmEkPubResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceUefiDataResult:
    boto3_raw_data: "type_defs.GetInstanceUefiDataResultTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    UefiData = field("UefiData")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInstanceUefiDataResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceUefiDataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetPasswordDataResult:
    boto3_raw_data: "type_defs.GetPasswordDataResultTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Timestamp = field("Timestamp")
    PasswordData = field("PasswordData")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetPasswordDataResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetPasswordDataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSerialConsoleAccessStatusResult:
    boto3_raw_data: "type_defs.GetSerialConsoleAccessStatusResultTypeDef" = (
        dataclasses.field()
    )

    SerialConsoleAccessEnabled = field("SerialConsoleAccessEnabled")
    ManagedBy = field("ManagedBy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSerialConsoleAccessStatusResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSerialConsoleAccessStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSnapshotBlockPublicAccessStateResult:
    boto3_raw_data: "type_defs.GetSnapshotBlockPublicAccessStateResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")
    ManagedBy = field("ManagedBy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSnapshotBlockPublicAccessStateResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSnapshotBlockPublicAccessStateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessEndpointPolicyResult:
    boto3_raw_data: "type_defs.GetVerifiedAccessEndpointPolicyResultTypeDef" = (
        dataclasses.field()
    )

    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessEndpointPolicyResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessEndpointPolicyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessGroupPolicyResult:
    boto3_raw_data: "type_defs.GetVerifiedAccessGroupPolicyResultTypeDef" = (
        dataclasses.field()
    )

    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessGroupPolicyResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessGroupPolicyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnConnectionDeviceSampleConfigurationResult:
    boto3_raw_data: (
        "type_defs.GetVpnConnectionDeviceSampleConfigurationResultTypeDef"
    ) = dataclasses.field()

    VpnConnectionDeviceSampleConfiguration = field(
        "VpnConnectionDeviceSampleConfiguration"
    )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnConnectionDeviceSampleConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetVpnConnectionDeviceSampleConfigurationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportClientVpnClientCertificateRevocationListResult:
    boto3_raw_data: (
        "type_defs.ImportClientVpnClientCertificateRevocationListResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportClientVpnClientCertificateRevocationListResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ImportClientVpnClientCertificateRevocationListResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LockSnapshotResult:
    boto3_raw_data: "type_defs.LockSnapshotResultTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    LockState = field("LockState")
    LockDuration = field("LockDuration")
    CoolOffPeriod = field("CoolOffPeriod")
    CoolOffPeriodExpiresOn = field("CoolOffPeriodExpiresOn")
    LockCreatedOn = field("LockCreatedOn")
    LockExpiresOn = field("LockExpiresOn")
    LockDurationStartTime = field("LockDurationStartTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LockSnapshotResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LockSnapshotResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyAvailabilityZoneGroupResult:
    boto3_raw_data: "type_defs.ModifyAvailabilityZoneGroupResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyAvailabilityZoneGroupResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyAvailabilityZoneGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyCapacityReservationFleetResult:
    boto3_raw_data: "type_defs.ModifyCapacityReservationFleetResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyCapacityReservationFleetResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyCapacityReservationFleetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyCapacityReservationResult:
    boto3_raw_data: "type_defs.ModifyCapacityReservationResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyCapacityReservationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyCapacityReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyClientVpnEndpointResult:
    boto3_raw_data: "type_defs.ModifyClientVpnEndpointResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyClientVpnEndpointResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyClientVpnEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyEbsDefaultKmsKeyIdResult:
    boto3_raw_data: "type_defs.ModifyEbsDefaultKmsKeyIdResultTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyEbsDefaultKmsKeyIdResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyEbsDefaultKmsKeyIdResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyFleetResult:
    boto3_raw_data: "type_defs.ModifyFleetResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModifyFleetResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyFleetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCapacityReservationAttributesResult:
    boto3_raw_data: (
        "type_defs.ModifyInstanceCapacityReservationAttributesResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceCapacityReservationAttributesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyInstanceCapacityReservationAttributesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceConnectEndpointResult:
    boto3_raw_data: "type_defs.ModifyInstanceConnectEndpointResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceConnectEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceConnectEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCpuOptionsResult:
    boto3_raw_data: "type_defs.ModifyInstanceCpuOptionsResultTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstanceCpuOptionsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceCpuOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMaintenanceOptionsResult:
    boto3_raw_data: "type_defs.ModifyInstanceMaintenanceOptionsResultTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    AutoRecovery = field("AutoRecovery")
    RebootMigration = field("RebootMigration")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMaintenanceOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMaintenanceOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMetadataDefaultsResult:
    boto3_raw_data: "type_defs.ModifyInstanceMetadataDefaultsResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMetadataDefaultsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMetadataDefaultsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceNetworkPerformanceResult:
    boto3_raw_data: "type_defs.ModifyInstanceNetworkPerformanceResultTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    BandwidthWeighting = field("BandwidthWeighting")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceNetworkPerformanceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceNetworkPerformanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstancePlacementResult:
    boto3_raw_data: "type_defs.ModifyInstancePlacementResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstancePlacementResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstancePlacementResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyPrivateDnsNameOptionsResult:
    boto3_raw_data: "type_defs.ModifyPrivateDnsNameOptionsResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyPrivateDnsNameOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyPrivateDnsNameOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyPublicIpDnsNameOptionsResult:
    boto3_raw_data: "type_defs.ModifyPublicIpDnsNameOptionsResultTypeDef" = (
        dataclasses.field()
    )

    Successful = field("Successful")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyPublicIpDnsNameOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyPublicIpDnsNameOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyReservedInstancesResult:
    boto3_raw_data: "type_defs.ModifyReservedInstancesResultTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesModificationId = field("ReservedInstancesModificationId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyReservedInstancesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyReservedInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySecurityGroupRulesResult:
    boto3_raw_data: "type_defs.ModifySecurityGroupRulesResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifySecurityGroupRulesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySecurityGroupRulesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySnapshotTierResult:
    boto3_raw_data: "type_defs.ModifySnapshotTierResultTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    TieringStartTime = field("TieringStartTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifySnapshotTierResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySnapshotTierResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySpotFleetRequestResponse:
    boto3_raw_data: "type_defs.ModifySpotFleetRequestResponseTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifySpotFleetRequestResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySpotFleetRequestResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointConnectionNotificationResult:
    boto3_raw_data: "type_defs.ModifyVpcEndpointConnectionNotificationResultTypeDef" = (
        dataclasses.field()
    )

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointConnectionNotificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointConnectionNotificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointResult:
    boto3_raw_data: "type_defs.ModifyVpcEndpointResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpcEndpointResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServiceConfigurationResult:
    boto3_raw_data: "type_defs.ModifyVpcEndpointServiceConfigurationResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServiceConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointServiceConfigurationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServicePayerResponsibilityResult:
    boto3_raw_data: (
        "type_defs.ModifyVpcEndpointServicePayerResponsibilityResultTypeDef"
    ) = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServicePayerResponsibilityResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVpcEndpointServicePayerResponsibilityResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcTenancyResult:
    boto3_raw_data: "type_defs.ModifyVpcTenancyResultTypeDef" = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpcTenancyResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcTenancyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveAddressToVpcResult:
    boto3_raw_data: "type_defs.MoveAddressToVpcResultTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MoveAddressToVpcResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveAddressToVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseReservedInstancesOfferingResult:
    boto3_raw_data: "type_defs.PurchaseReservedInstancesOfferingResultTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesId = field("ReservedInstancesId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PurchaseReservedInstancesOfferingResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseReservedInstancesOfferingResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterImageResult:
    boto3_raw_data: "type_defs.RegisterImageResultTypeDef" = dataclasses.field()

    ImageId = field("ImageId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectCapacityReservationBillingOwnershipResult:
    boto3_raw_data: (
        "type_defs.RejectCapacityReservationBillingOwnershipResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectCapacityReservationBillingOwnershipResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RejectCapacityReservationBillingOwnershipResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectVpcPeeringConnectionResult:
    boto3_raw_data: "type_defs.RejectVpcPeeringConnectionResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RejectVpcPeeringConnectionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectVpcPeeringConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseIpamPoolAllocationResult:
    boto3_raw_data: "type_defs.ReleaseIpamPoolAllocationResultTypeDef" = (
        dataclasses.field()
    )

    Success = field("Success")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReleaseIpamPoolAllocationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseIpamPoolAllocationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceImageCriteriaInAllowedImagesSettingsResult:
    boto3_raw_data: (
        "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsResultTypeDef"
    ) = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceNetworkAclAssociationResult:
    boto3_raw_data: "type_defs.ReplaceNetworkAclAssociationResultTypeDef" = (
        dataclasses.field()
    )

    NewAssociationId = field("NewAssociationId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceNetworkAclAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceNetworkAclAssociationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceVpnTunnelResult:
    boto3_raw_data: "type_defs.ReplaceVpnTunnelResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReplaceVpnTunnelResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceVpnTunnelResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestSpotFleetResponse:
    boto3_raw_data: "type_defs.RequestSpotFleetResponseTypeDef" = dataclasses.field()

    SpotFleetRequestId = field("SpotFleetRequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestSpotFleetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestSpotFleetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetEbsDefaultKmsKeyIdResult:
    boto3_raw_data: "type_defs.ResetEbsDefaultKmsKeyIdResultTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetEbsDefaultKmsKeyIdResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetEbsDefaultKmsKeyIdResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetFpgaImageAttributeResult:
    boto3_raw_data: "type_defs.ResetFpgaImageAttributeResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ResetFpgaImageAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetFpgaImageAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreAddressToClassicResult:
    boto3_raw_data: "type_defs.RestoreAddressToClassicResultTypeDef" = (
        dataclasses.field()
    )

    PublicIp = field("PublicIp")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RestoreAddressToClassicResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreAddressToClassicResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreImageFromRecycleBinResult:
    boto3_raw_data: "type_defs.RestoreImageFromRecycleBinResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RestoreImageFromRecycleBinResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreImageFromRecycleBinResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreSnapshotFromRecycleBinResult:
    boto3_raw_data: "type_defs.RestoreSnapshotFromRecycleBinResultTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    OutpostArn = field("OutpostArn")
    Description = field("Description")
    Encrypted = field("Encrypted")
    OwnerId = field("OwnerId")
    Progress = field("Progress")
    StartTime = field("StartTime")
    State = field("State")
    VolumeId = field("VolumeId")
    VolumeSize = field("VolumeSize")
    SseType = field("SseType")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RestoreSnapshotFromRecycleBinResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreSnapshotFromRecycleBinResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreSnapshotTierResult:
    boto3_raw_data: "type_defs.RestoreSnapshotTierResultTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    RestoreStartTime = field("RestoreStartTime")
    RestoreDuration = field("RestoreDuration")
    IsPermanentRestore = field("IsPermanentRestore")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RestoreSnapshotTierResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreSnapshotTierResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunScheduledInstancesResult:
    boto3_raw_data: "type_defs.RunScheduledInstancesResultTypeDef" = dataclasses.field()

    InstanceIdSet = field("InstanceIdSet")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RunScheduledInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RunScheduledInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDeclarativePoliciesReportResult:
    boto3_raw_data: "type_defs.StartDeclarativePoliciesReportResultTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartDeclarativePoliciesReportResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDeclarativePoliciesReportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartVpcEndpointServicePrivateDnsVerificationResult:
    boto3_raw_data: (
        "type_defs.StartVpcEndpointServicePrivateDnsVerificationResultTypeDef"
    ) = dataclasses.field()

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartVpcEndpointServicePrivateDnsVerificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.StartVpcEndpointServicePrivateDnsVerificationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignIpv6AddressesResult:
    boto3_raw_data: "type_defs.UnassignIpv6AddressesResultTypeDef" = dataclasses.field()

    NetworkInterfaceId = field("NetworkInterfaceId")
    UnassignedIpv6Addresses = field("UnassignedIpv6Addresses")
    UnassignedIpv6Prefixes = field("UnassignedIpv6Prefixes")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnassignIpv6AddressesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnassignIpv6AddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnlockSnapshotResult:
    boto3_raw_data: "type_defs.UnlockSnapshotResultTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnlockSnapshotResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnlockSnapshotResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityGroupRuleDescriptionsEgressResult:
    boto3_raw_data: (
        "type_defs.UpdateSecurityGroupRuleDescriptionsEgressResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSecurityGroupRuleDescriptionsEgressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateSecurityGroupRuleDescriptionsEgressResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityGroupRuleDescriptionsIngressResult:
    boto3_raw_data: (
        "type_defs.UpdateSecurityGroupRuleDescriptionsIngressResultTypeDef"
    ) = dataclasses.field()

    Return = field("Return")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSecurityGroupRuleDescriptionsIngressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateSecurityGroupRuleDescriptionsIngressResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeAttachmentResponse:
    boto3_raw_data: "type_defs.VolumeAttachmentResponseTypeDef" = dataclasses.field()

    DeleteOnTermination = field("DeleteOnTermination")
    AssociatedResource = field("AssociatedResource")
    InstanceOwningService = field("InstanceOwningService")
    VolumeId = field("VolumeId")
    InstanceId = field("InstanceId")
    Device = field("Device")
    State = field("State")
    AttachTime = field("AttachTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeAttachmentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeAttachmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptReservedInstancesExchangeQuoteRequest:
    boto3_raw_data: "type_defs.AcceptReservedInstancesExchangeQuoteRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstanceIds = field("ReservedInstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def TargetConfigurations(self):  # pragma: no cover
        return TargetConfigurationRequest.make_many(
            self.boto3_raw_data["TargetConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptReservedInstancesExchangeQuoteRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptReservedInstancesExchangeQuoteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetReservedInstancesExchangeQuoteRequest:
    boto3_raw_data: "type_defs.GetReservedInstancesExchangeQuoteRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstanceIds = field("ReservedInstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def TargetConfigurations(self):  # pragma: no cover
        return TargetConfigurationRequest.make_many(
            self.boto3_raw_data["TargetConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetReservedInstancesExchangeQuoteRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetReservedInstancesExchangeQuoteRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccountAttribute:
    boto3_raw_data: "type_defs.AccountAttributeTypeDef" = dataclasses.field()

    AttributeName = field("AttributeName")

    @cached_property
    def AttributeValues(self):  # pragma: no cover
        return AccountAttributeValue.make_many(self.boto3_raw_data["AttributeValues"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AccountAttributeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AccountAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetInstancesResult:
    boto3_raw_data: "type_defs.DescribeFleetInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActiveInstances(self):  # pragma: no cover
        return ActiveInstance.make_many(self.boto3_raw_data["ActiveInstances"])

    FleetId = field("FleetId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetInstancesResponse:
    boto3_raw_data: "type_defs.DescribeSpotFleetInstancesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActiveInstances(self):  # pragma: no cover
        return ActiveInstance.make_many(self.boto3_raw_data["ActiveInstances"])

    SpotFleetRequestId = field("SpotFleetRequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetInstancesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetInstancesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetActiveVpnTunnelStatusResult:
    boto3_raw_data: "type_defs.GetActiveVpnTunnelStatusResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActiveVpnTunnelStatus(self):  # pragma: no cover
        return ActiveVpnTunnelStatus.make_one(
            self.boto3_raw_data["ActiveVpnTunnelStatus"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetActiveVpnTunnelStatusResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetActiveVpnTunnelStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointServicePermissionsResult:
    boto3_raw_data: "type_defs.ModifyVpcEndpointServicePermissionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AddedPrincipals(self):  # pragma: no cover
        return AddedPrincipal.make_many(self.boto3_raw_data["AddedPrincipals"])

    ReturnValue = field("ReturnValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcEndpointServicePermissionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointServicePermissionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisLoadBalancerTarget:
    boto3_raw_data: "type_defs.AnalysisLoadBalancerTargetTypeDef" = dataclasses.field()

    Address = field("Address")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @cached_property
    def Instance(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Instance"])

    Port = field("Port")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisLoadBalancerTargetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisLoadBalancerTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupRuleOptionsPair:
    boto3_raw_data: "type_defs.RuleGroupRuleOptionsPairTypeDef" = dataclasses.field()

    RuleGroupArn = field("RuleGroupArn")

    @cached_property
    def RuleOptions(self):  # pragma: no cover
        return RuleOption.make_many(self.boto3_raw_data["RuleOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupRuleOptionsPairTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupRuleOptionsPairTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddressAttribute:
    boto3_raw_data: "type_defs.AddressAttributeTypeDef" = dataclasses.field()

    PublicIp = field("PublicIp")
    AllocationId = field("AllocationId")
    PtrRecord = field("PtrRecord")

    @cached_property
    def PtrRecordUpdate(self):  # pragma: no cover
        return PtrUpdateStatus.make_one(self.boto3_raw_data["PtrRecordUpdate"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddressAttributeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddressAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Address:
    boto3_raw_data: "type_defs.AddressTypeDef" = dataclasses.field()

    AllocationId = field("AllocationId")
    AssociationId = field("AssociationId")
    Domain = field("Domain")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NetworkInterfaceOwnerId = field("NetworkInterfaceOwnerId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PublicIpv4Pool = field("PublicIpv4Pool")
    NetworkBorderGroup = field("NetworkBorderGroup")
    CustomerOwnedIp = field("CustomerOwnedIp")
    CustomerOwnedIpv4Pool = field("CustomerOwnedIpv4Pool")
    CarrierIp = field("CarrierIp")
    SubnetId = field("SubnetId")
    ServiceManaged = field("ServiceManaged")
    InstanceId = field("InstanceId")
    PublicIp = field("PublicIp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddressTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AddressTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllowedPrincipal:
    boto3_raw_data: "type_defs.AllowedPrincipalTypeDef" = dataclasses.field()

    PrincipalType = field("PrincipalType")
    Principal = field("Principal")
    ServicePermissionId = field("ServicePermissionId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ServiceId = field("ServiceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AllowedPrincipalTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllowedPrincipalTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityBlock:
    boto3_raw_data: "type_defs.CapacityBlockTypeDef" = dataclasses.field()

    CapacityBlockId = field("CapacityBlockId")
    UltraserverType = field("UltraserverType")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    CapacityReservationIds = field("CapacityReservationIds")
    StartDate = field("StartDate")
    EndDate = field("EndDate")
    CreateDate = field("CreateDate")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CapacityBlockTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CapacityBlockTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CarrierGateway:
    boto3_raw_data: "type_defs.CarrierGatewayTypeDef" = dataclasses.field()

    CarrierGatewayId = field("CarrierGatewayId")
    VpcId = field("VpcId")
    State = field("State")
    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CarrierGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CarrierGatewayTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientCreateTagsRequest:
    boto3_raw_data: "type_defs.ClientCreateTagsRequestTypeDef" = dataclasses.field()

    Resources = field("Resources")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientDeleteTagsRequest:
    boto3_raw_data: "type_defs.ClientDeleteTagsRequestTypeDef" = dataclasses.field()

    Resources = field("Resources")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientDeleteTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientDeleteTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CoipPool:
    boto3_raw_data: "type_defs.CoipPoolTypeDef" = dataclasses.field()

    PoolId = field("PoolId")
    PoolCidrs = field("PoolCidrs")
    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PoolArn = field("PoolArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CoipPoolTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CoipPoolTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopySnapshotResult:
    boto3_raw_data: "type_defs.CopySnapshotResultTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SnapshotId = field("SnapshotId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CopySnapshotResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopySnapshotResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSecurityGroupResult:
    boto3_raw_data: "type_defs.CreateSecurityGroupResultTypeDef" = dataclasses.field()

    GroupId = field("GroupId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SecurityGroupArn = field("SecurityGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSecurityGroupResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSecurityGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTagsRequestServiceResourceCreateTags:
    boto3_raw_data: "type_defs.CreateTagsRequestServiceResourceCreateTagsTypeDef" = (
        dataclasses.field()
    )

    Resources = field("Resources")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTagsRequestServiceResourceCreateTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTagsRequestServiceResourceCreateTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomerGateway:
    boto3_raw_data: "type_defs.CustomerGatewayTypeDef" = dataclasses.field()

    CertificateArn = field("CertificateArn")
    DeviceName = field("DeviceName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    BgpAsnExtended = field("BgpAsnExtended")
    CustomerGatewayId = field("CustomerGatewayId")
    State = field("State")
    Type = field("Type")
    IpAddress = field("IpAddress")
    BgpAsn = field("BgpAsn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomerGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CustomerGatewayTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeclarativePoliciesReport:
    boto3_raw_data: "type_defs.DeclarativePoliciesReportTypeDef" = dataclasses.field()

    ReportId = field("ReportId")
    S3Bucket = field("S3Bucket")
    S3Prefix = field("S3Prefix")
    TargetId = field("TargetId")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    Status = field("Status")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeclarativePoliciesReportTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeclarativePoliciesReportTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DhcpOptionsCreateTagsRequest:
    boto3_raw_data: "type_defs.DhcpOptionsCreateTagsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DhcpOptionsCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DhcpOptionsCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HostReservation:
    boto3_raw_data: "type_defs.HostReservationTypeDef" = dataclasses.field()

    Count = field("Count")
    CurrencyCode = field("CurrencyCode")
    Duration = field("Duration")
    End = field("End")
    HostIdSet = field("HostIdSet")
    HostReservationId = field("HostReservationId")
    HourlyPrice = field("HourlyPrice")
    InstanceFamily = field("InstanceFamily")
    OfferingId = field("OfferingId")
    PaymentOption = field("PaymentOption")
    Start = field("Start")
    State = field("State")
    UpfrontPrice = field("UpfrontPrice")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HostReservationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HostReservationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCreateTagsRequest:
    boto3_raw_data: "type_defs.ImageCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportKeyPairResult:
    boto3_raw_data: "type_defs.ImportKeyPairResultTypeDef" = dataclasses.field()

    KeyFingerprint = field("KeyFingerprint")
    KeyName = field("KeyName")
    KeyPairId = field("KeyPairId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportKeyPairResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportKeyPairResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceCreateTagsRequest:
    boto3_raw_data: "type_defs.InstanceCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceDeleteTagsRequest:
    boto3_raw_data: "type_defs.InstanceDeleteTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceDeleteTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceDeleteTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowAssociationRequest:
    boto3_raw_data: "type_defs.InstanceEventWindowAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")

    @cached_property
    def InstanceTags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["InstanceTags"])

    DedicatedHostIds = field("DedicatedHostIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceEventWindowAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowAssociationTarget:
    boto3_raw_data: "type_defs.InstanceEventWindowAssociationTargetTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DedicatedHostIds = field("DedicatedHostIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceEventWindowAssociationTargetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowAssociationTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindowDisassociationRequest:
    boto3_raw_data: "type_defs.InstanceEventWindowDisassociationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")

    @cached_property
    def InstanceTags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["InstanceTags"])

    DedicatedHostIds = field("DedicatedHostIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceEventWindowDisassociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowDisassociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InternetGatewayCreateTagsRequest:
    boto3_raw_data: "type_defs.InternetGatewayCreateTagsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InternetGatewayCreateTagsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InternetGatewayCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamExternalResourceVerificationToken:
    boto3_raw_data: "type_defs.IpamExternalResourceVerificationTokenTypeDef" = (
        dataclasses.field()
    )

    IpamExternalResourceVerificationTokenId = field(
        "IpamExternalResourceVerificationTokenId"
    )
    IpamExternalResourceVerificationTokenArn = field(
        "IpamExternalResourceVerificationTokenArn"
    )
    IpamId = field("IpamId")
    IpamArn = field("IpamArn")
    IpamRegion = field("IpamRegion")
    TokenValue = field("TokenValue")
    TokenName = field("TokenName")
    NotAfter = field("NotAfter")
    Status = field("Status")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IpamExternalResourceVerificationTokenTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamExternalResourceVerificationTokenTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamResourceDiscoveryAssociation:
    boto3_raw_data: "type_defs.IpamResourceDiscoveryAssociationTypeDef" = (
        dataclasses.field()
    )

    OwnerId = field("OwnerId")
    IpamResourceDiscoveryAssociationId = field("IpamResourceDiscoveryAssociationId")
    IpamResourceDiscoveryAssociationArn = field("IpamResourceDiscoveryAssociationArn")
    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    IpamId = field("IpamId")
    IpamArn = field("IpamArn")
    IpamRegion = field("IpamRegion")
    IsDefault = field("IsDefault")
    ResourceDiscoveryStatus = field("ResourceDiscoveryStatus")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IpamResourceDiscoveryAssociationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamResourceDiscoveryAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamScope:
    boto3_raw_data: "type_defs.IpamScopeTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    IpamScopeId = field("IpamScopeId")
    IpamScopeArn = field("IpamScopeArn")
    IpamArn = field("IpamArn")
    IpamRegion = field("IpamRegion")
    IpamScopeType = field("IpamScopeType")
    IsDefault = field("IsDefault")
    Description = field("Description")
    PoolCount = field("PoolCount")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamScopeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpamScopeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KeyPairInfo:
    boto3_raw_data: "type_defs.KeyPairInfoTypeDef" = dataclasses.field()

    KeyPairId = field("KeyPairId")
    KeyType = field("KeyType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PublicKey = field("PublicKey")
    CreateTime = field("CreateTime")
    KeyName = field("KeyName")
    KeyFingerprint = field("KeyFingerprint")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KeyPairInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KeyPairInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KeyPair:
    boto3_raw_data: "type_defs.KeyPairTypeDef" = dataclasses.field()

    KeyPairId = field("KeyPairId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    KeyName = field("KeyName")
    KeyFingerprint = field("KeyFingerprint")
    KeyMaterial = field("KeyMaterial")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KeyPairTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KeyPairTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateTagSpecificationRequest:
    boto3_raw_data: "type_defs.LaunchTemplateTagSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateTagSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateTagSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateTagSpecification:
    boto3_raw_data: "type_defs.LaunchTemplateTagSpecificationTypeDef" = (
        dataclasses.field()
    )

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateTagSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateTagSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayRouteTableVirtualInterfaceGroupAssociation:
    boto3_raw_data: (
        "type_defs.LocalGatewayRouteTableVirtualInterfaceGroupAssociationTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = field(
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
    )
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    LocalGatewayId = field("LocalGatewayId")
    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    LocalGatewayRouteTableArn = field("LocalGatewayRouteTableArn")
    OwnerId = field("OwnerId")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LocalGatewayRouteTableVirtualInterfaceGroupAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LocalGatewayRouteTableVirtualInterfaceGroupAssociationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayRouteTableVpcAssociation:
    boto3_raw_data: "type_defs.LocalGatewayRouteTableVpcAssociationTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableVpcAssociationId = field(
        "LocalGatewayRouteTableVpcAssociationId"
    )
    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    LocalGatewayRouteTableArn = field("LocalGatewayRouteTableArn")
    LocalGatewayId = field("LocalGatewayId")
    VpcId = field("VpcId")
    OwnerId = field("OwnerId")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LocalGatewayRouteTableVpcAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalGatewayRouteTableVpcAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGateway:
    boto3_raw_data: "type_defs.LocalGatewayTypeDef" = dataclasses.field()

    LocalGatewayId = field("LocalGatewayId")
    OutpostArn = field("OutpostArn")
    OwnerId = field("OwnerId")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LocalGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LocalGatewayTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayVirtualInterfaceGroup:
    boto3_raw_data: "type_defs.LocalGatewayVirtualInterfaceGroupTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    LocalGatewayVirtualInterfaceIds = field("LocalGatewayVirtualInterfaceIds")
    LocalGatewayId = field("LocalGatewayId")
    OwnerId = field("OwnerId")
    LocalBgpAsn = field("LocalBgpAsn")
    LocalBgpAsnExtended = field("LocalBgpAsnExtended")
    LocalGatewayVirtualInterfaceGroupArn = field("LocalGatewayVirtualInterfaceGroupArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ConfigurationState = field("ConfigurationState")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LocalGatewayVirtualInterfaceGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalGatewayVirtualInterfaceGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayVirtualInterface:
    boto3_raw_data: "type_defs.LocalGatewayVirtualInterfaceTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayVirtualInterfaceId = field("LocalGatewayVirtualInterfaceId")
    LocalGatewayId = field("LocalGatewayId")
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    LocalGatewayVirtualInterfaceArn = field("LocalGatewayVirtualInterfaceArn")
    OutpostLagId = field("OutpostLagId")
    Vlan = field("Vlan")
    LocalAddress = field("LocalAddress")
    PeerAddress = field("PeerAddress")
    LocalBgpAsn = field("LocalBgpAsn")
    PeerBgpAsn = field("PeerBgpAsn")
    PeerBgpAsnExtended = field("PeerBgpAsnExtended")
    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ConfigurationState = field("ConfigurationState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LocalGatewayVirtualInterfaceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalGatewayVirtualInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ManagedPrefixList:
    boto3_raw_data: "type_defs.ManagedPrefixListTypeDef" = dataclasses.field()

    PrefixListId = field("PrefixListId")
    AddressFamily = field("AddressFamily")
    State = field("State")
    StateMessage = field("StateMessage")
    PrefixListArn = field("PrefixListArn")
    PrefixListName = field("PrefixListName")
    MaxEntries = field("MaxEntries")
    Version = field("Version")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    OwnerId = field("OwnerId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ManagedPrefixListTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ManagedPrefixListTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkAclCreateTagsRequest:
    boto3_raw_data: "type_defs.NetworkAclCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkAclCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkAclCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInsightsAccessScopeAnalysis:
    boto3_raw_data: "type_defs.NetworkInsightsAccessScopeAnalysisTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    NetworkInsightsAccessScopeAnalysisArn = field(
        "NetworkInsightsAccessScopeAnalysisArn"
    )
    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    WarningMessage = field("WarningMessage")
    StartDate = field("StartDate")
    EndDate = field("EndDate")
    FindingsFound = field("FindingsFound")
    AnalyzedEniCount = field("AnalyzedEniCount")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NetworkInsightsAccessScopeAnalysisTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInsightsAccessScopeAnalysisTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInsightsAccessScope:
    boto3_raw_data: "type_defs.NetworkInsightsAccessScopeTypeDef" = dataclasses.field()

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    NetworkInsightsAccessScopeArn = field("NetworkInsightsAccessScopeArn")
    CreatedDate = field("CreatedDate")
    UpdatedDate = field("UpdatedDate")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInsightsAccessScopeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInsightsAccessScopeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceCreateTagsRequest:
    boto3_raw_data: "type_defs.NetworkInterfaceCreateTagsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NetworkInterfaceCreateTagsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OutpostLag:
    boto3_raw_data: "type_defs.OutpostLagTypeDef" = dataclasses.field()

    OutpostArn = field("OutpostArn")
    OwnerId = field("OwnerId")
    State = field("State")
    OutpostLagId = field("OutpostLagId")
    LocalGatewayVirtualInterfaceIds = field("LocalGatewayVirtualInterfaceIds")
    ServiceLinkVirtualInterfaceIds = field("ServiceLinkVirtualInterfaceIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OutpostLagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OutpostLagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PlacementGroup:
    boto3_raw_data: "type_defs.PlacementGroupTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    State = field("State")
    Strategy = field("Strategy")
    PartitionCount = field("PartitionCount")
    GroupId = field("GroupId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    GroupArn = field("GroupArn")
    SpreadLevel = field("SpreadLevel")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PlacementGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PlacementGroupTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRootVolumeTask:
    boto3_raw_data: "type_defs.ReplaceRootVolumeTaskTypeDef" = dataclasses.field()

    ReplaceRootVolumeTaskId = field("ReplaceRootVolumeTaskId")
    InstanceId = field("InstanceId")
    TaskState = field("TaskState")
    StartTime = field("StartTime")
    CompleteTime = field("CompleteTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ImageId = field("ImageId")
    SnapshotId = field("SnapshotId")
    DeleteReplacedRootVolume = field("DeleteReplacedRootVolume")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReplaceRootVolumeTaskTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceRootVolumeTaskTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerEndpoint:
    boto3_raw_data: "type_defs.RouteServerEndpointTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    RouteServerEndpointId = field("RouteServerEndpointId")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    EniId = field("EniId")
    EniAddress = field("EniAddress")
    State = field("State")
    FailureReason = field("FailureReason")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteServerEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServer:
    boto3_raw_data: "type_defs.RouteServerTypeDef" = dataclasses.field()

    RouteServerId = field("RouteServerId")
    AmazonSideAsn = field("AmazonSideAsn")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PersistRoutesState = field("PersistRoutesState")
    PersistRoutesDuration = field("PersistRoutesDuration")
    SnsNotificationsEnabled = field("SnsNotificationsEnabled")
    SnsTopicArn = field("SnsTopicArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteServerTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RouteServerTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteTableCreateTagsRequest:
    boto3_raw_data: "type_defs.RouteTableCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteTableCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteTableCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupCreateTagsRequest:
    boto3_raw_data: "type_defs.SecurityGroupCreateTagsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SecurityGroupCreateTagsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupForVpc:
    boto3_raw_data: "type_defs.SecurityGroupForVpcTypeDef" = dataclasses.field()

    Description = field("Description")
    GroupName = field("GroupName")
    OwnerId = field("OwnerId")
    GroupId = field("GroupId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PrimaryVpcId = field("PrimaryVpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupForVpcTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupForVpcTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceLinkVirtualInterface:
    boto3_raw_data: "type_defs.ServiceLinkVirtualInterfaceTypeDef" = dataclasses.field()

    ServiceLinkVirtualInterfaceId = field("ServiceLinkVirtualInterfaceId")
    ServiceLinkVirtualInterfaceArn = field("ServiceLinkVirtualInterfaceArn")
    OutpostId = field("OutpostId")
    OutpostArn = field("OutpostArn")
    OwnerId = field("OwnerId")
    LocalAddress = field("LocalAddress")
    PeerAddress = field("PeerAddress")
    PeerBgpAsn = field("PeerBgpAsn")
    Vlan = field("Vlan")
    OutpostLagId = field("OutpostLagId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ConfigurationState = field("ConfigurationState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ServiceLinkVirtualInterfaceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceLinkVirtualInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotCreateTagsRequest:
    boto3_raw_data: "type_defs.SnapshotCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotInfo:
    boto3_raw_data: "type_defs.SnapshotInfoTypeDef" = dataclasses.field()

    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    Encrypted = field("Encrypted")
    VolumeId = field("VolumeId")
    State = field("State")
    VolumeSize = field("VolumeSize")
    StartTime = field("StartTime")
    Progress = field("Progress")
    OwnerId = field("OwnerId")
    SnapshotId = field("SnapshotId")
    OutpostArn = field("OutpostArn")
    SseType = field("SseType")
    AvailabilityZone = field("AvailabilityZone")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SnapshotInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotResponse:
    boto3_raw_data: "type_defs.SnapshotResponseTypeDef" = dataclasses.field()

    OwnerAlias = field("OwnerAlias")
    OutpostArn = field("OutpostArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    StorageTier = field("StorageTier")
    RestoreExpiryTime = field("RestoreExpiryTime")
    SseType = field("SseType")
    AvailabilityZone = field("AvailabilityZone")
    TransferType = field("TransferType")
    CompletionDurationMinutes = field("CompletionDurationMinutes")
    CompletionTime = field("CompletionTime")
    FullSnapshotSizeInBytes = field("FullSnapshotSizeInBytes")
    SnapshotId = field("SnapshotId")
    VolumeId = field("VolumeId")
    State = field("State")
    StateMessage = field("StateMessage")
    StartTime = field("StartTime")
    Progress = field("Progress")
    OwnerId = field("OwnerId")
    Description = field("Description")
    VolumeSize = field("VolumeSize")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    DataEncryptionKeyId = field("DataEncryptionKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotTierStatus:
    boto3_raw_data: "type_defs.SnapshotTierStatusTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    VolumeId = field("VolumeId")
    Status = field("Status")
    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    StorageTier = field("StorageTier")
    LastTieringStartTime = field("LastTieringStartTime")
    LastTieringProgress = field("LastTieringProgress")
    LastTieringOperationStatus = field("LastTieringOperationStatus")
    LastTieringOperationStatusDetail = field("LastTieringOperationStatusDetail")
    ArchivalCompleteTime = field("ArchivalCompleteTime")
    RestoreExpiryTime = field("RestoreExpiryTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotTierStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotTierStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Snapshot:
    boto3_raw_data: "type_defs.SnapshotTypeDef" = dataclasses.field()

    OwnerAlias = field("OwnerAlias")
    OutpostArn = field("OutpostArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    StorageTier = field("StorageTier")
    RestoreExpiryTime = field("RestoreExpiryTime")
    SseType = field("SseType")
    AvailabilityZone = field("AvailabilityZone")
    TransferType = field("TransferType")
    CompletionDurationMinutes = field("CompletionDurationMinutes")
    CompletionTime = field("CompletionTime")
    FullSnapshotSizeInBytes = field("FullSnapshotSizeInBytes")
    SnapshotId = field("SnapshotId")
    VolumeId = field("VolumeId")
    State = field("State")
    StateMessage = field("StateMessage")
    StartTime = field("StartTime")
    Progress = field("Progress")
    OwnerId = field("OwnerId")
    Description = field("Description")
    VolumeSize = field("VolumeSize")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    DataEncryptionKeyId = field("DataEncryptionKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SnapshotTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetTagSpecificationOutput:
    boto3_raw_data: "type_defs.SpotFleetTagSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SpotFleetTagSpecificationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetTagSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetTagSpecification:
    boto3_raw_data: "type_defs.SpotFleetTagSpecificationTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotFleetTagSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetTagSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetCidrReservation:
    boto3_raw_data: "type_defs.SubnetCidrReservationTypeDef" = dataclasses.field()

    SubnetCidrReservationId = field("SubnetCidrReservationId")
    SubnetId = field("SubnetId")
    Cidr = field("Cidr")
    ReservationType = field("ReservationType")
    OwnerId = field("OwnerId")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubnetCidrReservationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetCidrReservationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetCreateTagsRequest:
    boto3_raw_data: "type_defs.SubnetCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubnetCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagSpecificationOutput:
    boto3_raw_data: "type_defs.TagSpecificationOutputTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagSpecification:
    boto3_raw_data: "type_defs.TagSpecificationTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TagSpecificationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorSession:
    boto3_raw_data: "type_defs.TrafficMirrorSessionTypeDef" = dataclasses.field()

    TrafficMirrorSessionId = field("TrafficMirrorSessionId")
    TrafficMirrorTargetId = field("TrafficMirrorTargetId")
    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    OwnerId = field("OwnerId")
    PacketLength = field("PacketLength")
    SessionNumber = field("SessionNumber")
    VirtualNetworkId = field("VirtualNetworkId")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficMirrorSessionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorSessionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorTarget:
    boto3_raw_data: "type_defs.TrafficMirrorTargetTypeDef" = dataclasses.field()

    TrafficMirrorTargetId = field("TrafficMirrorTargetId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NetworkLoadBalancerArn = field("NetworkLoadBalancerArn")
    Type = field("Type")
    Description = field("Description")
    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    GatewayLoadBalancerEndpointId = field("GatewayLoadBalancerEndpointId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficMirrorTargetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPolicyTable:
    boto3_raw_data: "type_defs.TransitGatewayPolicyTableTypeDef" = dataclasses.field()

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")
    TransitGatewayId = field("TransitGatewayId")
    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayPolicyTableTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPolicyTableTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteTableAnnouncement:
    boto3_raw_data: "type_defs.TransitGatewayRouteTableAnnouncementTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )
    TransitGatewayId = field("TransitGatewayId")
    CoreNetworkId = field("CoreNetworkId")
    PeerTransitGatewayId = field("PeerTransitGatewayId")
    PeerCoreNetworkId = field("PeerCoreNetworkId")
    PeeringAttachmentId = field("PeeringAttachmentId")
    AnnouncementDirection = field("AnnouncementDirection")
    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayRouteTableAnnouncementTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTableAnnouncementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRouteTable:
    boto3_raw_data: "type_defs.TransitGatewayRouteTableTypeDef" = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    TransitGatewayId = field("TransitGatewayId")
    State = field("State")
    DefaultAssociationRouteTable = field("DefaultAssociationRouteTable")
    DefaultPropagationRouteTable = field("DefaultPropagationRouteTable")
    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayRouteTableTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTableTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrunkInterfaceAssociation:
    boto3_raw_data: "type_defs.TrunkInterfaceAssociationTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    BranchInterfaceId = field("BranchInterfaceId")
    TrunkInterfaceId = field("TrunkInterfaceId")
    InterfaceProtocol = field("InterfaceProtocol")
    VlanId = field("VlanId")
    GreKey = field("GreKey")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrunkInterfaceAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrunkInterfaceAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeCreateTagsRequest:
    boto3_raw_data: "type_defs.VolumeCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VolumeCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcBlockPublicAccessExclusion:
    boto3_raw_data: "type_defs.VpcBlockPublicAccessExclusionTypeDef" = (
        dataclasses.field()
    )

    ExclusionId = field("ExclusionId")
    InternetGatewayExclusionMode = field("InternetGatewayExclusionMode")
    ResourceArn = field("ResourceArn")
    State = field("State")
    Reason = field("Reason")
    CreationTimestamp = field("CreationTimestamp")
    LastUpdateTimestamp = field("LastUpdateTimestamp")
    DeletionTimestamp = field("DeletionTimestamp")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpcBlockPublicAccessExclusionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcBlockPublicAccessExclusionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcClassicLink:
    boto3_raw_data: "type_defs.VpcClassicLinkTypeDef" = dataclasses.field()

    ClassicLinkEnabled = field("ClassicLinkEnabled")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcId = field("VpcId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcClassicLinkTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcClassicLinkTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcCreateTagsRequest:
    boto3_raw_data: "type_defs.VpcCreateTagsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcCreateTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcCreateTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateIpamPoolCidrResult:
    boto3_raw_data: "type_defs.AllocateIpamPoolCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPoolAllocation(self):  # pragma: no cover
        return IpamPoolAllocation.make_one(self.boto3_raw_data["IpamPoolAllocation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateIpamPoolCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateIpamPoolCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolAllocationsResult:
    boto3_raw_data: "type_defs.GetIpamPoolAllocationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamPoolAllocations(self):  # pragma: no cover
        return IpamPoolAllocation.make_many(self.boto3_raw_data["IpamPoolAllocations"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamPoolAllocationsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolAllocationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisAclRule:
    boto3_raw_data: "type_defs.AnalysisAclRuleTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Egress = field("Egress")

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    RuleNumber = field("RuleNumber")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisAclRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AnalysisAclRuleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisPacketHeader:
    boto3_raw_data: "type_defs.AnalysisPacketHeaderTypeDef" = dataclasses.field()

    DestinationAddresses = field("DestinationAddresses")

    @cached_property
    def DestinationPortRanges(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["DestinationPortRanges"])

    Protocol = field("Protocol")
    SourceAddresses = field("SourceAddresses")

    @cached_property
    def SourcePortRanges(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["SourcePortRanges"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisPacketHeaderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisPacketHeaderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisSecurityGroupRule:
    boto3_raw_data: "type_defs.AnalysisSecurityGroupRuleTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Direction = field("Direction")
    SecurityGroupId = field("SecurityGroupId")

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    PrefixListId = field("PrefixListId")
    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisSecurityGroupRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisSecurityGroupRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallStatefulRule:
    boto3_raw_data: "type_defs.FirewallStatefulRuleTypeDef" = dataclasses.field()

    RuleGroupArn = field("RuleGroupArn")
    Sources = field("Sources")
    Destinations = field("Destinations")

    @cached_property
    def SourcePorts(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["SourcePorts"])

    @cached_property
    def DestinationPorts(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["DestinationPorts"])

    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    Direction = field("Direction")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FirewallStatefulRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FirewallStatefulRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallStatelessRule:
    boto3_raw_data: "type_defs.FirewallStatelessRuleTypeDef" = dataclasses.field()

    RuleGroupArn = field("RuleGroupArn")
    Sources = field("Sources")
    Destinations = field("Destinations")

    @cached_property
    def SourcePorts(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["SourcePorts"])

    @cached_property
    def DestinationPorts(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["DestinationPorts"])

    Protocols = field("Protocols")
    RuleAction = field("RuleAction")
    Priority = field("Priority")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FirewallStatelessRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FirewallStatelessRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIpamByoasnResult:
    boto3_raw_data: "type_defs.AssociateIpamByoasnResultTypeDef" = dataclasses.field()

    @cached_property
    def AsnAssociation(self):  # pragma: no cover
        return AsnAssociation.make_one(self.boto3_raw_data["AsnAssociation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateIpamByoasnResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIpamByoasnResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ByoipCidr:
    boto3_raw_data: "type_defs.ByoipCidrTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    Description = field("Description")

    @cached_property
    def AsnAssociations(self):  # pragma: no cover
        return AsnAssociation.make_many(self.boto3_raw_data["AsnAssociations"])

    StatusMessage = field("StatusMessage")
    State = field("State")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ByoipCidrTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ByoipCidrTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIpamByoasnResult:
    boto3_raw_data: "type_defs.DisassociateIpamByoasnResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AsnAssociation(self):  # pragma: no cover
        return AsnAssociation.make_one(self.boto3_raw_data["AsnAssociation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisassociateIpamByoasnResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIpamByoasnResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionIpamByoasnRequest:
    boto3_raw_data: "type_defs.ProvisionIpamByoasnRequestTypeDef" = dataclasses.field()

    IpamId = field("IpamId")
    Asn = field("Asn")

    @cached_property
    def AsnAuthorizationContext(self):  # pragma: no cover
        return AsnAuthorizationContext.make_one(
            self.boto3_raw_data["AsnAuthorizationContext"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionIpamByoasnRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionIpamByoasnRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignPrivateIpAddressesResult:
    boto3_raw_data: "type_defs.AssignPrivateIpAddressesResultTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def AssignedPrivateIpAddresses(self):  # pragma: no cover
        return AssignedPrivateIpAddress.make_many(
            self.boto3_raw_data["AssignedPrivateIpAddresses"]
        )

    @cached_property
    def AssignedIpv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecification.make_many(
            self.boto3_raw_data["AssignedIpv4Prefixes"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssignPrivateIpAddressesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignPrivateIpAddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssignPrivateNatGatewayAddressResult:
    boto3_raw_data: "type_defs.AssignPrivateNatGatewayAddressResultTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def NatGatewayAddresses(self):  # pragma: no cover
        return NatGatewayAddress.make_many(self.boto3_raw_data["NatGatewayAddresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssignPrivateNatGatewayAddressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssignPrivateNatGatewayAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateNatGatewayAddressResult:
    boto3_raw_data: "type_defs.AssociateNatGatewayAddressResultTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def NatGatewayAddresses(self):  # pragma: no cover
        return NatGatewayAddress.make_many(self.boto3_raw_data["NatGatewayAddresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateNatGatewayAddressResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateNatGatewayAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateNatGatewayAddressResult:
    boto3_raw_data: "type_defs.DisassociateNatGatewayAddressResultTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def NatGatewayAddresses(self):  # pragma: no cover
        return NatGatewayAddress.make_many(self.boto3_raw_data["NatGatewayAddresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateNatGatewayAddressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateNatGatewayAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnassignPrivateNatGatewayAddressResult:
    boto3_raw_data: "type_defs.UnassignPrivateNatGatewayAddressResultTypeDef" = (
        dataclasses.field()
    )

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def NatGatewayAddresses(self):  # pragma: no cover
        return NatGatewayAddress.make_many(self.boto3_raw_data["NatGatewayAddresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnassignPrivateNatGatewayAddressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnassignPrivateNatGatewayAddressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateClientVpnTargetNetworkResult:
    boto3_raw_data: "type_defs.AssociateClientVpnTargetNetworkResultTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")

    @cached_property
    def Status(self):  # pragma: no cover
        return AssociationStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateClientVpnTargetNetworkResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateClientVpnTargetNetworkResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateClientVpnTargetNetworkResult:
    boto3_raw_data: "type_defs.DisassociateClientVpnTargetNetworkResultTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")

    @cached_property
    def Status(self):  # pragma: no cover
        return AssociationStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateClientVpnTargetNetworkResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateClientVpnTargetNetworkResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetNetwork:
    boto3_raw_data: "type_defs.TargetNetworkTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    VpcId = field("VpcId")
    TargetNetworkId = field("TargetNetworkId")
    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Status(self):  # pragma: no cover
        return AssociationStatus.make_one(self.boto3_raw_data["Status"])

    SecurityGroups = field("SecurityGroups")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TargetNetworkTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TargetNetworkTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIamInstanceProfileRequest:
    boto3_raw_data: "type_defs.AssociateIamInstanceProfileRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    InstanceId = field("InstanceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateIamInstanceProfileRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIamInstanceProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceIamInstanceProfileAssociationRequest:
    boto3_raw_data: "type_defs.ReplaceIamInstanceProfileAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    AssociationId = field("AssociationId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceIamInstanceProfileAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceIamInstanceProfileAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateRouteServerResult:
    boto3_raw_data: "type_defs.AssociateRouteServerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServerAssociation(self):  # pragma: no cover
        return RouteServerAssociation.make_one(
            self.boto3_raw_data["RouteServerAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateRouteServerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateRouteServerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateRouteServerResult:
    boto3_raw_data: "type_defs.DisassociateRouteServerResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerAssociation(self):  # pragma: no cover
        return RouteServerAssociation.make_one(
            self.boto3_raw_data["RouteServerAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateRouteServerResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateRouteServerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerAssociationsResult:
    boto3_raw_data: "type_defs.GetRouteServerAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerAssociations(self):  # pragma: no cover
        return RouteServerAssociation.make_many(
            self.boto3_raw_data["RouteServerAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetRouteServerAssociationsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateRouteTableResult:
    boto3_raw_data: "type_defs.AssociateRouteTableResultTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")

    @cached_property
    def AssociationState(self):  # pragma: no cover
        return RouteTableAssociationState.make_one(
            self.boto3_raw_data["AssociationState"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateRouteTableResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceRouteTableAssociationResult:
    boto3_raw_data: "type_defs.ReplaceRouteTableAssociationResultTypeDef" = (
        dataclasses.field()
    )

    NewAssociationId = field("NewAssociationId")

    @cached_property
    def AssociationState(self):  # pragma: no cover
        return RouteTableAssociationState.make_one(
            self.boto3_raw_data["AssociationState"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceRouteTableAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceRouteTableAssociationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteTableAssociation:
    boto3_raw_data: "type_defs.RouteTableAssociationTypeDef" = dataclasses.field()

    Main = field("Main")
    RouteTableAssociationId = field("RouteTableAssociationId")
    RouteTableId = field("RouteTableId")
    SubnetId = field("SubnetId")
    GatewayId = field("GatewayId")
    PublicIpv4Pool = field("PublicIpv4Pool")

    @cached_property
    def AssociationState(self):  # pragma: no cover
        return RouteTableAssociationState.make_one(
            self.boto3_raw_data["AssociationState"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RouteTableAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteTableAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayPolicyTableResult:
    boto3_raw_data: "type_defs.AssociateTransitGatewayPolicyTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Association(self):  # pragma: no cover
        return TransitGatewayPolicyTableAssociation.make_one(
            self.boto3_raw_data["Association"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayPolicyTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayPolicyTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayPolicyTableResult:
    boto3_raw_data: "type_defs.DisassociateTransitGatewayPolicyTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Association(self):  # pragma: no cover
        return TransitGatewayPolicyTableAssociation.make_one(
            self.boto3_raw_data["Association"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayPolicyTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTransitGatewayPolicyTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPolicyTableAssociationsResult:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayPolicyTableAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayPolicyTableAssociation.make_many(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPolicyTableAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayPolicyTableAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayRouteTableResult:
    boto3_raw_data: "type_defs.AssociateTransitGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Association(self):  # pragma: no cover
        return TransitGatewayAssociation.make_one(self.boto3_raw_data["Association"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayRouteTableResult:
    boto3_raw_data: "type_defs.DisassociateTransitGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Association(self):  # pragma: no cover
        return TransitGatewayAssociation.make_one(self.boto3_raw_data["Association"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTransitGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAssociatedEnclaveCertificateIamRolesResult:
    boto3_raw_data: "type_defs.GetAssociatedEnclaveCertificateIamRolesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AssociatedRoles(self):  # pragma: no cover
        return AssociatedRole.make_many(self.boto3_raw_data["AssociatedRoles"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAssociatedEnclaveCertificateIamRolesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAssociatedEnclaveCertificateIamRolesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AthenaIntegration:
    boto3_raw_data: "type_defs.AthenaIntegrationTypeDef" = dataclasses.field()

    IntegrationResultS3DestinationArn = field("IntegrationResultS3DestinationArn")
    PartitionLoadFrequency = field("PartitionLoadFrequency")
    PartitionStartDate = field("PartitionStartDate")
    PartitionEndDate = field("PartitionEndDate")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AthenaIntegrationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AthenaIntegrationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientData:
    boto3_raw_data: "type_defs.ClientDataTypeDef" = dataclasses.field()

    Comment = field("Comment")
    UploadEnd = field("UploadEnd")
    UploadSize = field("UploadSize")
    UploadStart = field("UploadStart")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClientDataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ClientDataTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockOfferingsRequest:
    boto3_raw_data: "type_defs.DescribeCapacityBlockOfferingsRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityDurationHours = field("CapacityDurationHours")
    DryRun = field("DryRun")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    StartDateRange = field("StartDateRange")
    EndDateRange = field("EndDateRange")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    UltraserverType = field("UltraserverType")
    UltraserverCount = field("UltraserverCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockOfferingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetHistoryRequest:
    boto3_raw_data: "type_defs.DescribeFleetHistoryRequestTypeDef" = dataclasses.field()

    FleetId = field("FleetId")
    StartTime = field("StartTime")
    DryRun = field("DryRun")
    EventType = field("EventType")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetHistoryRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetRequestHistoryRequest:
    boto3_raw_data: "type_defs.DescribeSpotFleetRequestHistoryRequestTypeDef" = (
        dataclasses.field()
    )

    SpotFleetRequestId = field("SpotFleetRequestId")
    StartTime = field("StartTime")
    DryRun = field("DryRun")
    EventType = field("EventType")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetRequestHistoryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetRequestHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImageDeprecationRequest:
    boto3_raw_data: "type_defs.EnableImageDeprecationRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    DeprecateAt = field("DeprecateAt")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnableImageDeprecationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImageDeprecationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamAddressHistoryRequest:
    boto3_raw_data: "type_defs.GetIpamAddressHistoryRequestTypeDef" = (
        dataclasses.field()
    )

    Cidr = field("Cidr")
    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")
    VpcId = field("VpcId")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamAddressHistoryRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamAddressHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateSpotMarketOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateSpotMarketOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    MaxPrice = field("MaxPrice")
    SpotInstanceType = field("SpotInstanceType")
    BlockDurationMinutes = field("BlockDurationMinutes")
    ValidUntil = field("ValidUntil")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateSpotMarketOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateSpotMarketOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LockSnapshotRequest:
    boto3_raw_data: "type_defs.LockSnapshotRequestTypeDef" = dataclasses.field()

    SnapshotId = field("SnapshotId")
    LockMode = field("LockMode")
    DryRun = field("DryRun")
    CoolOffPeriod = field("CoolOffPeriod")
    LockDuration = field("LockDuration")
    ExpirationDate = field("ExpirationDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LockSnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LockSnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyCapacityReservationFleetRequest:
    boto3_raw_data: "type_defs.ModifyCapacityReservationFleetRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationFleetId = field("CapacityReservationFleetId")
    TotalTargetCapacity = field("TotalTargetCapacity")
    EndDate = field("EndDate")
    DryRun = field("DryRun")
    RemoveEndDate = field("RemoveEndDate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyCapacityReservationFleetRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyCapacityReservationFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyCapacityReservationRequest:
    boto3_raw_data: "type_defs.ModifyCapacityReservationRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    InstanceCount = field("InstanceCount")
    EndDate = field("EndDate")
    EndDateType = field("EndDateType")
    Accept = field("Accept")
    DryRun = field("DryRun")
    AdditionalInfo = field("AdditionalInfo")
    InstanceMatchCriteria = field("InstanceMatchCriteria")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyCapacityReservationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyCapacityReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceEventStartTimeRequest:
    boto3_raw_data: "type_defs.ModifyInstanceEventStartTimeRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    InstanceEventId = field("InstanceEventId")
    NotBefore = field("NotBefore")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceEventStartTimeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceEventStartTimeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReportInstanceStatusRequestInstanceReportStatus:
    boto3_raw_data: (
        "type_defs.ReportInstanceStatusRequestInstanceReportStatusTypeDef"
    ) = dataclasses.field()

    Status = field("Status")
    ReasonCodes = field("ReasonCodes")
    DryRun = field("DryRun")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReportInstanceStatusRequestInstanceReportStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReportInstanceStatusRequestInstanceReportStatusTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReportInstanceStatusRequest:
    boto3_raw_data: "type_defs.ReportInstanceStatusRequestTypeDef" = dataclasses.field()

    Instances = field("Instances")
    Status = field("Status")
    ReasonCodes = field("ReasonCodes")
    DryRun = field("DryRun")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReportInstanceStatusRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReportInstanceStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SlotDateTimeRangeRequest:
    boto3_raw_data: "type_defs.SlotDateTimeRangeRequestTypeDef" = dataclasses.field()

    EarliestTime = field("EarliestTime")
    LatestTime = field("LatestTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SlotDateTimeRangeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SlotDateTimeRangeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SlotStartTimeRangeRequest:
    boto3_raw_data: "type_defs.SlotStartTimeRangeRequestTypeDef" = dataclasses.field()

    EarliestTime = field("EarliestTime")
    LatestTime = field("LatestTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SlotStartTimeRangeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SlotStartTimeRangeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotMarketOptions:
    boto3_raw_data: "type_defs.SpotMarketOptionsTypeDef" = dataclasses.field()

    MaxPrice = field("MaxPrice")
    SpotInstanceType = field("SpotInstanceType")
    BlockDurationMinutes = field("BlockDurationMinutes")
    ValidUntil = field("ValidUntil")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpotMarketOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotMarketOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVpnGatewayResult:
    boto3_raw_data: "type_defs.AttachVpnGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def VpcAttachment(self):  # pragma: no cover
        return VpcAttachment.make_one(self.boto3_raw_data["VpcAttachment"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttachVpnGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVpnGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnGateway:
    boto3_raw_data: "type_defs.VpnGatewayTypeDef" = dataclasses.field()

    AmazonSideAsn = field("AmazonSideAsn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpnGatewayId = field("VpnGatewayId")
    State = field("State")
    Type = field("Type")
    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def VpcAttachments(self):  # pragma: no cover
        return VpcAttachment.make_many(self.boto3_raw_data["VpcAttachments"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpnGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpnGatewayTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachmentEnaSrdSpecification:
    boto3_raw_data: "type_defs.AttachmentEnaSrdSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdEnabled = field("EnaSrdEnabled")

    @cached_property
    def EnaSrdUdpSpecification(self):  # pragma: no cover
        return AttachmentEnaSrdUdpSpecification.make_one(
            self.boto3_raw_data["EnaSrdUdpSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AttachmentEnaSrdSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachmentEnaSrdSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcAttributeResult:
    boto3_raw_data: "type_defs.DescribeVpcAttributeResultTypeDef" = dataclasses.field()

    @cached_property
    def EnableDnsHostnames(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsHostnames"])

    @cached_property
    def EnableDnsSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsSupport"])

    @cached_property
    def EnableNetworkAddressUsageMetrics(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["EnableNetworkAddressUsageMetrics"]
        )

    VpcId = field("VpcId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcAttributeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySubnetAttributeRequest:
    boto3_raw_data: "type_defs.ModifySubnetAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")

    @cached_property
    def AssignIpv6AddressOnCreation(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["AssignIpv6AddressOnCreation"]
        )

    @cached_property
    def MapPublicIpOnLaunch(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["MapPublicIpOnLaunch"]
        )

    @cached_property
    def MapCustomerOwnedIpOnLaunch(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["MapCustomerOwnedIpOnLaunch"]
        )

    CustomerOwnedIpv4Pool = field("CustomerOwnedIpv4Pool")

    @cached_property
    def EnableDns64(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDns64"])

    PrivateDnsHostnameTypeOnLaunch = field("PrivateDnsHostnameTypeOnLaunch")

    @cached_property
    def EnableResourceNameDnsARecordOnLaunch(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["EnableResourceNameDnsARecordOnLaunch"]
        )

    @cached_property
    def EnableResourceNameDnsAAAARecordOnLaunch(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["EnableResourceNameDnsAAAARecordOnLaunch"]
        )

    EnableLniAtDeviceIndex = field("EnableLniAtDeviceIndex")

    @cached_property
    def DisableLniAtDeviceIndex(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["DisableLniAtDeviceIndex"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifySubnetAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySubnetAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVolumeAttributeRequest:
    boto3_raw_data: "type_defs.ModifyVolumeAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    VolumeId = field("VolumeId")

    @cached_property
    def AutoEnableIO(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["AutoEnableIO"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVolumeAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVolumeAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVolumeAttributeRequestVolumeModifyAttribute:
    boto3_raw_data: (
        "type_defs.ModifyVolumeAttributeRequestVolumeModifyAttributeTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AutoEnableIO(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["AutoEnableIO"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVolumeAttributeRequestVolumeModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVolumeAttributeRequestVolumeModifyAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcAttributeRequest:
    boto3_raw_data: "type_defs.ModifyVpcAttributeRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")

    @cached_property
    def EnableDnsHostnames(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsHostnames"])

    @cached_property
    def EnableDnsSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsSupport"])

    @cached_property
    def EnableNetworkAddressUsageMetrics(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["EnableNetworkAddressUsageMetrics"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpcAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcAttributeRequestVpcModifyAttribute:
    boto3_raw_data: "type_defs.ModifyVpcAttributeRequestVpcModifyAttributeTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EnableDnsHostnames(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsHostnames"])

    @cached_property
    def EnableDnsSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnableDnsSupport"])

    @cached_property
    def EnableNetworkAddressUsageMetrics(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["EnableNetworkAddressUsageMetrics"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcAttributeRequestVpcModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcAttributeRequestVpcModifyAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttributeSummary:
    boto3_raw_data: "type_defs.AttributeSummaryTypeDef" = dataclasses.field()

    AttributeName = field("AttributeName")
    MostFrequentValue = field("MostFrequentValue")
    NumberOfMatchedAccounts = field("NumberOfMatchedAccounts")
    NumberOfUnmatchedAccounts = field("NumberOfUnmatchedAccounts")

    @cached_property
    def RegionalSummaries(self):  # pragma: no cover
        return RegionalSummary.make_many(self.boto3_raw_data["RegionalSummaries"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AttributeSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttributeSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DhcpConfiguration:
    boto3_raw_data: "type_defs.DhcpConfigurationTypeDef" = dataclasses.field()

    Key = field("Key")

    @cached_property
    def Values(self):  # pragma: no cover
        return AttributeValue.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DhcpConfigurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DhcpConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizationRule:
    boto3_raw_data: "type_defs.AuthorizationRuleTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Description = field("Description")
    GroupId = field("GroupId")
    AccessAll = field("AccessAll")
    DestinationCidr = field("DestinationCidr")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnAuthorizationRuleStatus.make_one(self.boto3_raw_data["Status"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AuthorizationRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizationRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeClientVpnIngressResult:
    boto3_raw_data: "type_defs.AuthorizeClientVpnIngressResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnAuthorizationRuleStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AuthorizeClientVpnIngressResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeClientVpnIngressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeClientVpnIngressResult:
    boto3_raw_data: "type_defs.RevokeClientVpnIngressResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnAuthorizationRuleStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RevokeClientVpnIngressResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeClientVpnIngressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AvailabilityZone:
    boto3_raw_data: "type_defs.AvailabilityZoneTypeDef" = dataclasses.field()

    OptInStatus = field("OptInStatus")

    @cached_property
    def Messages(self):  # pragma: no cover
        return AvailabilityZoneMessage.make_many(self.boto3_raw_data["Messages"])

    RegionName = field("RegionName")
    ZoneName = field("ZoneName")
    ZoneId = field("ZoneId")
    GroupName = field("GroupName")
    NetworkBorderGroup = field("NetworkBorderGroup")
    ZoneType = field("ZoneType")
    ParentZoneName = field("ParentZoneName")
    ParentZoneId = field("ParentZoneId")
    GroupLongName = field("GroupLongName")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AvailabilityZoneTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AvailabilityZoneTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AvailableCapacity:
    boto3_raw_data: "type_defs.AvailableCapacityTypeDef" = dataclasses.field()

    @cached_property
    def AvailableInstanceCapacity(self):  # pragma: no cover
        return InstanceCapacity.make_many(
            self.boto3_raw_data["AvailableInstanceCapacity"]
        )

    AvailableVCpus = field("AvailableVCpus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AvailableCapacityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AvailableCapacityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BlobAttributeValue:
    boto3_raw_data: "type_defs.BlobAttributeValueTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BlobAttributeValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BlobAttributeValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3Storage:
    boto3_raw_data: "type_defs.S3StorageTypeDef" = dataclasses.field()

    AWSAccessKeyId = field("AWSAccessKeyId")
    Bucket = field("Bucket")
    Prefix = field("Prefix")
    UploadPolicy = field("UploadPolicy")
    UploadPolicySignature = field("UploadPolicySignature")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3StorageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3StorageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BlockDeviceMappingResponse:
    boto3_raw_data: "type_defs.BlockDeviceMappingResponseTypeDef" = dataclasses.field()

    DeviceName = field("DeviceName")
    VirtualName = field("VirtualName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return EbsBlockDeviceResponse.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BlockDeviceMappingResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BlockDeviceMappingResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BlockDeviceMapping:
    boto3_raw_data: "type_defs.BlockDeviceMappingTypeDef" = dataclasses.field()

    @cached_property
    def Ebs(self):  # pragma: no cover
        return EbsBlockDevice.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")
    DeviceName = field("DeviceName")
    VirtualName = field("VirtualName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BlockDeviceMappingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BlockDeviceMappingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionIpamByoasnResult:
    boto3_raw_data: "type_defs.DeprovisionIpamByoasnResultTypeDef" = dataclasses.field()

    @cached_property
    def Byoasn(self):  # pragma: no cover
        return Byoasn.make_one(self.boto3_raw_data["Byoasn"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeprovisionIpamByoasnResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionIpamByoasnResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamByoasnResult:
    boto3_raw_data: "type_defs.DescribeIpamByoasnResultTypeDef" = dataclasses.field()

    @cached_property
    def Byoasns(self):  # pragma: no cover
        return Byoasn.make_many(self.boto3_raw_data["Byoasns"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamByoasnResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamByoasnResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionIpamByoasnResult:
    boto3_raw_data: "type_defs.ProvisionIpamByoasnResultTypeDef" = dataclasses.field()

    @cached_property
    def Byoasn(self):  # pragma: no cover
        return Byoasn.make_one(self.boto3_raw_data["Byoasn"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionIpamByoasnResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionIpamByoasnResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FailedCapacityReservationFleetCancellationResult:
    boto3_raw_data: (
        "type_defs.FailedCapacityReservationFleetCancellationResultTypeDef"
    ) = dataclasses.field()

    CapacityReservationFleetId = field("CapacityReservationFleetId")

    @cached_property
    def CancelCapacityReservationFleetError(self):  # pragma: no cover
        return CancelCapacityReservationFleetError.make_one(
            self.boto3_raw_data["CancelCapacityReservationFleetError"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FailedCapacityReservationFleetCancellationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FailedCapacityReservationFleetCancellationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotFleetRequestsErrorItem:
    boto3_raw_data: "type_defs.CancelSpotFleetRequestsErrorItemTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Error(self):  # pragma: no cover
        return CancelSpotFleetRequestsError.make_one(self.boto3_raw_data["Error"])

    SpotFleetRequestId = field("SpotFleetRequestId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelSpotFleetRequestsErrorItemTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotFleetRequestsErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotInstanceRequestsResult:
    boto3_raw_data: "type_defs.CancelSpotInstanceRequestsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CancelledSpotInstanceRequests(self):  # pragma: no cover
        return CancelledSpotInstanceRequest.make_many(
            self.boto3_raw_data["CancelledSpotInstanceRequests"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelSpotInstanceRequestsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotInstanceRequestsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionOfferingsResult:
    boto3_raw_data: "type_defs.DescribeCapacityBlockExtensionOfferingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlockExtensionOfferings(self):  # pragma: no cover
        return CapacityBlockExtensionOffering.make_many(
            self.boto3_raw_data["CapacityBlockExtensionOfferings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionOfferingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockExtensionOfferingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionHistoryResult:
    boto3_raw_data: "type_defs.DescribeCapacityBlockExtensionHistoryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlockExtensions(self):  # pragma: no cover
        return CapacityBlockExtension.make_many(
            self.boto3_raw_data["CapacityBlockExtensions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionHistoryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockExtensionHistoryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseCapacityBlockExtensionResult:
    boto3_raw_data: "type_defs.PurchaseCapacityBlockExtensionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlockExtensions(self):  # pragma: no cover
        return CapacityBlockExtension.make_many(
            self.boto3_raw_data["CapacityBlockExtensions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PurchaseCapacityBlockExtensionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseCapacityBlockExtensionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockOfferingsResult:
    boto3_raw_data: "type_defs.DescribeCapacityBlockOfferingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlockOfferings(self):  # pragma: no cover
        return CapacityBlockOffering.make_many(
            self.boto3_raw_data["CapacityBlockOfferings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockOfferingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockOfferingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityBlockStatus:
    boto3_raw_data: "type_defs.CapacityBlockStatusTypeDef" = dataclasses.field()

    CapacityBlockId = field("CapacityBlockId")
    InterconnectStatus = field("InterconnectStatus")
    TotalCapacity = field("TotalCapacity")
    TotalAvailableCapacity = field("TotalAvailableCapacity")
    TotalUnavailableCapacity = field("TotalUnavailableCapacity")

    @cached_property
    def CapacityReservationStatuses(self):  # pragma: no cover
        return CapacityReservationStatus.make_many(
            self.boto3_raw_data["CapacityReservationStatuses"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityBlockStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityBlockStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationBillingRequest:
    boto3_raw_data: "type_defs.CapacityReservationBillingRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    RequestedBy = field("RequestedBy")
    UnusedReservationBillingOwnerId = field("UnusedReservationBillingOwnerId")
    LastUpdateTime = field("LastUpdateTime")
    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def CapacityReservationInfo(self):  # pragma: no cover
        return CapacityReservationInfo.make_one(
            self.boto3_raw_data["CapacityReservationInfo"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationBillingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationBillingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservation:
    boto3_raw_data: "type_defs.CapacityReservationTypeDef" = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    OwnerId = field("OwnerId")
    CapacityReservationArn = field("CapacityReservationArn")
    AvailabilityZoneId = field("AvailabilityZoneId")
    InstanceType = field("InstanceType")
    InstancePlatform = field("InstancePlatform")
    AvailabilityZone = field("AvailabilityZone")
    Tenancy = field("Tenancy")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    EbsOptimized = field("EbsOptimized")
    EphemeralStorage = field("EphemeralStorage")
    State = field("State")
    StartDate = field("StartDate")
    EndDate = field("EndDate")
    EndDateType = field("EndDateType")
    InstanceMatchCriteria = field("InstanceMatchCriteria")
    CreateDate = field("CreateDate")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    OutpostArn = field("OutpostArn")
    CapacityReservationFleetId = field("CapacityReservationFleetId")
    PlacementGroupArn = field("PlacementGroupArn")

    @cached_property
    def CapacityAllocations(self):  # pragma: no cover
        return CapacityAllocation.make_many(self.boto3_raw_data["CapacityAllocations"])

    ReservationType = field("ReservationType")
    UnusedReservationBillingOwnerId = field("UnusedReservationBillingOwnerId")

    @cached_property
    def CommitmentInfo(self):  # pragma: no cover
        return CapacityReservationCommitmentInfo.make_one(
            self.boto3_raw_data["CommitmentInfo"]
        )

    DeliveryPreference = field("DeliveryPreference")
    CapacityBlockId = field("CapacityBlockId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationFleet:
    boto3_raw_data: "type_defs.CapacityReservationFleetTypeDef" = dataclasses.field()

    CapacityReservationFleetId = field("CapacityReservationFleetId")
    CapacityReservationFleetArn = field("CapacityReservationFleetArn")
    State = field("State")
    TotalTargetCapacity = field("TotalTargetCapacity")
    TotalFulfilledCapacity = field("TotalFulfilledCapacity")
    Tenancy = field("Tenancy")
    EndDate = field("EndDate")
    CreateTime = field("CreateTime")
    InstanceMatchCriteria = field("InstanceMatchCriteria")
    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def InstanceTypeSpecifications(self):  # pragma: no cover
        return FleetCapacityReservation.make_many(
            self.boto3_raw_data["InstanceTypeSpecifications"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationFleetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationFleetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationFleetResult:
    boto3_raw_data: "type_defs.CreateCapacityReservationFleetResultTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationFleetId = field("CapacityReservationFleetId")
    State = field("State")
    TotalTargetCapacity = field("TotalTargetCapacity")
    TotalFulfilledCapacity = field("TotalFulfilledCapacity")
    InstanceMatchCriteria = field("InstanceMatchCriteria")
    AllocationStrategy = field("AllocationStrategy")
    CreateTime = field("CreateTime")
    EndDate = field("EndDate")
    Tenancy = field("Tenancy")

    @cached_property
    def FleetCapacityReservations(self):  # pragma: no cover
        return FleetCapacityReservation.make_many(
            self.boto3_raw_data["FleetCapacityReservations"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateCapacityReservationFleetResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationFleetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetGroupsForCapacityReservationResult:
    boto3_raw_data: "type_defs.GetGroupsForCapacityReservationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityReservationGroups(self):  # pragma: no cover
        return CapacityReservationGroup.make_many(
            self.boto3_raw_data["CapacityReservationGroups"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetGroupsForCapacityReservationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetGroupsForCapacityReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OnDemandOptionsRequest:
    boto3_raw_data: "type_defs.OnDemandOptionsRequestTypeDef" = dataclasses.field()

    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def CapacityReservationOptions(self):  # pragma: no cover
        return CapacityReservationOptionsRequest.make_one(
            self.boto3_raw_data["CapacityReservationOptions"]
        )

    SingleInstanceType = field("SingleInstanceType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    MinTargetCapacity = field("MinTargetCapacity")
    MaxTotalPrice = field("MaxTotalPrice")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OnDemandOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OnDemandOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OnDemandOptions:
    boto3_raw_data: "type_defs.OnDemandOptionsTypeDef" = dataclasses.field()

    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def CapacityReservationOptions(self):  # pragma: no cover
        return CapacityReservationOptions.make_one(
            self.boto3_raw_data["CapacityReservationOptions"]
        )

    SingleInstanceType = field("SingleInstanceType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    MinTargetCapacity = field("MinTargetCapacity")
    MaxTotalPrice = field("MaxTotalPrice")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OnDemandOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OnDemandOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationSpecificationResponse:
    boto3_raw_data: "type_defs.CapacityReservationSpecificationResponseTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationPreference = field("CapacityReservationPreference")

    @cached_property
    def CapacityReservationTarget(self):  # pragma: no cover
        return CapacityReservationTargetResponse.make_one(
            self.boto3_raw_data["CapacityReservationTarget"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CapacityReservationSpecificationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationSpecificationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateCapacityReservationSpecificationResponse:
    boto3_raw_data: (
        "type_defs.LaunchTemplateCapacityReservationSpecificationResponseTypeDef"
    ) = dataclasses.field()

    CapacityReservationPreference = field("CapacityReservationPreference")

    @cached_property
    def CapacityReservationTarget(self):  # pragma: no cover
        return CapacityReservationTargetResponse.make_one(
            self.boto3_raw_data["CapacityReservationTarget"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateCapacityReservationSpecificationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateCapacityReservationSpecificationResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservationSpecification:
    boto3_raw_data: "type_defs.CapacityReservationSpecificationTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationPreference = field("CapacityReservationPreference")

    @cached_property
    def CapacityReservationTarget(self):  # pragma: no cover
        return CapacityReservationTarget.make_one(
            self.boto3_raw_data["CapacityReservationTarget"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CapacityReservationSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateCapacityReservationSpecificationRequest:
    boto3_raw_data: (
        "type_defs.LaunchTemplateCapacityReservationSpecificationRequestTypeDef"
    ) = dataclasses.field()

    CapacityReservationPreference = field("CapacityReservationPreference")

    @cached_property
    def CapacityReservationTarget(self):  # pragma: no cover
        return CapacityReservationTarget.make_one(
            self.boto3_raw_data["CapacityReservationTarget"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateCapacityReservationSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateCapacityReservationSpecificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcClassicLinkDnsSupportResult:
    boto3_raw_data: "type_defs.DescribeVpcClassicLinkDnsSupportResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Vpcs(self):  # pragma: no cover
        return ClassicLinkDnsSupport.make_many(self.boto3_raw_data["Vpcs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcClassicLinkDnsSupportResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcClassicLinkDnsSupportResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassicLinkInstance:
    boto3_raw_data: "type_defs.ClassicLinkInstanceTypeDef" = dataclasses.field()

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    InstanceId = field("InstanceId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassicLinkInstanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassicLinkInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassicLoadBalancersConfigOutput:
    boto3_raw_data: "type_defs.ClassicLoadBalancersConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClassicLoadBalancers(self):  # pragma: no cover
        return ClassicLoadBalancer.make_many(
            self.boto3_raw_data["ClassicLoadBalancers"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClassicLoadBalancersConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassicLoadBalancersConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassicLoadBalancersConfig:
    boto3_raw_data: "type_defs.ClassicLoadBalancersConfigTypeDef" = dataclasses.field()

    @cached_property
    def ClassicLoadBalancers(self):  # pragma: no cover
        return ClassicLoadBalancer.make_many(
            self.boto3_raw_data["ClassicLoadBalancers"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassicLoadBalancersConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassicLoadBalancersConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportClientVpnClientCertificateRevocationListResult:
    boto3_raw_data: (
        "type_defs.ExportClientVpnClientCertificateRevocationListResultTypeDef"
    ) = dataclasses.field()

    CertificateRevocationList = field("CertificateRevocationList")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientCertificateRevocationListStatus.make_one(
            self.boto3_raw_data["Status"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportClientVpnClientCertificateRevocationListResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ExportClientVpnClientCertificateRevocationListResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientConnectResponseOptions:
    boto3_raw_data: "type_defs.ClientConnectResponseOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    LambdaFunctionArn = field("LambdaFunctionArn")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnEndpointAttributeStatus.make_one(self.boto3_raw_data["Status"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientConnectResponseOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientConnectResponseOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnAuthenticationRequest:
    boto3_raw_data: "type_defs.ClientVpnAuthenticationRequestTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @cached_property
    def ActiveDirectory(self):  # pragma: no cover
        return DirectoryServiceAuthenticationRequest.make_one(
            self.boto3_raw_data["ActiveDirectory"]
        )

    @cached_property
    def MutualAuthentication(self):  # pragma: no cover
        return CertificateAuthenticationRequest.make_one(
            self.boto3_raw_data["MutualAuthentication"]
        )

    @cached_property
    def FederatedAuthentication(self):  # pragma: no cover
        return FederatedAuthenticationRequest.make_one(
            self.boto3_raw_data["FederatedAuthentication"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClientVpnAuthenticationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnAuthenticationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnAuthentication:
    boto3_raw_data: "type_defs.ClientVpnAuthenticationTypeDef" = dataclasses.field()

    Type = field("Type")

    @cached_property
    def ActiveDirectory(self):  # pragma: no cover
        return DirectoryServiceAuthentication.make_one(
            self.boto3_raw_data["ActiveDirectory"]
        )

    @cached_property
    def MutualAuthentication(self):  # pragma: no cover
        return CertificateAuthentication.make_one(
            self.boto3_raw_data["MutualAuthentication"]
        )

    @cached_property
    def FederatedAuthentication(self):  # pragma: no cover
        return FederatedAuthentication.make_one(
            self.boto3_raw_data["FederatedAuthentication"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientVpnAuthenticationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnAuthenticationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnConnection:
    boto3_raw_data: "type_defs.ClientVpnConnectionTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Timestamp = field("Timestamp")
    ConnectionId = field("ConnectionId")
    Username = field("Username")
    ConnectionEstablishedTime = field("ConnectionEstablishedTime")
    IngressBytes = field("IngressBytes")
    EgressBytes = field("EgressBytes")
    IngressPackets = field("IngressPackets")
    EgressPackets = field("EgressPackets")
    ClientIp = field("ClientIp")
    ClientIpv6Address = field("ClientIpv6Address")
    CommonName = field("CommonName")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnConnectionStatus.make_one(self.boto3_raw_data["Status"])

    ConnectionEndTime = field("ConnectionEndTime")
    PostureComplianceStatuses = field("PostureComplianceStatuses")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClientVpnConnectionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnConnectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateConnectionStatus:
    boto3_raw_data: "type_defs.TerminateConnectionStatusTypeDef" = dataclasses.field()

    ConnectionId = field("ConnectionId")

    @cached_property
    def PreviousStatus(self):  # pragma: no cover
        return ClientVpnConnectionStatus.make_one(self.boto3_raw_data["PreviousStatus"])

    @cached_property
    def CurrentStatus(self):  # pragma: no cover
        return ClientVpnConnectionStatus.make_one(self.boto3_raw_data["CurrentStatus"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TerminateConnectionStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateConnectionStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClientVpnEndpointResult:
    boto3_raw_data: "type_defs.CreateClientVpnEndpointResultTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnEndpointStatus.make_one(self.boto3_raw_data["Status"])

    DnsName = field("DnsName")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateClientVpnEndpointResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClientVpnEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClientVpnEndpointResult:
    boto3_raw_data: "type_defs.DeleteClientVpnEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnEndpointStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteClientVpnEndpointResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClientVpnEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnRoute:
    boto3_raw_data: "type_defs.ClientVpnRouteTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DestinationCidr = field("DestinationCidr")
    TargetSubnet = field("TargetSubnet")
    Type = field("Type")
    Origin = field("Origin")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnRouteStatus.make_one(self.boto3_raw_data["Status"])

    Description = field("Description")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClientVpnRouteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ClientVpnRouteTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClientVpnRouteResult:
    boto3_raw_data: "type_defs.CreateClientVpnRouteResultTypeDef" = dataclasses.field()

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnRouteStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateClientVpnRouteResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClientVpnRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClientVpnRouteResult:
    boto3_raw_data: "type_defs.DeleteClientVpnRouteResultTypeDef" = dataclasses.field()

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnRouteStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteClientVpnRouteResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClientVpnRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnTunnelLogOptionsSpecification:
    boto3_raw_data: "type_defs.VpnTunnelLogOptionsSpecificationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CloudWatchLogOptions(self):  # pragma: no cover
        return CloudWatchLogOptionsSpecification.make_one(
            self.boto3_raw_data["CloudWatchLogOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpnTunnelLogOptionsSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnTunnelLogOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnTunnelLogOptions:
    boto3_raw_data: "type_defs.VpnTunnelLogOptionsTypeDef" = dataclasses.field()

    @cached_property
    def CloudWatchLogOptions(self):  # pragma: no cover
        return CloudWatchLogOptions.make_one(
            self.boto3_raw_data["CloudWatchLogOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpnTunnelLogOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnTunnelLogOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetCoipPoolUsageResult:
    boto3_raw_data: "type_defs.GetCoipPoolUsageResultTypeDef" = dataclasses.field()

    CoipPoolId = field("CoipPoolId")

    @cached_property
    def CoipAddressUsages(self):  # pragma: no cover
        return CoipAddressUsage.make_many(self.boto3_raw_data["CoipAddressUsages"])

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetCoipPoolUsageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetCoipPoolUsageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCoipCidrResult:
    boto3_raw_data: "type_defs.CreateCoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def CoipCidr(self):  # pragma: no cover
        return CoipCidr.make_one(self.boto3_raw_data["CoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCoipCidrResult:
    boto3_raw_data: "type_defs.DeleteCoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def CoipCidr(self):  # pragma: no cover
        return CoipCidr.make_one(self.boto3_raw_data["CoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointConnectionNotificationResult:
    boto3_raw_data: "type_defs.CreateVpcEndpointConnectionNotificationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConnectionNotification(self):  # pragma: no cover
        return ConnectionNotification.make_one(
            self.boto3_raw_data["ConnectionNotification"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcEndpointConnectionNotificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcEndpointConnectionNotificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionNotificationsResult:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointConnectionNotificationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ConnectionNotificationSet(self):  # pragma: no cover
        return ConnectionNotification.make_many(
            self.boto3_raw_data["ConnectionNotificationSet"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionNotificationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointConnectionNotificationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CpuPerformanceFactorOutput:
    boto3_raw_data: "type_defs.CpuPerformanceFactorOutputTypeDef" = dataclasses.field()

    @cached_property
    def References(self):  # pragma: no cover
        return PerformanceFactorReference.make_many(self.boto3_raw_data["References"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CpuPerformanceFactorOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CpuPerformanceFactorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CpuPerformanceFactor:
    boto3_raw_data: "type_defs.CpuPerformanceFactorTypeDef" = dataclasses.field()

    @cached_property
    def References(self):  # pragma: no cover
        return PerformanceFactorReference.make_many(self.boto3_raw_data["References"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CpuPerformanceFactorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CpuPerformanceFactorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CpuPerformanceFactorRequest:
    boto3_raw_data: "type_defs.CpuPerformanceFactorRequestTypeDef" = dataclasses.field()

    @cached_property
    def References(self):  # pragma: no cover
        return PerformanceFactorReferenceRequest.make_many(
            self.boto3_raw_data["References"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CpuPerformanceFactorRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CpuPerformanceFactorRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceEventWindowRequest:
    boto3_raw_data: "type_defs.ModifyInstanceEventWindowRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceEventWindowId = field("InstanceEventWindowId")
    DryRun = field("DryRun")
    Name = field("Name")

    @cached_property
    def TimeRanges(self):  # pragma: no cover
        return InstanceEventWindowTimeRangeRequest.make_many(
            self.boto3_raw_data["TimeRanges"]
        )

    CronExpression = field("CronExpression")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstanceEventWindowRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceEventWindowRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamPoolRequest:
    boto3_raw_data: "type_defs.ModifyIpamPoolRequestTypeDef" = dataclasses.field()

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    Description = field("Description")
    AutoImport = field("AutoImport")
    AllocationMinNetmaskLength = field("AllocationMinNetmaskLength")
    AllocationMaxNetmaskLength = field("AllocationMaxNetmaskLength")
    AllocationDefaultNetmaskLength = field("AllocationDefaultNetmaskLength")
    ClearAllocationDefaultNetmaskLength = field("ClearAllocationDefaultNetmaskLength")

    @cached_property
    def AddAllocationResourceTags(self):  # pragma: no cover
        return RequestIpamResourceTag.make_many(
            self.boto3_raw_data["AddAllocationResourceTags"]
        )

    @cached_property
    def RemoveAllocationResourceTags(self):  # pragma: no cover
        return RequestIpamResourceTag.make_many(
            self.boto3_raw_data["RemoveAllocationResourceTags"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamPoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamPoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteResult:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return LocalGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateLocalGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteResult:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return LocalGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteLocalGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyLocalGatewayRouteResult:
    boto3_raw_data: "type_defs.ModifyLocalGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return LocalGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyLocalGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyLocalGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchLocalGatewayRoutesResult:
    boto3_raw_data: "type_defs.SearchLocalGatewayRoutesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Routes(self):  # pragma: no cover
        return LocalGatewayRoute.make_many(self.boto3_raw_data["Routes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchLocalGatewayRoutesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchLocalGatewayRoutesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclEntryRequestNetworkAclCreateEntry:
    boto3_raw_data: (
        "type_defs.CreateNetworkAclEntryRequestNetworkAclCreateEntryTypeDef"
    ) = dataclasses.field()

    RuleNumber = field("RuleNumber")
    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    Egress = field("Egress")
    DryRun = field("DryRun")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkAclEntryRequestNetworkAclCreateEntryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateNetworkAclEntryRequestNetworkAclCreateEntryTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclEntryRequest:
    boto3_raw_data: "type_defs.CreateNetworkAclEntryRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkAclId = field("NetworkAclId")
    RuleNumber = field("RuleNumber")
    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    Egress = field("Egress")
    DryRun = field("DryRun")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNetworkAclEntryRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkAclEntryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkAclEntry:
    boto3_raw_data: "type_defs.NetworkAclEntryTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")
    Egress = field("Egress")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    RuleNumber = field("RuleNumber")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkAclEntryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkAclEntryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceNetworkAclEntryRequestNetworkAclReplaceEntry:
    boto3_raw_data: (
        "type_defs.ReplaceNetworkAclEntryRequestNetworkAclReplaceEntryTypeDef"
    ) = dataclasses.field()

    RuleNumber = field("RuleNumber")
    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    Egress = field("Egress")
    DryRun = field("DryRun")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceNetworkAclEntryRequestNetworkAclReplaceEntryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReplaceNetworkAclEntryRequestNetworkAclReplaceEntryTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceNetworkAclEntryRequest:
    boto3_raw_data: "type_defs.ReplaceNetworkAclEntryRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkAclId = field("NetworkAclId")
    RuleNumber = field("RuleNumber")
    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    Egress = field("Egress")
    DryRun = field("DryRun")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["PortRange"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReplaceNetworkAclEntryRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceNetworkAclEntryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateReservedInstancesListingRequest:
    boto3_raw_data: "type_defs.CreateReservedInstancesListingRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesId = field("ReservedInstancesId")
    InstanceCount = field("InstanceCount")

    @cached_property
    def PriceSchedules(self):  # pragma: no cover
        return PriceScheduleSpecification.make_many(
            self.boto3_raw_data["PriceSchedules"]
        )

    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateReservedInstancesListingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateReservedInstancesListingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateStoreImageTaskRequest:
    boto3_raw_data: "type_defs.CreateStoreImageTaskRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    Bucket = field("Bucket")

    @cached_property
    def S3ObjectTags(self):  # pragma: no cover
        return S3ObjectTag.make_many(self.boto3_raw_data["S3ObjectTags"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateStoreImageTaskRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateStoreImageTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorFilterRuleRequest:
    boto3_raw_data: "type_defs.ModifyTrafficMirrorFilterRuleRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterRuleId = field("TrafficMirrorFilterRuleId")
    TrafficDirection = field("TrafficDirection")
    RuleNumber = field("RuleNumber")
    RuleAction = field("RuleAction")

    @cached_property
    def DestinationPortRange(self):  # pragma: no cover
        return TrafficMirrorPortRangeRequest.make_one(
            self.boto3_raw_data["DestinationPortRange"]
        )

    @cached_property
    def SourcePortRange(self):  # pragma: no cover
        return TrafficMirrorPortRangeRequest.make_one(
            self.boto3_raw_data["SourcePortRange"]
        )

    Protocol = field("Protocol")
    DestinationCidrBlock = field("DestinationCidrBlock")
    SourceCidrBlock = field("SourceCidrBlock")
    Description = field("Description")
    RemoveFields = field("RemoveFields")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTrafficMirrorFilterRuleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTrafficMirrorFilterRuleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointCidrOptions:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointCidrOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")
    SubnetIds = field("SubnetIds")
    Cidr = field("Cidr")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointCidrOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointCidrOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointEniOptions:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointEniOptionsTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Protocol = field("Protocol")
    Port = field("Port")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointEniOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointEniOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointLoadBalancerOptions:
    boto3_raw_data: (
        "type_defs.CreateVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
    ) = dataclasses.field()

    Protocol = field("Protocol")
    Port = field("Port")
    LoadBalancerArn = field("LoadBalancerArn")
    SubnetIds = field("SubnetIds")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointPolicyRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointPolicyRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessGroupPolicyRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessGroupPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessGroupPolicyRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessGroupPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVolumePermissionModifications:
    boto3_raw_data: "type_defs.CreateVolumePermissionModificationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Add(self):  # pragma: no cover
        return CreateVolumePermission.make_many(self.boto3_raw_data["Add"])

    @cached_property
    def Remove(self):  # pragma: no cover
        return CreateVolumePermission.make_many(self.boto3_raw_data["Remove"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVolumePermissionModificationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVolumePermissionModificationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcEndpointRequest:
    boto3_raw_data: "type_defs.ModifyVpcEndpointRequestTypeDef" = dataclasses.field()

    VpcEndpointId = field("VpcEndpointId")
    DryRun = field("DryRun")
    ResetPolicy = field("ResetPolicy")
    PolicyDocument = field("PolicyDocument")
    AddRouteTableIds = field("AddRouteTableIds")
    RemoveRouteTableIds = field("RemoveRouteTableIds")
    AddSubnetIds = field("AddSubnetIds")
    RemoveSubnetIds = field("RemoveSubnetIds")
    AddSecurityGroupIds = field("AddSecurityGroupIds")
    RemoveSecurityGroupIds = field("RemoveSecurityGroupIds")
    IpAddressType = field("IpAddressType")

    @cached_property
    def DnsOptions(self):  # pragma: no cover
        return DnsOptionsSpecification.make_one(self.boto3_raw_data["DnsOptions"])

    PrivateDnsEnabled = field("PrivateDnsEnabled")

    @cached_property
    def SubnetConfigurations(self):  # pragma: no cover
        return SubnetConfiguration.make_many(
            self.boto3_raw_data["SubnetConfigurations"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpcEndpointRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAwsNetworkPerformanceDataRequest:
    boto3_raw_data: "type_defs.GetAwsNetworkPerformanceDataRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataQueries(self):  # pragma: no cover
        return DataQuery.make_many(self.boto3_raw_data["DataQueries"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAwsNetworkPerformanceDataRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAwsNetworkPerformanceDataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataResponse:
    boto3_raw_data: "type_defs.DataResponseTypeDef" = dataclasses.field()

    Id = field("Id")
    Source = field("Source")
    Destination = field("Destination")
    Metric = field("Metric")
    Statistic = field("Statistic")
    Period = field("Period")

    @cached_property
    def MetricPoints(self):  # pragma: no cover
        return MetricPoint.make_many(self.boto3_raw_data["MetricPoints"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataResponseTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFleetErrorItem:
    boto3_raw_data: "type_defs.DeleteFleetErrorItemTypeDef" = dataclasses.field()

    @cached_property
    def Error(self):  # pragma: no cover
        return DeleteFleetError.make_one(self.boto3_raw_data["Error"])

    FleetId = field("FleetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFleetErrorItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFleetErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInstanceEventWindowResult:
    boto3_raw_data: "type_defs.DeleteInstanceEventWindowResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindowState(self):  # pragma: no cover
        return InstanceEventWindowStateChange.make_one(
            self.boto3_raw_data["InstanceEventWindowState"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteInstanceEventWindowResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInstanceEventWindowResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateVersionsResponseErrorItem:
    boto3_raw_data: "type_defs.DeleteLaunchTemplateVersionsResponseErrorItemTypeDef" = (
        dataclasses.field()
    )

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    VersionNumber = field("VersionNumber")

    @cached_property
    def ResponseError(self):  # pragma: no cover
        return ResponseError.make_one(self.boto3_raw_data["ResponseError"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLaunchTemplateVersionsResponseErrorItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLaunchTemplateVersionsResponseErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FailedQueuedPurchaseDeletion:
    boto3_raw_data: "type_defs.FailedQueuedPurchaseDeletionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Error(self):  # pragma: no cover
        return DeleteQueuedReservedInstancesError.make_one(self.boto3_raw_data["Error"])

    ReservedInstancesId = field("ReservedInstancesId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FailedQueuedPurchaseDeletionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FailedQueuedPurchaseDeletionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterImageResult:
    boto3_raw_data: "type_defs.DeregisterImageResultTypeDef" = dataclasses.field()

    Return = field("Return")

    @cached_property
    def DeleteSnapshotResults(self):  # pragma: no cover
        return DeleteSnapshotReturnCode.make_many(
            self.boto3_raw_data["DeleteSnapshotResults"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeregisterImageResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeregisterImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCriterionRequest:
    boto3_raw_data: "type_defs.ImageCriterionRequestTypeDef" = dataclasses.field()

    ImageProviders = field("ImageProviders")
    MarketplaceProductCodes = field("MarketplaceProductCodes")
    ImageNames = field("ImageNames")

    @cached_property
    def DeprecationTimeCondition(self):  # pragma: no cover
        return DeprecationTimeConditionRequest.make_one(
            self.boto3_raw_data["DeprecationTimeCondition"]
        )

    @cached_property
    def CreationDateCondition(self):  # pragma: no cover
        return CreationDateConditionRequest.make_one(
            self.boto3_raw_data["CreationDateCondition"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageCriterionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCriterionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCriterion:
    boto3_raw_data: "type_defs.ImageCriterionTypeDef" = dataclasses.field()

    ImageProviders = field("ImageProviders")
    MarketplaceProductCodes = field("MarketplaceProductCodes")
    ImageNames = field("ImageNames")

    @cached_property
    def DeprecationTimeCondition(self):  # pragma: no cover
        return DeprecationTimeCondition.make_one(
            self.boto3_raw_data["DeprecationTimeCondition"]
        )

    @cached_property
    def CreationDateCondition(self):  # pragma: no cover
        return CreationDateCondition.make_one(
            self.boto3_raw_data["CreationDateCondition"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageCriterionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageCriterionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterInstanceEventNotificationAttributesRequest:
    boto3_raw_data: (
        "type_defs.DeregisterInstanceEventNotificationAttributesRequestTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTagAttribute(self):  # pragma: no cover
        return DeregisterInstanceTagAttributeRequest.make_one(
            self.boto3_raw_data["InstanceTagAttribute"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterInstanceEventNotificationAttributesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterInstanceEventNotificationAttributesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterInstanceEventNotificationAttributesResult:
    boto3_raw_data: (
        "type_defs.DeregisterInstanceEventNotificationAttributesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTagAttribute(self):  # pragma: no cover
        return InstanceTagNotificationAttribute.make_one(
            self.boto3_raw_data["InstanceTagAttribute"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterInstanceEventNotificationAttributesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterInstanceEventNotificationAttributesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceEventNotificationAttributesResult:
    boto3_raw_data: (
        "type_defs.DescribeInstanceEventNotificationAttributesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTagAttribute(self):  # pragma: no cover
        return InstanceTagNotificationAttribute.make_one(
            self.boto3_raw_data["InstanceTagAttribute"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceEventNotificationAttributesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeInstanceEventNotificationAttributesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterInstanceEventNotificationAttributesResult:
    boto3_raw_data: (
        "type_defs.RegisterInstanceEventNotificationAttributesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTagAttribute(self):  # pragma: no cover
        return InstanceTagNotificationAttribute.make_one(
            self.boto3_raw_data["InstanceTagAttribute"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterInstanceEventNotificationAttributesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterInstanceEventNotificationAttributesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterTransitGatewayMulticastGroupMembersResult:
    boto3_raw_data: (
        "type_defs.DeregisterTransitGatewayMulticastGroupMembersResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DeregisteredMulticastGroupMembers(self):  # pragma: no cover
        return TransitGatewayMulticastDeregisteredGroupMembers.make_one(
            self.boto3_raw_data["DeregisteredMulticastGroupMembers"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterTransitGatewayMulticastGroupMembersResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterTransitGatewayMulticastGroupMembersResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterTransitGatewayMulticastGroupSourcesResult:
    boto3_raw_data: (
        "type_defs.DeregisterTransitGatewayMulticastGroupSourcesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DeregisteredMulticastGroupSources(self):  # pragma: no cover
        return TransitGatewayMulticastDeregisteredGroupSources.make_one(
            self.boto3_raw_data["DeregisteredMulticastGroupSources"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeregisterTransitGatewayMulticastGroupSourcesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeregisterTransitGatewayMulticastGroupSourcesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressTransfersRequestPaginate:
    boto3_raw_data: "type_defs.DescribeAddressTransfersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AllocationIds = field("AllocationIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAddressTransfersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressTransfersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressesAttributeRequestPaginate:
    boto3_raw_data: "type_defs.DescribeAddressesAttributeRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AllocationIds = field("AllocationIds")
    Attribute = field("Attribute")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAddressesAttributeRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressesAttributeRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeByoipCidrsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeByoipCidrsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeByoipCidrsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeByoipCidrsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionOfferingsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeCapacityBlockExtensionOfferingsRequestPaginateTypeDef"
    ) = dataclasses.field()

    CapacityBlockExtensionDurationHours = field("CapacityBlockExtensionDurationHours")
    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionOfferingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityBlockExtensionOfferingsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockOfferingsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCapacityBlockOfferingsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CapacityDurationHours = field("CapacityDurationHours")
    DryRun = field("DryRun")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    StartDateRange = field("StartDateRange")
    EndDateRange = field("EndDateRange")
    UltraserverType = field("UltraserverType")
    UltraserverCount = field("UltraserverCount")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockOfferingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockOfferingsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrincipalIdFormatRequestPaginate:
    boto3_raw_data: "type_defs.DescribePrincipalIdFormatRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    Resources = field("Resources")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePrincipalIdFormatRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrincipalIdFormatRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetInstancesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSpotFleetInstancesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SpotFleetRequestId = field("SpotFleetRequestId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetInstancesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetInstancesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetRequestsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSpotFleetRequestsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    SpotFleetRequestIds = field("SpotFleetRequestIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetRequestsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetRequestsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStaleSecurityGroupsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeStaleSecurityGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStaleSecurityGroupsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStaleSecurityGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcClassicLinkDnsSupportRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVpcClassicLinkDnsSupportRequestPaginateTypeDef"
    ) = dataclasses.field()

    VpcIds = field("VpcIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcClassicLinkDnsSupportRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcClassicLinkDnsSupportRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAssociatedIpv6PoolCidrsRequestPaginate:
    boto3_raw_data: "type_defs.GetAssociatedIpv6PoolCidrsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PoolId = field("PoolId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAssociatedIpv6PoolCidrsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAssociatedIpv6PoolCidrsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAwsNetworkPerformanceDataRequestPaginate:
    boto3_raw_data: "type_defs.GetAwsNetworkPerformanceDataRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataQueries(self):  # pragma: no cover
        return DataQuery.make_many(self.boto3_raw_data["DataQueries"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAwsNetworkPerformanceDataRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAwsNetworkPerformanceDataRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetGroupsForCapacityReservationRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetGroupsForCapacityReservationRequestPaginateTypeDef"
    ) = dataclasses.field()

    CapacityReservationId = field("CapacityReservationId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetGroupsForCapacityReservationRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetGroupsForCapacityReservationRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamAddressHistoryRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamAddressHistoryRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    Cidr = field("Cidr")
    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")
    VpcId = field("VpcId")
    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamAddressHistoryRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamAddressHistoryRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetManagedPrefixListAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetManagedPrefixListAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListEntriesRequestPaginate:
    boto3_raw_data: "type_defs.GetManagedPrefixListEntriesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")
    TargetVersion = field("TargetVersion")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListEntriesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetManagedPrefixListEntriesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetNetworkInsightsAccessScopeAnalysisFindingsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestPaginateTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnConnectionDeviceTypesRequestPaginate:
    boto3_raw_data: "type_defs.GetVpnConnectionDeviceTypesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnConnectionDeviceTypesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVpnConnectionDeviceTypesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesInRecycleBinRequestPaginate:
    boto3_raw_data: "type_defs.ListImagesInRecycleBinRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListImagesInRecycleBinRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesInRecycleBinRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSnapshotsInRecycleBinRequestPaginate:
    boto3_raw_data: "type_defs.ListSnapshotsInRecycleBinRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListSnapshotsInRecycleBinRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSnapshotsInRecycleBinRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressesRequest:
    boto3_raw_data: "type_defs.DescribeAddressesRequestTypeDef" = dataclasses.field()

    PublicIps = field("PublicIps")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    AllocationIds = field("AllocationIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAddressesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAvailabilityZonesRequest:
    boto3_raw_data: "type_defs.DescribeAvailabilityZonesRequestTypeDef" = (
        dataclasses.field()
    )

    ZoneNames = field("ZoneNames")
    ZoneIds = field("ZoneIds")
    AllAvailabilityZones = field("AllAvailabilityZones")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAvailabilityZonesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAvailabilityZonesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAwsNetworkPerformanceMetricSubscriptionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestPaginateTypeDef" = (dataclasses.field())

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAwsNetworkPerformanceMetricSubscriptionsRequest:
    boto3_raw_data: (
        "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestTypeDef"
    ) = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBundleTasksRequest:
    boto3_raw_data: "type_defs.DescribeBundleTasksRequestTypeDef" = dataclasses.field()

    BundleIds = field("BundleIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeBundleTasksRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBundleTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionHistoryRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeCapacityBlockExtensionHistoryRequestPaginateTypeDef"
    ) = dataclasses.field()

    CapacityReservationIds = field("CapacityReservationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionHistoryRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityBlockExtensionHistoryRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockExtensionHistoryRequest:
    boto3_raw_data: "type_defs.DescribeCapacityBlockExtensionHistoryRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationIds = field("CapacityReservationIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockExtensionHistoryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockExtensionHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockStatusRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCapacityBlockStatusRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockIds = field("CapacityBlockIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockStatusRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockStatusRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockStatusRequest:
    boto3_raw_data: "type_defs.DescribeCapacityBlockStatusRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockIds = field("CapacityBlockIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockStatusRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlocksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCapacityBlocksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockIds = field("CapacityBlockIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlocksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlocksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlocksRequest:
    boto3_raw_data: "type_defs.DescribeCapacityBlocksRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockIds = field("CapacityBlockIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCapacityBlocksRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlocksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationBillingRequestsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeCapacityReservationBillingRequestsRequestPaginateTypeDef"
    ) = dataclasses.field()

    Role = field("Role")
    CapacityReservationIds = field("CapacityReservationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationBillingRequestsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityReservationBillingRequestsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationBillingRequestsRequest:
    boto3_raw_data: (
        "type_defs.DescribeCapacityReservationBillingRequestsRequestTypeDef"
    ) = dataclasses.field()

    Role = field("Role")
    CapacityReservationIds = field("CapacityReservationIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationBillingRequestsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityReservationBillingRequestsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationFleetsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeCapacityReservationFleetsRequestPaginateTypeDef"
    ) = dataclasses.field()

    CapacityReservationFleetIds = field("CapacityReservationFleetIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationFleetsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityReservationFleetsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationFleetsRequest:
    boto3_raw_data: "type_defs.DescribeCapacityReservationFleetsRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationFleetIds = field("CapacityReservationFleetIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationFleetsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityReservationFleetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCapacityReservationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationIds = field("CapacityReservationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityReservationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationsRequest:
    boto3_raw_data: "type_defs.DescribeCapacityReservationsRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationIds = field("CapacityReservationIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityReservationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCarrierGatewaysRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCarrierGatewaysRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CarrierGatewayIds = field("CarrierGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCarrierGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCarrierGatewaysRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCarrierGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeCarrierGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    CarrierGatewayIds = field("CarrierGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCarrierGatewaysRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCarrierGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClassicLinkInstancesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeClassicLinkInstancesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceIds = field("InstanceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClassicLinkInstancesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClassicLinkInstancesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClassicLinkInstancesRequest:
    boto3_raw_data: "type_defs.DescribeClassicLinkInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceIds = field("InstanceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClassicLinkInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClassicLinkInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnAuthorizationRulesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeClientVpnAuthorizationRulesRequestPaginateTypeDef"
    ) = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnAuthorizationRulesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeClientVpnAuthorizationRulesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnAuthorizationRulesRequest:
    boto3_raw_data: "type_defs.DescribeClientVpnAuthorizationRulesRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnAuthorizationRulesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnAuthorizationRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnConnectionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeClientVpnConnectionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnConnectionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnConnectionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnConnectionsRequest:
    boto3_raw_data: "type_defs.DescribeClientVpnConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnEndpointsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeClientVpnEndpointsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointIds = field("ClientVpnEndpointIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnEndpointsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnEndpointsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnEndpointsRequest:
    boto3_raw_data: "type_defs.DescribeClientVpnEndpointsRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointIds = field("ClientVpnEndpointIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnEndpointsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnRoutesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeClientVpnRoutesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnRoutesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnRoutesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnRoutesRequest:
    boto3_raw_data: "type_defs.DescribeClientVpnRoutesRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeClientVpnRoutesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnRoutesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnTargetNetworksRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeClientVpnTargetNetworksRequestPaginateTypeDef"
    ) = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    AssociationIds = field("AssociationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnTargetNetworksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeClientVpnTargetNetworksRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnTargetNetworksRequest:
    boto3_raw_data: "type_defs.DescribeClientVpnTargetNetworksRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    AssociationIds = field("AssociationIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnTargetNetworksRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnTargetNetworksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCoipPoolsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeCoipPoolsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PoolIds = field("PoolIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCoipPoolsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCoipPoolsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCoipPoolsRequest:
    boto3_raw_data: "type_defs.DescribeCoipPoolsRequestTypeDef" = dataclasses.field()

    PoolIds = field("PoolIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeCoipPoolsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCoipPoolsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCustomerGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeCustomerGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    CustomerGatewayIds = field("CustomerGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCustomerGatewaysRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCustomerGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDhcpOptionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeDhcpOptionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DhcpOptionsIds = field("DhcpOptionsIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDhcpOptionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDhcpOptionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDhcpOptionsRequest:
    boto3_raw_data: "type_defs.DescribeDhcpOptionsRequestTypeDef" = dataclasses.field()

    DhcpOptionsIds = field("DhcpOptionsIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDhcpOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDhcpOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEgressOnlyInternetGatewaysRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeEgressOnlyInternetGatewaysRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    EgressOnlyInternetGatewayIds = field("EgressOnlyInternetGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeEgressOnlyInternetGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeEgressOnlyInternetGatewaysRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEgressOnlyInternetGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeEgressOnlyInternetGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    EgressOnlyInternetGatewayIds = field("EgressOnlyInternetGatewayIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeEgressOnlyInternetGatewaysRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEgressOnlyInternetGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeElasticGpusRequest:
    boto3_raw_data: "type_defs.DescribeElasticGpusRequestTypeDef" = dataclasses.field()

    ElasticGpuIds = field("ElasticGpuIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeElasticGpusRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeElasticGpusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportImageTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeExportImageTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExportImageTaskIds = field("ExportImageTaskIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeExportImageTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportImageTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportImageTasksRequest:
    boto3_raw_data: "type_defs.DescribeExportImageTasksRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExportImageTaskIds = field("ExportImageTaskIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeExportImageTasksRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportImageTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportTasksRequest:
    boto3_raw_data: "type_defs.DescribeExportTasksRequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExportTaskIds = field("ExportTaskIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeExportTasksRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastLaunchImagesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFastLaunchImagesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastLaunchImagesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastLaunchImagesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastLaunchImagesRequest:
    boto3_raw_data: "type_defs.DescribeFastLaunchImagesRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFastLaunchImagesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastLaunchImagesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastSnapshotRestoresRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFastSnapshotRestoresRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastSnapshotRestoresRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastSnapshotRestoresRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastSnapshotRestoresRequest:
    boto3_raw_data: "type_defs.DescribeFastSnapshotRestoresRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastSnapshotRestoresRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastSnapshotRestoresRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetInstancesRequest:
    boto3_raw_data: "type_defs.DescribeFleetInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    FleetId = field("FleetId")
    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFleetInstancesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFleetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    FleetIds = field("FleetIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFleetsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetsRequest:
    boto3_raw_data: "type_defs.DescribeFleetsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    FleetIds = field("FleetIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFlowLogsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFlowLogsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    FlowLogIds = field("FlowLogIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFlowLogsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFlowLogsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFlowLogsRequest:
    boto3_raw_data: "type_defs.DescribeFlowLogsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    FlowLogIds = field("FlowLogIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFlowLogsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFlowLogsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFpgaImagesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFpgaImagesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    FpgaImageIds = field("FpgaImageIds")
    Owners = field("Owners")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFpgaImagesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFpgaImagesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFpgaImagesRequest:
    boto3_raw_data: "type_defs.DescribeFpgaImagesRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    FpgaImageIds = field("FpgaImageIds")
    Owners = field("Owners")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFpgaImagesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFpgaImagesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationOfferingsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeHostReservationOfferingsRequestPaginateTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxDuration = field("MaxDuration")
    MinDuration = field("MinDuration")
    OfferingId = field("OfferingId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHostReservationOfferingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeHostReservationOfferingsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationOfferingsRequest:
    boto3_raw_data: "type_defs.DescribeHostReservationOfferingsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxDuration = field("MaxDuration")
    MaxResults = field("MaxResults")
    MinDuration = field("MinDuration")
    NextToken = field("NextToken")
    OfferingId = field("OfferingId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHostReservationOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostReservationOfferingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeHostReservationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    HostReservationIdSet = field("HostReservationIdSet")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHostReservationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostReservationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationsRequest:
    boto3_raw_data: "type_defs.DescribeHostReservationsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    HostReservationIdSet = field("HostReservationIdSet")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeHostReservationsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostReservationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeHostsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    HostIds = field("HostIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHostsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostsRequest:
    boto3_raw_data: "type_defs.DescribeHostsRequestTypeDef" = dataclasses.field()

    HostIds = field("HostIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHostsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIamInstanceProfileAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeIamInstanceProfileAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    AssociationIds = field("AssociationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIamInstanceProfileAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIamInstanceProfileAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIamInstanceProfileAssociationsRequest:
    boto3_raw_data: "type_defs.DescribeIamInstanceProfileAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationIds = field("AssociationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIamInstanceProfileAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIamInstanceProfileAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportEntriesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeImageUsageReportEntriesRequestPaginateTypeDef"
    ) = dataclasses.field()

    ImageIds = field("ImageIds")
    ReportIds = field("ReportIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageUsageReportEntriesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeImageUsageReportEntriesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportEntriesRequest:
    boto3_raw_data: "type_defs.DescribeImageUsageReportEntriesRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    ReportIds = field("ReportIds")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageUsageReportEntriesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportEntriesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeImageUsageReportsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    ReportIds = field("ReportIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageUsageReportsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportsRequest:
    boto3_raw_data: "type_defs.DescribeImageUsageReportsRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    ReportIds = field("ReportIds")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageUsageReportsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImagesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeImagesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ExecutableUsers = field("ExecutableUsers")
    ImageIds = field("ImageIds")
    Owners = field("Owners")
    IncludeDeprecated = field("IncludeDeprecated")
    IncludeDisabled = field("IncludeDisabled")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImagesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImagesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImagesRequest:
    boto3_raw_data: "type_defs.DescribeImagesRequestTypeDef" = dataclasses.field()

    ExecutableUsers = field("ExecutableUsers")
    ImageIds = field("ImageIds")
    Owners = field("Owners")
    IncludeDeprecated = field("IncludeDeprecated")
    IncludeDisabled = field("IncludeDisabled")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImagesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImagesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportImageTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeImportImageTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ImportTaskIds = field("ImportTaskIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImportImageTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportImageTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportImageTasksRequest:
    boto3_raw_data: "type_defs.DescribeImportImageTasksRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ImportTaskIds = field("ImportTaskIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImportImageTasksRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportImageTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportSnapshotTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeImportSnapshotTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ImportTaskIds = field("ImportTaskIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImportSnapshotTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportSnapshotTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportSnapshotTasksRequest:
    boto3_raw_data: "type_defs.DescribeImportSnapshotTasksRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ImportTaskIds = field("ImportTaskIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImportSnapshotTasksRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportSnapshotTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceConnectEndpointsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeInstanceConnectEndpointsRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceConnectEndpointIds = field("InstanceConnectEndpointIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceConnectEndpointsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeInstanceConnectEndpointsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceConnectEndpointsRequest:
    boto3_raw_data: "type_defs.DescribeInstanceConnectEndpointsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceConnectEndpointIds = field("InstanceConnectEndpointIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceConnectEndpointsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceConnectEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceCreditSpecificationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeInstanceCreditSpecificationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceIds = field("InstanceIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceCreditSpecificationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeInstanceCreditSpecificationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceCreditSpecificationsRequest:
    boto3_raw_data: "type_defs.DescribeInstanceCreditSpecificationsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceIds = field("InstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceCreditSpecificationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceCreditSpecificationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceEventWindowsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceEventWindowsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceEventWindowIds = field("InstanceEventWindowIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceEventWindowsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceEventWindowsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceEventWindowsRequest:
    boto3_raw_data: "type_defs.DescribeInstanceEventWindowsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceEventWindowIds = field("InstanceEventWindowIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceEventWindowsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceEventWindowsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceImageMetadataRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceImageMetadataRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceImageMetadataRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceImageMetadataRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceImageMetadataRequest:
    boto3_raw_data: "type_defs.DescribeInstanceImageMetadataRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceIds = field("InstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceImageMetadataRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceImageMetadataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceStatusRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceStatusRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IncludeAllInstances = field("IncludeAllInstances")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceStatusRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceStatusRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceStatusRequest:
    boto3_raw_data: "type_defs.DescribeInstanceStatusRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IncludeAllInstances = field("IncludeAllInstances")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInstanceStatusRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTopologyRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceTopologyRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceIds = field("InstanceIds")
    GroupNames = field("GroupNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceTopologyRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTopologyRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTopologyRequest:
    boto3_raw_data: "type_defs.DescribeInstanceTopologyRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    InstanceIds = field("InstanceIds")
    GroupNames = field("GroupNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInstanceTopologyRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTopologyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypeOfferingsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceTypeOfferingsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LocationType = field("LocationType")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceTypeOfferingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypeOfferingsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypeOfferingsRequest:
    boto3_raw_data: "type_defs.DescribeInstanceTypeOfferingsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LocationType = field("LocationType")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceTypeOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypeOfferingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstanceTypesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceTypes = field("InstanceTypes")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceTypesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypesRequest:
    boto3_raw_data: "type_defs.DescribeInstanceTypesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InstanceTypes = field("InstanceTypes")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstanceTypesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInstancesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInstancesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequest:
    boto3_raw_data: "type_defs.DescribeInstancesRequestTypeDef" = dataclasses.field()

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInternetGatewaysRequestPaginate:
    boto3_raw_data: "type_defs.DescribeInternetGatewaysRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    InternetGatewayIds = field("InternetGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInternetGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInternetGatewaysRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInternetGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeInternetGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    InternetGatewayIds = field("InternetGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInternetGatewaysRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInternetGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamExternalResourceVerificationTokensRequest:
    boto3_raw_data: (
        "type_defs.DescribeIpamExternalResourceVerificationTokensRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    IpamExternalResourceVerificationTokenIds = field(
        "IpamExternalResourceVerificationTokenIds"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamExternalResourceVerificationTokensRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamExternalResourceVerificationTokensRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamPoolsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeIpamPoolsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IpamPoolIds = field("IpamPoolIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeIpamPoolsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamPoolsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamPoolsRequest:
    boto3_raw_data: "type_defs.DescribeIpamPoolsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    IpamPoolIds = field("IpamPoolIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamPoolsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamPoolsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveriesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeIpamResourceDiscoveriesRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    IpamResourceDiscoveryIds = field("IpamResourceDiscoveryIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveriesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamResourceDiscoveriesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveriesRequest:
    boto3_raw_data: "type_defs.DescribeIpamResourceDiscoveriesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    IpamResourceDiscoveryIds = field("IpamResourceDiscoveryIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveriesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamResourceDiscoveriesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveryAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    IpamResourceDiscoveryAssociationIds = field("IpamResourceDiscoveryAssociationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveryAssociationsRequest:
    boto3_raw_data: (
        "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    IpamResourceDiscoveryAssociationIds = field("IpamResourceDiscoveryAssociationIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamResourceDiscoveryAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamScopesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeIpamScopesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IpamScopeIds = field("IpamScopeIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamScopesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamScopesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamScopesRequest:
    boto3_raw_data: "type_defs.DescribeIpamScopesRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    IpamScopeIds = field("IpamScopeIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamScopesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamScopesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeIpamsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IpamIds = field("IpamIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamsRequest:
    boto3_raw_data: "type_defs.DescribeIpamsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    IpamIds = field("IpamIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpv6PoolsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeIpv6PoolsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PoolIds = field("PoolIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeIpv6PoolsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpv6PoolsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpv6PoolsRequest:
    boto3_raw_data: "type_defs.DescribeIpv6PoolsRequestTypeDef" = dataclasses.field()

    PoolIds = field("PoolIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpv6PoolsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpv6PoolsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeKeyPairsRequest:
    boto3_raw_data: "type_defs.DescribeKeyPairsRequestTypeDef" = dataclasses.field()

    KeyNames = field("KeyNames")
    KeyPairIds = field("KeyPairIds")
    IncludePublicKey = field("IncludePublicKey")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeKeyPairsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeKeyPairsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplateVersionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeLaunchTemplateVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Versions = field("Versions")
    MinVersion = field("MinVersion")
    MaxVersion = field("MaxVersion")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ResolveAlias = field("ResolveAlias")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLaunchTemplateVersionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplateVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplateVersionsRequest:
    boto3_raw_data: "type_defs.DescribeLaunchTemplateVersionsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Versions = field("Versions")
    MinVersion = field("MinVersion")
    MaxVersion = field("MaxVersion")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ResolveAlias = field("ResolveAlias")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLaunchTemplateVersionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplateVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplatesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeLaunchTemplatesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LaunchTemplateIds = field("LaunchTemplateIds")
    LaunchTemplateNames = field("LaunchTemplateNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLaunchTemplatesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplatesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplatesRequest:
    boto3_raw_data: "type_defs.DescribeLaunchTemplatesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    LaunchTemplateIds = field("LaunchTemplateIds")
    LaunchTemplateNames = field("LaunchTemplateNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeLaunchTemplatesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplatesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestPaginateTypeDef" = (dataclasses.field())

    LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds = field(
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest:
    boto3_raw_data: "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestTypeDef" = (dataclasses.field())

    LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds = field(
        "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVpcAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableVpcAssociationIds = field(
        "LocalGatewayRouteTableVpcAssociationIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVpcAssociationsRequest:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableVpcAssociationIds = field(
        "LocalGatewayRouteTableVpcAssociationIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTablesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayRouteTablesRequestPaginateTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableIds = field("LocalGatewayRouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTablesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTablesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTablesRequest:
    boto3_raw_data: "type_defs.DescribeLocalGatewayRouteTablesRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableIds = field("LocalGatewayRouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTablesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewayRouteTablesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfaceGroupsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestPaginateTypeDef"
    ) = dataclasses.field()

    LocalGatewayVirtualInterfaceGroupIds = field("LocalGatewayVirtualInterfaceGroupIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfaceGroupsRequest:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayVirtualInterfaceGroupIds = field("LocalGatewayVirtualInterfaceGroupIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfacesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayVirtualInterfacesRequestPaginateTypeDef"
    ) = dataclasses.field()

    LocalGatewayVirtualInterfaceIds = field("LocalGatewayVirtualInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfacesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayVirtualInterfacesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfacesRequest:
    boto3_raw_data: "type_defs.DescribeLocalGatewayVirtualInterfacesRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayVirtualInterfaceIds = field("LocalGatewayVirtualInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfacesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewayVirtualInterfacesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewaysRequestPaginate:
    boto3_raw_data: "type_defs.DescribeLocalGatewaysRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayIds = field("LocalGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewaysRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeLocalGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayIds = field("LocalGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLocalGatewaysRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLockedSnapshotsRequest:
    boto3_raw_data: "type_defs.DescribeLockedSnapshotsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeLockedSnapshotsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLockedSnapshotsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacHostsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeMacHostsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    HostIds = field("HostIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeMacHostsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacHostsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacHostsRequest:
    boto3_raw_data: "type_defs.DescribeMacHostsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    HostIds = field("HostIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeMacHostsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacHostsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacModificationTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeMacModificationTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MacModificationTaskIds = field("MacModificationTaskIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMacModificationTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacModificationTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacModificationTasksRequest:
    boto3_raw_data: "type_defs.DescribeMacModificationTasksRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MacModificationTaskIds = field("MacModificationTaskIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMacModificationTasksRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacModificationTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeManagedPrefixListsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeManagedPrefixListsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    PrefixListIds = field("PrefixListIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeManagedPrefixListsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeManagedPrefixListsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeManagedPrefixListsRequest:
    boto3_raw_data: "type_defs.DescribeManagedPrefixListsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    PrefixListIds = field("PrefixListIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeManagedPrefixListsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeManagedPrefixListsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMovingAddressesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeMovingAddressesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    PublicIps = field("PublicIps")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMovingAddressesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMovingAddressesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMovingAddressesRequest:
    boto3_raw_data: "type_defs.DescribeMovingAddressesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    PublicIps = field("PublicIps")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeMovingAddressesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMovingAddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNatGatewaysRequestPaginate:
    boto3_raw_data: "type_defs.DescribeNatGatewaysRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NatGatewayIds = field("NatGatewayIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNatGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNatGatewaysRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNatGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeNatGatewaysRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NatGatewayIds = field("NatGatewayIds")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNatGatewaysRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNatGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkAclsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeNetworkAclsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    NetworkAclIds = field("NetworkAclIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkAclsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkAclsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkAclsRequest:
    boto3_raw_data: "type_defs.DescribeNetworkAclsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NetworkAclIds = field("NetworkAclIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNetworkAclsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkAclsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopeAnalysesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestPaginateTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisIds = field(
        "NetworkInsightsAccessScopeAnalysisIds"
    )
    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    AnalysisStartTimeBegin = field("AnalysisStartTimeBegin")
    AnalysisStartTimeEnd = field("AnalysisStartTimeEnd")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopeAnalysesRequest:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisIds = field(
        "NetworkInsightsAccessScopeAnalysisIds"
    )
    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    AnalysisStartTimeBegin = field("AnalysisStartTimeBegin")
    AnalysisStartTimeEnd = field("AnalysisStartTimeEnd")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInsightsAccessScopeAnalysesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInsightsAccessScopesRequestPaginateTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeIds = field("NetworkInsightsAccessScopeIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInsightsAccessScopesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopesRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsAccessScopesRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeIds = field("NetworkInsightsAccessScopeIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsAccessScopesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAnalysesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInsightsAnalysesRequestPaginateTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAnalysisIds = field("NetworkInsightsAnalysisIds")
    NetworkInsightsPathId = field("NetworkInsightsPathId")
    AnalysisStartTime = field("AnalysisStartTime")
    AnalysisEndTime = field("AnalysisEndTime")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAnalysesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInsightsAnalysesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAnalysesRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsAnalysesRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAnalysisIds = field("NetworkInsightsAnalysisIds")
    NetworkInsightsPathId = field("NetworkInsightsPathId")
    AnalysisStartTime = field("AnalysisStartTime")
    AnalysisEndTime = field("AnalysisEndTime")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAnalysesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsAnalysesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsPathsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsPathsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsPathIds = field("NetworkInsightsPathIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsPathsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsPathsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsPathsRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsPathsRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsPathIds = field("NetworkInsightsPathIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsPathsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsPathsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacePermissionsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInterfacePermissionsRequestPaginateTypeDef"
    ) = dataclasses.field()

    NetworkInterfacePermissionIds = field("NetworkInterfacePermissionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfacePermissionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInterfacePermissionsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacePermissionsRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfacePermissionIds = field("NetworkInterfacePermissionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfacePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    NetworkInterfaceIds = field("NetworkInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfacesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacesRequest:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacesRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NetworkInterfaceIds = field("NetworkInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeNetworkInterfacesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeOutpostLagsRequest:
    boto3_raw_data: "type_defs.DescribeOutpostLagsRequestTypeDef" = dataclasses.field()

    OutpostLagIds = field("OutpostLagIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeOutpostLagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeOutpostLagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePlacementGroupsRequest:
    boto3_raw_data: "type_defs.DescribePlacementGroupsRequestTypeDef" = (
        dataclasses.field()
    )

    GroupIds = field("GroupIds")
    DryRun = field("DryRun")
    GroupNames = field("GroupNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePlacementGroupsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePlacementGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrefixListsRequestPaginate:
    boto3_raw_data: "type_defs.DescribePrefixListsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    PrefixListIds = field("PrefixListIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePrefixListsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrefixListsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrefixListsRequest:
    boto3_raw_data: "type_defs.DescribePrefixListsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    PrefixListIds = field("PrefixListIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePrefixListsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrefixListsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePublicIpv4PoolsRequestPaginate:
    boto3_raw_data: "type_defs.DescribePublicIpv4PoolsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PoolIds = field("PoolIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePublicIpv4PoolsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePublicIpv4PoolsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePublicIpv4PoolsRequest:
    boto3_raw_data: "type_defs.DescribePublicIpv4PoolsRequestTypeDef" = (
        dataclasses.field()
    )

    PoolIds = field("PoolIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePublicIpv4PoolsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePublicIpv4PoolsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRegionsRequest:
    boto3_raw_data: "type_defs.DescribeRegionsRequestTypeDef" = dataclasses.field()

    RegionNames = field("RegionNames")
    AllRegions = field("AllRegions")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRegionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRegionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReplaceRootVolumeTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeReplaceRootVolumeTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ReplaceRootVolumeTaskIds = field("ReplaceRootVolumeTaskIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReplaceRootVolumeTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReplaceRootVolumeTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReplaceRootVolumeTasksRequest:
    boto3_raw_data: "type_defs.DescribeReplaceRootVolumeTasksRequestTypeDef" = (
        dataclasses.field()
    )

    ReplaceRootVolumeTaskIds = field("ReplaceRootVolumeTaskIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReplaceRootVolumeTasksRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReplaceRootVolumeTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesListingsRequest:
    boto3_raw_data: "type_defs.DescribeReservedInstancesListingsRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesId = field("ReservedInstancesId")
    ReservedInstancesListingId = field("ReservedInstancesListingId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesListingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesListingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesModificationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeReservedInstancesModificationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    ReservedInstancesModificationIds = field("ReservedInstancesModificationIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesModificationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeReservedInstancesModificationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesModificationsRequest:
    boto3_raw_data: "type_defs.DescribeReservedInstancesModificationsRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesModificationIds = field("ReservedInstancesModificationIds")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesModificationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesModificationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesOfferingsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeReservedInstancesOfferingsRequestPaginateTypeDef"
    ) = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    IncludeMarketplace = field("IncludeMarketplace")
    InstanceType = field("InstanceType")
    MaxDuration = field("MaxDuration")
    MaxInstanceCount = field("MaxInstanceCount")
    MinDuration = field("MinDuration")
    OfferingClass = field("OfferingClass")
    ProductDescription = field("ProductDescription")
    ReservedInstancesOfferingIds = field("ReservedInstancesOfferingIds")
    AvailabilityZoneId = field("AvailabilityZoneId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceTenancy = field("InstanceTenancy")
    OfferingType = field("OfferingType")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesOfferingsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeReservedInstancesOfferingsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesOfferingsRequest:
    boto3_raw_data: "type_defs.DescribeReservedInstancesOfferingsRequestTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")
    IncludeMarketplace = field("IncludeMarketplace")
    InstanceType = field("InstanceType")
    MaxDuration = field("MaxDuration")
    MaxInstanceCount = field("MaxInstanceCount")
    MinDuration = field("MinDuration")
    OfferingClass = field("OfferingClass")
    ProductDescription = field("ProductDescription")
    ReservedInstancesOfferingIds = field("ReservedInstancesOfferingIds")
    AvailabilityZoneId = field("AvailabilityZoneId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    InstanceTenancy = field("InstanceTenancy")
    OfferingType = field("OfferingType")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesOfferingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesRequest:
    boto3_raw_data: "type_defs.DescribeReservedInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    OfferingClass = field("OfferingClass")
    ReservedInstancesIds = field("ReservedInstancesIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    OfferingType = field("OfferingType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeReservedInstancesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerEndpointsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeRouteServerEndpointsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    RouteServerEndpointIds = field("RouteServerEndpointIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteServerEndpointsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerEndpointsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerEndpointsRequest:
    boto3_raw_data: "type_defs.DescribeRouteServerEndpointsRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerEndpointIds = field("RouteServerEndpointIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteServerEndpointsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerPeersRequestPaginate:
    boto3_raw_data: "type_defs.DescribeRouteServerPeersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    RouteServerPeerIds = field("RouteServerPeerIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteServerPeersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerPeersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerPeersRequest:
    boto3_raw_data: "type_defs.DescribeRouteServerPeersRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerPeerIds = field("RouteServerPeerIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeRouteServerPeersRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerPeersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServersRequestPaginate:
    boto3_raw_data: "type_defs.DescribeRouteServersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    RouteServerIds = field("RouteServerIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteServersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServersRequest:
    boto3_raw_data: "type_defs.DescribeRouteServersRequestTypeDef" = dataclasses.field()

    RouteServerIds = field("RouteServerIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRouteServersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteTablesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeRouteTablesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    RouteTableIds = field("RouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteTablesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteTablesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteTablesRequest:
    boto3_raw_data: "type_defs.DescribeRouteTablesRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    RouteTableIds = field("RouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRouteTablesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteTablesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupRulesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSecurityGroupRulesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupRulesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupRulesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupRulesRequest:
    boto3_raw_data: "type_defs.DescribeSecurityGroupRulesRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupRulesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupVpcAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeSecurityGroupVpcAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupVpcAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeSecurityGroupVpcAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupVpcAssociationsRequest:
    boto3_raw_data: "type_defs.DescribeSecurityGroupVpcAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupVpcAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupVpcAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSecurityGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    GroupIds = field("GroupIds")
    GroupNames = field("GroupNames")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupsRequest:
    boto3_raw_data: "type_defs.DescribeSecurityGroupsRequestTypeDef" = (
        dataclasses.field()
    )

    GroupIds = field("GroupIds")
    GroupNames = field("GroupNames")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSecurityGroupsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeServiceLinkVirtualInterfacesRequest:
    boto3_raw_data: "type_defs.DescribeServiceLinkVirtualInterfacesRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceLinkVirtualInterfaceIds = field("ServiceLinkVirtualInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeServiceLinkVirtualInterfacesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeServiceLinkVirtualInterfacesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotTierStatusRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSnapshotTierStatusRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSnapshotTierStatusRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotTierStatusRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotTierStatusRequest:
    boto3_raw_data: "type_defs.DescribeSnapshotTierStatusRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSnapshotTierStatusRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotTierStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSnapshotsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    OwnerIds = field("OwnerIds")
    RestorableByUserIds = field("RestorableByUserIds")
    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSnapshotsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotsRequest:
    boto3_raw_data: "type_defs.DescribeSnapshotsRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    OwnerIds = field("OwnerIds")
    RestorableByUserIds = field("RestorableByUserIds")
    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSnapshotsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotInstanceRequestsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSpotInstanceRequestsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    SpotInstanceRequestIds = field("SpotInstanceRequestIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotInstanceRequestsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotInstanceRequestsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotInstanceRequestsRequest:
    boto3_raw_data: "type_defs.DescribeSpotInstanceRequestsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    SpotInstanceRequestIds = field("SpotInstanceRequestIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotInstanceRequestsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotInstanceRequestsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotPriceHistoryRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSpotPriceHistoryRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZoneId = field("AvailabilityZoneId")
    DryRun = field("DryRun")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    InstanceTypes = field("InstanceTypes")
    ProductDescriptions = field("ProductDescriptions")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotPriceHistoryRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotPriceHistoryRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotPriceHistoryRequest:
    boto3_raw_data: "type_defs.DescribeSpotPriceHistoryRequestTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZoneId = field("AvailabilityZoneId")
    DryRun = field("DryRun")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    InstanceTypes = field("InstanceTypes")
    ProductDescriptions = field("ProductDescriptions")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    AvailabilityZone = field("AvailabilityZone")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSpotPriceHistoryRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotPriceHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStoreImageTasksRequestPaginate:
    boto3_raw_data: "type_defs.DescribeStoreImageTasksRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStoreImageTasksRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStoreImageTasksRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStoreImageTasksRequest:
    boto3_raw_data: "type_defs.DescribeStoreImageTasksRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeStoreImageTasksRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStoreImageTasksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubnetsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeSubnetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    SubnetIds = field("SubnetIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSubnetsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubnetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubnetsRequest:
    boto3_raw_data: "type_defs.DescribeSubnetsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    SubnetIds = field("SubnetIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSubnetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubnetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTagsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTagsRequestPaginateTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTagsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTagsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTagsRequest:
    boto3_raw_data: "type_defs.DescribeTagsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTagsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTagsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorFilterRulesRequest:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorFilterRulesRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterRuleIds = field("TrafficMirrorFilterRuleIds")
    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorFilterRulesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorFilterRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorFiltersRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorFiltersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterIds = field("TrafficMirrorFilterIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorFiltersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorFiltersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorFiltersRequest:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorFiltersRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterIds = field("TrafficMirrorFilterIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorFiltersRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorFiltersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorSessionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorSessionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorSessionIds = field("TrafficMirrorSessionIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorSessionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorSessionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorSessionsRequest:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorSessionsRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorSessionIds = field("TrafficMirrorSessionIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorSessionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorSessionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorTargetsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorTargetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorTargetIds = field("TrafficMirrorTargetIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorTargetsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorTargetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorTargetsRequest:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorTargetsRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorTargetIds = field("TrafficMirrorTargetIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorTargetsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorTargetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayAttachmentsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayAttachmentsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayAttachmentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayAttachmentsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayAttachmentsRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayAttachmentsRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayAttachmentsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayAttachmentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectPeersRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayConnectPeersRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayConnectPeerIds = field("TransitGatewayConnectPeerIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectPeersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayConnectPeersRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectPeersRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayConnectPeersRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayConnectPeerIds = field("TransitGatewayConnectPeerIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectPeersRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayConnectPeersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTransitGatewayConnectsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayConnectsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectsRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayConnectsRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayConnectsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayMulticastDomainsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayMulticastDomainsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainIds = field("TransitGatewayMulticastDomainIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayMulticastDomainsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayMulticastDomainsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayMulticastDomainsRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayMulticastDomainsRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainIds = field("TransitGatewayMulticastDomainIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayMulticastDomainsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayMulticastDomainsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPeeringAttachmentsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPeeringAttachmentsRequest:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayPeeringAttachmentsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPolicyTablesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayPolicyTablesRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayPolicyTableIds = field("TransitGatewayPolicyTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPolicyTablesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayPolicyTablesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPolicyTablesRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayPolicyTablesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableIds = field("TransitGatewayPolicyTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPolicyTablesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayPolicyTablesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTableAnnouncementsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableAnnouncementIds = field(
        "TransitGatewayRouteTableAnnouncementIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTableAnnouncementsRequest:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableAnnouncementIds = field(
        "TransitGatewayRouteTableAnnouncementIds"
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayRouteTableAnnouncementsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTablesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayRouteTablesRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableIds = field("TransitGatewayRouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTablesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayRouteTablesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTablesRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayRouteTablesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableIds = field("TransitGatewayRouteTableIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTablesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayRouteTablesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayVpcAttachmentsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayVpcAttachmentsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayVpcAttachmentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayVpcAttachmentsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayVpcAttachmentsRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewayVpcAttachmentsRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentIds = field("TransitGatewayAttachmentIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayVpcAttachmentsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayVpcAttachmentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewaysRequestPaginate:
    boto3_raw_data: "type_defs.DescribeTransitGatewaysRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayIds = field("TransitGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewaysRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewaysRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeTransitGatewaysRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayIds = field("TransitGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTransitGatewaysRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrunkInterfaceAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeTrunkInterfaceAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    AssociationIds = field("AssociationIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrunkInterfaceAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTrunkInterfaceAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrunkInterfaceAssociationsRequest:
    boto3_raw_data: "type_defs.DescribeTrunkInterfaceAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    AssociationIds = field("AssociationIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrunkInterfaceAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrunkInterfaceAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessEndpointsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVerifiedAccessEndpointsRequestPaginateTypeDef"
    ) = dataclasses.field()

    VerifiedAccessEndpointIds = field("VerifiedAccessEndpointIds")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    VerifiedAccessGroupId = field("VerifiedAccessGroupId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessEndpointsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessEndpointsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessEndpointsRequest:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessEndpointsRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointIds = field("VerifiedAccessEndpointIds")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessEndpointsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessGroupsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupIds = field("VerifiedAccessGroupIds")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessGroupsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessGroupsRequest:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessGroupsRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupIds = field("VerifiedAccessGroupIds")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessGroupsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstanceLoggingConfigurationsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestPaginateTypeDef" = (dataclasses.field())

    VerifiedAccessInstanceIds = field("VerifiedAccessInstanceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstanceLoggingConfigurationsRequest:
    boto3_raw_data: (
        "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestTypeDef"
    ) = dataclasses.field()

    VerifiedAccessInstanceIds = field("VerifiedAccessInstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstancesRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVerifiedAccessInstancesRequestPaginateTypeDef"
    ) = dataclasses.field()

    VerifiedAccessInstanceIds = field("VerifiedAccessInstanceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstancesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessInstancesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstancesRequest:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceIds = field("VerifiedAccessInstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessTrustProvidersRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVerifiedAccessTrustProvidersRequestPaginateTypeDef"
    ) = dataclasses.field()

    VerifiedAccessTrustProviderIds = field("VerifiedAccessTrustProviderIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessTrustProvidersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessTrustProvidersRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessTrustProvidersRequest:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessTrustProvidersRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessTrustProviderIds = field("VerifiedAccessTrustProviderIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessTrustProvidersRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessTrustProvidersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeStatusRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVolumeStatusRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumeStatusRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumeStatusRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeStatusRequest:
    boto3_raw_data: "type_defs.DescribeVolumeStatusRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVolumeStatusRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumeStatusRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeStatusRequestVolumeDescribeStatus:
    boto3_raw_data: (
        "type_defs.DescribeVolumeStatusRequestVolumeDescribeStatusTypeDef"
    ) = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumeStatusRequestVolumeDescribeStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVolumeStatusRequestVolumeDescribeStatusTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesModificationsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVolumesModificationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VolumeIds = field("VolumeIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumesModificationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesModificationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesModificationsRequest:
    boto3_raw_data: "type_defs.DescribeVolumesModificationsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VolumeIds = field("VolumeIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumesModificationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesModificationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVolumesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVolumesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesRequest:
    boto3_raw_data: "type_defs.DescribeVolumesRequestTypeDef" = dataclasses.field()

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVolumesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcBlockPublicAccessExclusionsRequest:
    boto3_raw_data: "type_defs.DescribeVpcBlockPublicAccessExclusionsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExclusionIds = field("ExclusionIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcBlockPublicAccessExclusionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcBlockPublicAccessExclusionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcClassicLinkRequest:
    boto3_raw_data: "type_defs.DescribeVpcClassicLinkRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VpcIds = field("VpcIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVpcClassicLinkRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcClassicLinkRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointAssociationsRequest:
    boto3_raw_data: "type_defs.DescribeVpcEndpointAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VpcEndpointIds = field("VpcEndpointIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionNotificationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointConnectionNotificationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    ConnectionNotificationId = field("ConnectionNotificationId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionNotificationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointConnectionNotificationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionNotificationsRequest:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointConnectionNotificationsRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    ConnectionNotificationId = field("ConnectionNotificationId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionNotificationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointConnectionNotificationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVpcEndpointConnectionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointConnectionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionsRequest:
    boto3_raw_data: "type_defs.DescribeVpcEndpointConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServiceConfigurationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointServiceConfigurationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    ServiceIds = field("ServiceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServiceConfigurationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointServiceConfigurationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServiceConfigurationsRequest:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointServiceConfigurationsRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    ServiceIds = field("ServiceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServiceConfigurationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointServiceConfigurationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicePermissionsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointServicePermissionsRequestPaginateTypeDef"
    ) = dataclasses.field()

    ServiceId = field("ServiceId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicePermissionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointServicePermissionsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicePermissionsRequest:
    boto3_raw_data: "type_defs.DescribeVpcEndpointServicePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    ServiceId = field("ServiceId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointServicePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVpcEndpointServicesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ServiceNames = field("ServiceNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ServiceRegions = field("ServiceRegions")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointServicesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicesRequest:
    boto3_raw_data: "type_defs.DescribeVpcEndpointServicesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ServiceNames = field("ServiceNames")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    ServiceRegions = field("ServiceRegions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointServicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVpcEndpointsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VpcEndpointIds = field("VpcEndpointIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointsRequest:
    boto3_raw_data: "type_defs.DescribeVpcEndpointsRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    VpcEndpointIds = field("VpcEndpointIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcEndpointsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcPeeringConnectionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVpcPeeringConnectionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    VpcPeeringConnectionIds = field("VpcPeeringConnectionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcPeeringConnectionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcPeeringConnectionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcPeeringConnectionsRequest:
    boto3_raw_data: "type_defs.DescribeVpcPeeringConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    VpcPeeringConnectionIds = field("VpcPeeringConnectionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcPeeringConnectionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcPeeringConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeVpcsRequestPaginateTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpcIds = field("VpcIds")
    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcsRequest:
    boto3_raw_data: "type_defs.DescribeVpcsRequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpcIds = field("VpcIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnConnectionsRequest:
    boto3_raw_data: "type_defs.DescribeVpnConnectionsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpnConnectionIds = field("VpnConnectionIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVpnConnectionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnGatewaysRequest:
    boto3_raw_data: "type_defs.DescribeVpnGatewaysRequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpnGatewayIds = field("VpnGatewayIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpnGatewaysRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnGatewaysRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportTransitGatewayRoutesRequest:
    boto3_raw_data: "type_defs.ExportTransitGatewayRoutesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    S3Bucket = field("S3Bucket")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportTransitGatewayRoutesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportTransitGatewayRoutesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetCoipPoolUsageRequest:
    boto3_raw_data: "type_defs.GetCoipPoolUsageRequestTypeDef" = dataclasses.field()

    PoolId = field("PoolId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetCoipPoolUsageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetCoipPoolUsageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredAccountsRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamDiscoveredAccountsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    DiscoveryRegion = field("DiscoveryRegion")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredAccountsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredAccountsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredAccountsRequest:
    boto3_raw_data: "type_defs.GetIpamDiscoveredAccountsRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    DiscoveryRegion = field("DiscoveryRegion")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetIpamDiscoveredAccountsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredAccountsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredPublicAddressesRequest:
    boto3_raw_data: "type_defs.GetIpamDiscoveredPublicAddressesRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    AddressRegion = field("AddressRegion")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredPublicAddressesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredPublicAddressesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredResourceCidrsRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamDiscoveredResourceCidrsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    ResourceRegion = field("ResourceRegion")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredResourceCidrsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredResourceCidrsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredResourceCidrsRequest:
    boto3_raw_data: "type_defs.GetIpamDiscoveredResourceCidrsRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    ResourceRegion = field("ResourceRegion")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredResourceCidrsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredResourceCidrsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolAllocationsRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamPoolAllocationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    IpamPoolAllocationId = field("IpamPoolAllocationId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamPoolAllocationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolAllocationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolAllocationsRequest:
    boto3_raw_data: "type_defs.GetIpamPoolAllocationsRequestTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    IpamPoolAllocationId = field("IpamPoolAllocationId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetIpamPoolAllocationsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolAllocationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolCidrsRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamPoolCidrsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetIpamPoolCidrsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolCidrsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolCidrsRequest:
    boto3_raw_data: "type_defs.GetIpamPoolCidrsRequestTypeDef" = dataclasses.field()

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamPoolCidrsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolCidrsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamResourceCidrsRequestPaginate:
    boto3_raw_data: "type_defs.GetIpamResourceCidrsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IpamPoolId = field("IpamPoolId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTag(self):  # pragma: no cover
        return RequestIpamResourceTag.make_one(self.boto3_raw_data["ResourceTag"])

    ResourceOwner = field("ResourceOwner")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamResourceCidrsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamResourceCidrsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamResourceCidrsRequest:
    boto3_raw_data: "type_defs.GetIpamResourceCidrsRequestTypeDef" = dataclasses.field()

    IpamScopeId = field("IpamScopeId")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    IpamPoolId = field("IpamPoolId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTag(self):  # pragma: no cover
        return RequestIpamResourceTag.make_one(self.boto3_raw_data["ResourceTag"])

    ResourceOwner = field("ResourceOwner")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamResourceCidrsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamResourceCidrsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerRoutingDatabaseRequest:
    boto3_raw_data: "type_defs.GetRouteServerRoutingDatabaseRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetRouteServerRoutingDatabaseRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerRoutingDatabaseRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSecurityGroupsForVpcRequestPaginate:
    boto3_raw_data: "type_defs.GetSecurityGroupsForVpcRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSecurityGroupsForVpcRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSecurityGroupsForVpcRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSecurityGroupsForVpcRequest:
    boto3_raw_data: "type_defs.GetSecurityGroupsForVpcRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetSecurityGroupsForVpcRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSecurityGroupsForVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSubnetCidrReservationsRequest:
    boto3_raw_data: "type_defs.GetSubnetCidrReservationsRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetSubnetCidrReservationsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSubnetCidrReservationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayAttachmentPropagationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayAttachmentPropagationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayAttachmentPropagationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayAttachmentPropagationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayAttachmentPropagationsRequest:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayAttachmentPropagationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayAttachmentPropagationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayAttachmentPropagationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayMulticastDomainAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayMulticastDomainAssociationsRequest:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayMulticastDomainAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPolicyTableAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayPolicyTableAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPolicyTableAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayPolicyTableAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPolicyTableAssociationsRequest:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayPolicyTableAssociationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPolicyTableAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayPolicyTableAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPolicyTableEntriesRequest:
    boto3_raw_data: "type_defs.GetTransitGatewayPolicyTableEntriesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayPolicyTableId = field("TransitGatewayPolicyTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPolicyTableEntriesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayPolicyTableEntriesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPrefixListReferencesRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayPrefixListReferencesRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPrefixListReferencesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayPrefixListReferencesRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPrefixListReferencesRequest:
    boto3_raw_data: "type_defs.GetTransitGatewayPrefixListReferencesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPrefixListReferencesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayPrefixListReferencesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTableAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayRouteTableAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTableAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayRouteTableAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTableAssociationsRequest:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayRouteTableAssociationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTableAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayRouteTableAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTablePropagationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayRouteTablePropagationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTablePropagationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayRouteTablePropagationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTablePropagationsRequest:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayRouteTablePropagationsRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTablePropagationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayRouteTablePropagationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchLocalGatewayRoutesRequestPaginate:
    boto3_raw_data: "type_defs.SearchLocalGatewayRoutesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchLocalGatewayRoutesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchLocalGatewayRoutesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchLocalGatewayRoutesRequest:
    boto3_raw_data: "type_defs.SearchLocalGatewayRoutesRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchLocalGatewayRoutesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchLocalGatewayRoutesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTransitGatewayMulticastGroupsRequestPaginate:
    boto3_raw_data: (
        "type_defs.SearchTransitGatewayMulticastGroupsRequestPaginateTypeDef"
    ) = dataclasses.field()

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTransitGatewayMulticastGroupsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.SearchTransitGatewayMulticastGroupsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTransitGatewayMulticastGroupsRequest:
    boto3_raw_data: "type_defs.SearchTransitGatewayMulticastGroupsRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTransitGatewayMulticastGroupsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTransitGatewayMulticastGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTransitGatewayRoutesRequest:
    boto3_raw_data: "type_defs.SearchTransitGatewayRoutesRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTransitGatewayRoutesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTransitGatewayRoutesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAggregateIdFormatResult:
    boto3_raw_data: "type_defs.DescribeAggregateIdFormatResultTypeDef" = (
        dataclasses.field()
    )

    UseLongIdsAggregated = field("UseLongIdsAggregated")

    @cached_property
    def Statuses(self):  # pragma: no cover
        return IdFormat.make_many(self.boto3_raw_data["Statuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAggregateIdFormatResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAggregateIdFormatResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIdFormatResult:
    boto3_raw_data: "type_defs.DescribeIdFormatResultTypeDef" = dataclasses.field()

    @cached_property
    def Statuses(self):  # pragma: no cover
        return IdFormat.make_many(self.boto3_raw_data["Statuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIdFormatResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIdFormatResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIdentityIdFormatResult:
    boto3_raw_data: "type_defs.DescribeIdentityIdFormatResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Statuses(self):  # pragma: no cover
        return IdFormat.make_many(self.boto3_raw_data["Statuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeIdentityIdFormatResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIdentityIdFormatResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrincipalIdFormat:
    boto3_raw_data: "type_defs.PrincipalIdFormatTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def Statuses(self):  # pragma: no cover
        return IdFormat.make_many(self.boto3_raw_data["Statuses"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrincipalIdFormatTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrincipalIdFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAwsNetworkPerformanceMetricSubscriptionsResult:
    boto3_raw_data: (
        "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Subscriptions(self):  # pragma: no cover
        return Subscription.make_many(self.boto3_raw_data["Subscriptions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeAwsNetworkPerformanceMetricSubscriptionsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBundleTasksRequestWait:
    boto3_raw_data: "type_defs.DescribeBundleTasksRequestWaitTypeDef" = (
        dataclasses.field()
    )

    BundleIds = field("BundleIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeBundleTasksRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBundleTasksRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeConversionTasksRequestWaitExtraExtra:
    boto3_raw_data: "type_defs.DescribeConversionTasksRequestWaitExtraExtraTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ConversionTaskIds = field("ConversionTaskIds")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeConversionTasksRequestWaitExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeConversionTasksRequestWaitExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeConversionTasksRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeConversionTasksRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ConversionTaskIds = field("ConversionTaskIds")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeConversionTasksRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeConversionTasksRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeConversionTasksRequestWait:
    boto3_raw_data: "type_defs.DescribeConversionTasksRequestWaitTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    ConversionTaskIds = field("ConversionTaskIds")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeConversionTasksRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeConversionTasksRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCustomerGatewaysRequestWait:
    boto3_raw_data: "type_defs.DescribeCustomerGatewaysRequestWaitTypeDef" = (
        dataclasses.field()
    )

    CustomerGatewayIds = field("CustomerGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCustomerGatewaysRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCustomerGatewaysRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportTasksRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeExportTasksRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExportTaskIds = field("ExportTaskIds")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeExportTasksRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportTasksRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportTasksRequestWait:
    boto3_raw_data: "type_defs.DescribeExportTasksRequestWaitTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ExportTaskIds = field("ExportTaskIds")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeExportTasksRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportTasksRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportsRequestWait:
    boto3_raw_data: "type_defs.DescribeImageUsageReportsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    ReportIds = field("ReportIds")
    NextToken = field("NextToken")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageUsageReportsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImagesRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeImagesRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    ExecutableUsers = field("ExecutableUsers")
    ImageIds = field("ImageIds")
    Owners = field("Owners")
    IncludeDeprecated = field("IncludeDeprecated")
    IncludeDisabled = field("IncludeDisabled")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImagesRequestWaitExtraTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImagesRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImagesRequestWait:
    boto3_raw_data: "type_defs.DescribeImagesRequestWaitTypeDef" = dataclasses.field()

    ExecutableUsers = field("ExecutableUsers")
    ImageIds = field("ImageIds")
    Owners = field("Owners")
    IncludeDeprecated = field("IncludeDeprecated")
    IncludeDisabled = field("IncludeDisabled")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImagesRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImagesRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportSnapshotTasksRequestWait:
    boto3_raw_data: "type_defs.DescribeImportSnapshotTasksRequestWaitTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ImportTaskIds = field("ImportTaskIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImportSnapshotTasksRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportSnapshotTasksRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceStatusRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeInstanceStatusRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IncludeAllInstances = field("IncludeAllInstances")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceStatusRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceStatusRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceStatusRequestWait:
    boto3_raw_data: "type_defs.DescribeInstanceStatusRequestWaitTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    IncludeAllInstances = field("IncludeAllInstances")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceStatusRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceStatusRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequestWaitExtraExtraExtra:
    boto3_raw_data: "type_defs.DescribeInstancesRequestWaitExtraExtraExtraTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstancesRequestWaitExtraExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestWaitExtraExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequestWaitExtraExtra:
    boto3_raw_data: "type_defs.DescribeInstancesRequestWaitExtraExtraTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstancesRequestWaitExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestWaitExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeInstancesRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstancesRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesRequestWait:
    boto3_raw_data: "type_defs.DescribeInstancesRequestWaitTypeDef" = (
        dataclasses.field()
    )

    InstanceIds = field("InstanceIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstancesRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInternetGatewaysRequestWait:
    boto3_raw_data: "type_defs.DescribeInternetGatewaysRequestWaitTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    InternetGatewayIds = field("InternetGatewayIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInternetGatewaysRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInternetGatewaysRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeKeyPairsRequestWait:
    boto3_raw_data: "type_defs.DescribeKeyPairsRequestWaitTypeDef" = dataclasses.field()

    KeyNames = field("KeyNames")
    KeyPairIds = field("KeyPairIds")
    IncludePublicKey = field("IncludePublicKey")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeKeyPairsRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeKeyPairsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNatGatewaysRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeNatGatewaysRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NatGatewayIds = field("NatGatewayIds")
    NextToken = field("NextToken")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNatGatewaysRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNatGatewaysRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNatGatewaysRequestWait:
    boto3_raw_data: "type_defs.DescribeNatGatewaysRequestWaitTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NatGatewayIds = field("NatGatewayIds")
    NextToken = field("NextToken")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeNatGatewaysRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNatGatewaysRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacesRequestWait:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacesRequestWaitTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    NetworkInterfaceIds = field("NetworkInterfaceIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfacesRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacesRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupVpcAssociationsRequestWaitExtra:
    boto3_raw_data: (
        "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitExtraTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitExtraTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupVpcAssociationsRequestWait:
    boto3_raw_data: (
        "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeSecurityGroupVpcAssociationsRequestWaitTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupsRequestWait:
    boto3_raw_data: "type_defs.DescribeSecurityGroupsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    GroupIds = field("GroupIds")
    GroupNames = field("GroupNames")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotsRequestWait:
    boto3_raw_data: "type_defs.DescribeSnapshotsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    OwnerIds = field("OwnerIds")
    RestorableByUserIds = field("RestorableByUserIds")
    SnapshotIds = field("SnapshotIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSnapshotsRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotInstanceRequestsRequestWait:
    boto3_raw_data: "type_defs.DescribeSpotInstanceRequestsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    SpotInstanceRequestIds = field("SpotInstanceRequestIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotInstanceRequestsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotInstanceRequestsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStoreImageTasksRequestWait:
    boto3_raw_data: "type_defs.DescribeStoreImageTasksRequestWaitTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStoreImageTasksRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStoreImageTasksRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubnetsRequestWait:
    boto3_raw_data: "type_defs.DescribeSubnetsRequestWaitTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    SubnetIds = field("SubnetIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSubnetsRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubnetsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesRequestWaitExtraExtra:
    boto3_raw_data: "type_defs.DescribeVolumesRequestWaitExtraExtraTypeDef" = (
        dataclasses.field()
    )

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumesRequestWaitExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesRequestWaitExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeVolumesRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVolumesRequestWaitExtraTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesRequestWait:
    boto3_raw_data: "type_defs.DescribeVolumesRequestWaitTypeDef" = dataclasses.field()

    VolumeIds = field("VolumeIds")
    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVolumesRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcPeeringConnectionsRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeVpcPeeringConnectionsRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    VpcPeeringConnectionIds = field("VpcPeeringConnectionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcPeeringConnectionsRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcPeeringConnectionsRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcPeeringConnectionsRequestWait:
    boto3_raw_data: "type_defs.DescribeVpcPeeringConnectionsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")
    VpcPeeringConnectionIds = field("VpcPeeringConnectionIds")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcPeeringConnectionsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcPeeringConnectionsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcsRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeVpcsRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpcIds = field("VpcIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcsRequestWaitExtraTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcsRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcsRequestWait:
    boto3_raw_data: "type_defs.DescribeVpcsRequestWaitTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpcIds = field("VpcIds")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcsRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnConnectionsRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeVpnConnectionsRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpnConnectionIds = field("VpnConnectionIds")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpnConnectionsRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnConnectionsRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnConnectionsRequestWait:
    boto3_raw_data: "type_defs.DescribeVpnConnectionsRequestWaitTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    VpnConnectionIds = field("VpnConnectionIds")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpnConnectionsRequestWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnConnectionsRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetPasswordDataRequestWait:
    boto3_raw_data: "type_defs.GetPasswordDataRequestWaitTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    DryRun = field("DryRun")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetPasswordDataRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetPasswordDataRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastLaunchImagesSuccessItem:
    boto3_raw_data: "type_defs.DescribeFastLaunchImagesSuccessItemTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")
    ResourceType = field("ResourceType")

    @cached_property
    def SnapshotConfiguration(self):  # pragma: no cover
        return FastLaunchSnapshotConfigurationResponse.make_one(
            self.boto3_raw_data["SnapshotConfiguration"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return FastLaunchLaunchTemplateSpecificationResponse.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    MaxParallelLaunches = field("MaxParallelLaunches")
    OwnerId = field("OwnerId")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    StateTransitionTime = field("StateTransitionTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastLaunchImagesSuccessItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastLaunchImagesSuccessItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastLaunchResult:
    boto3_raw_data: "type_defs.DisableFastLaunchResultTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    ResourceType = field("ResourceType")

    @cached_property
    def SnapshotConfiguration(self):  # pragma: no cover
        return FastLaunchSnapshotConfigurationResponse.make_one(
            self.boto3_raw_data["SnapshotConfiguration"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return FastLaunchLaunchTemplateSpecificationResponse.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    MaxParallelLaunches = field("MaxParallelLaunches")
    OwnerId = field("OwnerId")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    StateTransitionTime = field("StateTransitionTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisableFastLaunchResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastLaunchResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastLaunchResult:
    boto3_raw_data: "type_defs.EnableFastLaunchResultTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    ResourceType = field("ResourceType")

    @cached_property
    def SnapshotConfiguration(self):  # pragma: no cover
        return FastLaunchSnapshotConfigurationResponse.make_one(
            self.boto3_raw_data["SnapshotConfiguration"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return FastLaunchLaunchTemplateSpecificationResponse.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    MaxParallelLaunches = field("MaxParallelLaunches")
    OwnerId = field("OwnerId")
    State = field("State")
    StateTransitionReason = field("StateTransitionReason")
    StateTransitionTime = field("StateTransitionTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableFastLaunchResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastLaunchResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastSnapshotRestoresResult:
    boto3_raw_data: "type_defs.DescribeFastSnapshotRestoresResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FastSnapshotRestores(self):  # pragma: no cover
        return DescribeFastSnapshotRestoreSuccessItem.make_many(
            self.boto3_raw_data["FastSnapshotRestores"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFastSnapshotRestoresResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastSnapshotRestoresResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationOfferingsResult:
    boto3_raw_data: "type_defs.DescribeHostReservationOfferingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def OfferingSet(self):  # pragma: no cover
        return HostOffering.make_many(self.boto3_raw_data["OfferingSet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHostReservationOfferingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostReservationOfferingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageReferencesResult:
    boto3_raw_data: "type_defs.DescribeImageReferencesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImageReferences(self):  # pragma: no cover
        return ImageReference.make_many(self.boto3_raw_data["ImageReferences"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageReferencesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageReferencesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportEntriesResult:
    boto3_raw_data: "type_defs.DescribeImageUsageReportEntriesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImageUsageReportEntries(self):  # pragma: no cover
        return ImageUsageReportEntry.make_many(
            self.boto3_raw_data["ImageUsageReportEntries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageUsageReportEntriesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportEntriesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceCreditSpecificationsResult:
    boto3_raw_data: "type_defs.DescribeInstanceCreditSpecificationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceCreditSpecifications(self):  # pragma: no cover
        return InstanceCreditSpecification.make_many(
            self.boto3_raw_data["InstanceCreditSpecifications"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceCreditSpecificationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceCreditSpecificationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTopologyResult:
    boto3_raw_data: "type_defs.DescribeInstanceTopologyResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Instances(self):  # pragma: no cover
        return InstanceTopology.make_many(self.boto3_raw_data["Instances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInstanceTopologyResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTopologyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypeOfferingsResult:
    boto3_raw_data: "type_defs.DescribeInstanceTypeOfferingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceTypeOfferings(self):  # pragma: no cover
        return InstanceTypeOffering.make_many(
            self.boto3_raw_data["InstanceTypeOfferings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceTypeOfferingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypeOfferingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLockedSnapshotsResult:
    boto3_raw_data: "type_defs.DescribeLockedSnapshotsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Snapshots(self):  # pragma: no cover
        return LockedSnapshotsInfo.make_many(self.boto3_raw_data["Snapshots"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeLockedSnapshotsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLockedSnapshotsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacHostsResult:
    boto3_raw_data: "type_defs.DescribeMacHostsResultTypeDef" = dataclasses.field()

    @cached_property
    def MacHosts(self):  # pragma: no cover
        return MacHost.make_many(self.boto3_raw_data["MacHosts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeMacHostsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacHostsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMovingAddressesResult:
    boto3_raw_data: "type_defs.DescribeMovingAddressesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MovingAddressStatuses(self):  # pragma: no cover
        return MovingAddressStatus.make_many(
            self.boto3_raw_data["MovingAddressStatuses"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeMovingAddressesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMovingAddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrefixListsResult:
    boto3_raw_data: "type_defs.DescribePrefixListsResultTypeDef" = dataclasses.field()

    @cached_property
    def PrefixLists(self):  # pragma: no cover
        return PrefixList.make_many(self.boto3_raw_data["PrefixLists"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePrefixListsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrefixListsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRegionsResult:
    boto3_raw_data: "type_defs.DescribeRegionsResultTypeDef" = dataclasses.field()

    @cached_property
    def Regions(self):  # pragma: no cover
        return Region.make_many(self.boto3_raw_data["Regions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRegionsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRegionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupReferencesResult:
    boto3_raw_data: "type_defs.DescribeSecurityGroupReferencesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityGroupReferenceSet(self):  # pragma: no cover
        return SecurityGroupReference.make_many(
            self.boto3_raw_data["SecurityGroupReferenceSet"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupReferencesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupReferencesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupVpcAssociationsResult:
    boto3_raw_data: "type_defs.DescribeSecurityGroupVpcAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityGroupVpcAssociations(self):  # pragma: no cover
        return SecurityGroupVpcAssociation.make_many(
            self.boto3_raw_data["SecurityGroupVpcAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSecurityGroupVpcAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupVpcAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotAttributeResult:
    boto3_raw_data: "type_defs.DescribeSnapshotAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    SnapshotId = field("SnapshotId")

    @cached_property
    def CreateVolumePermissions(self):  # pragma: no cover
        return CreateVolumePermission.make_many(
            self.boto3_raw_data["CreateVolumePermissions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSnapshotAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeAttributeResult:
    boto3_raw_data: "type_defs.DescribeVolumeAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AutoEnableIO(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["AutoEnableIO"])

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    VolumeId = field("VolumeId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVolumeAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumeAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotPriceHistoryResult:
    boto3_raw_data: "type_defs.DescribeSpotPriceHistoryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotPriceHistory(self):  # pragma: no cover
        return SpotPrice.make_many(self.boto3_raw_data["SpotPriceHistory"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSpotPriceHistoryResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotPriceHistoryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStoreImageTasksResult:
    boto3_raw_data: "type_defs.DescribeStoreImageTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StoreImageTaskResults(self):  # pragma: no cover
        return StoreImageTaskResult.make_many(
            self.boto3_raw_data["StoreImageTaskResults"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeStoreImageTasksResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStoreImageTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTagsResult:
    boto3_raw_data: "type_defs.DescribeTagsResultTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return TagDescription.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTagsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTagsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesModificationsResult:
    boto3_raw_data: "type_defs.DescribeVolumesModificationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VolumesModifications(self):  # pragma: no cover
        return VolumeModification.make_many(self.boto3_raw_data["VolumesModifications"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVolumesModificationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesModificationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVolumeResult:
    boto3_raw_data: "type_defs.ModifyVolumeResultTypeDef" = dataclasses.field()

    @cached_property
    def VolumeModification(self):  # pragma: no cover
        return VolumeModification.make_one(self.boto3_raw_data["VolumeModification"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVolumeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVolumeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcBlockPublicAccessOptionsResult:
    boto3_raw_data: "type_defs.DescribeVpcBlockPublicAccessOptionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessOptions(self):  # pragma: no cover
        return VpcBlockPublicAccessOptions.make_one(
            self.boto3_raw_data["VpcBlockPublicAccessOptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcBlockPublicAccessOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcBlockPublicAccessOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcBlockPublicAccessOptionsResult:
    boto3_raw_data: "type_defs.ModifyVpcBlockPublicAccessOptionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessOptions(self):  # pragma: no cover
        return VpcBlockPublicAccessOptions.make_one(
            self.boto3_raw_data["VpcBlockPublicAccessOptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcBlockPublicAccessOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcBlockPublicAccessOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FlowLog:
    boto3_raw_data: "type_defs.FlowLogTypeDef" = dataclasses.field()

    CreationTime = field("CreationTime")
    DeliverLogsErrorMessage = field("DeliverLogsErrorMessage")
    DeliverLogsPermissionArn = field("DeliverLogsPermissionArn")
    DeliverCrossAccountRole = field("DeliverCrossAccountRole")
    DeliverLogsStatus = field("DeliverLogsStatus")
    FlowLogId = field("FlowLogId")
    FlowLogStatus = field("FlowLogStatus")
    LogGroupName = field("LogGroupName")
    ResourceId = field("ResourceId")
    TrafficType = field("TrafficType")
    LogDestinationType = field("LogDestinationType")
    LogDestination = field("LogDestination")
    LogFormat = field("LogFormat")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    MaxAggregationInterval = field("MaxAggregationInterval")

    @cached_property
    def DestinationOptions(self):  # pragma: no cover
        return DestinationOptionsResponse.make_one(
            self.boto3_raw_data["DestinationOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FlowLogTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FlowLogTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoreStateErrorItem:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoreStateErrorItemTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def Error(self):  # pragma: no cover
        return DisableFastSnapshotRestoreStateError.make_one(
            self.boto3_raw_data["Error"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoreStateErrorItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoreStateErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableRouteServerPropagationResult:
    boto3_raw_data: "type_defs.DisableRouteServerPropagationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerPropagation(self):  # pragma: no cover
        return RouteServerPropagation.make_one(
            self.boto3_raw_data["RouteServerPropagation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableRouteServerPropagationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableRouteServerPropagationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableRouteServerPropagationResult:
    boto3_raw_data: "type_defs.EnableRouteServerPropagationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerPropagation(self):  # pragma: no cover
        return RouteServerPropagation.make_one(
            self.boto3_raw_data["RouteServerPropagation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableRouteServerPropagationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableRouteServerPropagationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerPropagationsResult:
    boto3_raw_data: "type_defs.GetRouteServerPropagationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerPropagations(self):  # pragma: no cover
        return RouteServerPropagation.make_many(
            self.boto3_raw_data["RouteServerPropagations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetRouteServerPropagationsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerPropagationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableTransitGatewayRouteTablePropagationResult:
    boto3_raw_data: (
        "type_defs.DisableTransitGatewayRouteTablePropagationResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Propagation(self):  # pragma: no cover
        return TransitGatewayPropagation.make_one(self.boto3_raw_data["Propagation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableTransitGatewayRouteTablePropagationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisableTransitGatewayRouteTablePropagationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableTransitGatewayRouteTablePropagationResult:
    boto3_raw_data: (
        "type_defs.EnableTransitGatewayRouteTablePropagationResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Propagation(self):  # pragma: no cover
        return TransitGatewayPropagation.make_one(self.boto3_raw_data["Propagation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableTransitGatewayRouteTablePropagationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.EnableTransitGatewayRouteTablePropagationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DiskImage:
    boto3_raw_data: "type_defs.DiskImageTypeDef" = dataclasses.field()

    Description = field("Description")

    @cached_property
    def Image(self):  # pragma: no cover
        return DiskImageDetail.make_one(self.boto3_raw_data["Image"])

    @cached_property
    def Volume(self):  # pragma: no cover
        return VolumeDetail.make_one(self.boto3_raw_data["Volume"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DiskImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DiskImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportVolumeRequest:
    boto3_raw_data: "type_defs.ImportVolumeRequestTypeDef" = dataclasses.field()

    @cached_property
    def Image(self):  # pragma: no cover
        return DiskImageDetail.make_one(self.boto3_raw_data["Image"])

    @cached_property
    def Volume(self):  # pragma: no cover
        return VolumeDetail.make_one(self.boto3_raw_data["Volume"])

    AvailabilityZoneId = field("AvailabilityZoneId")
    DryRun = field("DryRun")
    AvailabilityZone = field("AvailabilityZone")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportInstanceVolumeDetailItem:
    boto3_raw_data: "type_defs.ImportInstanceVolumeDetailItemTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    BytesConverted = field("BytesConverted")
    Description = field("Description")

    @cached_property
    def Image(self):  # pragma: no cover
        return DiskImageDescription.make_one(self.boto3_raw_data["Image"])

    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Volume(self):  # pragma: no cover
        return DiskImageVolumeDescription.make_one(self.boto3_raw_data["Volume"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ImportInstanceVolumeDetailItemTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportInstanceVolumeDetailItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportVolumeTaskDetails:
    boto3_raw_data: "type_defs.ImportVolumeTaskDetailsTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    BytesConverted = field("BytesConverted")
    Description = field("Description")

    @cached_property
    def Image(self):  # pragma: no cover
        return DiskImageDescription.make_one(self.boto3_raw_data["Image"])

    @cached_property
    def Volume(self):  # pragma: no cover
        return DiskImageVolumeDescription.make_one(self.boto3_raw_data["Volume"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportVolumeTaskDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportVolumeTaskDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStorageInfo:
    boto3_raw_data: "type_defs.InstanceStorageInfoTypeDef" = dataclasses.field()

    TotalSizeInGB = field("TotalSizeInGB")

    @cached_property
    def Disks(self):  # pragma: no cover
        return DiskInfo.make_many(self.boto3_raw_data["Disks"])

    NvmeSupport = field("NvmeSupport")
    EncryptionSupport = field("EncryptionSupport")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceStorageInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceStorageInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEndpointAssociation:
    boto3_raw_data: "type_defs.VpcEndpointAssociationTypeDef" = dataclasses.field()

    Id = field("Id")
    VpcEndpointId = field("VpcEndpointId")
    ServiceNetworkArn = field("ServiceNetworkArn")
    ServiceNetworkName = field("ServiceNetworkName")
    AssociatedResourceAccessibility = field("AssociatedResourceAccessibility")
    FailureReason = field("FailureReason")
    FailureCode = field("FailureCode")

    @cached_property
    def DnsEntry(self):  # pragma: no cover
        return DnsEntry.make_one(self.boto3_raw_data["DnsEntry"])

    @cached_property
    def PrivateDnsEntry(self):  # pragma: no cover
        return DnsEntry.make_one(self.boto3_raw_data["PrivateDnsEntry"])

    AssociatedResourceArn = field("AssociatedResourceArn")
    ResourceConfigurationGroupArn = field("ResourceConfigurationGroupArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcEndpointAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcEndpointAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEndpointConnection:
    boto3_raw_data: "type_defs.VpcEndpointConnectionTypeDef" = dataclasses.field()

    ServiceId = field("ServiceId")
    VpcEndpointId = field("VpcEndpointId")
    VpcEndpointOwner = field("VpcEndpointOwner")
    VpcEndpointState = field("VpcEndpointState")
    CreationTimestamp = field("CreationTimestamp")

    @cached_property
    def DnsEntries(self):  # pragma: no cover
        return DnsEntry.make_many(self.boto3_raw_data["DnsEntries"])

    NetworkLoadBalancerArns = field("NetworkLoadBalancerArns")
    GatewayLoadBalancerArns = field("GatewayLoadBalancerArns")
    IpAddressType = field("IpAddressType")
    VpcEndpointConnectionId = field("VpcEndpointConnectionId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcEndpointRegion = field("VpcEndpointRegion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcEndpointConnectionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcEndpointConnectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyClientVpnEndpointRequest:
    boto3_raw_data: "type_defs.ModifyClientVpnEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    ServerCertificateArn = field("ServerCertificateArn")

    @cached_property
    def ConnectionLogOptions(self):  # pragma: no cover
        return ConnectionLogOptions.make_one(
            self.boto3_raw_data["ConnectionLogOptions"]
        )

    @cached_property
    def DnsServers(self):  # pragma: no cover
        return DnsServersOptionsModifyStructure.make_one(
            self.boto3_raw_data["DnsServers"]
        )

    VpnPort = field("VpnPort")
    Description = field("Description")
    SplitTunnel = field("SplitTunnel")
    DryRun = field("DryRun")
    SecurityGroupIds = field("SecurityGroupIds")
    VpcId = field("VpcId")
    SelfServicePortal = field("SelfServicePortal")

    @cached_property
    def ClientConnectOptions(self):  # pragma: no cover
        return ClientConnectOptions.make_one(
            self.boto3_raw_data["ClientConnectOptions"]
        )

    SessionTimeoutHours = field("SessionTimeoutHours")

    @cached_property
    def ClientLoginBannerOptions(self):  # pragma: no cover
        return ClientLoginBannerOptions.make_one(
            self.boto3_raw_data["ClientLoginBannerOptions"]
        )

    @cached_property
    def ClientRouteEnforcementOptions(self):  # pragma: no cover
        return ClientRouteEnforcementOptions.make_one(
            self.boto3_raw_data["ClientRouteEnforcementOptions"]
        )

    DisconnectOnSessionTimeout = field("DisconnectOnSessionTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyClientVpnEndpointRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyClientVpnEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsInfo:
    boto3_raw_data: "type_defs.EbsInfoTypeDef" = dataclasses.field()

    EbsOptimizedSupport = field("EbsOptimizedSupport")
    EncryptionSupport = field("EncryptionSupport")

    @cached_property
    def EbsOptimizedInfo(self):  # pragma: no cover
        return EbsOptimizedInfo.make_one(self.boto3_raw_data["EbsOptimizedInfo"])

    NvmeSupport = field("NvmeSupport")
    MaximumEbsAttachments = field("MaximumEbsAttachments")
    AttachmentLimitType = field("AttachmentLimitType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EbsInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EbsInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceBlockDeviceMappingSpecification:
    boto3_raw_data: "type_defs.InstanceBlockDeviceMappingSpecificationTypeDef" = (
        dataclasses.field()
    )

    DeviceName = field("DeviceName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return EbsInstanceBlockDeviceSpecification.make_one(self.boto3_raw_data["Ebs"])

    VirtualName = field("VirtualName")
    NoDevice = field("NoDevice")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceBlockDeviceMappingSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceBlockDeviceMappingSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsInstanceBlockDevice:
    boto3_raw_data: "type_defs.EbsInstanceBlockDeviceTypeDef" = dataclasses.field()

    AttachTime = field("AttachTime")
    DeleteOnTermination = field("DeleteOnTermination")
    Status = field("Status")
    VolumeId = field("VolumeId")
    AssociatedResource = field("AssociatedResource")
    VolumeOwnerId = field("VolumeOwnerId")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EbsInstanceBlockDeviceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsInstanceBlockDeviceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplate:
    boto3_raw_data: "type_defs.LaunchTemplateTypeDef" = dataclasses.field()

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    CreateTime = field("CreateTime")
    CreatedBy = field("CreatedBy")
    DefaultVersionNumber = field("DefaultVersionNumber")
    LatestVersionNumber = field("LatestVersionNumber")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LaunchTemplateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsStatusSummary:
    boto3_raw_data: "type_defs.EbsStatusSummaryTypeDef" = dataclasses.field()

    @cached_property
    def Details(self):  # pragma: no cover
        return EbsStatusDetails.make_many(self.boto3_raw_data["Details"])

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EbsStatusSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsStatusSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EgressOnlyInternetGateway:
    boto3_raw_data: "type_defs.EgressOnlyInternetGatewayTypeDef" = dataclasses.field()

    @cached_property
    def Attachments(self):  # pragma: no cover
        return InternetGatewayAttachment.make_many(self.boto3_raw_data["Attachments"])

    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EgressOnlyInternetGatewayTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EgressOnlyInternetGatewayTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InternetGateway:
    boto3_raw_data: "type_defs.InternetGatewayTypeDef" = dataclasses.field()

    @cached_property
    def Attachments(self):  # pragma: no cover
        return InternetGatewayAttachment.make_many(self.boto3_raw_data["Attachments"])

    InternetGatewayId = field("InternetGatewayId")
    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InternetGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InternetGatewayTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ElasticGpus:
    boto3_raw_data: "type_defs.ElasticGpusTypeDef" = dataclasses.field()

    ElasticGpuId = field("ElasticGpuId")
    AvailabilityZone = field("AvailabilityZone")
    ElasticGpuType = field("ElasticGpuType")

    @cached_property
    def ElasticGpuHealth(self):  # pragma: no cover
        return ElasticGpuHealth.make_one(self.boto3_raw_data["ElasticGpuHealth"])

    ElasticGpuState = field("ElasticGpuState")
    InstanceId = field("InstanceId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ElasticGpusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ElasticGpusTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnaSrdSpecificationRequest:
    boto3_raw_data: "type_defs.EnaSrdSpecificationRequestTypeDef" = dataclasses.field()

    EnaSrdEnabled = field("EnaSrdEnabled")

    @cached_property
    def EnaSrdUdpSpecification(self):  # pragma: no cover
        return EnaSrdUdpSpecificationRequest.make_one(
            self.boto3_raw_data["EnaSrdUdpSpecification"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnaSrdSpecificationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnaSrdSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnaSrdSpecification:
    boto3_raw_data: "type_defs.EnaSrdSpecificationTypeDef" = dataclasses.field()

    EnaSrdEnabled = field("EnaSrdEnabled")

    @cached_property
    def EnaSrdUdpSpecification(self):  # pragma: no cover
        return EnaSrdUdpSpecification.make_one(
            self.boto3_raw_data["EnaSrdUdpSpecification"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnaSrdSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnaSrdSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastLaunchRequest:
    boto3_raw_data: "type_defs.EnableFastLaunchRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    ResourceType = field("ResourceType")

    @cached_property
    def SnapshotConfiguration(self):  # pragma: no cover
        return FastLaunchSnapshotConfigurationRequest.make_one(
            self.boto3_raw_data["SnapshotConfiguration"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return FastLaunchLaunchTemplateSpecificationRequest.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    MaxParallelLaunches = field("MaxParallelLaunches")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableFastLaunchRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastLaunchRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoreStateErrorItem:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoreStateErrorItemTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def Error(self):  # pragma: no cover
        return EnableFastSnapshotRestoreStateError.make_one(
            self.boto3_raw_data["Error"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableFastSnapshotRestoreStateErrorItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoreStateErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistoryRecordEntry:
    boto3_raw_data: "type_defs.HistoryRecordEntryTypeDef" = dataclasses.field()

    @cached_property
    def EventInformation(self):  # pragma: no cover
        return EventInformation.make_one(self.boto3_raw_data["EventInformation"])

    EventType = field("EventType")
    Timestamp = field("Timestamp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistoryRecordEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistoryRecordEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistoryRecord:
    boto3_raw_data: "type_defs.HistoryRecordTypeDef" = dataclasses.field()

    @cached_property
    def EventInformation(self):  # pragma: no cover
        return EventInformation.make_one(self.boto3_raw_data["EventInformation"])

    EventType = field("EventType")
    Timestamp = field("Timestamp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HistoryRecordTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HistoryRecordTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportImageResult:
    boto3_raw_data: "type_defs.ExportImageResultTypeDef" = dataclasses.field()

    Description = field("Description")
    DiskImageFormat = field("DiskImageFormat")
    ExportImageTaskId = field("ExportImageTaskId")
    ImageId = field("ImageId")
    RoleName = field("RoleName")
    Progress = field("Progress")

    @cached_property
    def S3ExportLocation(self):  # pragma: no cover
        return ExportTaskS3Location.make_one(self.boto3_raw_data["S3ExportLocation"])

    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExportImageResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportImageTask:
    boto3_raw_data: "type_defs.ExportImageTaskTypeDef" = dataclasses.field()

    Description = field("Description")
    ExportImageTaskId = field("ExportImageTaskId")
    ImageId = field("ImageId")
    Progress = field("Progress")

    @cached_property
    def S3ExportLocation(self):  # pragma: no cover
        return ExportTaskS3Location.make_one(self.boto3_raw_data["S3ExportLocation"])

    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExportImageTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExportImageTaskTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportTask:
    boto3_raw_data: "type_defs.ExportTaskTypeDef" = dataclasses.field()

    Description = field("Description")
    ExportTaskId = field("ExportTaskId")

    @cached_property
    def ExportToS3Task(self):  # pragma: no cover
        return ExportToS3Task.make_one(self.boto3_raw_data["ExportToS3Task"])

    @cached_property
    def InstanceExportDetails(self):  # pragma: no cover
        return InstanceExportDetails.make_one(
            self.boto3_raw_data["InstanceExportDetails"]
        )

    State = field("State")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExportTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExportTaskTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PathFilter:
    boto3_raw_data: "type_defs.PathFilterTypeDef" = dataclasses.field()

    SourceAddress = field("SourceAddress")

    @cached_property
    def SourcePortRange(self):  # pragma: no cover
        return FilterPortRange.make_one(self.boto3_raw_data["SourcePortRange"])

    DestinationAddress = field("DestinationAddress")

    @cached_property
    def DestinationPortRange(self):  # pragma: no cover
        return FilterPortRange.make_one(self.boto3_raw_data["DestinationPortRange"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PathFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PathFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetBlockDeviceMappingRequest:
    boto3_raw_data: "type_defs.FleetBlockDeviceMappingRequestTypeDef" = (
        dataclasses.field()
    )

    DeviceName = field("DeviceName")
    VirtualName = field("VirtualName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return FleetEbsBlockDeviceRequest.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FleetBlockDeviceMappingRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetBlockDeviceMappingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetSpotMaintenanceStrategiesRequest:
    boto3_raw_data: "type_defs.FleetSpotMaintenanceStrategiesRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityRebalance(self):  # pragma: no cover
        return FleetSpotCapacityRebalanceRequest.make_one(
            self.boto3_raw_data["CapacityRebalance"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FleetSpotMaintenanceStrategiesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetSpotMaintenanceStrategiesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetSpotMaintenanceStrategies:
    boto3_raw_data: "type_defs.FleetSpotMaintenanceStrategiesTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityRebalance(self):  # pragma: no cover
        return FleetSpotCapacityRebalance.make_one(
            self.boto3_raw_data["CapacityRebalance"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FleetSpotMaintenanceStrategiesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetSpotMaintenanceStrategiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaDeviceInfo:
    boto3_raw_data: "type_defs.FpgaDeviceInfoTypeDef" = dataclasses.field()

    Name = field("Name")
    Manufacturer = field("Manufacturer")
    Count = field("Count")

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return FpgaDeviceMemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FpgaDeviceInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FpgaDeviceInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaImageAttribute:
    boto3_raw_data: "type_defs.FpgaImageAttributeTypeDef" = dataclasses.field()

    FpgaImageId = field("FpgaImageId")
    Name = field("Name")
    Description = field("Description")

    @cached_property
    def LoadPermissions(self):  # pragma: no cover
        return LoadPermission.make_many(self.boto3_raw_data["LoadPermissions"])

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FpgaImageAttributeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FpgaImageAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaImage:
    boto3_raw_data: "type_defs.FpgaImageTypeDef" = dataclasses.field()

    FpgaImageId = field("FpgaImageId")
    FpgaImageGlobalId = field("FpgaImageGlobalId")
    Name = field("Name")
    Description = field("Description")
    ShellVersion = field("ShellVersion")

    @cached_property
    def PciId(self):  # pragma: no cover
        return PciId.make_one(self.boto3_raw_data["PciId"])

    @cached_property
    def State(self):  # pragma: no cover
        return FpgaImageState.make_one(self.boto3_raw_data["State"])

    CreateTime = field("CreateTime")
    UpdateTime = field("UpdateTime")
    OwnerId = field("OwnerId")
    OwnerAlias = field("OwnerAlias")

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    Public = field("Public")
    DataRetentionSupport = field("DataRetentionSupport")
    InstanceTypes = field("InstanceTypes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FpgaImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FpgaImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAssociatedIpv6PoolCidrsResult:
    boto3_raw_data: "type_defs.GetAssociatedIpv6PoolCidrsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Ipv6CidrAssociations(self):  # pragma: no cover
        return Ipv6CidrAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetAssociatedIpv6PoolCidrsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAssociatedIpv6PoolCidrsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetCapacityReservationUsageResult:
    boto3_raw_data: "type_defs.GetCapacityReservationUsageResultTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationId = field("CapacityReservationId")
    InstanceType = field("InstanceType")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    State = field("State")

    @cached_property
    def InstanceUsages(self):  # pragma: no cover
        return InstanceUsage.make_many(self.boto3_raw_data["InstanceUsages"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetCapacityReservationUsageResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetCapacityReservationUsageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDefaultCreditSpecificationResult:
    boto3_raw_data: "type_defs.GetDefaultCreditSpecificationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceFamilyCreditSpecification(self):  # pragma: no cover
        return InstanceFamilyCreditSpecification.make_one(
            self.boto3_raw_data["InstanceFamilyCreditSpecification"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetDefaultCreditSpecificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDefaultCreditSpecificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyDefaultCreditSpecificationResult:
    boto3_raw_data: "type_defs.ModifyDefaultCreditSpecificationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceFamilyCreditSpecification(self):  # pragma: no cover
        return InstanceFamilyCreditSpecification.make_one(
            self.boto3_raw_data["InstanceFamilyCreditSpecification"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyDefaultCreditSpecificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyDefaultCreditSpecificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetHostReservationPurchasePreviewResult:
    boto3_raw_data: "type_defs.GetHostReservationPurchasePreviewResultTypeDef" = (
        dataclasses.field()
    )

    CurrencyCode = field("CurrencyCode")

    @cached_property
    def Purchase(self):  # pragma: no cover
        return Purchase.make_many(self.boto3_raw_data["Purchase"])

    TotalHourlyPrice = field("TotalHourlyPrice")
    TotalUpfrontPrice = field("TotalUpfrontPrice")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetHostReservationPurchasePreviewResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetHostReservationPurchasePreviewResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseHostReservationResult:
    boto3_raw_data: "type_defs.PurchaseHostReservationResultTypeDef" = (
        dataclasses.field()
    )

    ClientToken = field("ClientToken")
    CurrencyCode = field("CurrencyCode")

    @cached_property
    def Purchase(self):  # pragma: no cover
        return Purchase.make_many(self.boto3_raw_data["Purchase"])

    TotalHourlyPrice = field("TotalHourlyPrice")
    TotalUpfrontPrice = field("TotalUpfrontPrice")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PurchaseHostReservationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseHostReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceMetadataDefaultsResult:
    boto3_raw_data: "type_defs.GetInstanceMetadataDefaultsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccountLevel(self):  # pragma: no cover
        return InstanceMetadataDefaultsResponse.make_one(
            self.boto3_raw_data["AccountLevel"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetInstanceMetadataDefaultsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInstanceMetadataDefaultsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceTypesFromInstanceRequirementsResult:
    boto3_raw_data: (
        "type_defs.GetInstanceTypesFromInstanceRequirementsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTypes(self):  # pragma: no cover
        return InstanceTypeInfoFromInstanceRequirements.make_many(
            self.boto3_raw_data["InstanceTypes"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetInstanceTypesFromInstanceRequirementsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetInstanceTypesFromInstanceRequirementsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamAddressHistoryResult:
    boto3_raw_data: "type_defs.GetIpamAddressHistoryResultTypeDef" = dataclasses.field()

    @cached_property
    def HistoryRecords(self):  # pragma: no cover
        return IpamAddressHistoryRecord.make_many(self.boto3_raw_data["HistoryRecords"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamAddressHistoryResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamAddressHistoryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListAssociationsResult:
    boto3_raw_data: "type_defs.GetManagedPrefixListAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixListAssociations(self):  # pragma: no cover
        return PrefixListAssociation.make_many(
            self.boto3_raw_data["PrefixListAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetManagedPrefixListAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetManagedPrefixListEntriesResult:
    boto3_raw_data: "type_defs.GetManagedPrefixListEntriesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Entries(self):  # pragma: no cover
        return PrefixListEntry.make_many(self.boto3_raw_data["Entries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetManagedPrefixListEntriesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetManagedPrefixListEntriesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstanceReservationValue:
    boto3_raw_data: "type_defs.ReservedInstanceReservationValueTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservationValue(self):  # pragma: no cover
        return ReservationValue.make_one(self.boto3_raw_data["ReservationValue"])

    ReservedInstanceId = field("ReservedInstanceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReservedInstanceReservationValueTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstanceReservationValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSpotPlacementScoresResult:
    boto3_raw_data: "type_defs.GetSpotPlacementScoresResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotPlacementScores(self):  # pragma: no cover
        return SpotPlacementScore.make_many(self.boto3_raw_data["SpotPlacementScores"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetSpotPlacementScoresResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSpotPlacementScoresResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayAttachmentPropagationsResult:
    boto3_raw_data: "type_defs.GetTransitGatewayAttachmentPropagationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayAttachmentPropagations(self):  # pragma: no cover
        return TransitGatewayAttachmentPropagation.make_many(
            self.boto3_raw_data["TransitGatewayAttachmentPropagations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayAttachmentPropagationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayAttachmentPropagationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTableAssociationsResult:
    boto3_raw_data: "type_defs.GetTransitGatewayRouteTableAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayRouteTableAssociation.make_many(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTableAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayRouteTableAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayRouteTablePropagationsResult:
    boto3_raw_data: "type_defs.GetTransitGatewayRouteTablePropagationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayRouteTablePropagations(self):  # pragma: no cover
        return TransitGatewayRouteTablePropagation.make_many(
            self.boto3_raw_data["TransitGatewayRouteTablePropagations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayRouteTablePropagationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayRouteTablePropagationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVerifiedAccessEndpointTargetsResult:
    boto3_raw_data: "type_defs.GetVerifiedAccessEndpointTargetsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessEndpointTargets(self):  # pragma: no cover
        return VerifiedAccessEndpointTarget.make_many(
            self.boto3_raw_data["VerifiedAccessEndpointTargets"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVerifiedAccessEndpointTargetsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVerifiedAccessEndpointTargetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnConnectionDeviceTypesResult:
    boto3_raw_data: "type_defs.GetVpnConnectionDeviceTypesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpnConnectionDeviceTypes(self):  # pragma: no cover
        return VpnConnectionDeviceType.make_many(
            self.boto3_raw_data["VpnConnectionDeviceTypes"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnConnectionDeviceTypesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVpnConnectionDeviceTypesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetVpnTunnelReplacementStatusResult:
    boto3_raw_data: "type_defs.GetVpnTunnelReplacementStatusResultTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    TransitGatewayId = field("TransitGatewayId")
    CustomerGatewayId = field("CustomerGatewayId")
    VpnGatewayId = field("VpnGatewayId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")

    @cached_property
    def MaintenanceDetails(self):  # pragma: no cover
        return MaintenanceDetails.make_one(self.boto3_raw_data["MaintenanceDetails"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetVpnTunnelReplacementStatusResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetVpnTunnelReplacementStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GpuDeviceInfo:
    boto3_raw_data: "type_defs.GpuDeviceInfoTypeDef" = dataclasses.field()

    Name = field("Name")
    Manufacturer = field("Manufacturer")
    Count = field("Count")

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return GpuDeviceMemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GpuDeviceInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GpuDeviceInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IamInstanceProfileAssociation:
    boto3_raw_data: "type_defs.IamInstanceProfileAssociationTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    InstanceId = field("InstanceId")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfile.make_one(self.boto3_raw_data["IamInstanceProfile"])

    State = field("State")
    Timestamp = field("Timestamp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IamInstanceProfileAssociationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IamInstanceProfileAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchPermissionModifications:
    boto3_raw_data: "type_defs.LaunchPermissionModificationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Add(self):  # pragma: no cover
        return LaunchPermission.make_many(self.boto3_raw_data["Add"])

    @cached_property
    def Remove(self):  # pragma: no cover
        return LaunchPermission.make_many(self.boto3_raw_data["Remove"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchPermissionModificationsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchPermissionModificationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageDiskContainer:
    boto3_raw_data: "type_defs.ImageDiskContainerTypeDef" = dataclasses.field()

    Description = field("Description")
    DeviceName = field("DeviceName")
    Format = field("Format")
    SnapshotId = field("SnapshotId")
    Url = field("Url")

    @cached_property
    def UserBucket(self):  # pragma: no cover
        return UserBucket.make_one(self.boto3_raw_data["UserBucket"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageDiskContainerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageDiskContainerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotDiskContainer:
    boto3_raw_data: "type_defs.SnapshotDiskContainerTypeDef" = dataclasses.field()

    Description = field("Description")
    Format = field("Format")
    Url = field("Url")

    @cached_property
    def UserBucket(self):  # pragma: no cover
        return UserBucket.make_one(self.boto3_raw_data["UserBucket"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotDiskContainerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotDiskContainerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesInRecycleBinResult:
    boto3_raw_data: "type_defs.ListImagesInRecycleBinResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Images(self):  # pragma: no cover
        return ImageRecycleBinInfo.make_many(self.boto3_raw_data["Images"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListImagesInRecycleBinResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesInRecycleBinResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalGatewayRouteTable:
    boto3_raw_data: "type_defs.LocalGatewayRouteTableTypeDef" = dataclasses.field()

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    LocalGatewayRouteTableArn = field("LocalGatewayRouteTableArn")
    LocalGatewayId = field("LocalGatewayId")
    OutpostArn = field("OutpostArn")
    OwnerId = field("OwnerId")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    Mode = field("Mode")

    @cached_property
    def StateReason(self):  # pragma: no cover
        return StateReason.make_one(self.boto3_raw_data["StateReason"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LocalGatewayRouteTableTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalGatewayRouteTableTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageResourceTypeRequest:
    boto3_raw_data: "type_defs.ImageUsageResourceTypeRequestTypeDef" = (
        dataclasses.field()
    )

    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTypeOptions(self):  # pragma: no cover
        return ImageUsageResourceTypeOptionRequest.make_many(
            self.boto3_raw_data["ResourceTypeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ImageUsageResourceTypeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageResourceTypeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageResourceType:
    boto3_raw_data: "type_defs.ImageUsageResourceTypeTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTypeOptions(self):  # pragma: no cover
        return ImageUsageResourceTypeOption.make_many(
            self.boto3_raw_data["ResourceTypeOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageUsageResourceTypeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageResourceTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportInstanceLaunchSpecification:
    boto3_raw_data: "type_defs.ImportInstanceLaunchSpecificationTypeDef" = (
        dataclasses.field()
    )

    Architecture = field("Architecture")
    GroupNames = field("GroupNames")
    GroupIds = field("GroupIds")
    AdditionalInfo = field("AdditionalInfo")

    @cached_property
    def UserData(self):  # pragma: no cover
        return UserData.make_one(self.boto3_raw_data["UserData"])

    InstanceType = field("InstanceType")

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    Monitoring = field("Monitoring")
    SubnetId = field("SubnetId")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportInstanceLaunchSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportInstanceLaunchSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceDeviceInfo:
    boto3_raw_data: "type_defs.InferenceDeviceInfoTypeDef" = dataclasses.field()

    Count = field("Count")
    Name = field("Name")
    Manufacturer = field("Manufacturer")

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return InferenceDeviceMemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceDeviceInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceDeviceInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceAttachmentEnaSrdSpecification:
    boto3_raw_data: "type_defs.InstanceAttachmentEnaSrdSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdEnabled = field("EnaSrdEnabled")

    @cached_property
    def EnaSrdUdpSpecification(self):  # pragma: no cover
        return InstanceAttachmentEnaSrdUdpSpecification.make_one(
            self.boto3_raw_data["EnaSrdUdpSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceAttachmentEnaSrdSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceAttachmentEnaSrdSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceConnectEndpointPublicDnsNames:
    boto3_raw_data: "type_defs.InstanceConnectEndpointPublicDnsNamesTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Ipv4(self):  # pragma: no cover
        return InstanceConnectEndpointDnsNames.make_one(self.boto3_raw_data["Ipv4"])

    @cached_property
    def Dualstack(self):  # pragma: no cover
        return InstanceConnectEndpointDnsNames.make_one(
            self.boto3_raw_data["Dualstack"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceConnectEndpointPublicDnsNamesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceConnectEndpointPublicDnsNamesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCreditSpecificationRequest:
    boto3_raw_data: "type_defs.ModifyInstanceCreditSpecificationRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceCreditSpecifications(self):  # pragma: no cover
        return InstanceCreditSpecificationRequest.make_many(
            self.boto3_raw_data["InstanceCreditSpecifications"]
        )

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceCreditSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceCreditSpecificationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceImageMetadata:
    boto3_raw_data: "type_defs.InstanceImageMetadataTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    InstanceType = field("InstanceType")
    LaunchTime = field("LaunchTime")
    AvailabilityZone = field("AvailabilityZone")
    ZoneId = field("ZoneId")

    @cached_property
    def State(self):  # pragma: no cover
        return InstanceState.make_one(self.boto3_raw_data["State"])

    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ImageMetadata(self):  # pragma: no cover
        return ImageMetadata.make_one(self.boto3_raw_data["ImageMetadata"])

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceImageMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceImageMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStateChange:
    boto3_raw_data: "type_defs.InstanceStateChangeTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")

    @cached_property
    def CurrentState(self):  # pragma: no cover
        return InstanceState.make_one(self.boto3_raw_data["CurrentState"])

    @cached_property
    def PreviousState(self):  # pragma: no cover
        return InstanceState.make_one(self.boto3_raw_data["PreviousState"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceStateChangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceStateChangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceMetadataOptionsResult:
    boto3_raw_data: "type_defs.ModifyInstanceMetadataOptionsResultTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")

    @cached_property
    def InstanceMetadataOptions(self):  # pragma: no cover
        return InstanceMetadataOptionsResponse.make_one(
            self.boto3_raw_data["InstanceMetadataOptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceMetadataOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceMetadataOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMonitoring:
    boto3_raw_data: "type_defs.InstanceMonitoringTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return Monitoring.make_one(self.boto3_raw_data["Monitoring"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceMonitoringTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMonitoringTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstancePrivateIpAddress:
    boto3_raw_data: "type_defs.InstancePrivateIpAddressTypeDef" = dataclasses.field()

    @cached_property
    def Association(self):  # pragma: no cover
        return InstanceNetworkInterfaceAssociation.make_one(
            self.boto3_raw_data["Association"]
        )

    Primary = field("Primary")
    PrivateDnsName = field("PrivateDnsName")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstancePrivateIpAddressTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstancePrivateIpAddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStatusSummary:
    boto3_raw_data: "type_defs.InstanceStatusSummaryTypeDef" = dataclasses.field()

    @cached_property
    def Details(self):  # pragma: no cover
        return InstanceStatusDetails.make_many(self.boto3_raw_data["Details"])

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceStatusSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceStatusSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceEventStartTimeResult:
    boto3_raw_data: "type_defs.ModifyInstanceEventStartTimeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Event(self):  # pragma: no cover
        return InstanceStatusEvent.make_one(self.boto3_raw_data["Event"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceEventStartTimeResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceEventStartTimeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpPermissionOutput:
    boto3_raw_data: "type_defs.IpPermissionOutputTypeDef" = dataclasses.field()

    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @cached_property
    def UserIdGroupPairs(self):  # pragma: no cover
        return UserIdGroupPair.make_many(self.boto3_raw_data["UserIdGroupPairs"])

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return IpRange.make_many(self.boto3_raw_data["IpRanges"])

    @cached_property
    def Ipv6Ranges(self):  # pragma: no cover
        return Ipv6Range.make_many(self.boto3_raw_data["Ipv6Ranges"])

    @cached_property
    def PrefixListIds(self):  # pragma: no cover
        return PrefixListId.make_many(self.boto3_raw_data["PrefixListIds"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpPermissionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpPermissionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpPermission:
    boto3_raw_data: "type_defs.IpPermissionTypeDef" = dataclasses.field()

    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @cached_property
    def UserIdGroupPairs(self):  # pragma: no cover
        return UserIdGroupPair.make_many(self.boto3_raw_data["UserIdGroupPairs"])

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return IpRange.make_many(self.boto3_raw_data["IpRanges"])

    @cached_property
    def Ipv6Ranges(self):  # pragma: no cover
        return Ipv6Range.make_many(self.boto3_raw_data["Ipv6Ranges"])

    @cached_property
    def PrefixListIds(self):  # pragma: no cover
        return PrefixListId.make_many(self.boto3_raw_data["PrefixListIds"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpPermissionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpPermissionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaleIpPermission:
    boto3_raw_data: "type_defs.StaleIpPermissionTypeDef" = dataclasses.field()

    FromPort = field("FromPort")
    IpProtocol = field("IpProtocol")
    IpRanges = field("IpRanges")
    PrefixListIds = field("PrefixListIds")
    ToPort = field("ToPort")

    @cached_property
    def UserIdGroupPairs(self):  # pragma: no cover
        return UserIdGroupPair.make_many(self.boto3_raw_data["UserIdGroupPairs"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StaleIpPermissionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StaleIpPermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionIpamPoolCidrRequest:
    boto3_raw_data: "type_defs.ProvisionIpamPoolCidrRequestTypeDef" = (
        dataclasses.field()
    )

    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")
    Cidr = field("Cidr")

    @cached_property
    def CidrAuthorizationContext(self):  # pragma: no cover
        return IpamCidrAuthorizationContext.make_one(
            self.boto3_raw_data["CidrAuthorizationContext"]
        )

    NetmaskLength = field("NetmaskLength")
    ClientToken = field("ClientToken")
    VerificationMethod = field("VerificationMethod")
    IpamExternalResourceVerificationTokenId = field(
        "IpamExternalResourceVerificationTokenId"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionIpamPoolCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionIpamPoolCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamDiscoveredAccount:
    boto3_raw_data: "type_defs.IpamDiscoveredAccountTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    DiscoveryRegion = field("DiscoveryRegion")

    @cached_property
    def FailureReason(self):  # pragma: no cover
        return IpamDiscoveryFailureReason.make_one(self.boto3_raw_data["FailureReason"])

    LastAttemptedDiscoveryTime = field("LastAttemptedDiscoveryTime")
    LastSuccessfulDiscoveryTime = field("LastSuccessfulDiscoveryTime")
    OrganizationalUnitId = field("OrganizationalUnitId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamDiscoveredAccountTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamDiscoveredAccountTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamDiscoveredResourceCidr:
    boto3_raw_data: "type_defs.IpamDiscoveredResourceCidrTypeDef" = dataclasses.field()

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    ResourceRegion = field("ResourceRegion")
    ResourceId = field("ResourceId")
    ResourceOwnerId = field("ResourceOwnerId")
    ResourceCidr = field("ResourceCidr")
    IpSource = field("IpSource")
    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return IpamResourceTag.make_many(self.boto3_raw_data["ResourceTags"])

    IpUsage = field("IpUsage")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    NetworkInterfaceAttachmentStatus = field("NetworkInterfaceAttachmentStatus")
    SampleTime = field("SampleTime")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamDiscoveredResourceCidrTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamDiscoveredResourceCidrTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamResourceCidr:
    boto3_raw_data: "type_defs.IpamResourceCidrTypeDef" = dataclasses.field()

    IpamId = field("IpamId")
    IpamScopeId = field("IpamScopeId")
    IpamPoolId = field("IpamPoolId")
    ResourceRegion = field("ResourceRegion")
    ResourceOwnerId = field("ResourceOwnerId")
    ResourceId = field("ResourceId")
    ResourceName = field("ResourceName")
    ResourceCidr = field("ResourceCidr")
    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return IpamResourceTag.make_many(self.boto3_raw_data["ResourceTags"])

    IpUsage = field("IpUsage")
    ComplianceStatus = field("ComplianceStatus")
    ManagementState = field("ManagementState")
    OverlapStatus = field("OverlapStatus")
    VpcId = field("VpcId")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamResourceCidrTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamResourceCidrTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipam:
    boto3_raw_data: "type_defs.IpamTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    IpamId = field("IpamId")
    IpamArn = field("IpamArn")
    IpamRegion = field("IpamRegion")
    PublicDefaultScopeId = field("PublicDefaultScopeId")
    PrivateDefaultScopeId = field("PrivateDefaultScopeId")
    ScopeCount = field("ScopeCount")
    Description = field("Description")

    @cached_property
    def OperatingRegions(self):  # pragma: no cover
        return IpamOperatingRegion.make_many(self.boto3_raw_data["OperatingRegions"])

    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DefaultResourceDiscoveryId = field("DefaultResourceDiscoveryId")
    DefaultResourceDiscoveryAssociationId = field(
        "DefaultResourceDiscoveryAssociationId"
    )
    ResourceDiscoveryAssociationCount = field("ResourceDiscoveryAssociationCount")
    StateMessage = field("StateMessage")
    Tier = field("Tier")
    EnablePrivateGua = field("EnablePrivateGua")
    MeteredAccount = field("MeteredAccount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpamTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamResourceDiscovery:
    boto3_raw_data: "type_defs.IpamResourceDiscoveryTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    IpamResourceDiscoveryArn = field("IpamResourceDiscoveryArn")
    IpamResourceDiscoveryRegion = field("IpamResourceDiscoveryRegion")
    Description = field("Description")

    @cached_property
    def OperatingRegions(self):  # pragma: no cover
        return IpamOperatingRegion.make_many(self.boto3_raw_data["OperatingRegions"])

    IsDefault = field("IsDefault")
    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def OrganizationalUnitExclusions(self):  # pragma: no cover
        return IpamOrganizationalUnitExclusion.make_many(
            self.boto3_raw_data["OrganizationalUnitExclusions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamResourceDiscoveryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamResourceDiscoveryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPoolCidr:
    boto3_raw_data: "type_defs.IpamPoolCidrTypeDef" = dataclasses.field()

    Cidr = field("Cidr")
    State = field("State")

    @cached_property
    def FailureReason(self):  # pragma: no cover
        return IpamPoolCidrFailureReason.make_one(self.boto3_raw_data["FailureReason"])

    IpamPoolCidrId = field("IpamPoolCidrId")
    NetmaskLength = field("NetmaskLength")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamPoolCidrTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpamPoolCidrTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPool:
    boto3_raw_data: "type_defs.IpamPoolTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    IpamPoolId = field("IpamPoolId")
    SourceIpamPoolId = field("SourceIpamPoolId")
    IpamPoolArn = field("IpamPoolArn")
    IpamScopeArn = field("IpamScopeArn")
    IpamScopeType = field("IpamScopeType")
    IpamArn = field("IpamArn")
    IpamRegion = field("IpamRegion")
    Locale = field("Locale")
    PoolDepth = field("PoolDepth")
    State = field("State")
    StateMessage = field("StateMessage")
    Description = field("Description")
    AutoImport = field("AutoImport")
    PubliclyAdvertisable = field("PubliclyAdvertisable")
    AddressFamily = field("AddressFamily")
    AllocationMinNetmaskLength = field("AllocationMinNetmaskLength")
    AllocationMaxNetmaskLength = field("AllocationMaxNetmaskLength")
    AllocationDefaultNetmaskLength = field("AllocationDefaultNetmaskLength")

    @cached_property
    def AllocationResourceTags(self):  # pragma: no cover
        return IpamResourceTag.make_many(self.boto3_raw_data["AllocationResourceTags"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    AwsService = field("AwsService")
    PublicIpSource = field("PublicIpSource")

    @cached_property
    def SourceResource(self):  # pragma: no cover
        return IpamPoolSourceResource.make_one(self.boto3_raw_data["SourceResource"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpamPoolTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpamPoolTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamPublicAddressTags:
    boto3_raw_data: "type_defs.IpamPublicAddressTagsTypeDef" = dataclasses.field()

    @cached_property
    def EipTags(self):  # pragma: no cover
        return IpamPublicAddressTag.make_many(self.boto3_raw_data["EipTags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamPublicAddressTagsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamPublicAddressTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6Pool:
    boto3_raw_data: "type_defs.Ipv6PoolTypeDef" = dataclasses.field()

    PoolId = field("PoolId")
    Description = field("Description")

    @cached_property
    def PoolCidrBlocks(self):  # pragma: no cover
        return PoolCidrBlock.make_many(self.boto3_raw_data["PoolCidrBlocks"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.Ipv6PoolTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.Ipv6PoolTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateBlockDeviceMappingRequest:
    boto3_raw_data: "type_defs.LaunchTemplateBlockDeviceMappingRequestTypeDef" = (
        dataclasses.field()
    )

    DeviceName = field("DeviceName")
    VirtualName = field("VirtualName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return LaunchTemplateEbsBlockDeviceRequest.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateBlockDeviceMappingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateBlockDeviceMappingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateBlockDeviceMapping:
    boto3_raw_data: "type_defs.LaunchTemplateBlockDeviceMappingTypeDef" = (
        dataclasses.field()
    )

    DeviceName = field("DeviceName")
    VirtualName = field("VirtualName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return LaunchTemplateEbsBlockDevice.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateBlockDeviceMappingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateBlockDeviceMappingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateEnaSrdSpecification:
    boto3_raw_data: "type_defs.LaunchTemplateEnaSrdSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnaSrdEnabled = field("EnaSrdEnabled")

    @cached_property
    def EnaSrdUdpSpecification(self):  # pragma: no cover
        return LaunchTemplateEnaSrdUdpSpecification.make_one(
            self.boto3_raw_data["EnaSrdUdpSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateEnaSrdSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateEnaSrdSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMarketOptions:
    boto3_raw_data: "type_defs.LaunchTemplateInstanceMarketOptionsTypeDef" = (
        dataclasses.field()
    )

    MarketType = field("MarketType")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return LaunchTemplateSpotMarketOptions.make_one(
            self.boto3_raw_data["SpotOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMarketOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateInstanceMarketOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSnapshotsInRecycleBinResult:
    boto3_raw_data: "type_defs.ListSnapshotsInRecycleBinResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Snapshots(self):  # pragma: no cover
        return SnapshotRecycleBinInfo.make_many(self.boto3_raw_data["Snapshots"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListSnapshotsInRecycleBinResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSnapshotsInRecycleBinResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadPermissionModifications:
    boto3_raw_data: "type_defs.LoadPermissionModificationsTypeDef" = dataclasses.field()

    @cached_property
    def Add(self):  # pragma: no cover
        return LoadPermissionRequest.make_many(self.boto3_raw_data["Add"])

    @cached_property
    def Remove(self):  # pragma: no cover
        return LoadPermissionRequest.make_many(self.boto3_raw_data["Remove"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LoadPermissionModificationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadPermissionModificationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MacModificationTask:
    boto3_raw_data: "type_defs.MacModificationTaskTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    MacModificationTaskId = field("MacModificationTaskId")

    @cached_property
    def MacSystemIntegrityProtectionConfig(self):  # pragma: no cover
        return MacSystemIntegrityProtectionConfiguration.make_one(
            self.boto3_raw_data["MacSystemIntegrityProtectionConfig"]
        )

    StartTime = field("StartTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    TaskState = field("TaskState")
    TaskType = field("TaskType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MacModificationTaskTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MacModificationTaskTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MediaDeviceInfo:
    boto3_raw_data: "type_defs.MediaDeviceInfoTypeDef" = dataclasses.field()

    Count = field("Count")
    Name = field("Name")
    Manufacturer = field("Manufacturer")

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return MediaDeviceMemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MediaDeviceInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MediaDeviceInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamRequest:
    boto3_raw_data: "type_defs.ModifyIpamRequestTypeDef" = dataclasses.field()

    IpamId = field("IpamId")
    DryRun = field("DryRun")
    Description = field("Description")

    @cached_property
    def AddOperatingRegions(self):  # pragma: no cover
        return AddIpamOperatingRegion.make_many(
            self.boto3_raw_data["AddOperatingRegions"]
        )

    @cached_property
    def RemoveOperatingRegions(self):  # pragma: no cover
        return RemoveIpamOperatingRegion.make_many(
            self.boto3_raw_data["RemoveOperatingRegions"]
        )

    Tier = field("Tier")
    EnablePrivateGua = field("EnablePrivateGua")
    MeteredAccount = field("MeteredAccount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamResourceDiscoveryRequest:
    boto3_raw_data: "type_defs.ModifyIpamResourceDiscoveryRequestTypeDef" = (
        dataclasses.field()
    )

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    DryRun = field("DryRun")
    Description = field("Description")

    @cached_property
    def AddOperatingRegions(self):  # pragma: no cover
        return AddIpamOperatingRegion.make_many(
            self.boto3_raw_data["AddOperatingRegions"]
        )

    @cached_property
    def RemoveOperatingRegions(self):  # pragma: no cover
        return RemoveIpamOperatingRegion.make_many(
            self.boto3_raw_data["RemoveOperatingRegions"]
        )

    @cached_property
    def AddOrganizationalUnitExclusions(self):  # pragma: no cover
        return AddIpamOrganizationalUnitExclusion.make_many(
            self.boto3_raw_data["AddOrganizationalUnitExclusions"]
        )

    @cached_property
    def RemoveOrganizationalUnitExclusions(self):  # pragma: no cover
        return RemoveIpamOrganizationalUnitExclusion.make_many(
            self.boto3_raw_data["RemoveOrganizationalUnitExclusions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyIpamResourceDiscoveryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamResourceDiscoveryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyManagedPrefixListRequest:
    boto3_raw_data: "type_defs.ModifyManagedPrefixListRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")
    DryRun = field("DryRun")
    CurrentVersion = field("CurrentVersion")
    PrefixListName = field("PrefixListName")

    @cached_property
    def AddEntries(self):  # pragma: no cover
        return AddPrefixListEntry.make_many(self.boto3_raw_data["AddEntries"])

    @cached_property
    def RemoveEntries(self):  # pragma: no cover
        return RemovePrefixListEntry.make_many(self.boto3_raw_data["RemoveEntries"])

    MaxEntries = field("MaxEntries")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyManagedPrefixListRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyManagedPrefixListRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyReservedInstancesRequest:
    boto3_raw_data: "type_defs.ModifyReservedInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesIds = field("ReservedInstancesIds")

    @cached_property
    def TargetConfigurations(self):  # pragma: no cover
        return ReservedInstancesConfiguration.make_many(
            self.boto3_raw_data["TargetConfigurations"]
        )

    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyReservedInstancesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyReservedInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesModificationResult:
    boto3_raw_data: "type_defs.ReservedInstancesModificationResultTypeDef" = (
        dataclasses.field()
    )

    ReservedInstancesId = field("ReservedInstancesId")

    @cached_property
    def TargetConfiguration(self):  # pragma: no cover
        return ReservedInstancesConfiguration.make_one(
            self.boto3_raw_data["TargetConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReservedInstancesModificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesModificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayRequest:
    boto3_raw_data: "type_defs.ModifyTransitGatewayRequestTypeDef" = dataclasses.field()

    TransitGatewayId = field("TransitGatewayId")
    Description = field("Description")

    @cached_property
    def Options(self):  # pragma: no cover
        return ModifyTransitGatewayOptions.make_one(self.boto3_raw_data["Options"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyTransitGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayVpcAttachmentRequest:
    boto3_raw_data: "type_defs.ModifyTransitGatewayVpcAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    AddSubnetIds = field("AddSubnetIds")
    RemoveSubnetIds = field("RemoveSubnetIds")

    @cached_property
    def Options(self):  # pragma: no cover
        return ModifyTransitGatewayVpcAttachmentRequestOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTransitGatewayVpcAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayVpcAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointCidrOptions:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointCidrOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointCidrOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointCidrOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointEniOptions:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointEniOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")
    Port = field("Port")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointEniOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointEniOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointLoadBalancerOptions:
    boto3_raw_data: (
        "type_defs.ModifyVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
    ) = dataclasses.field()

    SubnetIds = field("SubnetIds")
    Protocol = field("Protocol")
    Port = field("Port")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVerifiedAccessEndpointLoadBalancerOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointPolicyResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointPolicyResultTypeDef" = (
        dataclasses.field()
    )

    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationResponse.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointPolicyResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointPolicyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessGroupPolicyResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessGroupPolicyResultTypeDef" = (
        dataclasses.field()
    )

    PolicyEnabled = field("PolicyEnabled")
    PolicyDocument = field("PolicyDocument")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationResponse.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessGroupPolicyResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessGroupPolicyResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessGroup:
    boto3_raw_data: "type_defs.VerifiedAccessGroupTypeDef" = dataclasses.field()

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Description = field("Description")
    Owner = field("Owner")
    VerifiedAccessGroupArn = field("VerifiedAccessGroupArn")
    CreationTime = field("CreationTime")
    LastUpdatedTime = field("LastUpdatedTime")
    DeletionTime = field("DeletionTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationResponse.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessTrustProviderRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessTrustProviderRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")

    @cached_property
    def OidcOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessTrustProviderOidcOptions.make_one(
            self.boto3_raw_data["OidcOptions"]
        )

    @cached_property
    def DeviceOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessTrustProviderDeviceOptions.make_one(
            self.boto3_raw_data["DeviceOptions"]
        )

    Description = field("Description")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def NativeApplicationOidcOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessNativeApplicationOidcOptions.make_one(
            self.boto3_raw_data["NativeApplicationOidcOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessTrustProviderRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessTrustProviderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcPeeringConnectionOptionsRequest:
    boto3_raw_data: "type_defs.ModifyVpcPeeringConnectionOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @cached_property
    def AccepterPeeringConnectionOptions(self):  # pragma: no cover
        return PeeringConnectionOptionsRequest.make_one(
            self.boto3_raw_data["AccepterPeeringConnectionOptions"]
        )

    DryRun = field("DryRun")

    @cached_property
    def RequesterPeeringConnectionOptions(self):  # pragma: no cover
        return PeeringConnectionOptionsRequest.make_one(
            self.boto3_raw_data["RequesterPeeringConnectionOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcPeeringConnectionOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcPeeringConnectionOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcPeeringConnectionOptionsResult:
    boto3_raw_data: "type_defs.ModifyVpcPeeringConnectionOptionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccepterPeeringConnectionOptions(self):  # pragma: no cover
        return PeeringConnectionOptions.make_one(
            self.boto3_raw_data["AccepterPeeringConnectionOptions"]
        )

    @cached_property
    def RequesterPeeringConnectionOptions(self):  # pragma: no cover
        return PeeringConnectionOptions.make_one(
            self.boto3_raw_data["RequesterPeeringConnectionOptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcPeeringConnectionOptionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcPeeringConnectionOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NatGateway:
    boto3_raw_data: "type_defs.NatGatewayTypeDef" = dataclasses.field()

    CreateTime = field("CreateTime")
    DeleteTime = field("DeleteTime")
    FailureCode = field("FailureCode")
    FailureMessage = field("FailureMessage")

    @cached_property
    def NatGatewayAddresses(self):  # pragma: no cover
        return NatGatewayAddress.make_many(self.boto3_raw_data["NatGatewayAddresses"])

    NatGatewayId = field("NatGatewayId")

    @cached_property
    def ProvisionedBandwidth(self):  # pragma: no cover
        return ProvisionedBandwidth.make_one(
            self.boto3_raw_data["ProvisionedBandwidth"]
        )

    State = field("State")
    SubnetId = field("SubnetId")
    VpcId = field("VpcId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ConnectivityType = field("ConnectivityType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NatGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NatGatewayTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInfo:
    boto3_raw_data: "type_defs.NetworkInfoTypeDef" = dataclasses.field()

    NetworkPerformance = field("NetworkPerformance")
    MaximumNetworkInterfaces = field("MaximumNetworkInterfaces")
    MaximumNetworkCards = field("MaximumNetworkCards")
    DefaultNetworkCardIndex = field("DefaultNetworkCardIndex")

    @cached_property
    def NetworkCards(self):  # pragma: no cover
        return NetworkCardInfo.make_many(self.boto3_raw_data["NetworkCards"])

    Ipv4AddressesPerInterface = field("Ipv4AddressesPerInterface")
    Ipv6AddressesPerInterface = field("Ipv6AddressesPerInterface")
    Ipv6Supported = field("Ipv6Supported")
    EnaSupport = field("EnaSupport")
    EfaSupported = field("EfaSupported")

    @cached_property
    def EfaInfo(self):  # pragma: no cover
        return EfaInfo.make_one(self.boto3_raw_data["EfaInfo"])

    EncryptionInTransitSupported = field("EncryptionInTransitSupported")
    EnaSrdSupported = field("EnaSrdSupported")
    BandwidthWeightings = field("BandwidthWeightings")
    FlexibleEnaQueuesSupport = field("FlexibleEnaQueuesSupport")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfacePrivateIpAddress:
    boto3_raw_data: "type_defs.NetworkInterfacePrivateIpAddressTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Association(self):  # pragma: no cover
        return NetworkInterfaceAssociation.make_one(self.boto3_raw_data["Association"])

    Primary = field("Primary")
    PrivateDnsName = field("PrivateDnsName")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NetworkInterfacePrivateIpAddressTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfacePrivateIpAddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfacePermission:
    boto3_raw_data: "type_defs.NetworkInterfacePermissionTypeDef" = dataclasses.field()

    NetworkInterfacePermissionId = field("NetworkInterfacePermissionId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    AwsAccountId = field("AwsAccountId")
    AwsService = field("AwsService")
    Permission = field("Permission")

    @cached_property
    def PermissionState(self):  # pragma: no cover
        return NetworkInterfacePermissionState.make_one(
            self.boto3_raw_data["PermissionState"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfacePermissionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfacePermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeuronDeviceInfo:
    boto3_raw_data: "type_defs.NeuronDeviceInfoTypeDef" = dataclasses.field()

    Count = field("Count")
    Name = field("Name")

    @cached_property
    def CoreInfo(self):  # pragma: no cover
        return NeuronDeviceCoreInfo.make_one(self.boto3_raw_data["CoreInfo"])

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return NeuronDeviceMemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NeuronDeviceInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NeuronDeviceInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessTrustProvider:
    boto3_raw_data: "type_defs.VerifiedAccessTrustProviderTypeDef" = dataclasses.field()

    VerifiedAccessTrustProviderId = field("VerifiedAccessTrustProviderId")
    Description = field("Description")
    TrustProviderType = field("TrustProviderType")
    UserTrustProviderType = field("UserTrustProviderType")
    DeviceTrustProviderType = field("DeviceTrustProviderType")

    @cached_property
    def OidcOptions(self):  # pragma: no cover
        return OidcOptions.make_one(self.boto3_raw_data["OidcOptions"])

    @cached_property
    def DeviceOptions(self):  # pragma: no cover
        return DeviceOptions.make_one(self.boto3_raw_data["DeviceOptions"])

    PolicyReferenceName = field("PolicyReferenceName")
    CreationTime = field("CreationTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationResponse.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def NativeApplicationOidcOptions(self):  # pragma: no cover
        return NativeApplicationOidcOptions.make_one(
            self.boto3_raw_data["NativeApplicationOidcOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessTrustProviderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessTrustProviderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PathRequestFilter:
    boto3_raw_data: "type_defs.PathRequestFilterTypeDef" = dataclasses.field()

    SourceAddress = field("SourceAddress")

    @cached_property
    def SourcePortRange(self):  # pragma: no cover
        return RequestFilterPortRange.make_one(self.boto3_raw_data["SourcePortRange"])

    DestinationAddress = field("DestinationAddress")

    @cached_property
    def DestinationPortRange(self):  # pragma: no cover
        return RequestFilterPortRange.make_one(
            self.boto3_raw_data["DestinationPortRange"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PathRequestFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PathRequestFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PathStatementRequest:
    boto3_raw_data: "type_defs.PathStatementRequestTypeDef" = dataclasses.field()

    @cached_property
    def PacketHeaderStatement(self):  # pragma: no cover
        return PacketHeaderStatementRequest.make_one(
            self.boto3_raw_data["PacketHeaderStatement"]
        )

    @cached_property
    def ResourceStatement(self):  # pragma: no cover
        return ResourceStatementRequest.make_one(
            self.boto3_raw_data["ResourceStatement"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PathStatementRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PathStatementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThroughResourcesStatementRequest:
    boto3_raw_data: "type_defs.ThroughResourcesStatementRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ResourceStatement(self):  # pragma: no cover
        return ResourceStatementRequest.make_one(
            self.boto3_raw_data["ResourceStatement"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ThroughResourcesStatementRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThroughResourcesStatementRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PathStatement:
    boto3_raw_data: "type_defs.PathStatementTypeDef" = dataclasses.field()

    @cached_property
    def PacketHeaderStatement(self):  # pragma: no cover
        return PacketHeaderStatement.make_one(
            self.boto3_raw_data["PacketHeaderStatement"]
        )

    @cached_property
    def ResourceStatement(self):  # pragma: no cover
        return ResourceStatement.make_one(self.boto3_raw_data["ResourceStatement"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PathStatementTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PathStatementTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThroughResourcesStatement:
    boto3_raw_data: "type_defs.ThroughResourcesStatementTypeDef" = dataclasses.field()

    @cached_property
    def ResourceStatement(self):  # pragma: no cover
        return ResourceStatement.make_one(self.boto3_raw_data["ResourceStatement"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThroughResourcesStatementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThroughResourcesStatementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesListing:
    boto3_raw_data: "type_defs.ReservedInstancesListingTypeDef" = dataclasses.field()

    ClientToken = field("ClientToken")
    CreateDate = field("CreateDate")

    @cached_property
    def InstanceCounts(self):  # pragma: no cover
        return InstanceCount.make_many(self.boto3_raw_data["InstanceCounts"])

    @cached_property
    def PriceSchedules(self):  # pragma: no cover
        return PriceSchedule.make_many(self.boto3_raw_data["PriceSchedules"])

    ReservedInstancesId = field("ReservedInstancesId")
    ReservedInstancesListingId = field("ReservedInstancesListingId")
    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    UpdateDate = field("UpdateDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedInstancesListingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesListingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionPublicIpv4PoolCidrResult:
    boto3_raw_data: "type_defs.ProvisionPublicIpv4PoolCidrResultTypeDef" = (
        dataclasses.field()
    )

    PoolId = field("PoolId")

    @cached_property
    def PoolAddressRange(self):  # pragma: no cover
        return PublicIpv4PoolRange.make_one(self.boto3_raw_data["PoolAddressRange"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProvisionPublicIpv4PoolCidrResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionPublicIpv4PoolCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PublicIpv4Pool:
    boto3_raw_data: "type_defs.PublicIpv4PoolTypeDef" = dataclasses.field()

    PoolId = field("PoolId")
    Description = field("Description")

    @cached_property
    def PoolAddressRanges(self):  # pragma: no cover
        return PublicIpv4PoolRange.make_many(self.boto3_raw_data["PoolAddressRanges"])

    TotalAddressCount = field("TotalAddressCount")
    TotalAvailableAddressCount = field("TotalAvailableAddressCount")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PublicIpv4PoolTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PublicIpv4PoolTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseScheduledInstancesRequest:
    boto3_raw_data: "type_defs.PurchaseScheduledInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PurchaseRequests(self):  # pragma: no cover
        return PurchaseRequest.make_many(self.boto3_raw_data["PurchaseRequests"])

    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PurchaseScheduledInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseScheduledInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseReservedInstancesOfferingRequest:
    boto3_raw_data: "type_defs.PurchaseReservedInstancesOfferingRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceCount = field("InstanceCount")
    ReservedInstancesOfferingId = field("ReservedInstancesOfferingId")
    PurchaseTime = field("PurchaseTime")
    DryRun = field("DryRun")

    @cached_property
    def LimitPrice(self):  # pragma: no cover
        return ReservedInstanceLimitPrice.make_one(self.boto3_raw_data["LimitPrice"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PurchaseReservedInstancesOfferingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseReservedInstancesOfferingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesOffering:
    boto3_raw_data: "type_defs.ReservedInstancesOfferingTypeDef" = dataclasses.field()

    CurrencyCode = field("CurrencyCode")
    InstanceTenancy = field("InstanceTenancy")
    Marketplace = field("Marketplace")
    OfferingClass = field("OfferingClass")
    OfferingType = field("OfferingType")

    @cached_property
    def PricingDetails(self):  # pragma: no cover
        return PricingDetail.make_many(self.boto3_raw_data["PricingDetails"])

    @cached_property
    def RecurringCharges(self):  # pragma: no cover
        return RecurringCharge.make_many(self.boto3_raw_data["RecurringCharges"])

    Scope = field("Scope")
    AvailabilityZoneId = field("AvailabilityZoneId")
    ReservedInstancesOfferingId = field("ReservedInstancesOfferingId")
    InstanceType = field("InstanceType")
    AvailabilityZone = field("AvailabilityZone")
    Duration = field("Duration")
    UsagePrice = field("UsagePrice")
    FixedPrice = field("FixedPrice")
    ProductDescription = field("ProductDescription")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedInstancesOfferingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstances:
    boto3_raw_data: "type_defs.ReservedInstancesTypeDef" = dataclasses.field()

    CurrencyCode = field("CurrencyCode")
    InstanceTenancy = field("InstanceTenancy")
    OfferingClass = field("OfferingClass")
    OfferingType = field("OfferingType")

    @cached_property
    def RecurringCharges(self):  # pragma: no cover
        return RecurringCharge.make_many(self.boto3_raw_data["RecurringCharges"])

    Scope = field("Scope")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    AvailabilityZoneId = field("AvailabilityZoneId")
    ReservedInstancesId = field("ReservedInstancesId")
    InstanceType = field("InstanceType")
    AvailabilityZone = field("AvailabilityZone")
    Start = field("Start")
    End = field("End")
    Duration = field("Duration")
    UsagePrice = field("UsagePrice")
    FixedPrice = field("FixedPrice")
    InstanceCount = field("InstanceCount")
    ProductDescription = field("ProductDescription")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ReservedInstancesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupRule:
    boto3_raw_data: "type_defs.SecurityGroupRuleTypeDef" = dataclasses.field()

    SecurityGroupRuleId = field("SecurityGroupRuleId")
    GroupId = field("GroupId")
    GroupOwnerId = field("GroupOwnerId")
    IsEgress = field("IsEgress")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIpv4 = field("CidrIpv4")
    CidrIpv6 = field("CidrIpv6")
    PrefixListId = field("PrefixListId")

    @cached_property
    def ReferencedGroupInfo(self):  # pragma: no cover
        return ReferencedSecurityGroup.make_one(
            self.boto3_raw_data["ReferencedGroupInfo"]
        )

    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SecurityGroupRuleArn = field("SecurityGroupRuleArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterInstanceEventNotificationAttributesRequest:
    boto3_raw_data: (
        "type_defs.RegisterInstanceEventNotificationAttributesRequestTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstanceTagAttribute(self):  # pragma: no cover
        return RegisterInstanceTagAttributeRequest.make_one(
            self.boto3_raw_data["InstanceTagAttribute"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterInstanceEventNotificationAttributesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterInstanceEventNotificationAttributesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterTransitGatewayMulticastGroupMembersResult:
    boto3_raw_data: (
        "type_defs.RegisterTransitGatewayMulticastGroupMembersResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def RegisteredMulticastGroupMembers(self):  # pragma: no cover
        return TransitGatewayMulticastRegisteredGroupMembers.make_one(
            self.boto3_raw_data["RegisteredMulticastGroupMembers"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterTransitGatewayMulticastGroupMembersResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterTransitGatewayMulticastGroupMembersResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterTransitGatewayMulticastGroupSourcesResult:
    boto3_raw_data: (
        "type_defs.RegisterTransitGatewayMulticastGroupSourcesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def RegisteredMulticastGroupSources(self):  # pragma: no cover
        return TransitGatewayMulticastRegisteredGroupSources.make_one(
            self.boto3_raw_data["RegisteredMulticastGroupSources"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterTransitGatewayMulticastGroupSourcesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterTransitGatewayMulticastGroupSourcesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceTypeRequest:
    boto3_raw_data: "type_defs.ResourceTypeRequestTypeDef" = dataclasses.field()

    ResourceType = field("ResourceType")

    @cached_property
    def ResourceTypeOptions(self):  # pragma: no cover
        return ResourceTypeOption.make_many(self.boto3_raw_data["ResourceTypeOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceTypeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceTypeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerPeer:
    boto3_raw_data: "type_defs.RouteServerPeerTypeDef" = dataclasses.field()

    RouteServerPeerId = field("RouteServerPeerId")
    RouteServerEndpointId = field("RouteServerEndpointId")
    RouteServerId = field("RouteServerId")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    State = field("State")
    FailureReason = field("FailureReason")
    EndpointEniId = field("EndpointEniId")
    EndpointEniAddress = field("EndpointEniAddress")
    PeerAddress = field("PeerAddress")

    @cached_property
    def BgpOptions(self):  # pragma: no cover
        return RouteServerBgpOptions.make_one(self.boto3_raw_data["BgpOptions"])

    @cached_property
    def BgpStatus(self):  # pragma: no cover
        return RouteServerBgpStatus.make_one(self.boto3_raw_data["BgpStatus"])

    @cached_property
    def BfdStatus(self):  # pragma: no cover
        return RouteServerBfdStatus.make_one(self.boto3_raw_data["BfdStatus"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteServerPeerTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RouteServerPeerTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteServerRoute:
    boto3_raw_data: "type_defs.RouteServerRouteTypeDef" = dataclasses.field()

    RouteServerEndpointId = field("RouteServerEndpointId")
    RouteServerPeerId = field("RouteServerPeerId")

    @cached_property
    def RouteInstallationDetails(self):  # pragma: no cover
        return RouteServerRouteInstallationDetail.make_many(
            self.boto3_raw_data["RouteInstallationDetails"]
        )

    RouteStatus = field("RouteStatus")
    Prefix = field("Prefix")
    AsPaths = field("AsPaths")
    Med = field("Med")
    NextHopIp = field("NextHopIp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteServerRouteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RouteServerRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StorageOutput:
    boto3_raw_data: "type_defs.StorageOutputTypeDef" = dataclasses.field()

    @cached_property
    def S3(self):  # pragma: no cover
        return S3StorageOutput.make_one(self.boto3_raw_data["S3"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StorageOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StorageOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstanceAvailability:
    boto3_raw_data: "type_defs.ScheduledInstanceAvailabilityTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZone = field("AvailabilityZone")
    AvailableInstanceCount = field("AvailableInstanceCount")
    FirstSlotStartTime = field("FirstSlotStartTime")
    HourlyPrice = field("HourlyPrice")
    InstanceType = field("InstanceType")
    MaxTermDurationInDays = field("MaxTermDurationInDays")
    MinTermDurationInDays = field("MinTermDurationInDays")
    NetworkPlatform = field("NetworkPlatform")
    Platform = field("Platform")
    PurchaseToken = field("PurchaseToken")

    @cached_property
    def Recurrence(self):  # pragma: no cover
        return ScheduledInstanceRecurrence.make_one(self.boto3_raw_data["Recurrence"])

    SlotDurationInHours = field("SlotDurationInHours")
    TotalScheduledInstanceHours = field("TotalScheduledInstanceHours")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ScheduledInstanceAvailabilityTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstanceAvailabilityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstance:
    boto3_raw_data: "type_defs.ScheduledInstanceTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    CreateDate = field("CreateDate")
    HourlyPrice = field("HourlyPrice")
    InstanceCount = field("InstanceCount")
    InstanceType = field("InstanceType")
    NetworkPlatform = field("NetworkPlatform")
    NextSlotStartTime = field("NextSlotStartTime")
    Platform = field("Platform")
    PreviousSlotEndTime = field("PreviousSlotEndTime")

    @cached_property
    def Recurrence(self):  # pragma: no cover
        return ScheduledInstanceRecurrence.make_one(self.boto3_raw_data["Recurrence"])

    ScheduledInstanceId = field("ScheduledInstanceId")
    SlotDurationInHours = field("SlotDurationInHours")
    TermEndDate = field("TermEndDate")
    TermStartDate = field("TermStartDate")
    TotalScheduledInstanceHours = field("TotalScheduledInstanceHours")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ScheduledInstanceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesBlockDeviceMapping:
    boto3_raw_data: "type_defs.ScheduledInstancesBlockDeviceMappingTypeDef" = (
        dataclasses.field()
    )

    DeviceName = field("DeviceName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return ScheduledInstancesEbs.make_one(self.boto3_raw_data["Ebs"])

    NoDevice = field("NoDevice")
    VirtualName = field("VirtualName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstancesBlockDeviceMappingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesBlockDeviceMappingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesNetworkInterface:
    boto3_raw_data: "type_defs.ScheduledInstancesNetworkInterfaceTypeDef" = (
        dataclasses.field()
    )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return ScheduledInstancesIpv6Address.make_many(
            self.boto3_raw_data["Ipv6Addresses"]
        )

    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddressConfigs(self):  # pragma: no cover
        return ScheduledInstancesPrivateIpAddressConfig.make_many(
            self.boto3_raw_data["PrivateIpAddressConfigs"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstancesNetworkInterfaceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesNetworkInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTransitGatewayMulticastGroupsResult:
    boto3_raw_data: "type_defs.SearchTransitGatewayMulticastGroupsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MulticastGroups(self):  # pragma: no cover
        return TransitGatewayMulticastGroup.make_many(
            self.boto3_raw_data["MulticastGroups"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTransitGatewayMulticastGroupsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTransitGatewayMulticastGroupsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroupRuleUpdate:
    boto3_raw_data: "type_defs.SecurityGroupRuleUpdateTypeDef" = dataclasses.field()

    SecurityGroupRuleId = field("SecurityGroupRuleId")

    @cached_property
    def SecurityGroupRule(self):  # pragma: no cover
        return SecurityGroupRuleRequest.make_one(
            self.boto3_raw_data["SecurityGroupRule"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupRuleUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityGroupRuleUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceDetail:
    boto3_raw_data: "type_defs.ServiceDetailTypeDef" = dataclasses.field()

    ServiceName = field("ServiceName")
    ServiceId = field("ServiceId")

    @cached_property
    def ServiceType(self):  # pragma: no cover
        return ServiceTypeDetail.make_many(self.boto3_raw_data["ServiceType"])

    ServiceRegion = field("ServiceRegion")
    AvailabilityZoneIds = field("AvailabilityZoneIds")
    AvailabilityZones = field("AvailabilityZones")
    Owner = field("Owner")
    BaseEndpointDnsNames = field("BaseEndpointDnsNames")
    PrivateDnsName = field("PrivateDnsName")

    @cached_property
    def PrivateDnsNames(self):  # pragma: no cover
        return PrivateDnsDetails.make_many(self.boto3_raw_data["PrivateDnsNames"])

    VpcEndpointPolicySupported = field("VpcEndpointPolicySupported")
    AcceptanceRequired = field("AcceptanceRequired")
    ManagesVpcEndpoints = field("ManagesVpcEndpoints")
    PayerResponsibility = field("PayerResponsibility")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    PrivateDnsNameVerificationState = field("PrivateDnsNameVerificationState")
    SupportedIpAddressTypes = field("SupportedIpAddressTypes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ServiceDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ServiceDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceConfiguration:
    boto3_raw_data: "type_defs.ServiceConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def ServiceType(self):  # pragma: no cover
        return ServiceTypeDetail.make_many(self.boto3_raw_data["ServiceType"])

    ServiceId = field("ServiceId")
    ServiceName = field("ServiceName")
    ServiceState = field("ServiceState")
    AvailabilityZoneIds = field("AvailabilityZoneIds")
    AvailabilityZones = field("AvailabilityZones")
    AcceptanceRequired = field("AcceptanceRequired")
    ManagesVpcEndpoints = field("ManagesVpcEndpoints")
    NetworkLoadBalancerArns = field("NetworkLoadBalancerArns")
    GatewayLoadBalancerArns = field("GatewayLoadBalancerArns")
    SupportedIpAddressTypes = field("SupportedIpAddressTypes")
    BaseEndpointDnsNames = field("BaseEndpointDnsNames")
    PrivateDnsName = field("PrivateDnsName")

    @cached_property
    def PrivateDnsNameConfiguration(self):  # pragma: no cover
        return PrivateDnsNameConfiguration.make_one(
            self.boto3_raw_data["PrivateDnsNameConfiguration"]
        )

    PayerResponsibility = field("PayerResponsibility")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def SupportedRegions(self):  # pragma: no cover
        return SupportedRegionDetail.make_many(self.boto3_raw_data["SupportedRegions"])

    RemoteAccessEnabled = field("RemoteAccessEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ServiceConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotDetail:
    boto3_raw_data: "type_defs.SnapshotDetailTypeDef" = dataclasses.field()

    Description = field("Description")
    DeviceName = field("DeviceName")
    DiskImageSize = field("DiskImageSize")
    Format = field("Format")
    Progress = field("Progress")
    SnapshotId = field("SnapshotId")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    Url = field("Url")

    @cached_property
    def UserBucket(self):  # pragma: no cover
        return UserBucketDetails.make_one(self.boto3_raw_data["UserBucket"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SnapshotDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotTaskDetail:
    boto3_raw_data: "type_defs.SnapshotTaskDetailTypeDef" = dataclasses.field()

    Description = field("Description")
    DiskImageSize = field("DiskImageSize")
    Encrypted = field("Encrypted")
    Format = field("Format")
    KmsKeyId = field("KmsKeyId")
    Progress = field("Progress")
    SnapshotId = field("SnapshotId")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    Url = field("Url")

    @cached_property
    def UserBucket(self):  # pragma: no cover
        return UserBucketDetails.make_one(self.boto3_raw_data["UserBucket"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotTaskDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotTaskDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotMaintenanceStrategies:
    boto3_raw_data: "type_defs.SpotMaintenanceStrategiesTypeDef" = dataclasses.field()

    @cached_property
    def CapacityRebalance(self):  # pragma: no cover
        return SpotCapacityRebalance.make_one(self.boto3_raw_data["CapacityRebalance"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotMaintenanceStrategiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotMaintenanceStrategiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotDatafeedSubscription:
    boto3_raw_data: "type_defs.SpotDatafeedSubscriptionTypeDef" = dataclasses.field()

    Bucket = field("Bucket")

    @cached_property
    def Fault(self):  # pragma: no cover
        return SpotInstanceStateFault.make_one(self.boto3_raw_data["Fault"])

    OwnerId = field("OwnerId")
    Prefix = field("Prefix")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotDatafeedSubscriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotDatafeedSubscriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDomainAssociation:
    boto3_raw_data: "type_defs.TransitGatewayMulticastDomainAssociationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceOwnerId = field("ResourceOwnerId")

    @cached_property
    def Subnet(self):  # pragma: no cover
        return SubnetAssociation.make_one(self.boto3_raw_data["Subnet"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastDomainAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastDomainAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDomainAssociations:
    boto3_raw_data: "type_defs.TransitGatewayMulticastDomainAssociationsTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    ResourceId = field("ResourceId")
    ResourceType = field("ResourceType")
    ResourceOwnerId = field("ResourceOwnerId")

    @cached_property
    def Subnets(self):  # pragma: no cover
        return SubnetAssociation.make_many(self.boto3_raw_data["Subnets"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayMulticastDomainAssociationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastDomainAssociationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubnetIpv6CidrBlockAssociation:
    boto3_raw_data: "type_defs.SubnetIpv6CidrBlockAssociationTypeDef" = (
        dataclasses.field()
    )

    AssociationId = field("AssociationId")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def Ipv6CidrBlockState(self):  # pragma: no cover
        return SubnetCidrBlockState.make_one(self.boto3_raw_data["Ipv6CidrBlockState"])

    Ipv6AddressAttribute = field("Ipv6AddressAttribute")
    IpSource = field("IpSource")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SubnetIpv6CidrBlockAssociationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubnetIpv6CidrBlockAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEndpoint:
    boto3_raw_data: "type_defs.VpcEndpointTypeDef" = dataclasses.field()

    VpcEndpointId = field("VpcEndpointId")
    VpcEndpointType = field("VpcEndpointType")
    VpcId = field("VpcId")
    ServiceName = field("ServiceName")
    State = field("State")
    PolicyDocument = field("PolicyDocument")
    RouteTableIds = field("RouteTableIds")
    SubnetIds = field("SubnetIds")

    @cached_property
    def Groups(self):  # pragma: no cover
        return SecurityGroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    IpAddressType = field("IpAddressType")

    @cached_property
    def DnsOptions(self):  # pragma: no cover
        return DnsOptions.make_one(self.boto3_raw_data["DnsOptions"])

    PrivateDnsEnabled = field("PrivateDnsEnabled")
    RequesterManaged = field("RequesterManaged")
    NetworkInterfaceIds = field("NetworkInterfaceIds")

    @cached_property
    def DnsEntries(self):  # pragma: no cover
        return DnsEntry.make_many(self.boto3_raw_data["DnsEntries"])

    CreationTimestamp = field("CreationTimestamp")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    OwnerId = field("OwnerId")

    @cached_property
    def LastError(self):  # pragma: no cover
        return LastError.make_one(self.boto3_raw_data["LastError"])

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return SubnetIpPrefixes.make_many(self.boto3_raw_data["Ipv4Prefixes"])

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return SubnetIpPrefixes.make_many(self.boto3_raw_data["Ipv6Prefixes"])

    FailureReason = field("FailureReason")
    ServiceNetworkArn = field("ServiceNetworkArn")
    ResourceConfigurationArn = field("ResourceConfigurationArn")
    ServiceRegion = field("ServiceRegion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcEndpointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcEndpointTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetReservationValue:
    boto3_raw_data: "type_defs.TargetReservationValueTypeDef" = dataclasses.field()

    @cached_property
    def ReservationValue(self):  # pragma: no cover
        return ReservationValue.make_one(self.boto3_raw_data["ReservationValue"])

    @cached_property
    def TargetConfiguration(self):  # pragma: no cover
        return TargetConfiguration.make_one(self.boto3_raw_data["TargetConfiguration"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetReservationValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetReservationValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetGroupsConfigOutput:
    boto3_raw_data: "type_defs.TargetGroupsConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def TargetGroups(self):  # pragma: no cover
        return TargetGroup.make_many(self.boto3_raw_data["TargetGroups"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetGroupsConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetGroupsConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetGroupsConfig:
    boto3_raw_data: "type_defs.TargetGroupsConfigTypeDef" = dataclasses.field()

    @cached_property
    def TargetGroups(self):  # pragma: no cover
        return TargetGroup.make_many(self.boto3_raw_data["TargetGroups"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TargetGroupsConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetGroupsConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorFilterRule:
    boto3_raw_data: "type_defs.TrafficMirrorFilterRuleTypeDef" = dataclasses.field()

    TrafficMirrorFilterRuleId = field("TrafficMirrorFilterRuleId")
    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    TrafficDirection = field("TrafficDirection")
    RuleNumber = field("RuleNumber")
    RuleAction = field("RuleAction")
    Protocol = field("Protocol")

    @cached_property
    def DestinationPortRange(self):  # pragma: no cover
        return TrafficMirrorPortRange.make_one(
            self.boto3_raw_data["DestinationPortRange"]
        )

    @cached_property
    def SourcePortRange(self):  # pragma: no cover
        return TrafficMirrorPortRange.make_one(self.boto3_raw_data["SourcePortRange"])

    DestinationCidrBlock = field("DestinationCidrBlock")
    SourceCidrBlock = field("SourceCidrBlock")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficMirrorFilterRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorFilterRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayAttachment:
    boto3_raw_data: "type_defs.TransitGatewayAttachmentTypeDef" = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    TransitGatewayId = field("TransitGatewayId")
    TransitGatewayOwnerId = field("TransitGatewayOwnerId")
    ResourceOwnerId = field("ResourceOwnerId")
    ResourceType = field("ResourceType")
    ResourceId = field("ResourceId")
    State = field("State")

    @cached_property
    def Association(self):  # pragma: no cover
        return TransitGatewayAttachmentAssociation.make_one(
            self.boto3_raw_data["Association"]
        )

    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayAttachmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayConnectPeerConfiguration:
    boto3_raw_data: "type_defs.TransitGatewayConnectPeerConfigurationTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAddress = field("TransitGatewayAddress")
    PeerAddress = field("PeerAddress")
    InsideCidrBlocks = field("InsideCidrBlocks")
    Protocol = field("Protocol")

    @cached_property
    def BgpConfigurations(self):  # pragma: no cover
        return TransitGatewayAttachmentBgpConfiguration.make_many(
            self.boto3_raw_data["BgpConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayConnectPeerConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayConnectPeerConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayConnect:
    boto3_raw_data: "type_defs.TransitGatewayConnectTypeDef" = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    TransportTransitGatewayAttachmentId = field("TransportTransitGatewayAttachmentId")
    TransitGatewayId = field("TransitGatewayId")
    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayConnectOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayConnectTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayConnectTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayMulticastDomain:
    boto3_raw_data: "type_defs.TransitGatewayMulticastDomainTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayMulticastDomainId = field("TransitGatewayMulticastDomainId")
    TransitGatewayId = field("TransitGatewayId")
    TransitGatewayMulticastDomainArn = field("TransitGatewayMulticastDomainArn")
    OwnerId = field("OwnerId")

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayMulticastDomainOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayMulticastDomainTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayMulticastDomainTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGateway:
    boto3_raw_data: "type_defs.TransitGatewayTypeDef" = dataclasses.field()

    TransitGatewayId = field("TransitGatewayId")
    TransitGatewayArn = field("TransitGatewayArn")
    State = field("State")
    OwnerId = field("OwnerId")
    Description = field("Description")
    CreationTime = field("CreationTime")

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TransitGatewayTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPeeringAttachment:
    boto3_raw_data: "type_defs.TransitGatewayPeeringAttachmentTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    AccepterTransitGatewayAttachmentId = field("AccepterTransitGatewayAttachmentId")

    @cached_property
    def RequesterTgwInfo(self):  # pragma: no cover
        return PeeringTgwInfo.make_one(self.boto3_raw_data["RequesterTgwInfo"])

    @cached_property
    def AccepterTgwInfo(self):  # pragma: no cover
        return PeeringTgwInfo.make_one(self.boto3_raw_data["AccepterTgwInfo"])

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayPeeringAttachmentOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    @cached_property
    def Status(self):  # pragma: no cover
        return PeeringAttachmentStatus.make_one(self.boto3_raw_data["Status"])

    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayPeeringAttachmentTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPeeringAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPolicyRule:
    boto3_raw_data: "type_defs.TransitGatewayPolicyRuleTypeDef" = dataclasses.field()

    SourceCidrBlock = field("SourceCidrBlock")
    SourcePortRange = field("SourcePortRange")
    DestinationCidrBlock = field("DestinationCidrBlock")
    DestinationPortRange = field("DestinationPortRange")
    Protocol = field("Protocol")

    @cached_property
    def MetaData(self):  # pragma: no cover
        return TransitGatewayPolicyRuleMetaData.make_one(
            self.boto3_raw_data["MetaData"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayPolicyRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPolicyRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPrefixListReference:
    boto3_raw_data: "type_defs.TransitGatewayPrefixListReferenceTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    PrefixListId = field("PrefixListId")
    PrefixListOwnerId = field("PrefixListOwnerId")
    State = field("State")
    Blackhole = field("Blackhole")

    @cached_property
    def TransitGatewayAttachment(self):  # pragma: no cover
        return TransitGatewayPrefixListAttachment.make_one(
            self.boto3_raw_data["TransitGatewayAttachment"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TransitGatewayPrefixListReferenceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPrefixListReferenceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayRoute:
    boto3_raw_data: "type_defs.TransitGatewayRouteTypeDef" = dataclasses.field()

    DestinationCidrBlock = field("DestinationCidrBlock")
    PrefixListId = field("PrefixListId")
    TransitGatewayRouteTableAnnouncementId = field(
        "TransitGatewayRouteTableAnnouncementId"
    )

    @cached_property
    def TransitGatewayAttachments(self):  # pragma: no cover
        return TransitGatewayRouteAttachment.make_many(
            self.boto3_raw_data["TransitGatewayAttachments"]
        )

    Type = field("Type")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayRouteTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayRouteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayVpcAttachment:
    boto3_raw_data: "type_defs.TransitGatewayVpcAttachmentTypeDef" = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    TransitGatewayId = field("TransitGatewayId")
    VpcId = field("VpcId")
    VpcOwnerId = field("VpcOwnerId")
    State = field("State")
    SubnetIds = field("SubnetIds")
    CreationTime = field("CreationTime")

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayVpcAttachmentOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayVpcAttachmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayVpcAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnsuccessfulInstanceCreditSpecificationItem:
    boto3_raw_data: "type_defs.UnsuccessfulInstanceCreditSpecificationItemTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")

    @cached_property
    def Error(self):  # pragma: no cover
        return UnsuccessfulInstanceCreditSpecificationItemError.make_one(
            self.boto3_raw_data["Error"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnsuccessfulInstanceCreditSpecificationItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnsuccessfulInstanceCreditSpecificationItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnsuccessfulItem:
    boto3_raw_data: "type_defs.UnsuccessfulItemTypeDef" = dataclasses.field()

    @cached_property
    def Error(self):  # pragma: no cover
        return UnsuccessfulItemError.make_one(self.boto3_raw_data["Error"])

    ResourceId = field("ResourceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UnsuccessfulItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnsuccessfulItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ValidationWarning:
    boto3_raw_data: "type_defs.ValidationWarningTypeDef" = dataclasses.field()

    @cached_property
    def Errors(self):  # pragma: no cover
        return ValidationError.make_many(self.boto3_raw_data["Errors"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ValidationWarningTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ValidationWarningTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointCidrOptions:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointCidrOptionsTypeDef" = (
        dataclasses.field()
    )

    Cidr = field("Cidr")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return VerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    Protocol = field("Protocol")
    SubnetIds = field("SubnetIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessEndpointCidrOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointCidrOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointEniOptions:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointEniOptionsTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    Protocol = field("Protocol")
    Port = field("Port")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return VerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointEniOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointEniOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpointLoadBalancerOptions:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointLoadBalancerOptionsTypeDef" = (
        dataclasses.field()
    )

    Protocol = field("Protocol")
    Port = field("Port")
    LoadBalancerArn = field("LoadBalancerArn")
    SubnetIds = field("SubnetIds")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return VerifiedAccessEndpointPortRange.make_many(
            self.boto3_raw_data["PortRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessEndpointLoadBalancerOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointLoadBalancerOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstanceOpenVpnClientConfiguration:
    boto3_raw_data: (
        "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationTypeDef"
    ) = dataclasses.field()

    Config = field("Config")

    @cached_property
    def Routes(self):  # pragma: no cover
        return VerifiedAccessInstanceOpenVpnClientConfigurationRoute.make_many(
            self.boto3_raw_data["Routes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessInstanceOpenVpnClientConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstance:
    boto3_raw_data: "type_defs.VerifiedAccessInstanceTypeDef" = dataclasses.field()

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Description = field("Description")

    @cached_property
    def VerifiedAccessTrustProviders(self):  # pragma: no cover
        return VerifiedAccessTrustProviderCondensed.make_many(
            self.boto3_raw_data["VerifiedAccessTrustProviders"]
        )

    CreationTime = field("CreationTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    FipsEnabled = field("FipsEnabled")

    @cached_property
    def CidrEndpointsCustomSubDomain(self):  # pragma: no cover
        return VerifiedAccessInstanceCustomSubDomain.make_one(
            self.boto3_raw_data["CidrEndpointsCustomSubDomain"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessInstanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogCloudWatchLogsDestination:
    boto3_raw_data: "type_defs.VerifiedAccessLogCloudWatchLogsDestinationTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @cached_property
    def DeliveryStatus(self):  # pragma: no cover
        return VerifiedAccessLogDeliveryStatus.make_one(
            self.boto3_raw_data["DeliveryStatus"]
        )

    LogGroup = field("LogGroup")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessLogCloudWatchLogsDestinationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogCloudWatchLogsDestinationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogKinesisDataFirehoseDestination:
    boto3_raw_data: (
        "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @cached_property
    def DeliveryStatus(self):  # pragma: no cover
        return VerifiedAccessLogDeliveryStatus.make_one(
            self.boto3_raw_data["DeliveryStatus"]
        )

    DeliveryStream = field("DeliveryStream")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.VerifiedAccessLogKinesisDataFirehoseDestinationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogS3Destination:
    boto3_raw_data: "type_defs.VerifiedAccessLogS3DestinationTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @cached_property
    def DeliveryStatus(self):  # pragma: no cover
        return VerifiedAccessLogDeliveryStatus.make_one(
            self.boto3_raw_data["DeliveryStatus"]
        )

    BucketName = field("BucketName")
    Prefix = field("Prefix")
    BucketOwner = field("BucketOwner")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VerifiedAccessLogS3DestinationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogS3DestinationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogOptions:
    boto3_raw_data: "type_defs.VerifiedAccessLogOptionsTypeDef" = dataclasses.field()

    @cached_property
    def S3(self):  # pragma: no cover
        return VerifiedAccessLogS3DestinationOptions.make_one(self.boto3_raw_data["S3"])

    @cached_property
    def CloudWatchLogs(self):  # pragma: no cover
        return VerifiedAccessLogCloudWatchLogsDestinationOptions.make_one(
            self.boto3_raw_data["CloudWatchLogs"]
        )

    @cached_property
    def KinesisDataFirehose(self):  # pragma: no cover
        return VerifiedAccessLogKinesisDataFirehoseDestinationOptions.make_one(
            self.boto3_raw_data["KinesisDataFirehose"]
        )

    LogVersion = field("LogVersion")
    IncludeTrustContext = field("IncludeTrustContext")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessLogOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeResponse:
    boto3_raw_data: "type_defs.VolumeResponseTypeDef" = dataclasses.field()

    AvailabilityZoneId = field("AvailabilityZoneId")
    OutpostArn = field("OutpostArn")
    Iops = field("Iops")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VolumeType = field("VolumeType")
    FastRestored = field("FastRestored")
    MultiAttachEnabled = field("MultiAttachEnabled")
    Throughput = field("Throughput")
    SseType = field("SseType")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    VolumeInitializationRate = field("VolumeInitializationRate")
    VolumeId = field("VolumeId")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    AvailabilityZone = field("AvailabilityZone")
    State = field("State")
    CreateTime = field("CreateTime")

    @cached_property
    def Attachments(self):  # pragma: no cover
        return VolumeAttachment.make_many(self.boto3_raw_data["Attachments"])

    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VolumeResponseTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Volume:
    boto3_raw_data: "type_defs.VolumeTypeDef" = dataclasses.field()

    AvailabilityZoneId = field("AvailabilityZoneId")
    OutpostArn = field("OutpostArn")
    Iops = field("Iops")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VolumeType = field("VolumeType")
    FastRestored = field("FastRestored")
    MultiAttachEnabled = field("MultiAttachEnabled")
    Throughput = field("Throughput")
    SseType = field("SseType")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    VolumeInitializationRate = field("VolumeInitializationRate")
    VolumeId = field("VolumeId")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    AvailabilityZone = field("AvailabilityZone")
    State = field("State")
    CreateTime = field("CreateTime")

    @cached_property
    def Attachments(self):  # pragma: no cover
        return VolumeAttachment.make_many(self.boto3_raw_data["Attachments"])

    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VolumeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusInfo:
    boto3_raw_data: "type_defs.VolumeStatusInfoTypeDef" = dataclasses.field()

    @cached_property
    def Details(self):  # pragma: no cover
        return VolumeStatusDetails.make_many(self.boto3_raw_data["Details"])

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcCidrBlockAssociation:
    boto3_raw_data: "type_defs.VpcCidrBlockAssociationTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    CidrBlock = field("CidrBlock")

    @cached_property
    def CidrBlockState(self):  # pragma: no cover
        return VpcCidrBlockState.make_one(self.boto3_raw_data["CidrBlockState"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcCidrBlockAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcCidrBlockAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcIpv6CidrBlockAssociation:
    boto3_raw_data: "type_defs.VpcIpv6CidrBlockAssociationTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def Ipv6CidrBlockState(self):  # pragma: no cover
        return VpcCidrBlockState.make_one(self.boto3_raw_data["Ipv6CidrBlockState"])

    NetworkBorderGroup = field("NetworkBorderGroup")
    Ipv6Pool = field("Ipv6Pool")
    Ipv6AddressAttribute = field("Ipv6AddressAttribute")
    IpSource = field("IpSource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcIpv6CidrBlockAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcIpv6CidrBlockAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEncryptionControlExclusions:
    boto3_raw_data: "type_defs.VpcEncryptionControlExclusionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InternetGateway(self):  # pragma: no cover
        return VpcEncryptionControlExclusion.make_one(
            self.boto3_raw_data["InternetGateway"]
        )

    @cached_property
    def EgressOnlyInternetGateway(self):  # pragma: no cover
        return VpcEncryptionControlExclusion.make_one(
            self.boto3_raw_data["EgressOnlyInternetGateway"]
        )

    @cached_property
    def NatGateway(self):  # pragma: no cover
        return VpcEncryptionControlExclusion.make_one(self.boto3_raw_data["NatGateway"])

    @cached_property
    def VirtualPrivateGateway(self):  # pragma: no cover
        return VpcEncryptionControlExclusion.make_one(
            self.boto3_raw_data["VirtualPrivateGateway"]
        )

    @cached_property
    def VpcPeering(self):  # pragma: no cover
        return VpcEncryptionControlExclusion.make_one(self.boto3_raw_data["VpcPeering"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpcEncryptionControlExclusionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcEncryptionControlExclusionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcPeeringConnectionVpcInfo:
    boto3_raw_data: "type_defs.VpcPeeringConnectionVpcInfoTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")

    @cached_property
    def Ipv6CidrBlockSet(self):  # pragma: no cover
        return Ipv6CidrBlock.make_many(self.boto3_raw_data["Ipv6CidrBlockSet"])

    @cached_property
    def CidrBlockSet(self):  # pragma: no cover
        return CidrBlock.make_many(self.boto3_raw_data["CidrBlockSet"])

    OwnerId = field("OwnerId")

    @cached_property
    def PeeringOptions(self):  # pragma: no cover
        return VpcPeeringConnectionOptionsDescription.make_one(
            self.boto3_raw_data["PeeringOptions"]
        )

    VpcId = field("VpcId")
    Region = field("Region")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcPeeringConnectionVpcInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcPeeringConnectionVpcInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountAttributesResult:
    boto3_raw_data: "type_defs.DescribeAccountAttributesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccountAttributes(self):  # pragma: no cover
        return AccountAttribute.make_many(self.boto3_raw_data["AccountAttributes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAccountAttributesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountAttributesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalDetail:
    boto3_raw_data: "type_defs.AdditionalDetailTypeDef" = dataclasses.field()

    AdditionalDetailType = field("AdditionalDetailType")

    @cached_property
    def Component(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Component"])

    @cached_property
    def VpcEndpointService(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["VpcEndpointService"])

    @cached_property
    def RuleOptions(self):  # pragma: no cover
        return RuleOption.make_many(self.boto3_raw_data["RuleOptions"])

    @cached_property
    def RuleGroupTypePairs(self):  # pragma: no cover
        return RuleGroupTypePair.make_many(self.boto3_raw_data["RuleGroupTypePairs"])

    @cached_property
    def RuleGroupRuleOptionsPairs(self):  # pragma: no cover
        return RuleGroupRuleOptionsPair.make_many(
            self.boto3_raw_data["RuleGroupRuleOptionsPairs"]
        )

    ServiceName = field("ServiceName")

    @cached_property
    def LoadBalancers(self):  # pragma: no cover
        return AnalysisComponent.make_many(self.boto3_raw_data["LoadBalancers"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AdditionalDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdditionalDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressesAttributeResult:
    boto3_raw_data: "type_defs.DescribeAddressesAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Addresses(self):  # pragma: no cover
        return AddressAttribute.make_many(self.boto3_raw_data["Addresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAddressesAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressesAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyAddressAttributeResult:
    boto3_raw_data: "type_defs.ModifyAddressAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Address(self):  # pragma: no cover
        return AddressAttribute.make_one(self.boto3_raw_data["Address"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyAddressAttributeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyAddressAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResetAddressAttributeResult:
    boto3_raw_data: "type_defs.ResetAddressAttributeResultTypeDef" = dataclasses.field()

    @cached_property
    def Address(self):  # pragma: no cover
        return AddressAttribute.make_one(self.boto3_raw_data["Address"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResetAddressAttributeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResetAddressAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAddressesResult:
    boto3_raw_data: "type_defs.DescribeAddressesResultTypeDef" = dataclasses.field()

    @cached_property
    def Addresses(self):  # pragma: no cover
        return Address.make_many(self.boto3_raw_data["Addresses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAddressesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicePermissionsResult:
    boto3_raw_data: "type_defs.DescribeVpcEndpointServicePermissionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AllowedPrincipals(self):  # pragma: no cover
        return AllowedPrincipal.make_many(self.boto3_raw_data["AllowedPrincipals"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicePermissionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointServicePermissionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlocksResult:
    boto3_raw_data: "type_defs.DescribeCapacityBlocksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlocks(self):  # pragma: no cover
        return CapacityBlock.make_many(self.boto3_raw_data["CapacityBlocks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeCapacityBlocksResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlocksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCarrierGatewayResult:
    boto3_raw_data: "type_defs.CreateCarrierGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def CarrierGateway(self):  # pragma: no cover
        return CarrierGateway.make_one(self.boto3_raw_data["CarrierGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCarrierGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCarrierGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCarrierGatewayResult:
    boto3_raw_data: "type_defs.DeleteCarrierGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def CarrierGateway(self):  # pragma: no cover
        return CarrierGateway.make_one(self.boto3_raw_data["CarrierGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCarrierGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCarrierGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCarrierGatewaysResult:
    boto3_raw_data: "type_defs.DescribeCarrierGatewaysResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CarrierGateways(self):  # pragma: no cover
        return CarrierGateway.make_many(self.boto3_raw_data["CarrierGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCarrierGatewaysResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCarrierGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCoipPoolResult:
    boto3_raw_data: "type_defs.CreateCoipPoolResultTypeDef" = dataclasses.field()

    @cached_property
    def CoipPool(self):  # pragma: no cover
        return CoipPool.make_one(self.boto3_raw_data["CoipPool"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCoipPoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCoipPoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCoipPoolResult:
    boto3_raw_data: "type_defs.DeleteCoipPoolResultTypeDef" = dataclasses.field()

    @cached_property
    def CoipPool(self):  # pragma: no cover
        return CoipPool.make_one(self.boto3_raw_data["CoipPool"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCoipPoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCoipPoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCoipPoolsResult:
    boto3_raw_data: "type_defs.DescribeCoipPoolsResultTypeDef" = dataclasses.field()

    @cached_property
    def CoipPools(self):  # pragma: no cover
        return CoipPool.make_many(self.boto3_raw_data["CoipPools"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeCoipPoolsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCoipPoolsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCustomerGatewayResult:
    boto3_raw_data: "type_defs.CreateCustomerGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def CustomerGateway(self):  # pragma: no cover
        return CustomerGateway.make_one(self.boto3_raw_data["CustomerGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCustomerGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCustomerGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCustomerGatewaysResult:
    boto3_raw_data: "type_defs.DescribeCustomerGatewaysResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomerGateways(self):  # pragma: no cover
        return CustomerGateway.make_many(self.boto3_raw_data["CustomerGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCustomerGatewaysResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCustomerGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeclarativePoliciesReportsResult:
    boto3_raw_data: "type_defs.DescribeDeclarativePoliciesReportsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Reports(self):  # pragma: no cover
        return DeclarativePoliciesReport.make_many(self.boto3_raw_data["Reports"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDeclarativePoliciesReportsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeclarativePoliciesReportsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostReservationsResult:
    boto3_raw_data: "type_defs.DescribeHostReservationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HostReservationSet(self):  # pragma: no cover
        return HostReservation.make_many(self.boto3_raw_data["HostReservationSet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeHostReservationsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostReservationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateInstanceEventWindowRequest:
    boto3_raw_data: "type_defs.AssociateInstanceEventWindowRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceEventWindowId = field("InstanceEventWindowId")

    @cached_property
    def AssociationTarget(self):  # pragma: no cover
        return InstanceEventWindowAssociationRequest.make_one(
            self.boto3_raw_data["AssociationTarget"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateInstanceEventWindowRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateInstanceEventWindowRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceEventWindow:
    boto3_raw_data: "type_defs.InstanceEventWindowTypeDef" = dataclasses.field()

    InstanceEventWindowId = field("InstanceEventWindowId")

    @cached_property
    def TimeRanges(self):  # pragma: no cover
        return InstanceEventWindowTimeRange.make_many(self.boto3_raw_data["TimeRanges"])

    Name = field("Name")
    CronExpression = field("CronExpression")

    @cached_property
    def AssociationTarget(self):  # pragma: no cover
        return InstanceEventWindowAssociationTarget.make_one(
            self.boto3_raw_data["AssociationTarget"]
        )

    State = field("State")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceEventWindowTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceEventWindowTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateInstanceEventWindowRequest:
    boto3_raw_data: "type_defs.DisassociateInstanceEventWindowRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceEventWindowId = field("InstanceEventWindowId")

    @cached_property
    def AssociationTarget(self):  # pragma: no cover
        return InstanceEventWindowDisassociationRequest.make_one(
            self.boto3_raw_data["AssociationTarget"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateInstanceEventWindowRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateInstanceEventWindowRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamExternalResourceVerificationTokenResult:
    boto3_raw_data: (
        "type_defs.CreateIpamExternalResourceVerificationTokenResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def IpamExternalResourceVerificationToken(self):  # pragma: no cover
        return IpamExternalResourceVerificationToken.make_one(
            self.boto3_raw_data["IpamExternalResourceVerificationToken"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateIpamExternalResourceVerificationTokenResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateIpamExternalResourceVerificationTokenResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamExternalResourceVerificationTokenResult:
    boto3_raw_data: (
        "type_defs.DeleteIpamExternalResourceVerificationTokenResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def IpamExternalResourceVerificationToken(self):  # pragma: no cover
        return IpamExternalResourceVerificationToken.make_one(
            self.boto3_raw_data["IpamExternalResourceVerificationToken"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIpamExternalResourceVerificationTokenResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteIpamExternalResourceVerificationTokenResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamExternalResourceVerificationTokensResult:
    boto3_raw_data: (
        "type_defs.DescribeIpamExternalResourceVerificationTokensResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def IpamExternalResourceVerificationTokens(self):  # pragma: no cover
        return IpamExternalResourceVerificationToken.make_many(
            self.boto3_raw_data["IpamExternalResourceVerificationTokens"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamExternalResourceVerificationTokensResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamExternalResourceVerificationTokensResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIpamResourceDiscoveryResult:
    boto3_raw_data: "type_defs.AssociateIpamResourceDiscoveryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscoveryAssociation(self):  # pragma: no cover
        return IpamResourceDiscoveryAssociation.make_one(
            self.boto3_raw_data["IpamResourceDiscoveryAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateIpamResourceDiscoveryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIpamResourceDiscoveryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveryAssociationsResult:
    boto3_raw_data: (
        "type_defs.DescribeIpamResourceDiscoveryAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def IpamResourceDiscoveryAssociations(self):  # pragma: no cover
        return IpamResourceDiscoveryAssociation.make_many(
            self.boto3_raw_data["IpamResourceDiscoveryAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveryAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeIpamResourceDiscoveryAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIpamResourceDiscoveryResult:
    boto3_raw_data: "type_defs.DisassociateIpamResourceDiscoveryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscoveryAssociation(self):  # pragma: no cover
        return IpamResourceDiscoveryAssociation.make_one(
            self.boto3_raw_data["IpamResourceDiscoveryAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateIpamResourceDiscoveryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIpamResourceDiscoveryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamScopeResult:
    boto3_raw_data: "type_defs.CreateIpamScopeResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamScope(self):  # pragma: no cover
        return IpamScope.make_one(self.boto3_raw_data["IpamScope"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIpamScopeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamScopeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamScopeResult:
    boto3_raw_data: "type_defs.DeleteIpamScopeResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamScope(self):  # pragma: no cover
        return IpamScope.make_one(self.boto3_raw_data["IpamScope"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamScopeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamScopeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamScopesResult:
    boto3_raw_data: "type_defs.DescribeIpamScopesResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamScopes(self):  # pragma: no cover
        return IpamScope.make_many(self.boto3_raw_data["IpamScopes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamScopesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamScopesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamScopeResult:
    boto3_raw_data: "type_defs.ModifyIpamScopeResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamScope(self):  # pragma: no cover
        return IpamScope.make_one(self.boto3_raw_data["IpamScope"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamScopeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamScopeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeKeyPairsResult:
    boto3_raw_data: "type_defs.DescribeKeyPairsResultTypeDef" = dataclasses.field()

    @cached_property
    def KeyPairs(self):  # pragma: no cover
        return KeyPairInfo.make_many(self.boto3_raw_data["KeyPairs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeKeyPairsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeKeyPairsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef" = (dataclasses.field())

    @cached_property
    def LocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        self,
    ):  # pragma: no cover
        return LocalGatewayRouteTableVirtualInterfaceGroupAssociation.make_one(
            self.boto3_raw_data[
                "LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
            ]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef" = (dataclasses.field())

    @cached_property
    def LocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        self,
    ):  # pragma: no cover
        return LocalGatewayRouteTableVirtualInterfaceGroupAssociation.make_one(
            self.boto3_raw_data[
                "LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
            ]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult:
    boto3_raw_data: "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResultTypeDef" = (dataclasses.field())

    @cached_property
    def LocalGatewayRouteTableVirtualInterfaceGroupAssociations(
        self,
    ):  # pragma: no cover
        return LocalGatewayRouteTableVirtualInterfaceGroupAssociation.make_many(
            self.boto3_raw_data[
                "LocalGatewayRouteTableVirtualInterfaceGroupAssociations"
            ]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableVpcAssociationResult:
    boto3_raw_data: (
        "type_defs.CreateLocalGatewayRouteTableVpcAssociationResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LocalGatewayRouteTableVpcAssociation(self):  # pragma: no cover
        return LocalGatewayRouteTableVpcAssociation.make_one(
            self.boto3_raw_data["LocalGatewayRouteTableVpcAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableVpcAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateLocalGatewayRouteTableVpcAssociationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableVpcAssociationResult:
    boto3_raw_data: (
        "type_defs.DeleteLocalGatewayRouteTableVpcAssociationResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LocalGatewayRouteTableVpcAssociation(self):  # pragma: no cover
        return LocalGatewayRouteTableVpcAssociation.make_one(
            self.boto3_raw_data["LocalGatewayRouteTableVpcAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableVpcAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteLocalGatewayRouteTableVpcAssociationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTableVpcAssociationsResult:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LocalGatewayRouteTableVpcAssociations(self):  # pragma: no cover
        return LocalGatewayRouteTableVpcAssociation.make_many(
            self.boto3_raw_data["LocalGatewayRouteTableVpcAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayRouteTableVpcAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewaysResult:
    boto3_raw_data: "type_defs.DescribeLocalGatewaysResultTypeDef" = dataclasses.field()

    @cached_property
    def LocalGateways(self):  # pragma: no cover
        return LocalGateway.make_many(self.boto3_raw_data["LocalGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLocalGatewaysResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayVirtualInterfaceGroupResult:
    boto3_raw_data: "type_defs.CreateLocalGatewayVirtualInterfaceGroupResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayVirtualInterfaceGroup(self):  # pragma: no cover
        return LocalGatewayVirtualInterfaceGroup.make_one(
            self.boto3_raw_data["LocalGatewayVirtualInterfaceGroup"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayVirtualInterfaceGroupResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayVirtualInterfaceGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayVirtualInterfaceGroupResult:
    boto3_raw_data: "type_defs.DeleteLocalGatewayVirtualInterfaceGroupResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayVirtualInterfaceGroup(self):  # pragma: no cover
        return LocalGatewayVirtualInterfaceGroup.make_one(
            self.boto3_raw_data["LocalGatewayVirtualInterfaceGroup"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayVirtualInterfaceGroupResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayVirtualInterfaceGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfaceGroupsResult:
    boto3_raw_data: (
        "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LocalGatewayVirtualInterfaceGroups(self):  # pragma: no cover
        return LocalGatewayVirtualInterfaceGroup.make_many(
            self.boto3_raw_data["LocalGatewayVirtualInterfaceGroups"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeLocalGatewayVirtualInterfaceGroupsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayVirtualInterfaceResult:
    boto3_raw_data: "type_defs.CreateLocalGatewayVirtualInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayVirtualInterface(self):  # pragma: no cover
        return LocalGatewayVirtualInterface.make_one(
            self.boto3_raw_data["LocalGatewayVirtualInterface"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayVirtualInterfaceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayVirtualInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayVirtualInterfaceResult:
    boto3_raw_data: "type_defs.DeleteLocalGatewayVirtualInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayVirtualInterface(self):  # pragma: no cover
        return LocalGatewayVirtualInterface.make_one(
            self.boto3_raw_data["LocalGatewayVirtualInterface"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayVirtualInterfaceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayVirtualInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayVirtualInterfacesResult:
    boto3_raw_data: "type_defs.DescribeLocalGatewayVirtualInterfacesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayVirtualInterfaces(self):  # pragma: no cover
        return LocalGatewayVirtualInterface.make_many(
            self.boto3_raw_data["LocalGatewayVirtualInterfaces"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayVirtualInterfacesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewayVirtualInterfacesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateManagedPrefixListResult:
    boto3_raw_data: "type_defs.CreateManagedPrefixListResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixList(self):  # pragma: no cover
        return ManagedPrefixList.make_one(self.boto3_raw_data["PrefixList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateManagedPrefixListResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateManagedPrefixListResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteManagedPrefixListResult:
    boto3_raw_data: "type_defs.DeleteManagedPrefixListResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixList(self):  # pragma: no cover
        return ManagedPrefixList.make_one(self.boto3_raw_data["PrefixList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteManagedPrefixListResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteManagedPrefixListResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeManagedPrefixListsResult:
    boto3_raw_data: "type_defs.DescribeManagedPrefixListsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixLists(self):  # pragma: no cover
        return ManagedPrefixList.make_many(self.boto3_raw_data["PrefixLists"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeManagedPrefixListsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeManagedPrefixListsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyManagedPrefixListResult:
    boto3_raw_data: "type_defs.ModifyManagedPrefixListResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixList(self):  # pragma: no cover
        return ManagedPrefixList.make_one(self.boto3_raw_data["PrefixList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyManagedPrefixListResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyManagedPrefixListResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreManagedPrefixListVersionResult:
    boto3_raw_data: "type_defs.RestoreManagedPrefixListVersionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrefixList(self):  # pragma: no cover
        return ManagedPrefixList.make_one(self.boto3_raw_data["PrefixList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RestoreManagedPrefixListVersionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreManagedPrefixListVersionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopeAnalysesResult:
    boto3_raw_data: (
        "type_defs.DescribeNetworkInsightsAccessScopeAnalysesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def NetworkInsightsAccessScopeAnalyses(self):  # pragma: no cover
        return NetworkInsightsAccessScopeAnalysis.make_many(
            self.boto3_raw_data["NetworkInsightsAccessScopeAnalyses"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopeAnalysesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeNetworkInsightsAccessScopeAnalysesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartNetworkInsightsAccessScopeAnalysisResult:
    boto3_raw_data: "type_defs.StartNetworkInsightsAccessScopeAnalysisResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAccessScopeAnalysis(self):  # pragma: no cover
        return NetworkInsightsAccessScopeAnalysis.make_one(
            self.boto3_raw_data["NetworkInsightsAccessScopeAnalysis"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartNetworkInsightsAccessScopeAnalysisResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartNetworkInsightsAccessScopeAnalysisResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAccessScopesResult:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsAccessScopesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAccessScopes(self):  # pragma: no cover
        return NetworkInsightsAccessScope.make_many(
            self.boto3_raw_data["NetworkInsightsAccessScopes"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAccessScopesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsAccessScopesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeOutpostLagsResult:
    boto3_raw_data: "type_defs.DescribeOutpostLagsResultTypeDef" = dataclasses.field()

    @cached_property
    def OutpostLags(self):  # pragma: no cover
        return OutpostLag.make_many(self.boto3_raw_data["OutpostLags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeOutpostLagsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeOutpostLagsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePlacementGroupResult:
    boto3_raw_data: "type_defs.CreatePlacementGroupResultTypeDef" = dataclasses.field()

    @cached_property
    def PlacementGroup(self):  # pragma: no cover
        return PlacementGroup.make_one(self.boto3_raw_data["PlacementGroup"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePlacementGroupResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePlacementGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePlacementGroupsResult:
    boto3_raw_data: "type_defs.DescribePlacementGroupsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PlacementGroups(self):  # pragma: no cover
        return PlacementGroup.make_many(self.boto3_raw_data["PlacementGroups"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePlacementGroupsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePlacementGroupsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateReplaceRootVolumeTaskResult:
    boto3_raw_data: "type_defs.CreateReplaceRootVolumeTaskResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReplaceRootVolumeTask(self):  # pragma: no cover
        return ReplaceRootVolumeTask.make_one(
            self.boto3_raw_data["ReplaceRootVolumeTask"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateReplaceRootVolumeTaskResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateReplaceRootVolumeTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReplaceRootVolumeTasksResult:
    boto3_raw_data: "type_defs.DescribeReplaceRootVolumeTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReplaceRootVolumeTasks(self):  # pragma: no cover
        return ReplaceRootVolumeTask.make_many(
            self.boto3_raw_data["ReplaceRootVolumeTasks"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReplaceRootVolumeTasksResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReplaceRootVolumeTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerEndpointResult:
    boto3_raw_data: "type_defs.CreateRouteServerEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerEndpoint(self):  # pragma: no cover
        return RouteServerEndpoint.make_one(self.boto3_raw_data["RouteServerEndpoint"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateRouteServerEndpointResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerEndpointResult:
    boto3_raw_data: "type_defs.DeleteRouteServerEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerEndpoint(self):  # pragma: no cover
        return RouteServerEndpoint.make_one(self.boto3_raw_data["RouteServerEndpoint"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteRouteServerEndpointResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerEndpointsResult:
    boto3_raw_data: "type_defs.DescribeRouteServerEndpointsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerEndpoints(self):  # pragma: no cover
        return RouteServerEndpoint.make_many(
            self.boto3_raw_data["RouteServerEndpoints"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRouteServerEndpointsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerResult:
    boto3_raw_data: "type_defs.CreateRouteServerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServer(self):  # pragma: no cover
        return RouteServer.make_one(self.boto3_raw_data["RouteServer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteServerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerResult:
    boto3_raw_data: "type_defs.DeleteRouteServerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServer(self):  # pragma: no cover
        return RouteServer.make_one(self.boto3_raw_data["RouteServer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteServerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServersResult:
    boto3_raw_data: "type_defs.DescribeRouteServersResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServers(self):  # pragma: no cover
        return RouteServer.make_many(self.boto3_raw_data["RouteServers"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRouteServersResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyRouteServerResult:
    boto3_raw_data: "type_defs.ModifyRouteServerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServer(self):  # pragma: no cover
        return RouteServer.make_one(self.boto3_raw_data["RouteServer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyRouteServerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyRouteServerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSecurityGroupsForVpcResult:
    boto3_raw_data: "type_defs.GetSecurityGroupsForVpcResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityGroupForVpcs(self):  # pragma: no cover
        return SecurityGroupForVpc.make_many(
            self.boto3_raw_data["SecurityGroupForVpcs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetSecurityGroupsForVpcResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSecurityGroupsForVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeServiceLinkVirtualInterfacesResult:
    boto3_raw_data: "type_defs.DescribeServiceLinkVirtualInterfacesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ServiceLinkVirtualInterfaces(self):  # pragma: no cover
        return ServiceLinkVirtualInterface.make_many(
            self.boto3_raw_data["ServiceLinkVirtualInterfaces"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeServiceLinkVirtualInterfacesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeServiceLinkVirtualInterfacesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSnapshotsResult:
    boto3_raw_data: "type_defs.CreateSnapshotsResultTypeDef" = dataclasses.field()

    @cached_property
    def Snapshots(self):  # pragma: no cover
        return SnapshotInfo.make_many(self.boto3_raw_data["Snapshots"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSnapshotsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSnapshotsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotTierStatusResult:
    boto3_raw_data: "type_defs.DescribeSnapshotTierStatusResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SnapshotTierStatuses(self):  # pragma: no cover
        return SnapshotTierStatus.make_many(self.boto3_raw_data["SnapshotTierStatuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSnapshotTierStatusResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotTierStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSnapshotsResult:
    boto3_raw_data: "type_defs.DescribeSnapshotsResultTypeDef" = dataclasses.field()

    @cached_property
    def Snapshots(self):  # pragma: no cover
        return Snapshot.make_many(self.boto3_raw_data["Snapshots"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSnapshotsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSnapshotsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetCidrReservationResult:
    boto3_raw_data: "type_defs.CreateSubnetCidrReservationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SubnetCidrReservation(self):  # pragma: no cover
        return SubnetCidrReservation.make_one(
            self.boto3_raw_data["SubnetCidrReservation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSubnetCidrReservationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSubnetCidrReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSubnetCidrReservationResult:
    boto3_raw_data: "type_defs.DeleteSubnetCidrReservationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DeletedSubnetCidrReservation(self):  # pragma: no cover
        return SubnetCidrReservation.make_one(
            self.boto3_raw_data["DeletedSubnetCidrReservation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteSubnetCidrReservationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSubnetCidrReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSubnetCidrReservationsResult:
    boto3_raw_data: "type_defs.GetSubnetCidrReservationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SubnetIpv4CidrReservations(self):  # pragma: no cover
        return SubnetCidrReservation.make_many(
            self.boto3_raw_data["SubnetIpv4CidrReservations"]
        )

    @cached_property
    def SubnetIpv6CidrReservations(self):  # pragma: no cover
        return SubnetCidrReservation.make_many(
            self.boto3_raw_data["SubnetIpv6CidrReservations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetSubnetCidrReservationsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSubnetCidrReservationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorSessionResult:
    boto3_raw_data: "type_defs.CreateTrafficMirrorSessionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorSession(self):  # pragma: no cover
        return TrafficMirrorSession.make_one(
            self.boto3_raw_data["TrafficMirrorSession"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTrafficMirrorSessionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorSessionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorSessionsResult:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorSessionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorSessions(self):  # pragma: no cover
        return TrafficMirrorSession.make_many(
            self.boto3_raw_data["TrafficMirrorSessions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorSessionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorSessionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorSessionResult:
    boto3_raw_data: "type_defs.ModifyTrafficMirrorSessionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorSession(self):  # pragma: no cover
        return TrafficMirrorSession.make_one(
            self.boto3_raw_data["TrafficMirrorSession"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyTrafficMirrorSessionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTrafficMirrorSessionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorTargetResult:
    boto3_raw_data: "type_defs.CreateTrafficMirrorTargetResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorTarget(self):  # pragma: no cover
        return TrafficMirrorTarget.make_one(self.boto3_raw_data["TrafficMirrorTarget"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTrafficMirrorTargetResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorTargetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorTargetsResult:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorTargetsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorTargets(self):  # pragma: no cover
        return TrafficMirrorTarget.make_many(
            self.boto3_raw_data["TrafficMirrorTargets"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorTargetsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorTargetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPolicyTableResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayPolicyTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPolicyTable(self):  # pragma: no cover
        return TransitGatewayPolicyTable.make_one(
            self.boto3_raw_data["TransitGatewayPolicyTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPolicyTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayPolicyTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPolicyTableResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayPolicyTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPolicyTable(self):  # pragma: no cover
        return TransitGatewayPolicyTable.make_one(
            self.boto3_raw_data["TransitGatewayPolicyTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPolicyTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayPolicyTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPolicyTablesResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayPolicyTablesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPolicyTables(self):  # pragma: no cover
        return TransitGatewayPolicyTable.make_many(
            self.boto3_raw_data["TransitGatewayPolicyTables"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPolicyTablesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayPolicyTablesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteTableAnnouncementResult:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayRouteTableAnnouncementResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TransitGatewayRouteTableAnnouncement(self):  # pragma: no cover
        return TransitGatewayRouteTableAnnouncement.make_one(
            self.boto3_raw_data["TransitGatewayRouteTableAnnouncement"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayRouteTableAnnouncementResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayRouteTableAnnouncementResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteTableAnnouncementResult:
    boto3_raw_data: (
        "type_defs.DeleteTransitGatewayRouteTableAnnouncementResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TransitGatewayRouteTableAnnouncement(self):  # pragma: no cover
        return TransitGatewayRouteTableAnnouncement.make_one(
            self.boto3_raw_data["TransitGatewayRouteTableAnnouncement"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayRouteTableAnnouncementResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteTransitGatewayRouteTableAnnouncementResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTableAnnouncementsResult:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayRouteTableAnnouncementsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TransitGatewayRouteTableAnnouncements(self):  # pragma: no cover
        return TransitGatewayRouteTableAnnouncement.make_many(
            self.boto3_raw_data["TransitGatewayRouteTableAnnouncements"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTableAnnouncementsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayRouteTableAnnouncementsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteTableResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayRouteTable(self):  # pragma: no cover
        return TransitGatewayRouteTable.make_one(
            self.boto3_raw_data["TransitGatewayRouteTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteTableResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayRouteTable(self):  # pragma: no cover
        return TransitGatewayRouteTable.make_one(
            self.boto3_raw_data["TransitGatewayRouteTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayRouteTablesResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayRouteTablesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayRouteTables(self):  # pragma: no cover
        return TransitGatewayRouteTable.make_many(
            self.boto3_raw_data["TransitGatewayRouteTables"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayRouteTablesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayRouteTablesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTrunkInterfaceResult:
    boto3_raw_data: "type_defs.AssociateTrunkInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InterfaceAssociation(self):  # pragma: no cover
        return TrunkInterfaceAssociation.make_one(
            self.boto3_raw_data["InterfaceAssociation"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateTrunkInterfaceResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTrunkInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrunkInterfaceAssociationsResult:
    boto3_raw_data: "type_defs.DescribeTrunkInterfaceAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InterfaceAssociations(self):  # pragma: no cover
        return TrunkInterfaceAssociation.make_many(
            self.boto3_raw_data["InterfaceAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrunkInterfaceAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrunkInterfaceAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcBlockPublicAccessExclusionResult:
    boto3_raw_data: "type_defs.CreateVpcBlockPublicAccessExclusionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessExclusion(self):  # pragma: no cover
        return VpcBlockPublicAccessExclusion.make_one(
            self.boto3_raw_data["VpcBlockPublicAccessExclusion"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcBlockPublicAccessExclusionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcBlockPublicAccessExclusionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcBlockPublicAccessExclusionResult:
    boto3_raw_data: "type_defs.DeleteVpcBlockPublicAccessExclusionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessExclusion(self):  # pragma: no cover
        return VpcBlockPublicAccessExclusion.make_one(
            self.boto3_raw_data["VpcBlockPublicAccessExclusion"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcBlockPublicAccessExclusionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcBlockPublicAccessExclusionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcBlockPublicAccessExclusionsResult:
    boto3_raw_data: "type_defs.DescribeVpcBlockPublicAccessExclusionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessExclusions(self):  # pragma: no cover
        return VpcBlockPublicAccessExclusion.make_many(
            self.boto3_raw_data["VpcBlockPublicAccessExclusions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcBlockPublicAccessExclusionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcBlockPublicAccessExclusionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpcBlockPublicAccessExclusionResult:
    boto3_raw_data: "type_defs.ModifyVpcBlockPublicAccessExclusionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcBlockPublicAccessExclusion(self):  # pragma: no cover
        return VpcBlockPublicAccessExclusion.make_one(
            self.boto3_raw_data["VpcBlockPublicAccessExclusion"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpcBlockPublicAccessExclusionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpcBlockPublicAccessExclusionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcClassicLinkResult:
    boto3_raw_data: "type_defs.DescribeVpcClassicLinkResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Vpcs(self):  # pragma: no cover
        return VpcClassicLink.make_many(self.boto3_raw_data["Vpcs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcClassicLinkResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcClassicLinkResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Explanation:
    boto3_raw_data: "type_defs.ExplanationTypeDef" = dataclasses.field()

    @cached_property
    def Acl(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Acl"])

    @cached_property
    def AclRule(self):  # pragma: no cover
        return AnalysisAclRule.make_one(self.boto3_raw_data["AclRule"])

    Address = field("Address")
    Addresses = field("Addresses")

    @cached_property
    def AttachedTo(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["AttachedTo"])

    AvailabilityZones = field("AvailabilityZones")
    AvailabilityZoneIds = field("AvailabilityZoneIds")
    Cidrs = field("Cidrs")

    @cached_property
    def Component(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Component"])

    @cached_property
    def CustomerGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["CustomerGateway"])

    @cached_property
    def Destination(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Destination"])

    @cached_property
    def DestinationVpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["DestinationVpc"])

    Direction = field("Direction")
    ExplanationCode = field("ExplanationCode")

    @cached_property
    def IngressRouteTable(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["IngressRouteTable"])

    @cached_property
    def InternetGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["InternetGateway"])

    LoadBalancerArn = field("LoadBalancerArn")

    @cached_property
    def ClassicLoadBalancerListener(self):  # pragma: no cover
        return AnalysisLoadBalancerListener.make_one(
            self.boto3_raw_data["ClassicLoadBalancerListener"]
        )

    LoadBalancerListenerPort = field("LoadBalancerListenerPort")

    @cached_property
    def LoadBalancerTarget(self):  # pragma: no cover
        return AnalysisLoadBalancerTarget.make_one(
            self.boto3_raw_data["LoadBalancerTarget"]
        )

    @cached_property
    def LoadBalancerTargetGroup(self):  # pragma: no cover
        return AnalysisComponent.make_one(
            self.boto3_raw_data["LoadBalancerTargetGroup"]
        )

    @cached_property
    def LoadBalancerTargetGroups(self):  # pragma: no cover
        return AnalysisComponent.make_many(
            self.boto3_raw_data["LoadBalancerTargetGroups"]
        )

    LoadBalancerTargetPort = field("LoadBalancerTargetPort")

    @cached_property
    def ElasticLoadBalancerListener(self):  # pragma: no cover
        return AnalysisComponent.make_one(
            self.boto3_raw_data["ElasticLoadBalancerListener"]
        )

    MissingComponent = field("MissingComponent")

    @cached_property
    def NatGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["NatGateway"])

    @cached_property
    def NetworkInterface(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["NetworkInterface"])

    PacketField = field("PacketField")

    @cached_property
    def VpcPeeringConnection(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["VpcPeeringConnection"])

    Port = field("Port")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["PortRanges"])

    @cached_property
    def PrefixList(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["PrefixList"])

    Protocols = field("Protocols")

    @cached_property
    def RouteTableRoute(self):  # pragma: no cover
        return AnalysisRouteTableRoute.make_one(self.boto3_raw_data["RouteTableRoute"])

    @cached_property
    def RouteTable(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["RouteTable"])

    @cached_property
    def SecurityGroup(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["SecurityGroup"])

    @cached_property
    def SecurityGroupRule(self):  # pragma: no cover
        return AnalysisSecurityGroupRule.make_one(
            self.boto3_raw_data["SecurityGroupRule"]
        )

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return AnalysisComponent.make_many(self.boto3_raw_data["SecurityGroups"])

    @cached_property
    def SourceVpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["SourceVpc"])

    State = field("State")

    @cached_property
    def Subnet(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Subnet"])

    @cached_property
    def SubnetRouteTable(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["SubnetRouteTable"])

    @cached_property
    def Vpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Vpc"])

    @cached_property
    def VpcEndpoint(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["VpcEndpoint"])

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def VpnGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["VpnGateway"])

    @cached_property
    def TransitGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["TransitGateway"])

    @cached_property
    def TransitGatewayRouteTable(self):  # pragma: no cover
        return AnalysisComponent.make_one(
            self.boto3_raw_data["TransitGatewayRouteTable"]
        )

    @cached_property
    def TransitGatewayRouteTableRoute(self):  # pragma: no cover
        return TransitGatewayRouteTableRoute.make_one(
            self.boto3_raw_data["TransitGatewayRouteTableRoute"]
        )

    @cached_property
    def TransitGatewayAttachment(self):  # pragma: no cover
        return AnalysisComponent.make_one(
            self.boto3_raw_data["TransitGatewayAttachment"]
        )

    ComponentAccount = field("ComponentAccount")
    ComponentRegion = field("ComponentRegion")

    @cached_property
    def FirewallStatelessRule(self):  # pragma: no cover
        return FirewallStatelessRule.make_one(
            self.boto3_raw_data["FirewallStatelessRule"]
        )

    @cached_property
    def FirewallStatefulRule(self):  # pragma: no cover
        return FirewallStatefulRule.make_one(
            self.boto3_raw_data["FirewallStatefulRule"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExplanationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExplanationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdvertiseByoipCidrResult:
    boto3_raw_data: "type_defs.AdvertiseByoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidr(self):  # pragma: no cover
        return ByoipCidr.make_one(self.boto3_raw_data["ByoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AdvertiseByoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdvertiseByoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionByoipCidrResult:
    boto3_raw_data: "type_defs.DeprovisionByoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidr(self):  # pragma: no cover
        return ByoipCidr.make_one(self.boto3_raw_data["ByoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeprovisionByoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionByoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeByoipCidrsResult:
    boto3_raw_data: "type_defs.DescribeByoipCidrsResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidrs(self):  # pragma: no cover
        return ByoipCidr.make_many(self.boto3_raw_data["ByoipCidrs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeByoipCidrsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeByoipCidrsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveByoipCidrToIpamResult:
    boto3_raw_data: "type_defs.MoveByoipCidrToIpamResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidr(self):  # pragma: no cover
        return ByoipCidr.make_one(self.boto3_raw_data["ByoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MoveByoipCidrToIpamResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveByoipCidrToIpamResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionByoipCidrResult:
    boto3_raw_data: "type_defs.ProvisionByoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidr(self):  # pragma: no cover
        return ByoipCidr.make_one(self.boto3_raw_data["ByoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionByoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionByoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WithdrawByoipCidrResult:
    boto3_raw_data: "type_defs.WithdrawByoipCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def ByoipCidr(self):  # pragma: no cover
        return ByoipCidr.make_one(self.boto3_raw_data["ByoipCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WithdrawByoipCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WithdrawByoipCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnTargetNetworksResult:
    boto3_raw_data: "type_defs.DescribeClientVpnTargetNetworksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClientVpnTargetNetworks(self):  # pragma: no cover
        return TargetNetwork.make_many(self.boto3_raw_data["ClientVpnTargetNetworks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnTargetNetworksResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnTargetNetworksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteTable:
    boto3_raw_data: "type_defs.RouteTableTypeDef" = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return RouteTableAssociation.make_many(self.boto3_raw_data["Associations"])

    @cached_property
    def PropagatingVgws(self):  # pragma: no cover
        return PropagatingVgw.make_many(self.boto3_raw_data["PropagatingVgws"])

    RouteTableId = field("RouteTableId")

    @cached_property
    def Routes(self):  # pragma: no cover
        return Route.make_many(self.boto3_raw_data["Routes"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcId = field("VpcId")
    OwnerId = field("OwnerId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteTableTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RouteTableTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegrateServices:
    boto3_raw_data: "type_defs.IntegrateServicesTypeDef" = dataclasses.field()

    @cached_property
    def AthenaIntegrations(self):  # pragma: no cover
        return AthenaIntegration.make_many(self.boto3_raw_data["AthenaIntegrations"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IntegrateServicesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegrateServicesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceMarketOptionsRequest:
    boto3_raw_data: "type_defs.LaunchTemplateInstanceMarketOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    MarketType = field("MarketType")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return LaunchTemplateSpotMarketOptionsRequest.make_one(
            self.boto3_raw_data["SpotOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceMarketOptionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateInstanceMarketOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstanceAvailabilityRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeScheduledInstanceAvailabilityRequestPaginateTypeDef"
    ) = dataclasses.field()

    @cached_property
    def FirstSlotStartTimeRange(self):  # pragma: no cover
        return SlotDateTimeRangeRequest.make_one(
            self.boto3_raw_data["FirstSlotStartTimeRange"]
        )

    @cached_property
    def Recurrence(self):  # pragma: no cover
        return ScheduledInstanceRecurrenceRequest.make_one(
            self.boto3_raw_data["Recurrence"]
        )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxSlotDurationInHours = field("MaxSlotDurationInHours")
    MinSlotDurationInHours = field("MinSlotDurationInHours")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeScheduledInstanceAvailabilityRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeScheduledInstanceAvailabilityRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstanceAvailabilityRequest:
    boto3_raw_data: "type_defs.DescribeScheduledInstanceAvailabilityRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FirstSlotStartTimeRange(self):  # pragma: no cover
        return SlotDateTimeRangeRequest.make_one(
            self.boto3_raw_data["FirstSlotStartTimeRange"]
        )

    @cached_property
    def Recurrence(self):  # pragma: no cover
        return ScheduledInstanceRecurrenceRequest.make_one(
            self.boto3_raw_data["Recurrence"]
        )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    MaxSlotDurationInHours = field("MaxSlotDurationInHours")
    MinSlotDurationInHours = field("MinSlotDurationInHours")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeScheduledInstanceAvailabilityRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeScheduledInstanceAvailabilityRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstancesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeScheduledInstancesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    ScheduledInstanceIds = field("ScheduledInstanceIds")

    @cached_property
    def SlotStartTimeRange(self):  # pragma: no cover
        return SlotStartTimeRangeRequest.make_one(
            self.boto3_raw_data["SlotStartTimeRange"]
        )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeScheduledInstancesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeScheduledInstancesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstancesRequest:
    boto3_raw_data: "type_defs.DescribeScheduledInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    ScheduledInstanceIds = field("ScheduledInstanceIds")

    @cached_property
    def SlotStartTimeRange(self):  # pragma: no cover
        return SlotStartTimeRangeRequest.make_one(
            self.boto3_raw_data["SlotStartTimeRange"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeScheduledInstancesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeScheduledInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMarketOptionsRequest:
    boto3_raw_data: "type_defs.InstanceMarketOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    MarketType = field("MarketType")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return SpotMarketOptions.make_one(self.boto3_raw_data["SpotOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceMarketOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMarketOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpnGatewayResult:
    boto3_raw_data: "type_defs.CreateVpnGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def VpnGateway(self):  # pragma: no cover
        return VpnGateway.make_one(self.boto3_raw_data["VpnGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpnGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpnGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnGatewaysResult:
    boto3_raw_data: "type_defs.DescribeVpnGatewaysResultTypeDef" = dataclasses.field()

    @cached_property
    def VpnGateways(self):  # pragma: no cover
        return VpnGateway.make_many(self.boto3_raw_data["VpnGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpnGatewaysResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterfaceAttachment:
    boto3_raw_data: "type_defs.NetworkInterfaceAttachmentTypeDef" = dataclasses.field()

    AttachTime = field("AttachTime")
    AttachmentId = field("AttachmentId")
    DeleteOnTermination = field("DeleteOnTermination")
    DeviceIndex = field("DeviceIndex")
    NetworkCardIndex = field("NetworkCardIndex")
    InstanceId = field("InstanceId")
    InstanceOwnerId = field("InstanceOwnerId")
    Status = field("Status")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return AttachmentEnaSrdSpecification.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceAttachmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDeclarativePoliciesReportSummaryResult:
    boto3_raw_data: "type_defs.GetDeclarativePoliciesReportSummaryResultTypeDef" = (
        dataclasses.field()
    )

    ReportId = field("ReportId")
    S3Bucket = field("S3Bucket")
    S3Prefix = field("S3Prefix")
    TargetId = field("TargetId")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    NumberOfAccounts = field("NumberOfAccounts")
    NumberOfFailedAccounts = field("NumberOfFailedAccounts")

    @cached_property
    def AttributeSummaries(self):  # pragma: no cover
        return AttributeSummary.make_many(self.boto3_raw_data["AttributeSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetDeclarativePoliciesReportSummaryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDeclarativePoliciesReportSummaryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DhcpOptions:
    boto3_raw_data: "type_defs.DhcpOptionsTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    DhcpOptionsId = field("DhcpOptionsId")

    @cached_property
    def DhcpConfigurations(self):  # pragma: no cover
        return DhcpConfiguration.make_many(self.boto3_raw_data["DhcpConfigurations"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DhcpOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DhcpOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnAuthorizationRulesResult:
    boto3_raw_data: "type_defs.DescribeClientVpnAuthorizationRulesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AuthorizationRules(self):  # pragma: no cover
        return AuthorizationRule.make_many(self.boto3_raw_data["AuthorizationRules"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnAuthorizationRulesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnAuthorizationRulesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAvailabilityZonesResult:
    boto3_raw_data: "type_defs.DescribeAvailabilityZonesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AvailabilityZones(self):  # pragma: no cover
        return AvailabilityZone.make_many(self.boto3_raw_data["AvailabilityZones"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAvailabilityZonesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAvailabilityZonesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Host:
    boto3_raw_data: "type_defs.HostTypeDef" = dataclasses.field()

    AutoPlacement = field("AutoPlacement")
    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def AvailableCapacity(self):  # pragma: no cover
        return AvailableCapacity.make_one(self.boto3_raw_data["AvailableCapacity"])

    ClientToken = field("ClientToken")
    HostId = field("HostId")

    @cached_property
    def HostProperties(self):  # pragma: no cover
        return HostProperties.make_one(self.boto3_raw_data["HostProperties"])

    HostReservationId = field("HostReservationId")

    @cached_property
    def Instances(self):  # pragma: no cover
        return HostInstance.make_many(self.boto3_raw_data["Instances"])

    State = field("State")
    AllocationTime = field("AllocationTime")
    ReleaseTime = field("ReleaseTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    HostRecovery = field("HostRecovery")
    AllowsMultipleInstanceTypes = field("AllowsMultipleInstanceTypes")
    OwnerId = field("OwnerId")
    AvailabilityZoneId = field("AvailabilityZoneId")
    MemberOfServiceLinkedResourceGroup = field("MemberOfServiceLinkedResourceGroup")
    OutpostArn = field("OutpostArn")
    HostMaintenance = field("HostMaintenance")
    AssetId = field("AssetId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HostTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HostTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Storage:
    boto3_raw_data: "type_defs.StorageTypeDef" = dataclasses.field()

    @cached_property
    def S3(self):  # pragma: no cover
        return S3Storage.make_one(self.boto3_raw_data["S3"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StorageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StorageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageAttribute:
    boto3_raw_data: "type_defs.ImageAttributeTypeDef" = dataclasses.field()

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def KernelId(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["KernelId"])

    @cached_property
    def RamdiskId(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["RamdiskId"])

    @cached_property
    def SriovNetSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["SriovNetSupport"])

    @cached_property
    def BootMode(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["BootMode"])

    @cached_property
    def TpmSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["TpmSupport"])

    @cached_property
    def UefiData(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["UefiData"])

    @cached_property
    def LastLaunchedTime(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["LastLaunchedTime"])

    @cached_property
    def ImdsSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["ImdsSupport"])

    @cached_property
    def DeregistrationProtection(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["DeregistrationProtection"])

    ImageId = field("ImageId")

    @cached_property
    def LaunchPermissions(self):  # pragma: no cover
        return LaunchPermission.make_many(self.boto3_raw_data["LaunchPermissions"])

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageAttributeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageAttributeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Image:
    boto3_raw_data: "type_defs.ImageTypeDef" = dataclasses.field()

    PlatformDetails = field("PlatformDetails")
    UsageOperation = field("UsageOperation")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    Description = field("Description")
    EnaSupport = field("EnaSupport")
    Hypervisor = field("Hypervisor")
    ImageOwnerAlias = field("ImageOwnerAlias")
    Name = field("Name")
    RootDeviceName = field("RootDeviceName")
    RootDeviceType = field("RootDeviceType")
    SriovNetSupport = field("SriovNetSupport")

    @cached_property
    def StateReason(self):  # pragma: no cover
        return StateReason.make_one(self.boto3_raw_data["StateReason"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VirtualizationType = field("VirtualizationType")
    BootMode = field("BootMode")
    TpmSupport = field("TpmSupport")
    DeprecationTime = field("DeprecationTime")
    ImdsSupport = field("ImdsSupport")
    SourceInstanceId = field("SourceInstanceId")
    DeregistrationProtection = field("DeregistrationProtection")
    LastLaunchedTime = field("LastLaunchedTime")
    ImageAllowed = field("ImageAllowed")
    SourceImageId = field("SourceImageId")
    SourceImageRegion = field("SourceImageRegion")
    FreeTierEligible = field("FreeTierEligible")
    ImageId = field("ImageId")
    ImageLocation = field("ImageLocation")
    State = field("State")
    OwnerId = field("OwnerId")
    CreationDate = field("CreationDate")
    Public = field("Public")

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    Architecture = field("Architecture")
    ImageType = field("ImageType")
    KernelId = field("KernelId")
    RamdiskId = field("RamdiskId")
    Platform = field("Platform")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelCapacityReservationFleetsResult:
    boto3_raw_data: "type_defs.CancelCapacityReservationFleetsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SuccessfulFleetCancellations(self):  # pragma: no cover
        return CapacityReservationFleetCancellationState.make_many(
            self.boto3_raw_data["SuccessfulFleetCancellations"]
        )

    @cached_property
    def FailedFleetCancellations(self):  # pragma: no cover
        return FailedCapacityReservationFleetCancellationResult.make_many(
            self.boto3_raw_data["FailedFleetCancellations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelCapacityReservationFleetsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelCapacityReservationFleetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelSpotFleetRequestsResponse:
    boto3_raw_data: "type_defs.CancelSpotFleetRequestsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SuccessfulFleetRequests(self):  # pragma: no cover
        return CancelSpotFleetRequestsSuccessItem.make_many(
            self.boto3_raw_data["SuccessfulFleetRequests"]
        )

    @cached_property
    def UnsuccessfulFleetRequests(self):  # pragma: no cover
        return CancelSpotFleetRequestsErrorItem.make_many(
            self.boto3_raw_data["UnsuccessfulFleetRequests"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CancelSpotFleetRequestsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelSpotFleetRequestsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityBlockStatusResult:
    boto3_raw_data: "type_defs.DescribeCapacityBlockStatusResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityBlockStatuses(self):  # pragma: no cover
        return CapacityBlockStatus.make_many(
            self.boto3_raw_data["CapacityBlockStatuses"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityBlockStatusResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityBlockStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationBillingRequestsResult:
    boto3_raw_data: (
        "type_defs.DescribeCapacityReservationBillingRequestsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def CapacityReservationBillingRequests(self):  # pragma: no cover
        return CapacityReservationBillingRequest.make_many(
            self.boto3_raw_data["CapacityReservationBillingRequests"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationBillingRequestsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeCapacityReservationBillingRequestsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationBySplittingResult:
    boto3_raw_data: "type_defs.CreateCapacityReservationBySplittingResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceCapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(
            self.boto3_raw_data["SourceCapacityReservation"]
        )

    @cached_property
    def DestinationCapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(
            self.boto3_raw_data["DestinationCapacityReservation"]
        )

    InstanceCount = field("InstanceCount")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateCapacityReservationBySplittingResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationBySplittingResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationResult:
    boto3_raw_data: "type_defs.CreateCapacityReservationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(self.boto3_raw_data["CapacityReservation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateCapacityReservationResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationsResult:
    boto3_raw_data: "type_defs.DescribeCapacityReservationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityReservations(self):  # pragma: no cover
        return CapacityReservation.make_many(
            self.boto3_raw_data["CapacityReservations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityReservationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MoveCapacityReservationInstancesResult:
    boto3_raw_data: "type_defs.MoveCapacityReservationInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceCapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(
            self.boto3_raw_data["SourceCapacityReservation"]
        )

    @cached_property
    def DestinationCapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(
            self.boto3_raw_data["DestinationCapacityReservation"]
        )

    InstanceCount = field("InstanceCount")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.MoveCapacityReservationInstancesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MoveCapacityReservationInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseCapacityBlockResult:
    boto3_raw_data: "type_defs.PurchaseCapacityBlockResultTypeDef" = dataclasses.field()

    @cached_property
    def CapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(self.boto3_raw_data["CapacityReservation"])

    @cached_property
    def CapacityBlocks(self):  # pragma: no cover
        return CapacityBlock.make_many(self.boto3_raw_data["CapacityBlocks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PurchaseCapacityBlockResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseCapacityBlockResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCapacityReservationFleetsResult:
    boto3_raw_data: "type_defs.DescribeCapacityReservationFleetsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CapacityReservationFleets(self):  # pragma: no cover
        return CapacityReservationFleet.make_many(
            self.boto3_raw_data["CapacityReservationFleets"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCapacityReservationFleetsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCapacityReservationFleetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCapacityReservationAttributesRequest:
    boto3_raw_data: (
        "type_defs.ModifyInstanceCapacityReservationAttributesRequestTypeDef"
    ) = dataclasses.field()

    InstanceId = field("InstanceId")

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return CapacityReservationSpecification.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceCapacityReservationAttributesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyInstanceCapacityReservationAttributesRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClassicLinkInstancesResult:
    boto3_raw_data: "type_defs.DescribeClassicLinkInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Instances(self):  # pragma: no cover
        return ClassicLinkInstance.make_many(self.boto3_raw_data["Instances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClassicLinkInstancesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClassicLinkInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClientVpnEndpoint:
    boto3_raw_data: "type_defs.ClientVpnEndpointTypeDef" = dataclasses.field()

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Description = field("Description")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClientVpnEndpointStatus.make_one(self.boto3_raw_data["Status"])

    CreationTime = field("CreationTime")
    DeletionTime = field("DeletionTime")
    DnsName = field("DnsName")
    ClientCidrBlock = field("ClientCidrBlock")
    DnsServers = field("DnsServers")
    SplitTunnel = field("SplitTunnel")
    VpnProtocol = field("VpnProtocol")
    TransportProtocol = field("TransportProtocol")
    VpnPort = field("VpnPort")

    @cached_property
    def AssociatedTargetNetworks(self):  # pragma: no cover
        return AssociatedTargetNetwork.make_many(
            self.boto3_raw_data["AssociatedTargetNetworks"]
        )

    ServerCertificateArn = field("ServerCertificateArn")

    @cached_property
    def AuthenticationOptions(self):  # pragma: no cover
        return ClientVpnAuthentication.make_many(
            self.boto3_raw_data["AuthenticationOptions"]
        )

    @cached_property
    def ConnectionLogOptions(self):  # pragma: no cover
        return ConnectionLogResponseOptions.make_one(
            self.boto3_raw_data["ConnectionLogOptions"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SecurityGroupIds = field("SecurityGroupIds")
    VpcId = field("VpcId")
    SelfServicePortalUrl = field("SelfServicePortalUrl")

    @cached_property
    def ClientConnectOptions(self):  # pragma: no cover
        return ClientConnectResponseOptions.make_one(
            self.boto3_raw_data["ClientConnectOptions"]
        )

    SessionTimeoutHours = field("SessionTimeoutHours")

    @cached_property
    def ClientLoginBannerOptions(self):  # pragma: no cover
        return ClientLoginBannerResponseOptions.make_one(
            self.boto3_raw_data["ClientLoginBannerOptions"]
        )

    @cached_property
    def ClientRouteEnforcementOptions(self):  # pragma: no cover
        return ClientRouteEnforcementResponseOptions.make_one(
            self.boto3_raw_data["ClientRouteEnforcementOptions"]
        )

    DisconnectOnSessionTimeout = field("DisconnectOnSessionTimeout")
    EndpointIpAddressType = field("EndpointIpAddressType")
    TrafficIpAddressType = field("TrafficIpAddressType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClientVpnEndpointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClientVpnEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnConnectionsResult:
    boto3_raw_data: "type_defs.DescribeClientVpnConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Connections(self):  # pragma: no cover
        return ClientVpnConnection.make_many(self.boto3_raw_data["Connections"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClientVpnConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateClientVpnConnectionsResult:
    boto3_raw_data: "type_defs.TerminateClientVpnConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Username = field("Username")

    @cached_property
    def ConnectionStatuses(self):  # pragma: no cover
        return TerminateConnectionStatus.make_many(
            self.boto3_raw_data["ConnectionStatuses"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TerminateClientVpnConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateClientVpnConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnRoutesResult:
    boto3_raw_data: "type_defs.DescribeClientVpnRoutesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Routes(self):  # pragma: no cover
        return ClientVpnRoute.make_many(self.boto3_raw_data["Routes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeClientVpnRoutesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnRoutesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnTunnelOptionsSpecification:
    boto3_raw_data: "type_defs.ModifyVpnTunnelOptionsSpecificationTypeDef" = (
        dataclasses.field()
    )

    TunnelInsideCidr = field("TunnelInsideCidr")
    TunnelInsideIpv6Cidr = field("TunnelInsideIpv6Cidr")
    PreSharedKey = field("PreSharedKey")
    Phase1LifetimeSeconds = field("Phase1LifetimeSeconds")
    Phase2LifetimeSeconds = field("Phase2LifetimeSeconds")
    RekeyMarginTimeSeconds = field("RekeyMarginTimeSeconds")
    RekeyFuzzPercentage = field("RekeyFuzzPercentage")
    ReplayWindowSize = field("ReplayWindowSize")
    DPDTimeoutSeconds = field("DPDTimeoutSeconds")
    DPDTimeoutAction = field("DPDTimeoutAction")

    @cached_property
    def Phase1EncryptionAlgorithms(self):  # pragma: no cover
        return Phase1EncryptionAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase1EncryptionAlgorithms"]
        )

    @cached_property
    def Phase2EncryptionAlgorithms(self):  # pragma: no cover
        return Phase2EncryptionAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase2EncryptionAlgorithms"]
        )

    @cached_property
    def Phase1IntegrityAlgorithms(self):  # pragma: no cover
        return Phase1IntegrityAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase1IntegrityAlgorithms"]
        )

    @cached_property
    def Phase2IntegrityAlgorithms(self):  # pragma: no cover
        return Phase2IntegrityAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase2IntegrityAlgorithms"]
        )

    @cached_property
    def Phase1DHGroupNumbers(self):  # pragma: no cover
        return Phase1DHGroupNumbersRequestListValue.make_many(
            self.boto3_raw_data["Phase1DHGroupNumbers"]
        )

    @cached_property
    def Phase2DHGroupNumbers(self):  # pragma: no cover
        return Phase2DHGroupNumbersRequestListValue.make_many(
            self.boto3_raw_data["Phase2DHGroupNumbers"]
        )

    @cached_property
    def IKEVersions(self):  # pragma: no cover
        return IKEVersionsRequestListValue.make_many(self.boto3_raw_data["IKEVersions"])

    StartupAction = field("StartupAction")

    @cached_property
    def LogOptions(self):  # pragma: no cover
        return VpnTunnelLogOptionsSpecification.make_one(
            self.boto3_raw_data["LogOptions"]
        )

    EnableTunnelLifecycleControl = field("EnableTunnelLifecycleControl")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVpnTunnelOptionsSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnTunnelOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnTunnelOptionsSpecification:
    boto3_raw_data: "type_defs.VpnTunnelOptionsSpecificationTypeDef" = (
        dataclasses.field()
    )

    TunnelInsideCidr = field("TunnelInsideCidr")
    TunnelInsideIpv6Cidr = field("TunnelInsideIpv6Cidr")
    PreSharedKey = field("PreSharedKey")
    Phase1LifetimeSeconds = field("Phase1LifetimeSeconds")
    Phase2LifetimeSeconds = field("Phase2LifetimeSeconds")
    RekeyMarginTimeSeconds = field("RekeyMarginTimeSeconds")
    RekeyFuzzPercentage = field("RekeyFuzzPercentage")
    ReplayWindowSize = field("ReplayWindowSize")
    DPDTimeoutSeconds = field("DPDTimeoutSeconds")
    DPDTimeoutAction = field("DPDTimeoutAction")

    @cached_property
    def Phase1EncryptionAlgorithms(self):  # pragma: no cover
        return Phase1EncryptionAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase1EncryptionAlgorithms"]
        )

    @cached_property
    def Phase2EncryptionAlgorithms(self):  # pragma: no cover
        return Phase2EncryptionAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase2EncryptionAlgorithms"]
        )

    @cached_property
    def Phase1IntegrityAlgorithms(self):  # pragma: no cover
        return Phase1IntegrityAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase1IntegrityAlgorithms"]
        )

    @cached_property
    def Phase2IntegrityAlgorithms(self):  # pragma: no cover
        return Phase2IntegrityAlgorithmsRequestListValue.make_many(
            self.boto3_raw_data["Phase2IntegrityAlgorithms"]
        )

    @cached_property
    def Phase1DHGroupNumbers(self):  # pragma: no cover
        return Phase1DHGroupNumbersRequestListValue.make_many(
            self.boto3_raw_data["Phase1DHGroupNumbers"]
        )

    @cached_property
    def Phase2DHGroupNumbers(self):  # pragma: no cover
        return Phase2DHGroupNumbersRequestListValue.make_many(
            self.boto3_raw_data["Phase2DHGroupNumbers"]
        )

    @cached_property
    def IKEVersions(self):  # pragma: no cover
        return IKEVersionsRequestListValue.make_many(self.boto3_raw_data["IKEVersions"])

    StartupAction = field("StartupAction")

    @cached_property
    def LogOptions(self):  # pragma: no cover
        return VpnTunnelLogOptionsSpecification.make_one(
            self.boto3_raw_data["LogOptions"]
        )

    EnableTunnelLifecycleControl = field("EnableTunnelLifecycleControl")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpnTunnelOptionsSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnTunnelOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TunnelOption:
    boto3_raw_data: "type_defs.TunnelOptionTypeDef" = dataclasses.field()

    OutsideIpAddress = field("OutsideIpAddress")
    TunnelInsideCidr = field("TunnelInsideCidr")
    TunnelInsideIpv6Cidr = field("TunnelInsideIpv6Cidr")
    PreSharedKey = field("PreSharedKey")
    Phase1LifetimeSeconds = field("Phase1LifetimeSeconds")
    Phase2LifetimeSeconds = field("Phase2LifetimeSeconds")
    RekeyMarginTimeSeconds = field("RekeyMarginTimeSeconds")
    RekeyFuzzPercentage = field("RekeyFuzzPercentage")
    ReplayWindowSize = field("ReplayWindowSize")
    DpdTimeoutSeconds = field("DpdTimeoutSeconds")
    DpdTimeoutAction = field("DpdTimeoutAction")

    @cached_property
    def Phase1EncryptionAlgorithms(self):  # pragma: no cover
        return Phase1EncryptionAlgorithmsListValue.make_many(
            self.boto3_raw_data["Phase1EncryptionAlgorithms"]
        )

    @cached_property
    def Phase2EncryptionAlgorithms(self):  # pragma: no cover
        return Phase2EncryptionAlgorithmsListValue.make_many(
            self.boto3_raw_data["Phase2EncryptionAlgorithms"]
        )

    @cached_property
    def Phase1IntegrityAlgorithms(self):  # pragma: no cover
        return Phase1IntegrityAlgorithmsListValue.make_many(
            self.boto3_raw_data["Phase1IntegrityAlgorithms"]
        )

    @cached_property
    def Phase2IntegrityAlgorithms(self):  # pragma: no cover
        return Phase2IntegrityAlgorithmsListValue.make_many(
            self.boto3_raw_data["Phase2IntegrityAlgorithms"]
        )

    @cached_property
    def Phase1DHGroupNumbers(self):  # pragma: no cover
        return Phase1DHGroupNumbersListValue.make_many(
            self.boto3_raw_data["Phase1DHGroupNumbers"]
        )

    @cached_property
    def Phase2DHGroupNumbers(self):  # pragma: no cover
        return Phase2DHGroupNumbersListValue.make_many(
            self.boto3_raw_data["Phase2DHGroupNumbers"]
        )

    @cached_property
    def IkeVersions(self):  # pragma: no cover
        return IKEVersionsListValue.make_many(self.boto3_raw_data["IkeVersions"])

    StartupAction = field("StartupAction")

    @cached_property
    def LogOptions(self):  # pragma: no cover
        return VpnTunnelLogOptions.make_one(self.boto3_raw_data["LogOptions"])

    EnableTunnelLifecycleControl = field("EnableTunnelLifecycleControl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TunnelOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TunnelOptionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BaselinePerformanceFactorsOutput:
    boto3_raw_data: "type_defs.BaselinePerformanceFactorsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cpu(self):  # pragma: no cover
        return CpuPerformanceFactorOutput.make_one(self.boto3_raw_data["Cpu"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BaselinePerformanceFactorsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BaselinePerformanceFactorsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BaselinePerformanceFactorsRequest:
    boto3_raw_data: "type_defs.BaselinePerformanceFactorsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cpu(self):  # pragma: no cover
        return CpuPerformanceFactorRequest.make_one(self.boto3_raw_data["Cpu"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BaselinePerformanceFactorsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BaselinePerformanceFactorsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkAcl:
    boto3_raw_data: "type_defs.NetworkAclTypeDef" = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return NetworkAclAssociation.make_many(self.boto3_raw_data["Associations"])

    @cached_property
    def Entries(self):  # pragma: no cover
        return NetworkAclEntry.make_many(self.boto3_raw_data["Entries"])

    IsDefault = field("IsDefault")
    NetworkAclId = field("NetworkAclId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcId = field("VpcId")
    OwnerId = field("OwnerId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkAclTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkAclTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySnapshotAttributeRequestSnapshotModifyAttribute:
    boto3_raw_data: (
        "type_defs.ModifySnapshotAttributeRequestSnapshotModifyAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")

    @cached_property
    def CreateVolumePermission(self):  # pragma: no cover
        return CreateVolumePermissionModifications.make_one(
            self.boto3_raw_data["CreateVolumePermission"]
        )

    GroupNames = field("GroupNames")
    OperationType = field("OperationType")
    UserIds = field("UserIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifySnapshotAttributeRequestSnapshotModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifySnapshotAttributeRequestSnapshotModifyAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySnapshotAttributeRequest:
    boto3_raw_data: "type_defs.ModifySnapshotAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")
    Attribute = field("Attribute")

    @cached_property
    def CreateVolumePermission(self):  # pragma: no cover
        return CreateVolumePermissionModifications.make_one(
            self.boto3_raw_data["CreateVolumePermission"]
        )

    GroupNames = field("GroupNames")
    OperationType = field("OperationType")
    UserIds = field("UserIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifySnapshotAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySnapshotAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAwsNetworkPerformanceDataResult:
    boto3_raw_data: "type_defs.GetAwsNetworkPerformanceDataResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataResponses(self):  # pragma: no cover
        return DataResponse.make_many(self.boto3_raw_data["DataResponses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetAwsNetworkPerformanceDataResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAwsNetworkPerformanceDataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFleetsResult:
    boto3_raw_data: "type_defs.DeleteFleetsResultTypeDef" = dataclasses.field()

    @cached_property
    def SuccessfulFleetDeletions(self):  # pragma: no cover
        return DeleteFleetSuccessItem.make_many(
            self.boto3_raw_data["SuccessfulFleetDeletions"]
        )

    @cached_property
    def UnsuccessfulFleetDeletions(self):  # pragma: no cover
        return DeleteFleetErrorItem.make_many(
            self.boto3_raw_data["UnsuccessfulFleetDeletions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFleetsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFleetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateVersionsResult:
    boto3_raw_data: "type_defs.DeleteLaunchTemplateVersionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SuccessfullyDeletedLaunchTemplateVersions(self):  # pragma: no cover
        return DeleteLaunchTemplateVersionsResponseSuccessItem.make_many(
            self.boto3_raw_data["SuccessfullyDeletedLaunchTemplateVersions"]
        )

    @cached_property
    def UnsuccessfullyDeletedLaunchTemplateVersions(self):  # pragma: no cover
        return DeleteLaunchTemplateVersionsResponseErrorItem.make_many(
            self.boto3_raw_data["UnsuccessfullyDeletedLaunchTemplateVersions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLaunchTemplateVersionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLaunchTemplateVersionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteQueuedReservedInstancesResult:
    boto3_raw_data: "type_defs.DeleteQueuedReservedInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SuccessfulQueuedPurchaseDeletions(self):  # pragma: no cover
        return SuccessfulQueuedPurchaseDeletion.make_many(
            self.boto3_raw_data["SuccessfulQueuedPurchaseDeletions"]
        )

    @cached_property
    def FailedQueuedPurchaseDeletions(self):  # pragma: no cover
        return FailedQueuedPurchaseDeletion.make_many(
            self.boto3_raw_data["FailedQueuedPurchaseDeletions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteQueuedReservedInstancesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteQueuedReservedInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceImageCriteriaInAllowedImagesSettingsRequest:
    boto3_raw_data: (
        "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsRequestTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ImageCriteria(self):  # pragma: no cover
        return ImageCriterionRequest.make_many(self.boto3_raw_data["ImageCriteria"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ReplaceImageCriteriaInAllowedImagesSettingsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAllowedImagesSettingsResult:
    boto3_raw_data: "type_defs.GetAllowedImagesSettingsResultTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @cached_property
    def ImageCriteria(self):  # pragma: no cover
        return ImageCriterion.make_many(self.boto3_raw_data["ImageCriteria"])

    ManagedBy = field("ManagedBy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetAllowedImagesSettingsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAllowedImagesSettingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePrincipalIdFormatResult:
    boto3_raw_data: "type_defs.DescribePrincipalIdFormatResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Principals(self):  # pragma: no cover
        return PrincipalIdFormat.make_many(self.boto3_raw_data["Principals"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePrincipalIdFormatResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePrincipalIdFormatResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFastLaunchImagesResult:
    boto3_raw_data: "type_defs.DescribeFastLaunchImagesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FastLaunchImages(self):  # pragma: no cover
        return DescribeFastLaunchImagesSuccessItem.make_many(
            self.boto3_raw_data["FastLaunchImages"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFastLaunchImagesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFastLaunchImagesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFlowLogsResult:
    boto3_raw_data: "type_defs.DescribeFlowLogsResultTypeDef" = dataclasses.field()

    @cached_property
    def FlowLogs(self):  # pragma: no cover
        return FlowLog.make_many(self.boto3_raw_data["FlowLogs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFlowLogsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFlowLogsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoreErrorItem:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoreErrorItemTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")

    @cached_property
    def FastSnapshotRestoreStateErrors(self):  # pragma: no cover
        return DisableFastSnapshotRestoreStateErrorItem.make_many(
            self.boto3_raw_data["FastSnapshotRestoreStateErrors"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoreErrorItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoreErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportInstanceTaskDetails:
    boto3_raw_data: "type_defs.ImportInstanceTaskDetailsTypeDef" = dataclasses.field()

    Description = field("Description")
    InstanceId = field("InstanceId")
    Platform = field("Platform")

    @cached_property
    def Volumes(self):  # pragma: no cover
        return ImportInstanceVolumeDetailItem.make_many(self.boto3_raw_data["Volumes"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportInstanceTaskDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportInstanceTaskDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointAssociationsResult:
    boto3_raw_data: "type_defs.DescribeVpcEndpointAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcEndpointAssociations(self):  # pragma: no cover
        return VpcEndpointAssociation.make_many(
            self.boto3_raw_data["VpcEndpointAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointConnectionsResult:
    boto3_raw_data: "type_defs.DescribeVpcEndpointConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcEndpointConnections(self):  # pragma: no cover
        return VpcEndpointConnection.make_many(
            self.boto3_raw_data["VpcEndpointConnections"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceAttributeRequestInstanceModifyAttribute:
    boto3_raw_data: (
        "type_defs.ModifyInstanceAttributeRequestInstanceModifyAttributeTypeDef"
    ) = dataclasses.field()

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    @cached_property
    def DisableApiStop(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["DisableApiStop"])

    DryRun = field("DryRun")
    Attribute = field("Attribute")
    Value = field("Value")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return InstanceBlockDeviceMappingSpecification.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def DisableApiTermination(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["DisableApiTermination"]
        )

    @cached_property
    def InstanceType(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["InstanceType"])

    @cached_property
    def Kernel(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Kernel"])

    @cached_property
    def Ramdisk(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Ramdisk"])

    @cached_property
    def UserData(self):  # pragma: no cover
        return BlobAttributeValue.make_one(self.boto3_raw_data["UserData"])

    @cached_property
    def InstanceInitiatedShutdownBehavior(self):  # pragma: no cover
        return AttributeValue.make_one(
            self.boto3_raw_data["InstanceInitiatedShutdownBehavior"]
        )

    Groups = field("Groups")

    @cached_property
    def EbsOptimized(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EbsOptimized"])

    @cached_property
    def SriovNetSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["SriovNetSupport"])

    @cached_property
    def EnaSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnaSupport"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceAttributeRequestInstanceModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyInstanceAttributeRequestInstanceModifyAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceAttributeRequest:
    boto3_raw_data: "type_defs.ModifyInstanceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    @cached_property
    def DisableApiStop(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["DisableApiStop"])

    DryRun = field("DryRun")
    Attribute = field("Attribute")
    Value = field("Value")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return InstanceBlockDeviceMappingSpecification.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def DisableApiTermination(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["DisableApiTermination"]
        )

    @cached_property
    def InstanceType(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["InstanceType"])

    @cached_property
    def Kernel(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Kernel"])

    @cached_property
    def Ramdisk(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Ramdisk"])

    @cached_property
    def UserData(self):  # pragma: no cover
        return BlobAttributeValue.make_one(self.boto3_raw_data["UserData"])

    @cached_property
    def InstanceInitiatedShutdownBehavior(self):  # pragma: no cover
        return AttributeValue.make_one(
            self.boto3_raw_data["InstanceInitiatedShutdownBehavior"]
        )

    Groups = field("Groups")

    @cached_property
    def EbsOptimized(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EbsOptimized"])

    @cached_property
    def SriovNetSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["SriovNetSupport"])

    @cached_property
    def EnaSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnaSupport"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstanceAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceBlockDeviceMapping:
    boto3_raw_data: "type_defs.InstanceBlockDeviceMappingTypeDef" = dataclasses.field()

    DeviceName = field("DeviceName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return EbsInstanceBlockDevice.make_one(self.boto3_raw_data["Ebs"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceBlockDeviceMappingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceBlockDeviceMappingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLaunchTemplateResult:
    boto3_raw_data: "type_defs.DeleteLaunchTemplateResultTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplate.make_one(self.boto3_raw_data["LaunchTemplate"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteLaunchTemplateResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLaunchTemplateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplatesResult:
    boto3_raw_data: "type_defs.DescribeLaunchTemplatesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplates(self):  # pragma: no cover
        return LaunchTemplate.make_many(self.boto3_raw_data["LaunchTemplates"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeLaunchTemplatesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplatesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyLaunchTemplateResult:
    boto3_raw_data: "type_defs.ModifyLaunchTemplateResultTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplate.make_one(self.boto3_raw_data["LaunchTemplate"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyLaunchTemplateResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyLaunchTemplateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEgressOnlyInternetGatewayResult:
    boto3_raw_data: "type_defs.CreateEgressOnlyInternetGatewayResultTypeDef" = (
        dataclasses.field()
    )

    ClientToken = field("ClientToken")

    @cached_property
    def EgressOnlyInternetGateway(self):  # pragma: no cover
        return EgressOnlyInternetGateway.make_one(
            self.boto3_raw_data["EgressOnlyInternetGateway"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateEgressOnlyInternetGatewayResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEgressOnlyInternetGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEgressOnlyInternetGatewaysResult:
    boto3_raw_data: "type_defs.DescribeEgressOnlyInternetGatewaysResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EgressOnlyInternetGateways(self):  # pragma: no cover
        return EgressOnlyInternetGateway.make_many(
            self.boto3_raw_data["EgressOnlyInternetGateways"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeEgressOnlyInternetGatewaysResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEgressOnlyInternetGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInternetGatewayResult:
    boto3_raw_data: "type_defs.CreateInternetGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def InternetGateway(self):  # pragma: no cover
        return InternetGateway.make_one(self.boto3_raw_data["InternetGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateInternetGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInternetGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInternetGatewaysResult:
    boto3_raw_data: "type_defs.DescribeInternetGatewaysResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InternetGateways(self):  # pragma: no cover
        return InternetGateway.make_many(self.boto3_raw_data["InternetGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInternetGatewaysResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInternetGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeElasticGpusResult:
    boto3_raw_data: "type_defs.DescribeElasticGpusResultTypeDef" = dataclasses.field()

    @cached_property
    def ElasticGpuSet(self):  # pragma: no cover
        return ElasticGpus.make_many(self.boto3_raw_data["ElasticGpuSet"])

    MaxResults = field("MaxResults")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeElasticGpusResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeElasticGpusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkInterfaceSpecificationOutput:
    boto3_raw_data: "type_defs.InstanceNetworkInterfaceSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")
    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    InterfaceType = field("InterfaceType")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    PrimaryIpv6 = field("PrimaryIpv6")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecificationRequest.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkInterfaceSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkInterfaceSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkInterfaceSpecification:
    boto3_raw_data: "type_defs.InstanceNetworkInterfaceSpecificationTypeDef" = (
        dataclasses.field()
    )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")
    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    InterfaceType = field("InterfaceType")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    PrimaryIpv6 = field("PrimaryIpv6")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecificationRequest.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkInterfaceSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkInterfaceSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest:
    boto3_raw_data: (
        "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationRequestTypeDef"
    ) = dataclasses.field()

    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    InterfaceType = field("InterfaceType")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6AddressRequest.make_many(
            self.boto3_raw_data["Ipv6Addresses"]
        )

    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    PrimaryIpv6 = field("PrimaryIpv6")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecificationRequest.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachNetworkInterfaceRequestNetworkInterfaceAttach:
    boto3_raw_data: (
        "type_defs.AttachNetworkInterfaceRequestNetworkInterfaceAttachTypeDef"
    ) = dataclasses.field()

    InstanceId = field("InstanceId")
    DeviceIndex = field("DeviceIndex")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecification.make_one(self.boto3_raw_data["EnaSrdSpecification"])

    EnaQueueCount = field("EnaQueueCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachNetworkInterfaceRequestNetworkInterfaceAttachTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AttachNetworkInterfaceRequestNetworkInterfaceAttachTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachNetworkInterfaceRequest:
    boto3_raw_data: "type_defs.AttachNetworkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    InstanceId = field("InstanceId")
    DeviceIndex = field("DeviceIndex")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecification.make_one(self.boto3_raw_data["EnaSrdSpecification"])

    EnaQueueCount = field("EnaQueueCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AttachNetworkInterfaceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachNetworkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyNetworkInterfaceAttributeRequestNetworkInterfaceModifyAttribute:
    boto3_raw_data: "type_defs.ModifyNetworkInterfaceAttributeRequestNetworkInterfaceModifyAttributeTypeDef" = (dataclasses.field())

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecification.make_one(self.boto3_raw_data["EnaSrdSpecification"])

    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    AssociatedSubnetIds = field("AssociatedSubnetIds")
    DryRun = field("DryRun")

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    Groups = field("Groups")

    @cached_property
    def Attachment(self):  # pragma: no cover
        return NetworkInterfaceAttachmentChanges.make_one(
            self.boto3_raw_data["Attachment"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyNetworkInterfaceAttributeRequestNetworkInterfaceModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyNetworkInterfaceAttributeRequestNetworkInterfaceModifyAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyNetworkInterfaceAttributeRequest:
    boto3_raw_data: "type_defs.ModifyNetworkInterfaceAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return EnaSrdSpecification.make_one(self.boto3_raw_data["EnaSrdSpecification"])

    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    AssociatedSubnetIds = field("AssociatedSubnetIds")
    DryRun = field("DryRun")

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    Groups = field("Groups")

    @cached_property
    def Attachment(self):  # pragma: no cover
        return NetworkInterfaceAttachmentChanges.make_one(
            self.boto3_raw_data["Attachment"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyNetworkInterfaceAttributeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyNetworkInterfaceAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoreErrorItem:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoreErrorItemTypeDef" = (
        dataclasses.field()
    )

    SnapshotId = field("SnapshotId")

    @cached_property
    def FastSnapshotRestoreStateErrors(self):  # pragma: no cover
        return EnableFastSnapshotRestoreStateErrorItem.make_many(
            self.boto3_raw_data["FastSnapshotRestoreStateErrors"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableFastSnapshotRestoreErrorItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoreErrorItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetHistoryResult:
    boto3_raw_data: "type_defs.DescribeFleetHistoryResultTypeDef" = dataclasses.field()

    @cached_property
    def HistoryRecords(self):  # pragma: no cover
        return HistoryRecordEntry.make_many(self.boto3_raw_data["HistoryRecords"])

    LastEvaluatedTime = field("LastEvaluatedTime")
    FleetId = field("FleetId")
    StartTime = field("StartTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetHistoryResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetHistoryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetRequestHistoryResponse:
    boto3_raw_data: "type_defs.DescribeSpotFleetRequestHistoryResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HistoryRecords(self):  # pragma: no cover
        return HistoryRecord.make_many(self.boto3_raw_data["HistoryRecords"])

    LastEvaluatedTime = field("LastEvaluatedTime")
    SpotFleetRequestId = field("SpotFleetRequestId")
    StartTime = field("StartTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetRequestHistoryResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetRequestHistoryResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportImageTasksResult:
    boto3_raw_data: "type_defs.DescribeExportImageTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ExportImageTasks(self):  # pragma: no cover
        return ExportImageTask.make_many(self.boto3_raw_data["ExportImageTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeExportImageTasksResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportImageTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceExportTaskResult:
    boto3_raw_data: "type_defs.CreateInstanceExportTaskResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ExportTask(self):  # pragma: no cover
        return ExportTask.make_one(self.boto3_raw_data["ExportTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInstanceExportTaskResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceExportTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExportTasksResult:
    boto3_raw_data: "type_defs.DescribeExportTasksResultTypeDef" = dataclasses.field()

    @cached_property
    def ExportTasks(self):  # pragma: no cover
        return ExportTask.make_many(self.boto3_raw_data["ExportTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeExportTasksResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExportTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInsightsPath:
    boto3_raw_data: "type_defs.NetworkInsightsPathTypeDef" = dataclasses.field()

    NetworkInsightsPathId = field("NetworkInsightsPathId")
    NetworkInsightsPathArn = field("NetworkInsightsPathArn")
    CreatedDate = field("CreatedDate")
    Source = field("Source")
    Destination = field("Destination")
    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    SourceIp = field("SourceIp")
    DestinationIp = field("DestinationIp")
    Protocol = field("Protocol")
    DestinationPort = field("DestinationPort")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def FilterAtSource(self):  # pragma: no cover
        return PathFilter.make_one(self.boto3_raw_data["FilterAtSource"])

    @cached_property
    def FilterAtDestination(self):  # pragma: no cover
        return PathFilter.make_one(self.boto3_raw_data["FilterAtDestination"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInsightsPathTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInsightsPathTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotOptionsRequest:
    boto3_raw_data: "type_defs.SpotOptionsRequestTypeDef" = dataclasses.field()

    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def MaintenanceStrategies(self):  # pragma: no cover
        return FleetSpotMaintenanceStrategiesRequest.make_one(
            self.boto3_raw_data["MaintenanceStrategies"]
        )

    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")
    InstancePoolsToUseCount = field("InstancePoolsToUseCount")
    SingleInstanceType = field("SingleInstanceType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    MinTargetCapacity = field("MinTargetCapacity")
    MaxTotalPrice = field("MaxTotalPrice")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotOptions:
    boto3_raw_data: "type_defs.SpotOptionsTypeDef" = dataclasses.field()

    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def MaintenanceStrategies(self):  # pragma: no cover
        return FleetSpotMaintenanceStrategies.make_one(
            self.boto3_raw_data["MaintenanceStrategies"]
        )

    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")
    InstancePoolsToUseCount = field("InstancePoolsToUseCount")
    SingleInstanceType = field("SingleInstanceType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    MinTargetCapacity = field("MinTargetCapacity")
    MaxTotalPrice = field("MaxTotalPrice")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpotOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpotOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FpgaInfo:
    boto3_raw_data: "type_defs.FpgaInfoTypeDef" = dataclasses.field()

    @cached_property
    def Fpgas(self):  # pragma: no cover
        return FpgaDeviceInfo.make_many(self.boto3_raw_data["Fpgas"])

    TotalFpgaMemoryInMiB = field("TotalFpgaMemoryInMiB")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FpgaInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FpgaInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFpgaImageAttributeResult:
    boto3_raw_data: "type_defs.DescribeFpgaImageAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FpgaImageAttribute(self):  # pragma: no cover
        return FpgaImageAttribute.make_one(self.boto3_raw_data["FpgaImageAttribute"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFpgaImageAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFpgaImageAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyFpgaImageAttributeResult:
    boto3_raw_data: "type_defs.ModifyFpgaImageAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FpgaImageAttribute(self):  # pragma: no cover
        return FpgaImageAttribute.make_one(self.boto3_raw_data["FpgaImageAttribute"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyFpgaImageAttributeResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyFpgaImageAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFpgaImagesResult:
    boto3_raw_data: "type_defs.DescribeFpgaImagesResultTypeDef" = dataclasses.field()

    @cached_property
    def FpgaImages(self):  # pragma: no cover
        return FpgaImage.make_many(self.boto3_raw_data["FpgaImages"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFpgaImagesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFpgaImagesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GpuInfo:
    boto3_raw_data: "type_defs.GpuInfoTypeDef" = dataclasses.field()

    @cached_property
    def Gpus(self):  # pragma: no cover
        return GpuDeviceInfo.make_many(self.boto3_raw_data["Gpus"])

    TotalGpuMemoryInMiB = field("TotalGpuMemoryInMiB")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GpuInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GpuInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIamInstanceProfileResult:
    boto3_raw_data: "type_defs.AssociateIamInstanceProfileResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfileAssociation(self):  # pragma: no cover
        return IamInstanceProfileAssociation.make_one(
            self.boto3_raw_data["IamInstanceProfileAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateIamInstanceProfileResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIamInstanceProfileResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIamInstanceProfileAssociationsResult:
    boto3_raw_data: "type_defs.DescribeIamInstanceProfileAssociationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfileAssociations(self):  # pragma: no cover
        return IamInstanceProfileAssociation.make_many(
            self.boto3_raw_data["IamInstanceProfileAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIamInstanceProfileAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIamInstanceProfileAssociationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateIamInstanceProfileResult:
    boto3_raw_data: "type_defs.DisassociateIamInstanceProfileResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfileAssociation(self):  # pragma: no cover
        return IamInstanceProfileAssociation.make_one(
            self.boto3_raw_data["IamInstanceProfileAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateIamInstanceProfileResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateIamInstanceProfileResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceIamInstanceProfileAssociationResult:
    boto3_raw_data: "type_defs.ReplaceIamInstanceProfileAssociationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IamInstanceProfileAssociation(self):  # pragma: no cover
        return IamInstanceProfileAssociation.make_one(
            self.boto3_raw_data["IamInstanceProfileAssociation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReplaceIamInstanceProfileAssociationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceIamInstanceProfileAssociationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyImageAttributeRequestImageModifyAttribute:
    boto3_raw_data: (
        "type_defs.ModifyImageAttributeRequestImageModifyAttributeTypeDef"
    ) = dataclasses.field()

    Attribute = field("Attribute")

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def LaunchPermission(self):  # pragma: no cover
        return LaunchPermissionModifications.make_one(
            self.boto3_raw_data["LaunchPermission"]
        )

    OperationType = field("OperationType")
    ProductCodes = field("ProductCodes")
    UserGroups = field("UserGroups")
    UserIds = field("UserIds")
    Value = field("Value")
    OrganizationArns = field("OrganizationArns")
    OrganizationalUnitArns = field("OrganizationalUnitArns")

    @cached_property
    def ImdsSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["ImdsSupport"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyImageAttributeRequestImageModifyAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyImageAttributeRequestImageModifyAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyImageAttributeRequest:
    boto3_raw_data: "type_defs.ModifyImageAttributeRequestTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    Attribute = field("Attribute")

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def LaunchPermission(self):  # pragma: no cover
        return LaunchPermissionModifications.make_one(
            self.boto3_raw_data["LaunchPermission"]
        )

    OperationType = field("OperationType")
    ProductCodes = field("ProductCodes")
    UserGroups = field("UserGroups")
    UserIds = field("UserIds")
    Value = field("Value")
    OrganizationArns = field("OrganizationArns")
    OrganizationalUnitArns = field("OrganizationalUnitArns")

    @cached_property
    def ImdsSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["ImdsSupport"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyImageAttributeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableResult:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayRouteTable(self):  # pragma: no cover
        return LocalGatewayRouteTable.make_one(
            self.boto3_raw_data["LocalGatewayRouteTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteLocalGatewayRouteTableResult:
    boto3_raw_data: "type_defs.DeleteLocalGatewayRouteTableResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayRouteTable(self):  # pragma: no cover
        return LocalGatewayRouteTable.make_one(
            self.boto3_raw_data["LocalGatewayRouteTable"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteLocalGatewayRouteTableResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteLocalGatewayRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLocalGatewayRouteTablesResult:
    boto3_raw_data: "type_defs.DescribeLocalGatewayRouteTablesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalGatewayRouteTables(self):  # pragma: no cover
        return LocalGatewayRouteTable.make_many(
            self.boto3_raw_data["LocalGatewayRouteTables"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLocalGatewayRouteTablesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLocalGatewayRouteTablesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageUsageReport:
    boto3_raw_data: "type_defs.ImageUsageReportTypeDef" = dataclasses.field()

    ImageId = field("ImageId")
    ReportId = field("ReportId")

    @cached_property
    def ResourceTypes(self):  # pragma: no cover
        return ImageUsageResourceType.make_many(self.boto3_raw_data["ResourceTypes"])

    AccountIds = field("AccountIds")
    State = field("State")
    StateReason = field("StateReason")
    CreationTime = field("CreationTime")
    ExpirationTime = field("ExpirationTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageUsageReportTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageUsageReportTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportInstanceRequest:
    boto3_raw_data: "type_defs.ImportInstanceRequestTypeDef" = dataclasses.field()

    Platform = field("Platform")
    DryRun = field("DryRun")
    Description = field("Description")

    @cached_property
    def LaunchSpecification(self):  # pragma: no cover
        return ImportInstanceLaunchSpecification.make_one(
            self.boto3_raw_data["LaunchSpecification"]
        )

    @cached_property
    def DiskImages(self):  # pragma: no cover
        return DiskImage.make_many(self.boto3_raw_data["DiskImages"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportInstanceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceAcceleratorInfo:
    boto3_raw_data: "type_defs.InferenceAcceleratorInfoTypeDef" = dataclasses.field()

    @cached_property
    def Accelerators(self):  # pragma: no cover
        return InferenceDeviceInfo.make_many(self.boto3_raw_data["Accelerators"])

    TotalInferenceMemoryInMiB = field("TotalInferenceMemoryInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceAcceleratorInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceAcceleratorInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkInterfaceAttachment:
    boto3_raw_data: "type_defs.InstanceNetworkInterfaceAttachmentTypeDef" = (
        dataclasses.field()
    )

    AttachTime = field("AttachTime")
    AttachmentId = field("AttachmentId")
    DeleteOnTermination = field("DeleteOnTermination")
    DeviceIndex = field("DeviceIndex")
    Status = field("Status")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return InstanceAttachmentEnaSrdSpecification.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceNetworkInterfaceAttachmentTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkInterfaceAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ec2InstanceConnectEndpoint:
    boto3_raw_data: "type_defs.Ec2InstanceConnectEndpointTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    InstanceConnectEndpointId = field("InstanceConnectEndpointId")
    InstanceConnectEndpointArn = field("InstanceConnectEndpointArn")
    State = field("State")
    StateMessage = field("StateMessage")
    DnsName = field("DnsName")
    FipsDnsName = field("FipsDnsName")
    NetworkInterfaceIds = field("NetworkInterfaceIds")
    VpcId = field("VpcId")
    AvailabilityZone = field("AvailabilityZone")
    CreatedAt = field("CreatedAt")
    SubnetId = field("SubnetId")
    PreserveClientIp = field("PreserveClientIp")
    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    IpAddressType = field("IpAddressType")

    @cached_property
    def PublicDnsNames(self):  # pragma: no cover
        return InstanceConnectEndpointPublicDnsNames.make_one(
            self.boto3_raw_data["PublicDnsNames"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ec2InstanceConnectEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ec2InstanceConnectEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceImageMetadataResult:
    boto3_raw_data: "type_defs.DescribeInstanceImageMetadataResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceImageMetadata(self):  # pragma: no cover
        return InstanceImageMetadata.make_many(
            self.boto3_raw_data["InstanceImageMetadata"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceImageMetadataResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceImageMetadataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartInstancesResult:
    boto3_raw_data: "type_defs.StartInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def StartingInstances(self):  # pragma: no cover
        return InstanceStateChange.make_many(self.boto3_raw_data["StartingInstances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StartInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInstancesResult:
    boto3_raw_data: "type_defs.StopInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def StoppingInstances(self):  # pragma: no cover
        return InstanceStateChange.make_many(self.boto3_raw_data["StoppingInstances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TerminateInstancesResult:
    boto3_raw_data: "type_defs.TerminateInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def TerminatingInstances(self):  # pragma: no cover
        return InstanceStateChange.make_many(
            self.boto3_raw_data["TerminatingInstances"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TerminateInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TerminateInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitorInstancesResult:
    boto3_raw_data: "type_defs.MonitorInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def InstanceMonitorings(self):  # pragma: no cover
        return InstanceMonitoring.make_many(self.boto3_raw_data["InstanceMonitorings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitorInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitorInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnmonitorInstancesResult:
    boto3_raw_data: "type_defs.UnmonitorInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def InstanceMonitorings(self):  # pragma: no cover
        return InstanceMonitoring.make_many(self.boto3_raw_data["InstanceMonitorings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnmonitorInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnmonitorInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceStatus:
    boto3_raw_data: "type_defs.InstanceStatusTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    OutpostArn = field("OutpostArn")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @cached_property
    def Events(self):  # pragma: no cover
        return InstanceStatusEvent.make_many(self.boto3_raw_data["Events"])

    InstanceId = field("InstanceId")

    @cached_property
    def InstanceState(self):  # pragma: no cover
        return InstanceState.make_one(self.boto3_raw_data["InstanceState"])

    @cached_property
    def InstanceStatus(self):  # pragma: no cover
        return InstanceStatusSummary.make_one(self.boto3_raw_data["InstanceStatus"])

    @cached_property
    def SystemStatus(self):  # pragma: no cover
        return InstanceStatusSummary.make_one(self.boto3_raw_data["SystemStatus"])

    @cached_property
    def AttachedEbsStatus(self):  # pragma: no cover
        return EbsStatusSummary.make_one(self.boto3_raw_data["AttachedEbsStatus"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceStatusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceStatusTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupEgressResult:
    boto3_raw_data: "type_defs.RevokeSecurityGroupEgressResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def UnknownIpPermissions(self):  # pragma: no cover
        return IpPermissionOutput.make_many(self.boto3_raw_data["UnknownIpPermissions"])

    @cached_property
    def RevokedSecurityGroupRules(self):  # pragma: no cover
        return RevokedSecurityGroupRule.make_many(
            self.boto3_raw_data["RevokedSecurityGroupRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RevokeSecurityGroupEgressResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeSecurityGroupEgressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupIngressResult:
    boto3_raw_data: "type_defs.RevokeSecurityGroupIngressResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def UnknownIpPermissions(self):  # pragma: no cover
        return IpPermissionOutput.make_many(self.boto3_raw_data["UnknownIpPermissions"])

    @cached_property
    def RevokedSecurityGroupRules(self):  # pragma: no cover
        return RevokedSecurityGroupRule.make_many(
            self.boto3_raw_data["RevokedSecurityGroupRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RevokeSecurityGroupIngressResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeSecurityGroupIngressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityGroup:
    boto3_raw_data: "type_defs.SecurityGroupTypeDef" = dataclasses.field()

    GroupId = field("GroupId")

    @cached_property
    def IpPermissionsEgress(self):  # pragma: no cover
        return IpPermissionOutput.make_many(self.boto3_raw_data["IpPermissionsEgress"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcId = field("VpcId")
    SecurityGroupArn = field("SecurityGroupArn")
    OwnerId = field("OwnerId")
    GroupName = field("GroupName")
    Description = field("Description")

    @cached_property
    def IpPermissions(self):  # pragma: no cover
        return IpPermissionOutput.make_many(self.boto3_raw_data["IpPermissions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SecurityGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SecurityGroupTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaleSecurityGroup:
    boto3_raw_data: "type_defs.StaleSecurityGroupTypeDef" = dataclasses.field()

    Description = field("Description")
    GroupId = field("GroupId")
    GroupName = field("GroupName")

    @cached_property
    def StaleIpPermissions(self):  # pragma: no cover
        return StaleIpPermission.make_many(self.boto3_raw_data["StaleIpPermissions"])

    @cached_property
    def StaleIpPermissionsEgress(self):  # pragma: no cover
        return StaleIpPermission.make_many(
            self.boto3_raw_data["StaleIpPermissionsEgress"]
        )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StaleSecurityGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StaleSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredAccountsResult:
    boto3_raw_data: "type_defs.GetIpamDiscoveredAccountsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamDiscoveredAccounts(self):  # pragma: no cover
        return IpamDiscoveredAccount.make_many(
            self.boto3_raw_data["IpamDiscoveredAccounts"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetIpamDiscoveredAccountsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredAccountsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredResourceCidrsResult:
    boto3_raw_data: "type_defs.GetIpamDiscoveredResourceCidrsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamDiscoveredResourceCidrs(self):  # pragma: no cover
        return IpamDiscoveredResourceCidr.make_many(
            self.boto3_raw_data["IpamDiscoveredResourceCidrs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredResourceCidrsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredResourceCidrsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamResourceCidrsResult:
    boto3_raw_data: "type_defs.GetIpamResourceCidrsResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamResourceCidrs(self):  # pragma: no cover
        return IpamResourceCidr.make_many(self.boto3_raw_data["IpamResourceCidrs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamResourceCidrsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamResourceCidrsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamResourceCidrResult:
    boto3_raw_data: "type_defs.ModifyIpamResourceCidrResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceCidr(self):  # pragma: no cover
        return IpamResourceCidr.make_one(self.boto3_raw_data["IpamResourceCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamResourceCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamResourceCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamResult:
    boto3_raw_data: "type_defs.CreateIpamResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipam(self):  # pragma: no cover
        return Ipam.make_one(self.boto3_raw_data["Ipam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateIpamResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamResult:
    boto3_raw_data: "type_defs.DeleteIpamResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipam(self):  # pragma: no cover
        return Ipam.make_one(self.boto3_raw_data["Ipam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamsResult:
    boto3_raw_data: "type_defs.DescribeIpamsResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipams(self):  # pragma: no cover
        return Ipam.make_many(self.boto3_raw_data["Ipams"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamResult:
    boto3_raw_data: "type_defs.ModifyIpamResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipam(self):  # pragma: no cover
        return Ipam.make_one(self.boto3_raw_data["Ipam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamResourceDiscoveryResult:
    boto3_raw_data: "type_defs.CreateIpamResourceDiscoveryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscovery(self):  # pragma: no cover
        return IpamResourceDiscovery.make_one(
            self.boto3_raw_data["IpamResourceDiscovery"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateIpamResourceDiscoveryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamResourceDiscoveryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamResourceDiscoveryResult:
    boto3_raw_data: "type_defs.DeleteIpamResourceDiscoveryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscovery(self):  # pragma: no cover
        return IpamResourceDiscovery.make_one(
            self.boto3_raw_data["IpamResourceDiscovery"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIpamResourceDiscoveryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamResourceDiscoveryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamResourceDiscoveriesResult:
    boto3_raw_data: "type_defs.DescribeIpamResourceDiscoveriesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscoveries(self):  # pragma: no cover
        return IpamResourceDiscovery.make_many(
            self.boto3_raw_data["IpamResourceDiscoveries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIpamResourceDiscoveriesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamResourceDiscoveriesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamResourceDiscoveryResult:
    boto3_raw_data: "type_defs.ModifyIpamResourceDiscoveryResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamResourceDiscovery(self):  # pragma: no cover
        return IpamResourceDiscovery.make_one(
            self.boto3_raw_data["IpamResourceDiscovery"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyIpamResourceDiscoveryResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamResourceDiscoveryResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeprovisionIpamPoolCidrResult:
    boto3_raw_data: "type_defs.DeprovisionIpamPoolCidrResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamPoolCidr(self):  # pragma: no cover
        return IpamPoolCidr.make_one(self.boto3_raw_data["IpamPoolCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeprovisionIpamPoolCidrResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeprovisionIpamPoolCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamPoolCidrsResult:
    boto3_raw_data: "type_defs.GetIpamPoolCidrsResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPoolCidrs(self):  # pragma: no cover
        return IpamPoolCidr.make_many(self.boto3_raw_data["IpamPoolCidrs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetIpamPoolCidrsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamPoolCidrsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionIpamPoolCidrResult:
    boto3_raw_data: "type_defs.ProvisionIpamPoolCidrResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPoolCidr(self):  # pragma: no cover
        return IpamPoolCidr.make_one(self.boto3_raw_data["IpamPoolCidr"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionIpamPoolCidrResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionIpamPoolCidrResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamPoolResult:
    boto3_raw_data: "type_defs.CreateIpamPoolResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPool(self):  # pragma: no cover
        return IpamPool.make_one(self.boto3_raw_data["IpamPool"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIpamPoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamPoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIpamPoolResult:
    boto3_raw_data: "type_defs.DeleteIpamPoolResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPool(self):  # pragma: no cover
        return IpamPool.make_one(self.boto3_raw_data["IpamPool"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteIpamPoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIpamPoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpamPoolsResult:
    boto3_raw_data: "type_defs.DescribeIpamPoolsResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPools(self):  # pragma: no cover
        return IpamPool.make_many(self.boto3_raw_data["IpamPools"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpamPoolsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpamPoolsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyIpamPoolResult:
    boto3_raw_data: "type_defs.ModifyIpamPoolResultTypeDef" = dataclasses.field()

    @cached_property
    def IpamPool(self):  # pragma: no cover
        return IpamPool.make_one(self.boto3_raw_data["IpamPool"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyIpamPoolResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyIpamPoolResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpamDiscoveredPublicAddress:
    boto3_raw_data: "type_defs.IpamDiscoveredPublicAddressTypeDef" = dataclasses.field()

    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    AddressRegion = field("AddressRegion")
    Address = field("Address")
    AddressOwnerId = field("AddressOwnerId")
    AddressAllocationId = field("AddressAllocationId")
    AssociationStatus = field("AssociationStatus")
    AddressType = field("AddressType")
    Service = field("Service")
    ServiceResource = field("ServiceResource")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    PublicIpv4PoolId = field("PublicIpv4PoolId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NetworkInterfaceDescription = field("NetworkInterfaceDescription")
    InstanceId = field("InstanceId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return IpamPublicAddressTags.make_one(self.boto3_raw_data["Tags"])

    NetworkBorderGroup = field("NetworkBorderGroup")

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return IpamPublicAddressSecurityGroup.make_many(
            self.boto3_raw_data["SecurityGroups"]
        )

    SampleTime = field("SampleTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpamDiscoveredPublicAddressTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpamDiscoveredPublicAddressTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpv6PoolsResult:
    boto3_raw_data: "type_defs.DescribeIpv6PoolsResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipv6Pools(self):  # pragma: no cover
        return Ipv6Pool.make_many(self.boto3_raw_data["Ipv6Pools"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpv6PoolsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpv6PoolsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateInstanceNetworkInterfaceSpecification:
    boto3_raw_data: (
        "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationTypeDef"
    ) = dataclasses.field()

    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    InterfaceType = field("InterfaceType")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")
    NetworkCardIndex = field("NetworkCardIndex")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationResponse.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationResponse.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    PrimaryIpv6 = field("PrimaryIpv6")

    @cached_property
    def EnaSrdSpecification(self):  # pragma: no cover
        return LaunchTemplateEnaSrdSpecification.make_one(
            self.boto3_raw_data["EnaSrdSpecification"]
        )

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecification.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    EnaQueueCount = field("EnaQueueCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.LaunchTemplateInstanceNetworkInterfaceSpecificationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyFpgaImageAttributeRequest:
    boto3_raw_data: "type_defs.ModifyFpgaImageAttributeRequestTypeDef" = (
        dataclasses.field()
    )

    FpgaImageId = field("FpgaImageId")
    DryRun = field("DryRun")
    Attribute = field("Attribute")
    OperationType = field("OperationType")
    UserIds = field("UserIds")
    UserGroups = field("UserGroups")
    ProductCodes = field("ProductCodes")

    @cached_property
    def LoadPermission(self):  # pragma: no cover
        return LoadPermissionModifications.make_one(
            self.boto3_raw_data["LoadPermission"]
        )

    Description = field("Description")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyFpgaImageAttributeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyFpgaImageAttributeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDelegateMacVolumeOwnershipTaskResult:
    boto3_raw_data: "type_defs.CreateDelegateMacVolumeOwnershipTaskResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MacModificationTask(self):  # pragma: no cover
        return MacModificationTask.make_one(self.boto3_raw_data["MacModificationTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateDelegateMacVolumeOwnershipTaskResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDelegateMacVolumeOwnershipTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMacSystemIntegrityProtectionModificationTaskResult:
    boto3_raw_data: (
        "type_defs.CreateMacSystemIntegrityProtectionModificationTaskResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def MacModificationTask(self):  # pragma: no cover
        return MacModificationTask.make_one(self.boto3_raw_data["MacModificationTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateMacSystemIntegrityProtectionModificationTaskResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateMacSystemIntegrityProtectionModificationTaskResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMacModificationTasksResult:
    boto3_raw_data: "type_defs.DescribeMacModificationTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MacModificationTasks(self):  # pragma: no cover
        return MacModificationTask.make_many(
            self.boto3_raw_data["MacModificationTasks"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMacModificationTasksResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMacModificationTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MediaAcceleratorInfo:
    boto3_raw_data: "type_defs.MediaAcceleratorInfoTypeDef" = dataclasses.field()

    @cached_property
    def Accelerators(self):  # pragma: no cover
        return MediaDeviceInfo.make_many(self.boto3_raw_data["Accelerators"])

    TotalMediaMemoryInMiB = field("TotalMediaMemoryInMiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MediaAcceleratorInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MediaAcceleratorInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedInstancesModification:
    boto3_raw_data: "type_defs.ReservedInstancesModificationTypeDef" = (
        dataclasses.field()
    )

    ClientToken = field("ClientToken")
    CreateDate = field("CreateDate")
    EffectiveDate = field("EffectiveDate")

    @cached_property
    def ModificationResults(self):  # pragma: no cover
        return ReservedInstancesModificationResult.make_many(
            self.boto3_raw_data["ModificationResults"]
        )

    @cached_property
    def ReservedInstancesIds(self):  # pragma: no cover
        return ReservedInstancesId.make_many(
            self.boto3_raw_data["ReservedInstancesIds"]
        )

    ReservedInstancesModificationId = field("ReservedInstancesModificationId")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    UpdateDate = field("UpdateDate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReservedInstancesModificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedInstancesModificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointRequest:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    VerifiedAccessGroupId = field("VerifiedAccessGroupId")

    @cached_property
    def LoadBalancerOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointLoadBalancerOptions.make_one(
            self.boto3_raw_data["LoadBalancerOptions"]
        )

    @cached_property
    def NetworkInterfaceOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointEniOptions.make_one(
            self.boto3_raw_data["NetworkInterfaceOptions"]
        )

    Description = field("Description")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def RdsOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointRdsOptions.make_one(
            self.boto3_raw_data["RdsOptions"]
        )

    @cached_property
    def CidrOptions(self):  # pragma: no cover
        return ModifyVerifiedAccessEndpointCidrOptions.make_one(
            self.boto3_raw_data["CidrOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessGroupResult:
    boto3_raw_data: "type_defs.CreateVerifiedAccessGroupResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessGroup(self):  # pragma: no cover
        return VerifiedAccessGroup.make_one(self.boto3_raw_data["VerifiedAccessGroup"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateVerifiedAccessGroupResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessGroupResult:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessGroupResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessGroup(self):  # pragma: no cover
        return VerifiedAccessGroup.make_one(self.boto3_raw_data["VerifiedAccessGroup"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteVerifiedAccessGroupResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessGroupsResult:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessGroupsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessGroups(self):  # pragma: no cover
        return VerifiedAccessGroup.make_many(
            self.boto3_raw_data["VerifiedAccessGroups"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessGroupsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessGroupsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessGroupResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessGroupResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessGroup(self):  # pragma: no cover
        return VerifiedAccessGroup.make_one(self.boto3_raw_data["VerifiedAccessGroup"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyVerifiedAccessGroupResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessGroupResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNatGatewayResult:
    boto3_raw_data: "type_defs.CreateNatGatewayResultTypeDef" = dataclasses.field()

    ClientToken = field("ClientToken")

    @cached_property
    def NatGateway(self):  # pragma: no cover
        return NatGateway.make_one(self.boto3_raw_data["NatGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNatGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNatGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNatGatewaysResult:
    boto3_raw_data: "type_defs.DescribeNatGatewaysResultTypeDef" = dataclasses.field()

    @cached_property
    def NatGateways(self):  # pragma: no cover
        return NatGateway.make_many(self.boto3_raw_data["NatGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNatGatewaysResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNatGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfacePermissionResult:
    boto3_raw_data: "type_defs.CreateNetworkInterfacePermissionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InterfacePermission(self):  # pragma: no cover
        return NetworkInterfacePermission.make_one(
            self.boto3_raw_data["InterfacePermission"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInterfacePermissionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInterfacePermissionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacePermissionsResult:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacePermissionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInterfacePermissions(self):  # pragma: no cover
        return NetworkInterfacePermission.make_many(
            self.boto3_raw_data["NetworkInterfacePermissions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfacePermissionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacePermissionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeuronInfo:
    boto3_raw_data: "type_defs.NeuronInfoTypeDef" = dataclasses.field()

    @cached_property
    def NeuronDevices(self):  # pragma: no cover
        return NeuronDeviceInfo.make_many(self.boto3_raw_data["NeuronDevices"])

    TotalNeuronDeviceMemoryInMiB = field("TotalNeuronDeviceMemoryInMiB")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NeuronInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NeuronInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessTrustProviderResult:
    boto3_raw_data: "type_defs.CreateVerifiedAccessTrustProviderResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProvider(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_one(
            self.boto3_raw_data["VerifiedAccessTrustProvider"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessTrustProviderResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessTrustProviderResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessTrustProviderResult:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessTrustProviderResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProvider(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_one(
            self.boto3_raw_data["VerifiedAccessTrustProvider"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessTrustProviderResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessTrustProviderResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessTrustProvidersResult:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessTrustProvidersResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProviders(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_many(
            self.boto3_raw_data["VerifiedAccessTrustProviders"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessTrustProvidersResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessTrustProvidersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessTrustProviderResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessTrustProviderResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProvider(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_one(
            self.boto3_raw_data["VerifiedAccessTrustProvider"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessTrustProviderResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessTrustProviderResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccessScopePathRequest:
    boto3_raw_data: "type_defs.AccessScopePathRequestTypeDef" = dataclasses.field()

    @cached_property
    def Source(self):  # pragma: no cover
        return PathStatementRequest.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Destination(self):  # pragma: no cover
        return PathStatementRequest.make_one(self.boto3_raw_data["Destination"])

    @cached_property
    def ThroughResources(self):  # pragma: no cover
        return ThroughResourcesStatementRequest.make_many(
            self.boto3_raw_data["ThroughResources"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AccessScopePathRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AccessScopePathRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccessScopePath:
    boto3_raw_data: "type_defs.AccessScopePathTypeDef" = dataclasses.field()

    @cached_property
    def Source(self):  # pragma: no cover
        return PathStatement.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Destination(self):  # pragma: no cover
        return PathStatement.make_one(self.boto3_raw_data["Destination"])

    @cached_property
    def ThroughResources(self):  # pragma: no cover
        return ThroughResourcesStatement.make_many(
            self.boto3_raw_data["ThroughResources"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AccessScopePathTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AccessScopePathTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelReservedInstancesListingResult:
    boto3_raw_data: "type_defs.CancelReservedInstancesListingResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstancesListings(self):  # pragma: no cover
        return ReservedInstancesListing.make_many(
            self.boto3_raw_data["ReservedInstancesListings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CancelReservedInstancesListingResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelReservedInstancesListingResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateReservedInstancesListingResult:
    boto3_raw_data: "type_defs.CreateReservedInstancesListingResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstancesListings(self):  # pragma: no cover
        return ReservedInstancesListing.make_many(
            self.boto3_raw_data["ReservedInstancesListings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateReservedInstancesListingResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateReservedInstancesListingResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesListingsResult:
    boto3_raw_data: "type_defs.DescribeReservedInstancesListingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstancesListings(self):  # pragma: no cover
        return ReservedInstancesListing.make_many(
            self.boto3_raw_data["ReservedInstancesListings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesListingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesListingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePublicIpv4PoolsResult:
    boto3_raw_data: "type_defs.DescribePublicIpv4PoolsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PublicIpv4Pools(self):  # pragma: no cover
        return PublicIpv4Pool.make_many(self.boto3_raw_data["PublicIpv4Pools"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePublicIpv4PoolsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePublicIpv4PoolsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesOfferingsResult:
    boto3_raw_data: "type_defs.DescribeReservedInstancesOfferingsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstancesOfferings(self):  # pragma: no cover
        return ReservedInstancesOffering.make_many(
            self.boto3_raw_data["ReservedInstancesOfferings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesOfferingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesOfferingsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesResult:
    boto3_raw_data: "type_defs.DescribeReservedInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstances(self):  # pragma: no cover
        return ReservedInstances.make_many(self.boto3_raw_data["ReservedInstances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeReservedInstancesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupEgressResult:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupEgressResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def SecurityGroupRules(self):  # pragma: no cover
        return SecurityGroupRule.make_many(self.boto3_raw_data["SecurityGroupRules"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupEgressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeSecurityGroupEgressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupIngressResult:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupIngressResultTypeDef" = (
        dataclasses.field()
    )

    Return = field("Return")

    @cached_property
    def SecurityGroupRules(self):  # pragma: no cover
        return SecurityGroupRule.make_many(self.boto3_raw_data["SecurityGroupRules"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupIngressResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeSecurityGroupIngressResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupRulesResult:
    boto3_raw_data: "type_defs.DescribeSecurityGroupRulesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityGroupRules(self):  # pragma: no cover
        return SecurityGroupRule.make_many(self.boto3_raw_data["SecurityGroupRules"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSecurityGroupRulesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupRulesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageReferencesRequestPaginate:
    boto3_raw_data: "type_defs.DescribeImageReferencesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    IncludeAllResourceTypes = field("IncludeAllResourceTypes")

    @cached_property
    def ResourceTypes(self):  # pragma: no cover
        return ResourceTypeRequest.make_many(self.boto3_raw_data["ResourceTypes"])

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageReferencesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageReferencesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageReferencesRequest:
    boto3_raw_data: "type_defs.DescribeImageReferencesRequestTypeDef" = (
        dataclasses.field()
    )

    ImageIds = field("ImageIds")
    IncludeAllResourceTypes = field("IncludeAllResourceTypes")

    @cached_property
    def ResourceTypes(self):  # pragma: no cover
        return ResourceTypeRequest.make_many(self.boto3_raw_data["ResourceTypes"])

    NextToken = field("NextToken")
    DryRun = field("DryRun")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageReferencesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageReferencesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerPeerResult:
    boto3_raw_data: "type_defs.CreateRouteServerPeerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServerPeer(self):  # pragma: no cover
        return RouteServerPeer.make_one(self.boto3_raw_data["RouteServerPeer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteServerPeerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerPeerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRouteServerPeerResult:
    boto3_raw_data: "type_defs.DeleteRouteServerPeerResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteServerPeer(self):  # pragma: no cover
        return RouteServerPeer.make_one(self.boto3_raw_data["RouteServerPeer"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRouteServerPeerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRouteServerPeerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteServerPeersResult:
    boto3_raw_data: "type_defs.DescribeRouteServerPeersResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RouteServerPeers(self):  # pragma: no cover
        return RouteServerPeer.make_many(self.boto3_raw_data["RouteServerPeers"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeRouteServerPeersResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteServerPeersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetRouteServerRoutingDatabaseResult:
    boto3_raw_data: "type_defs.GetRouteServerRoutingDatabaseResultTypeDef" = (
        dataclasses.field()
    )

    AreRoutesPersisted = field("AreRoutesPersisted")

    @cached_property
    def Routes(self):  # pragma: no cover
        return RouteServerRoute.make_many(self.boto3_raw_data["Routes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetRouteServerRoutingDatabaseResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetRouteServerRoutingDatabaseResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BundleTask:
    boto3_raw_data: "type_defs.BundleTaskTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    BundleId = field("BundleId")
    State = field("State")
    StartTime = field("StartTime")
    UpdateTime = field("UpdateTime")

    @cached_property
    def Storage(self):  # pragma: no cover
        return StorageOutput.make_one(self.boto3_raw_data["Storage"])

    Progress = field("Progress")

    @cached_property
    def BundleTaskError(self):  # pragma: no cover
        return BundleTaskError.make_one(self.boto3_raw_data["BundleTaskError"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BundleTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BundleTaskTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstanceAvailabilityResult:
    boto3_raw_data: "type_defs.DescribeScheduledInstanceAvailabilityResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScheduledInstanceAvailabilitySet(self):  # pragma: no cover
        return ScheduledInstanceAvailability.make_many(
            self.boto3_raw_data["ScheduledInstanceAvailabilitySet"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeScheduledInstanceAvailabilityResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeScheduledInstanceAvailabilityResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeScheduledInstancesResult:
    boto3_raw_data: "type_defs.DescribeScheduledInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScheduledInstanceSet(self):  # pragma: no cover
        return ScheduledInstance.make_many(self.boto3_raw_data["ScheduledInstanceSet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeScheduledInstancesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeScheduledInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseScheduledInstancesResult:
    boto3_raw_data: "type_defs.PurchaseScheduledInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScheduledInstanceSet(self):  # pragma: no cover
        return ScheduledInstance.make_many(self.boto3_raw_data["ScheduledInstanceSet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PurchaseScheduledInstancesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseScheduledInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledInstancesLaunchSpecification:
    boto3_raw_data: "type_defs.ScheduledInstancesLaunchSpecificationTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return ScheduledInstancesBlockDeviceMapping.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return ScheduledInstancesIamInstanceProfile.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return ScheduledInstancesMonitoring.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return ScheduledInstancesNetworkInterface.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return ScheduledInstancesPlacement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SecurityGroupIds = field("SecurityGroupIds")
    SubnetId = field("SubnetId")
    UserData = field("UserData")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScheduledInstancesLaunchSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledInstancesLaunchSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySecurityGroupRulesRequest:
    boto3_raw_data: "type_defs.ModifySecurityGroupRulesRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")

    @cached_property
    def SecurityGroupRules(self):  # pragma: no cover
        return SecurityGroupRuleUpdate.make_many(
            self.boto3_raw_data["SecurityGroupRules"]
        )

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifySecurityGroupRulesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySecurityGroupRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServicesResult:
    boto3_raw_data: "type_defs.DescribeVpcEndpointServicesResultTypeDef" = (
        dataclasses.field()
    )

    ServiceNames = field("ServiceNames")

    @cached_property
    def ServiceDetails(self):  # pragma: no cover
        return ServiceDetail.make_many(self.boto3_raw_data["ServiceDetails"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServicesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointServicesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointServiceConfigurationResult:
    boto3_raw_data: "type_defs.CreateVpcEndpointServiceConfigurationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ServiceConfiguration(self):  # pragma: no cover
        return ServiceConfiguration.make_one(
            self.boto3_raw_data["ServiceConfiguration"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcEndpointServiceConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcEndpointServiceConfigurationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointServiceConfigurationsResult:
    boto3_raw_data: (
        "type_defs.DescribeVpcEndpointServiceConfigurationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ServiceConfigurations(self):  # pragma: no cover
        return ServiceConfiguration.make_many(
            self.boto3_raw_data["ServiceConfigurations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcEndpointServiceConfigurationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVpcEndpointServiceConfigurationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportImageResult:
    boto3_raw_data: "type_defs.ImportImageResultTypeDef" = dataclasses.field()

    Architecture = field("Architecture")
    Description = field("Description")
    Encrypted = field("Encrypted")
    Hypervisor = field("Hypervisor")
    ImageId = field("ImageId")
    ImportTaskId = field("ImportTaskId")
    KmsKeyId = field("KmsKeyId")
    LicenseType = field("LicenseType")
    Platform = field("Platform")
    Progress = field("Progress")

    @cached_property
    def SnapshotDetails(self):  # pragma: no cover
        return SnapshotDetail.make_many(self.boto3_raw_data["SnapshotDetails"])

    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return ImportImageLicenseConfigurationResponse.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    UsageOperation = field("UsageOperation")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImportImageResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportImageResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportImageTask:
    boto3_raw_data: "type_defs.ImportImageTaskTypeDef" = dataclasses.field()

    Architecture = field("Architecture")
    Description = field("Description")
    Encrypted = field("Encrypted")
    Hypervisor = field("Hypervisor")
    ImageId = field("ImageId")
    ImportTaskId = field("ImportTaskId")
    KmsKeyId = field("KmsKeyId")
    LicenseType = field("LicenseType")
    Platform = field("Platform")
    Progress = field("Progress")

    @cached_property
    def SnapshotDetails(self):  # pragma: no cover
        return SnapshotDetail.make_many(self.boto3_raw_data["SnapshotDetails"])

    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return ImportImageLicenseConfigurationResponse.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    UsageOperation = field("UsageOperation")
    BootMode = field("BootMode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImportImageTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImportImageTaskTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportSnapshotResult:
    boto3_raw_data: "type_defs.ImportSnapshotResultTypeDef" = dataclasses.field()

    Description = field("Description")
    ImportTaskId = field("ImportTaskId")

    @cached_property
    def SnapshotTaskDetail(self):  # pragma: no cover
        return SnapshotTaskDetail.make_one(self.boto3_raw_data["SnapshotTaskDetail"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportSnapshotResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportSnapshotResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportSnapshotTask:
    boto3_raw_data: "type_defs.ImportSnapshotTaskTypeDef" = dataclasses.field()

    Description = field("Description")
    ImportTaskId = field("ImportTaskId")

    @cached_property
    def SnapshotTaskDetail(self):  # pragma: no cover
        return SnapshotTaskDetail.make_one(self.boto3_raw_data["SnapshotTaskDetail"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportSnapshotTaskTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportSnapshotTaskTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSpotDatafeedSubscriptionResult:
    boto3_raw_data: "type_defs.CreateSpotDatafeedSubscriptionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotDatafeedSubscription(self):  # pragma: no cover
        return SpotDatafeedSubscription.make_one(
            self.boto3_raw_data["SpotDatafeedSubscription"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSpotDatafeedSubscriptionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSpotDatafeedSubscriptionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotDatafeedSubscriptionResult:
    boto3_raw_data: "type_defs.DescribeSpotDatafeedSubscriptionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotDatafeedSubscription(self):  # pragma: no cover
        return SpotDatafeedSubscription.make_one(
            self.boto3_raw_data["SpotDatafeedSubscription"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotDatafeedSubscriptionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotDatafeedSubscriptionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayMulticastDomainAssociationsResult:
    boto3_raw_data: (
        "type_defs.GetTransitGatewayMulticastDomainAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def MulticastDomainAssociations(self):  # pragma: no cover
        return TransitGatewayMulticastDomainAssociation.make_many(
            self.boto3_raw_data["MulticastDomainAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayMulticastDomainAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetTransitGatewayMulticastDomainAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayMulticastDomainAssociationsResult:
    boto3_raw_data: (
        "type_defs.AcceptTransitGatewayMulticastDomainAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayMulticastDomainAssociations.make_one(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayMulticastDomainAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AcceptTransitGatewayMulticastDomainAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTransitGatewayMulticastDomainResult:
    boto3_raw_data: "type_defs.AssociateTransitGatewayMulticastDomainResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayMulticastDomainAssociations.make_one(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateTransitGatewayMulticastDomainResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTransitGatewayMulticastDomainResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTransitGatewayMulticastDomainResult:
    boto3_raw_data: (
        "type_defs.DisassociateTransitGatewayMulticastDomainResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayMulticastDomainAssociations.make_one(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTransitGatewayMulticastDomainResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DisassociateTransitGatewayMulticastDomainResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayMulticastDomainAssociationsResult:
    boto3_raw_data: (
        "type_defs.RejectTransitGatewayMulticastDomainAssociationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Associations(self):  # pragma: no cover
        return TransitGatewayMulticastDomainAssociations.make_one(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayMulticastDomainAssociationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RejectTransitGatewayMulticastDomainAssociationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateSubnetCidrBlockResult:
    boto3_raw_data: "type_defs.AssociateSubnetCidrBlockResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Ipv6CidrBlockAssociation(self):  # pragma: no cover
        return SubnetIpv6CidrBlockAssociation.make_one(
            self.boto3_raw_data["Ipv6CidrBlockAssociation"]
        )

    SubnetId = field("SubnetId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateSubnetCidrBlockResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateSubnetCidrBlockResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateSubnetCidrBlockResult:
    boto3_raw_data: "type_defs.DisassociateSubnetCidrBlockResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Ipv6CidrBlockAssociation(self):  # pragma: no cover
        return SubnetIpv6CidrBlockAssociation.make_one(
            self.boto3_raw_data["Ipv6CidrBlockAssociation"]
        )

    SubnetId = field("SubnetId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateSubnetCidrBlockResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateSubnetCidrBlockResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Subnet:
    boto3_raw_data: "type_defs.SubnetTypeDef" = dataclasses.field()

    AvailabilityZoneId = field("AvailabilityZoneId")
    EnableLniAtDeviceIndex = field("EnableLniAtDeviceIndex")
    MapCustomerOwnedIpOnLaunch = field("MapCustomerOwnedIpOnLaunch")
    CustomerOwnedIpv4Pool = field("CustomerOwnedIpv4Pool")
    OwnerId = field("OwnerId")
    AssignIpv6AddressOnCreation = field("AssignIpv6AddressOnCreation")

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return SubnetIpv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SubnetArn = field("SubnetArn")
    OutpostArn = field("OutpostArn")
    EnableDns64 = field("EnableDns64")
    Ipv6Native = field("Ipv6Native")

    @cached_property
    def PrivateDnsNameOptionsOnLaunch(self):  # pragma: no cover
        return PrivateDnsNameOptionsOnLaunch.make_one(
            self.boto3_raw_data["PrivateDnsNameOptionsOnLaunch"]
        )

    @cached_property
    def BlockPublicAccessStates(self):  # pragma: no cover
        return BlockPublicAccessStates.make_one(
            self.boto3_raw_data["BlockPublicAccessStates"]
        )

    Type = field("Type")
    SubnetId = field("SubnetId")
    State = field("State")
    VpcId = field("VpcId")
    CidrBlock = field("CidrBlock")
    AvailableIpAddressCount = field("AvailableIpAddressCount")
    AvailabilityZone = field("AvailabilityZone")
    DefaultForAz = field("DefaultForAz")
    MapPublicIpOnLaunch = field("MapPublicIpOnLaunch")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SubnetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SubnetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointResult:
    boto3_raw_data: "type_defs.CreateVpcEndpointResultTypeDef" = dataclasses.field()

    @cached_property
    def VpcEndpoint(self):  # pragma: no cover
        return VpcEndpoint.make_one(self.boto3_raw_data["VpcEndpoint"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpcEndpointResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcEndpointsResult:
    boto3_raw_data: "type_defs.DescribeVpcEndpointsResultTypeDef" = dataclasses.field()

    @cached_property
    def VpcEndpoints(self):  # pragma: no cover
        return VpcEndpoint.make_many(self.boto3_raw_data["VpcEndpoints"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcEndpointsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetReservedInstancesExchangeQuoteResult:
    boto3_raw_data: "type_defs.GetReservedInstancesExchangeQuoteResultTypeDef" = (
        dataclasses.field()
    )

    CurrencyCode = field("CurrencyCode")
    IsValidExchange = field("IsValidExchange")
    OutputReservedInstancesWillExpireAt = field("OutputReservedInstancesWillExpireAt")
    PaymentDue = field("PaymentDue")

    @cached_property
    def ReservedInstanceValueRollup(self):  # pragma: no cover
        return ReservationValue.make_one(
            self.boto3_raw_data["ReservedInstanceValueRollup"]
        )

    @cached_property
    def ReservedInstanceValueSet(self):  # pragma: no cover
        return ReservedInstanceReservationValue.make_many(
            self.boto3_raw_data["ReservedInstanceValueSet"]
        )

    @cached_property
    def TargetConfigurationValueRollup(self):  # pragma: no cover
        return ReservationValue.make_one(
            self.boto3_raw_data["TargetConfigurationValueRollup"]
        )

    @cached_property
    def TargetConfigurationValueSet(self):  # pragma: no cover
        return TargetReservationValue.make_many(
            self.boto3_raw_data["TargetConfigurationValueSet"]
        )

    ValidationFailureReason = field("ValidationFailureReason")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetReservedInstancesExchangeQuoteResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetReservedInstancesExchangeQuoteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadBalancersConfigOutput:
    boto3_raw_data: "type_defs.LoadBalancersConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def ClassicLoadBalancersConfig(self):  # pragma: no cover
        return ClassicLoadBalancersConfigOutput.make_one(
            self.boto3_raw_data["ClassicLoadBalancersConfig"]
        )

    @cached_property
    def TargetGroupsConfig(self):  # pragma: no cover
        return TargetGroupsConfigOutput.make_one(
            self.boto3_raw_data["TargetGroupsConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LoadBalancersConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadBalancersConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadBalancersConfig:
    boto3_raw_data: "type_defs.LoadBalancersConfigTypeDef" = dataclasses.field()

    @cached_property
    def ClassicLoadBalancersConfig(self):  # pragma: no cover
        return ClassicLoadBalancersConfig.make_one(
            self.boto3_raw_data["ClassicLoadBalancersConfig"]
        )

    @cached_property
    def TargetGroupsConfig(self):  # pragma: no cover
        return TargetGroupsConfig.make_one(self.boto3_raw_data["TargetGroupsConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LoadBalancersConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadBalancersConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorFilterRuleResult:
    boto3_raw_data: "type_defs.CreateTrafficMirrorFilterRuleResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorFilterRule(self):  # pragma: no cover
        return TrafficMirrorFilterRule.make_one(
            self.boto3_raw_data["TrafficMirrorFilterRule"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTrafficMirrorFilterRuleResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorFilterRuleResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorFilterRulesResult:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorFilterRulesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorFilterRules(self):  # pragma: no cover
        return TrafficMirrorFilterRule.make_many(
            self.boto3_raw_data["TrafficMirrorFilterRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorFilterRulesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorFilterRulesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorFilterRuleResult:
    boto3_raw_data: "type_defs.ModifyTrafficMirrorFilterRuleResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorFilterRule(self):  # pragma: no cover
        return TrafficMirrorFilterRule.make_one(
            self.boto3_raw_data["TrafficMirrorFilterRule"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTrafficMirrorFilterRuleResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTrafficMirrorFilterRuleResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficMirrorFilter:
    boto3_raw_data: "type_defs.TrafficMirrorFilterTypeDef" = dataclasses.field()

    TrafficMirrorFilterId = field("TrafficMirrorFilterId")

    @cached_property
    def IngressFilterRules(self):  # pragma: no cover
        return TrafficMirrorFilterRule.make_many(
            self.boto3_raw_data["IngressFilterRules"]
        )

    @cached_property
    def EgressFilterRules(self):  # pragma: no cover
        return TrafficMirrorFilterRule.make_many(
            self.boto3_raw_data["EgressFilterRules"]
        )

    NetworkServices = field("NetworkServices")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficMirrorFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficMirrorFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayAttachmentsResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayAttachmentsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayAttachments(self):  # pragma: no cover
        return TransitGatewayAttachment.make_many(
            self.boto3_raw_data["TransitGatewayAttachments"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayAttachmentsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayAttachmentsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayConnectPeer:
    boto3_raw_data: "type_defs.TransitGatewayConnectPeerTypeDef" = dataclasses.field()

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    TransitGatewayConnectPeerId = field("TransitGatewayConnectPeerId")
    State = field("State")
    CreationTime = field("CreationTime")

    @cached_property
    def ConnectPeerConfiguration(self):  # pragma: no cover
        return TransitGatewayConnectPeerConfiguration.make_one(
            self.boto3_raw_data["ConnectPeerConfiguration"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransitGatewayConnectPeerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayConnectPeerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayConnectResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayConnectResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnect(self):  # pragma: no cover
        return TransitGatewayConnect.make_one(
            self.boto3_raw_data["TransitGatewayConnect"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayConnectResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayConnectResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayConnectResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayConnectResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnect(self):  # pragma: no cover
        return TransitGatewayConnect.make_one(
            self.boto3_raw_data["TransitGatewayConnect"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayConnectResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayConnectResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectsResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayConnectsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnects(self):  # pragma: no cover
        return TransitGatewayConnect.make_many(
            self.boto3_raw_data["TransitGatewayConnects"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayConnectsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayMulticastDomainResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayMulticastDomainResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayMulticastDomain(self):  # pragma: no cover
        return TransitGatewayMulticastDomain.make_one(
            self.boto3_raw_data["TransitGatewayMulticastDomain"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayMulticastDomainResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayMulticastDomainResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayMulticastDomainResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayMulticastDomainResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayMulticastDomain(self):  # pragma: no cover
        return TransitGatewayMulticastDomain.make_one(
            self.boto3_raw_data["TransitGatewayMulticastDomain"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayMulticastDomainResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayMulticastDomainResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayMulticastDomainsResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayMulticastDomainsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayMulticastDomains(self):  # pragma: no cover
        return TransitGatewayMulticastDomain.make_many(
            self.boto3_raw_data["TransitGatewayMulticastDomains"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayMulticastDomainsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayMulticastDomainsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def TransitGateway(self):  # pragma: no cover
        return TransitGateway.make_one(self.boto3_raw_data["TransitGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTransitGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def TransitGateway(self):  # pragma: no cover
        return TransitGateway.make_one(self.boto3_raw_data["TransitGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTransitGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewaysResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewaysResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGateways(self):  # pragma: no cover
        return TransitGateway.make_many(self.boto3_raw_data["TransitGateways"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTransitGatewaysResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewaysResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayResult:
    boto3_raw_data: "type_defs.ModifyTransitGatewayResultTypeDef" = dataclasses.field()

    @cached_property
    def TransitGateway(self):  # pragma: no cover
        return TransitGateway.make_one(self.boto3_raw_data["TransitGateway"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyTransitGatewayResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayPeeringAttachmentResult:
    boto3_raw_data: "type_defs.AcceptTransitGatewayPeeringAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPeeringAttachment(self):  # pragma: no cover
        return TransitGatewayPeeringAttachment.make_one(
            self.boto3_raw_data["TransitGatewayPeeringAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayPeeringAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptTransitGatewayPeeringAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPeeringAttachmentResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayPeeringAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPeeringAttachment(self):  # pragma: no cover
        return TransitGatewayPeeringAttachment.make_one(
            self.boto3_raw_data["TransitGatewayPeeringAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPeeringAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayPeeringAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPeeringAttachmentResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayPeeringAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPeeringAttachment(self):  # pragma: no cover
        return TransitGatewayPeeringAttachment.make_one(
            self.boto3_raw_data["TransitGatewayPeeringAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPeeringAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayPeeringAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayPeeringAttachmentsResult:
    boto3_raw_data: (
        "type_defs.DescribeTransitGatewayPeeringAttachmentsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TransitGatewayPeeringAttachments(self):  # pragma: no cover
        return TransitGatewayPeeringAttachment.make_many(
            self.boto3_raw_data["TransitGatewayPeeringAttachments"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayPeeringAttachmentsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeTransitGatewayPeeringAttachmentsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayPeeringAttachmentResult:
    boto3_raw_data: "type_defs.RejectTransitGatewayPeeringAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPeeringAttachment(self):  # pragma: no cover
        return TransitGatewayPeeringAttachment.make_one(
            self.boto3_raw_data["TransitGatewayPeeringAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayPeeringAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectTransitGatewayPeeringAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransitGatewayPolicyTableEntry:
    boto3_raw_data: "type_defs.TransitGatewayPolicyTableEntryTypeDef" = (
        dataclasses.field()
    )

    PolicyRuleNumber = field("PolicyRuleNumber")

    @cached_property
    def PolicyRule(self):  # pragma: no cover
        return TransitGatewayPolicyRule.make_one(self.boto3_raw_data["PolicyRule"])

    TargetRouteTableId = field("TargetRouteTableId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TransitGatewayPolicyTableEntryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransitGatewayPolicyTableEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPrefixListReferenceResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayPrefixListReferenceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPrefixListReference(self):  # pragma: no cover
        return TransitGatewayPrefixListReference.make_one(
            self.boto3_raw_data["TransitGatewayPrefixListReference"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPrefixListReferenceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayPrefixListReferenceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayPrefixListReferenceResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayPrefixListReferenceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPrefixListReference(self):  # pragma: no cover
        return TransitGatewayPrefixListReference.make_one(
            self.boto3_raw_data["TransitGatewayPrefixListReference"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayPrefixListReferenceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayPrefixListReferenceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPrefixListReferencesResult:
    boto3_raw_data: "type_defs.GetTransitGatewayPrefixListReferencesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPrefixListReferences(self):  # pragma: no cover
        return TransitGatewayPrefixListReference.make_many(
            self.boto3_raw_data["TransitGatewayPrefixListReferences"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPrefixListReferencesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayPrefixListReferencesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayPrefixListReferenceResult:
    boto3_raw_data: "type_defs.ModifyTransitGatewayPrefixListReferenceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPrefixListReference(self):  # pragma: no cover
        return TransitGatewayPrefixListReference.make_one(
            self.boto3_raw_data["TransitGatewayPrefixListReference"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTransitGatewayPrefixListReferenceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayPrefixListReferenceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return TransitGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTransitGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayRouteResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return TransitGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteTransitGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReplaceTransitGatewayRouteResult:
    boto3_raw_data: "type_defs.ReplaceTransitGatewayRouteResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Route(self):  # pragma: no cover
        return TransitGatewayRoute.make_one(self.boto3_raw_data["Route"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReplaceTransitGatewayRouteResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReplaceTransitGatewayRouteResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTransitGatewayRoutesResult:
    boto3_raw_data: "type_defs.SearchTransitGatewayRoutesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Routes(self):  # pragma: no cover
        return TransitGatewayRoute.make_many(self.boto3_raw_data["Routes"])

    AdditionalRoutesAvailable = field("AdditionalRoutesAvailable")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchTransitGatewayRoutesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTransitGatewayRoutesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptTransitGatewayVpcAttachmentResult:
    boto3_raw_data: "type_defs.AcceptTransitGatewayVpcAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachment(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_one(
            self.boto3_raw_data["TransitGatewayVpcAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptTransitGatewayVpcAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptTransitGatewayVpcAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayVpcAttachmentResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayVpcAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachment(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_one(
            self.boto3_raw_data["TransitGatewayVpcAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayVpcAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayVpcAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayVpcAttachmentResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayVpcAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachment(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_one(
            self.boto3_raw_data["TransitGatewayVpcAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayVpcAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayVpcAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayVpcAttachmentsResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayVpcAttachmentsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachments(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_many(
            self.boto3_raw_data["TransitGatewayVpcAttachments"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayVpcAttachmentsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayVpcAttachmentsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTransitGatewayVpcAttachmentResult:
    boto3_raw_data: "type_defs.ModifyTransitGatewayVpcAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachment(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_one(
            self.boto3_raw_data["TransitGatewayVpcAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTransitGatewayVpcAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyTransitGatewayVpcAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectTransitGatewayVpcAttachmentResult:
    boto3_raw_data: "type_defs.RejectTransitGatewayVpcAttachmentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayVpcAttachment(self):  # pragma: no cover
        return TransitGatewayVpcAttachment.make_one(
            self.boto3_raw_data["TransitGatewayVpcAttachment"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectTransitGatewayVpcAttachmentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectTransitGatewayVpcAttachmentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceCreditSpecificationResult:
    boto3_raw_data: "type_defs.ModifyInstanceCreditSpecificationResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SuccessfulInstanceCreditSpecifications(self):  # pragma: no cover
        return SuccessfulInstanceCreditSpecificationItem.make_many(
            self.boto3_raw_data["SuccessfulInstanceCreditSpecifications"]
        )

    @cached_property
    def UnsuccessfulInstanceCreditSpecifications(self):  # pragma: no cover
        return UnsuccessfulInstanceCreditSpecificationItem.make_many(
            self.boto3_raw_data["UnsuccessfulInstanceCreditSpecifications"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyInstanceCreditSpecificationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceCreditSpecificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptVpcEndpointConnectionsResult:
    boto3_raw_data: "type_defs.AcceptVpcEndpointConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptVpcEndpointConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptVpcEndpointConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFlowLogsResult:
    boto3_raw_data: "type_defs.CreateFlowLogsResultTypeDef" = dataclasses.field()

    ClientToken = field("ClientToken")
    FlowLogIds = field("FlowLogIds")

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFlowLogsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFlowLogsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFlowLogsResult:
    boto3_raw_data: "type_defs.DeleteFlowLogsResultTypeDef" = dataclasses.field()

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFlowLogsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFlowLogsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointConnectionNotificationsResult:
    boto3_raw_data: (
        "type_defs.DeleteVpcEndpointConnectionNotificationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcEndpointConnectionNotificationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DeleteVpcEndpointConnectionNotificationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointServiceConfigurationsResult:
    boto3_raw_data: "type_defs.DeleteVpcEndpointServiceConfigurationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVpcEndpointServiceConfigurationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcEndpointServiceConfigurationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVpcEndpointsResult:
    boto3_raw_data: "type_defs.DeleteVpcEndpointsResultTypeDef" = dataclasses.field()

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVpcEndpointsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVpcEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyHostsResult:
    boto3_raw_data: "type_defs.ModifyHostsResultTypeDef" = dataclasses.field()

    Successful = field("Successful")

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModifyHostsResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyHostsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RejectVpcEndpointConnectionsResult:
    boto3_raw_data: "type_defs.RejectVpcEndpointConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RejectVpcEndpointConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RejectVpcEndpointConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReleaseHostsResult:
    boto3_raw_data: "type_defs.ReleaseHostsResultTypeDef" = dataclasses.field()

    Successful = field("Successful")

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return UnsuccessfulItem.make_many(self.boto3_raw_data["Unsuccessful"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReleaseHostsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReleaseHostsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLaunchTemplateResult:
    boto3_raw_data: "type_defs.CreateLaunchTemplateResultTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplate.make_one(self.boto3_raw_data["LaunchTemplate"])

    @cached_property
    def Warning(self):  # pragma: no cover
        return ValidationWarning.make_one(self.boto3_raw_data["Warning"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateLaunchTemplateResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLaunchTemplateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessEndpoint:
    boto3_raw_data: "type_defs.VerifiedAccessEndpointTypeDef" = dataclasses.field()

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    VerifiedAccessEndpointId = field("VerifiedAccessEndpointId")
    ApplicationDomain = field("ApplicationDomain")
    EndpointType = field("EndpointType")
    AttachmentType = field("AttachmentType")
    DomainCertificateArn = field("DomainCertificateArn")
    EndpointDomain = field("EndpointDomain")
    DeviceValidationDomain = field("DeviceValidationDomain")
    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def LoadBalancerOptions(self):  # pragma: no cover
        return VerifiedAccessEndpointLoadBalancerOptions.make_one(
            self.boto3_raw_data["LoadBalancerOptions"]
        )

    @cached_property
    def NetworkInterfaceOptions(self):  # pragma: no cover
        return VerifiedAccessEndpointEniOptions.make_one(
            self.boto3_raw_data["NetworkInterfaceOptions"]
        )

    @cached_property
    def Status(self):  # pragma: no cover
        return VerifiedAccessEndpointStatus.make_one(self.boto3_raw_data["Status"])

    Description = field("Description")
    CreationTime = field("CreationTime")
    LastUpdatedTime = field("LastUpdatedTime")
    DeletionTime = field("DeletionTime")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationResponse.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def RdsOptions(self):  # pragma: no cover
        return VerifiedAccessEndpointRdsOptions.make_one(
            self.boto3_raw_data["RdsOptions"]
        )

    @cached_property
    def CidrOptions(self):  # pragma: no cover
        return VerifiedAccessEndpointCidrOptions.make_one(
            self.boto3_raw_data["CidrOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportVerifiedAccessInstanceClientConfigurationResult:
    boto3_raw_data: (
        "type_defs.ExportVerifiedAccessInstanceClientConfigurationResultTypeDef"
    ) = dataclasses.field()

    Version = field("Version")
    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Region = field("Region")
    DeviceTrustProviders = field("DeviceTrustProviders")

    @cached_property
    def UserTrustProvider(self):  # pragma: no cover
        return VerifiedAccessInstanceUserTrustProviderClientConfiguration.make_one(
            self.boto3_raw_data["UserTrustProvider"]
        )

    @cached_property
    def OpenVpnConfigurations(self):  # pragma: no cover
        return VerifiedAccessInstanceOpenVpnClientConfiguration.make_many(
            self.boto3_raw_data["OpenVpnConfigurations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ExportVerifiedAccessInstanceClientConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ExportVerifiedAccessInstanceClientConfigurationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachVerifiedAccessTrustProviderResult:
    boto3_raw_data: "type_defs.AttachVerifiedAccessTrustProviderResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProvider(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_one(
            self.boto3_raw_data["VerifiedAccessTrustProvider"]
        )

    @cached_property
    def VerifiedAccessInstance(self):  # pragma: no cover
        return VerifiedAccessInstance.make_one(
            self.boto3_raw_data["VerifiedAccessInstance"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AttachVerifiedAccessTrustProviderResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachVerifiedAccessTrustProviderResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessInstanceResult:
    boto3_raw_data: "type_defs.CreateVerifiedAccessInstanceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessInstance(self):  # pragma: no cover
        return VerifiedAccessInstance.make_one(
            self.boto3_raw_data["VerifiedAccessInstance"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessInstanceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessInstanceResult:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessInstanceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessInstance(self):  # pragma: no cover
        return VerifiedAccessInstance.make_one(
            self.boto3_raw_data["VerifiedAccessInstance"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessInstanceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstancesResult:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessInstancesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessInstances(self):  # pragma: no cover
        return VerifiedAccessInstance.make_many(
            self.boto3_raw_data["VerifiedAccessInstances"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstancesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachVerifiedAccessTrustProviderResult:
    boto3_raw_data: "type_defs.DetachVerifiedAccessTrustProviderResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessTrustProvider(self):  # pragma: no cover
        return VerifiedAccessTrustProvider.make_one(
            self.boto3_raw_data["VerifiedAccessTrustProvider"]
        )

    @cached_property
    def VerifiedAccessInstance(self):  # pragma: no cover
        return VerifiedAccessInstance.make_one(
            self.boto3_raw_data["VerifiedAccessInstance"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DetachVerifiedAccessTrustProviderResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachVerifiedAccessTrustProviderResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessInstanceResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessInstanceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessInstance(self):  # pragma: no cover
        return VerifiedAccessInstance.make_one(
            self.boto3_raw_data["VerifiedAccessInstance"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessInstanceResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessLogs:
    boto3_raw_data: "type_defs.VerifiedAccessLogsTypeDef" = dataclasses.field()

    @cached_property
    def S3(self):  # pragma: no cover
        return VerifiedAccessLogS3Destination.make_one(self.boto3_raw_data["S3"])

    @cached_property
    def CloudWatchLogs(self):  # pragma: no cover
        return VerifiedAccessLogCloudWatchLogsDestination.make_one(
            self.boto3_raw_data["CloudWatchLogs"]
        )

    @cached_property
    def KinesisDataFirehose(self):  # pragma: no cover
        return VerifiedAccessLogKinesisDataFirehoseDestination.make_one(
            self.boto3_raw_data["KinesisDataFirehose"]
        )

    LogVersion = field("LogVersion")
    IncludeTrustContext = field("IncludeTrustContext")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VerifiedAccessLogsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessLogsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessInstanceLoggingConfigurationRequest:
    boto3_raw_data: (
        "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationRequestTypeDef"
    ) = dataclasses.field()

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")

    @cached_property
    def AccessLogs(self):  # pragma: no cover
        return VerifiedAccessLogOptions.make_one(self.boto3_raw_data["AccessLogs"])

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumesResult:
    boto3_raw_data: "type_defs.DescribeVolumesResultTypeDef" = dataclasses.field()

    @cached_property
    def Volumes(self):  # pragma: no cover
        return Volume.make_many(self.boto3_raw_data["Volumes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVolumesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeStatusItem:
    boto3_raw_data: "type_defs.VolumeStatusItemTypeDef" = dataclasses.field()

    @cached_property
    def Actions(self):  # pragma: no cover
        return VolumeStatusAction.make_many(self.boto3_raw_data["Actions"])

    AvailabilityZone = field("AvailabilityZone")
    OutpostArn = field("OutpostArn")

    @cached_property
    def Events(self):  # pragma: no cover
        return VolumeStatusEvent.make_many(self.boto3_raw_data["Events"])

    VolumeId = field("VolumeId")

    @cached_property
    def VolumeStatus(self):  # pragma: no cover
        return VolumeStatusInfo.make_one(self.boto3_raw_data["VolumeStatus"])

    @cached_property
    def AttachmentStatuses(self):  # pragma: no cover
        return VolumeStatusAttachmentStatus.make_many(
            self.boto3_raw_data["AttachmentStatuses"]
        )

    @cached_property
    def InitializationStatusDetails(self):  # pragma: no cover
        return InitializationStatusDetails.make_one(
            self.boto3_raw_data["InitializationStatusDetails"]
        )

    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeStatusItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VolumeStatusItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateVpcCidrBlockResult:
    boto3_raw_data: "type_defs.AssociateVpcCidrBlockResultTypeDef" = dataclasses.field()

    @cached_property
    def Ipv6CidrBlockAssociation(self):  # pragma: no cover
        return VpcIpv6CidrBlockAssociation.make_one(
            self.boto3_raw_data["Ipv6CidrBlockAssociation"]
        )

    @cached_property
    def CidrBlockAssociation(self):  # pragma: no cover
        return VpcCidrBlockAssociation.make_one(
            self.boto3_raw_data["CidrBlockAssociation"]
        )

    VpcId = field("VpcId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociateVpcCidrBlockResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateVpcCidrBlockResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateVpcCidrBlockResult:
    boto3_raw_data: "type_defs.DisassociateVpcCidrBlockResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Ipv6CidrBlockAssociation(self):  # pragma: no cover
        return VpcIpv6CidrBlockAssociation.make_one(
            self.boto3_raw_data["Ipv6CidrBlockAssociation"]
        )

    @cached_property
    def CidrBlockAssociation(self):  # pragma: no cover
        return VpcCidrBlockAssociation.make_one(
            self.boto3_raw_data["CidrBlockAssociation"]
        )

    VpcId = field("VpcId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DisassociateVpcCidrBlockResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateVpcCidrBlockResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcEncryptionControl:
    boto3_raw_data: "type_defs.VpcEncryptionControlTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    VpcEncryptionControlId = field("VpcEncryptionControlId")
    Mode = field("Mode")
    State = field("State")
    StateMessage = field("StateMessage")

    @cached_property
    def ResourceExclusions(self):  # pragma: no cover
        return VpcEncryptionControlExclusions.make_one(
            self.boto3_raw_data["ResourceExclusions"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcEncryptionControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcEncryptionControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcPeeringConnection:
    boto3_raw_data: "type_defs.VpcPeeringConnectionTypeDef" = dataclasses.field()

    @cached_property
    def AccepterVpcInfo(self):  # pragma: no cover
        return VpcPeeringConnectionVpcInfo.make_one(
            self.boto3_raw_data["AccepterVpcInfo"]
        )

    ExpirationTime = field("ExpirationTime")

    @cached_property
    def RequesterVpcInfo(self):  # pragma: no cover
        return VpcPeeringConnectionVpcInfo.make_one(
            self.boto3_raw_data["RequesterVpcInfo"]
        )

    @cached_property
    def Status(self):  # pragma: no cover
        return VpcPeeringConnectionStateReason.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcPeeringConnectionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcPeeringConnectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateInstanceEventWindowResult:
    boto3_raw_data: "type_defs.AssociateInstanceEventWindowResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindow(self):  # pragma: no cover
        return InstanceEventWindow.make_one(self.boto3_raw_data["InstanceEventWindow"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateInstanceEventWindowResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateInstanceEventWindowResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceEventWindowResult:
    boto3_raw_data: "type_defs.CreateInstanceEventWindowResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindow(self):  # pragma: no cover
        return InstanceEventWindow.make_one(self.boto3_raw_data["InstanceEventWindow"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInstanceEventWindowResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceEventWindowResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceEventWindowsResult:
    boto3_raw_data: "type_defs.DescribeInstanceEventWindowsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindows(self):  # pragma: no cover
        return InstanceEventWindow.make_many(
            self.boto3_raw_data["InstanceEventWindows"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceEventWindowsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceEventWindowsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateInstanceEventWindowResult:
    boto3_raw_data: "type_defs.DisassociateInstanceEventWindowResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindow(self):  # pragma: no cover
        return InstanceEventWindow.make_one(self.boto3_raw_data["InstanceEventWindow"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateInstanceEventWindowResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateInstanceEventWindowResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyInstanceEventWindowResult:
    boto3_raw_data: "type_defs.ModifyInstanceEventWindowResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceEventWindow(self):  # pragma: no cover
        return InstanceEventWindow.make_one(self.boto3_raw_data["InstanceEventWindow"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyInstanceEventWindowResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyInstanceEventWindowResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptAddressTransferRequest:
    boto3_raw_data: "type_defs.AcceptAddressTransferRequestTypeDef" = (
        dataclasses.field()
    )

    Address = field("Address")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AcceptAddressTransferRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptAddressTransferRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateAddressRequest:
    boto3_raw_data: "type_defs.AllocateAddressRequestTypeDef" = dataclasses.field()

    Domain = field("Domain")
    Address = field("Address")
    PublicIpv4Pool = field("PublicIpv4Pool")
    NetworkBorderGroup = field("NetworkBorderGroup")
    CustomerOwnedIpv4Pool = field("CustomerOwnedIpv4Pool")
    TagSpecifications = field("TagSpecifications")
    IpamPoolId = field("IpamPoolId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateAddressRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateAddressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AllocateHostsRequest:
    boto3_raw_data: "type_defs.AllocateHostsRequestTypeDef" = dataclasses.field()

    InstanceFamily = field("InstanceFamily")
    TagSpecifications = field("TagSpecifications")
    HostRecovery = field("HostRecovery")
    OutpostArn = field("OutpostArn")
    HostMaintenance = field("HostMaintenance")
    AssetIds = field("AssetIds")
    AvailabilityZoneId = field("AvailabilityZoneId")
    AutoPlacement = field("AutoPlacement")
    ClientToken = field("ClientToken")
    InstanceType = field("InstanceType")
    Quantity = field("Quantity")
    AvailabilityZone = field("AvailabilityZone")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AllocateHostsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AllocateHostsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateIpamResourceDiscoveryRequest:
    boto3_raw_data: "type_defs.AssociateIpamResourceDiscoveryRequestTypeDef" = (
        dataclasses.field()
    )

    IpamId = field("IpamId")
    IpamResourceDiscoveryId = field("IpamResourceDiscoveryId")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssociateIpamResourceDiscoveryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateIpamResourceDiscoveryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopyImageRequest:
    boto3_raw_data: "type_defs.CopyImageRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    SourceImageId = field("SourceImageId")
    SourceRegion = field("SourceRegion")
    ClientToken = field("ClientToken")
    Description = field("Description")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    DestinationOutpostArn = field("DestinationOutpostArn")
    CopyImageTags = field("CopyImageTags")
    TagSpecifications = field("TagSpecifications")
    SnapshotCopyCompletionDurationMinutes = field(
        "SnapshotCopyCompletionDurationMinutes"
    )
    DestinationAvailabilityZone = field("DestinationAvailabilityZone")
    DestinationAvailabilityZoneId = field("DestinationAvailabilityZoneId")
    DryRun = field("DryRun")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CopyImageRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopyImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopySnapshotRequestSnapshotCopy:
    boto3_raw_data: "type_defs.CopySnapshotRequestSnapshotCopyTypeDef" = (
        dataclasses.field()
    )

    SourceRegion = field("SourceRegion")
    Description = field("Description")
    DestinationOutpostArn = field("DestinationOutpostArn")
    DestinationRegion = field("DestinationRegion")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    PresignedUrl = field("PresignedUrl")
    TagSpecifications = field("TagSpecifications")
    CompletionDurationMinutes = field("CompletionDurationMinutes")
    DestinationAvailabilityZone = field("DestinationAvailabilityZone")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CopySnapshotRequestSnapshotCopyTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopySnapshotRequestSnapshotCopyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CopySnapshotRequest:
    boto3_raw_data: "type_defs.CopySnapshotRequestTypeDef" = dataclasses.field()

    SourceRegion = field("SourceRegion")
    SourceSnapshotId = field("SourceSnapshotId")
    Description = field("Description")
    DestinationOutpostArn = field("DestinationOutpostArn")
    DestinationRegion = field("DestinationRegion")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    PresignedUrl = field("PresignedUrl")
    TagSpecifications = field("TagSpecifications")
    CompletionDurationMinutes = field("CompletionDurationMinutes")
    DestinationAvailabilityZone = field("DestinationAvailabilityZone")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CopySnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CopySnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationBySplittingRequest:
    boto3_raw_data: "type_defs.CreateCapacityReservationBySplittingRequestTypeDef" = (
        dataclasses.field()
    )

    SourceCapacityReservationId = field("SourceCapacityReservationId")
    InstanceCount = field("InstanceCount")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateCapacityReservationBySplittingRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationBySplittingRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationFleetRequest:
    boto3_raw_data: "type_defs.CreateCapacityReservationFleetRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceTypeSpecifications(self):  # pragma: no cover
        return ReservationFleetInstanceSpecification.make_many(
            self.boto3_raw_data["InstanceTypeSpecifications"]
        )

    TotalTargetCapacity = field("TotalTargetCapacity")
    AllocationStrategy = field("AllocationStrategy")
    ClientToken = field("ClientToken")
    Tenancy = field("Tenancy")
    EndDate = field("EndDate")
    InstanceMatchCriteria = field("InstanceMatchCriteria")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateCapacityReservationFleetRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCapacityReservationRequest:
    boto3_raw_data: "type_defs.CreateCapacityReservationRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    InstancePlatform = field("InstancePlatform")
    InstanceCount = field("InstanceCount")
    ClientToken = field("ClientToken")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Tenancy = field("Tenancy")
    EbsOptimized = field("EbsOptimized")
    EphemeralStorage = field("EphemeralStorage")
    EndDate = field("EndDate")
    EndDateType = field("EndDateType")
    InstanceMatchCriteria = field("InstanceMatchCriteria")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    OutpostArn = field("OutpostArn")
    PlacementGroupArn = field("PlacementGroupArn")
    StartDate = field("StartDate")
    CommitmentDuration = field("CommitmentDuration")
    DeliveryPreference = field("DeliveryPreference")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateCapacityReservationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCapacityReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCarrierGatewayRequest:
    boto3_raw_data: "type_defs.CreateCarrierGatewayRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCarrierGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCarrierGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClientVpnEndpointRequest:
    boto3_raw_data: "type_defs.CreateClientVpnEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    ServerCertificateArn = field("ServerCertificateArn")

    @cached_property
    def AuthenticationOptions(self):  # pragma: no cover
        return ClientVpnAuthenticationRequest.make_many(
            self.boto3_raw_data["AuthenticationOptions"]
        )

    @cached_property
    def ConnectionLogOptions(self):  # pragma: no cover
        return ConnectionLogOptions.make_one(
            self.boto3_raw_data["ConnectionLogOptions"]
        )

    ClientCidrBlock = field("ClientCidrBlock")
    DnsServers = field("DnsServers")
    TransportProtocol = field("TransportProtocol")
    VpnPort = field("VpnPort")
    Description = field("Description")
    SplitTunnel = field("SplitTunnel")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")
    SecurityGroupIds = field("SecurityGroupIds")
    VpcId = field("VpcId")
    SelfServicePortal = field("SelfServicePortal")

    @cached_property
    def ClientConnectOptions(self):  # pragma: no cover
        return ClientConnectOptions.make_one(
            self.boto3_raw_data["ClientConnectOptions"]
        )

    SessionTimeoutHours = field("SessionTimeoutHours")

    @cached_property
    def ClientLoginBannerOptions(self):  # pragma: no cover
        return ClientLoginBannerOptions.make_one(
            self.boto3_raw_data["ClientLoginBannerOptions"]
        )

    @cached_property
    def ClientRouteEnforcementOptions(self):  # pragma: no cover
        return ClientRouteEnforcementOptions.make_one(
            self.boto3_raw_data["ClientRouteEnforcementOptions"]
        )

    DisconnectOnSessionTimeout = field("DisconnectOnSessionTimeout")
    EndpointIpAddressType = field("EndpointIpAddressType")
    TrafficIpAddressType = field("TrafficIpAddressType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateClientVpnEndpointRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClientVpnEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCoipPoolRequest:
    boto3_raw_data: "type_defs.CreateCoipPoolRequestTypeDef" = dataclasses.field()

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCoipPoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCoipPoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCustomerGatewayRequest:
    boto3_raw_data: "type_defs.CreateCustomerGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")
    BgpAsn = field("BgpAsn")
    PublicIp = field("PublicIp")
    CertificateArn = field("CertificateArn")
    TagSpecifications = field("TagSpecifications")
    DeviceName = field("DeviceName")
    IpAddress = field("IpAddress")
    BgpAsnExtended = field("BgpAsnExtended")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCustomerGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCustomerGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDelegateMacVolumeOwnershipTaskRequest:
    boto3_raw_data: "type_defs.CreateDelegateMacVolumeOwnershipTaskRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    MacCredentials = field("MacCredentials")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateDelegateMacVolumeOwnershipTaskRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDelegateMacVolumeOwnershipTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDhcpOptionsRequestServiceResourceCreateDhcpOptions:
    boto3_raw_data: (
        "type_defs.CreateDhcpOptionsRequestServiceResourceCreateDhcpOptionsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DhcpConfigurations(self):  # pragma: no cover
        return NewDhcpConfiguration.make_many(self.boto3_raw_data["DhcpConfigurations"])

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateDhcpOptionsRequestServiceResourceCreateDhcpOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateDhcpOptionsRequestServiceResourceCreateDhcpOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDhcpOptionsRequest:
    boto3_raw_data: "type_defs.CreateDhcpOptionsRequestTypeDef" = dataclasses.field()

    @cached_property
    def DhcpConfigurations(self):  # pragma: no cover
        return NewDhcpConfiguration.make_many(self.boto3_raw_data["DhcpConfigurations"])

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDhcpOptionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDhcpOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEgressOnlyInternetGatewayRequest:
    boto3_raw_data: "type_defs.CreateEgressOnlyInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateEgressOnlyInternetGatewayRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEgressOnlyInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFlowLogsRequest:
    boto3_raw_data: "type_defs.CreateFlowLogsRequestTypeDef" = dataclasses.field()

    ResourceIds = field("ResourceIds")
    ResourceType = field("ResourceType")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    DeliverLogsPermissionArn = field("DeliverLogsPermissionArn")
    DeliverCrossAccountRole = field("DeliverCrossAccountRole")
    LogGroupName = field("LogGroupName")
    TrafficType = field("TrafficType")
    LogDestinationType = field("LogDestinationType")
    LogDestination = field("LogDestination")
    LogFormat = field("LogFormat")
    TagSpecifications = field("TagSpecifications")
    MaxAggregationInterval = field("MaxAggregationInterval")

    @cached_property
    def DestinationOptions(self):  # pragma: no cover
        return DestinationOptionsRequest.make_one(
            self.boto3_raw_data["DestinationOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFlowLogsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFlowLogsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFpgaImageRequest:
    boto3_raw_data: "type_defs.CreateFpgaImageRequestTypeDef" = dataclasses.field()

    @cached_property
    def InputStorageLocation(self):  # pragma: no cover
        return StorageLocation.make_one(self.boto3_raw_data["InputStorageLocation"])

    DryRun = field("DryRun")

    @cached_property
    def LogsStorageLocation(self):  # pragma: no cover
        return StorageLocation.make_one(self.boto3_raw_data["LogsStorageLocation"])

    Description = field("Description")
    Name = field("Name")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFpgaImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFpgaImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageRequestInstanceCreateImage:
    boto3_raw_data: "type_defs.CreateImageRequestInstanceCreateImageTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    TagSpecifications = field("TagSpecifications")
    SnapshotLocation = field("SnapshotLocation")
    DryRun = field("DryRun")
    Description = field("Description")
    NoReboot = field("NoReboot")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateImageRequestInstanceCreateImageTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageRequestInstanceCreateImageTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageRequest:
    boto3_raw_data: "type_defs.CreateImageRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Name = field("Name")
    TagSpecifications = field("TagSpecifications")
    SnapshotLocation = field("SnapshotLocation")
    DryRun = field("DryRun")
    Description = field("Description")
    NoReboot = field("NoReboot")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageUsageReportRequest:
    boto3_raw_data: "type_defs.CreateImageUsageReportRequestTypeDef" = (
        dataclasses.field()
    )

    ImageId = field("ImageId")

    @cached_property
    def ResourceTypes(self):  # pragma: no cover
        return ImageUsageResourceTypeRequest.make_many(
            self.boto3_raw_data["ResourceTypes"]
        )

    DryRun = field("DryRun")
    AccountIds = field("AccountIds")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateImageUsageReportRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageUsageReportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceConnectEndpointRequest:
    boto3_raw_data: "type_defs.CreateInstanceConnectEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")
    DryRun = field("DryRun")
    SecurityGroupIds = field("SecurityGroupIds")
    PreserveClientIp = field("PreserveClientIp")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")
    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInstanceConnectEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceConnectEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceEventWindowRequest:
    boto3_raw_data: "type_defs.CreateInstanceEventWindowRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    Name = field("Name")

    @cached_property
    def TimeRanges(self):  # pragma: no cover
        return InstanceEventWindowTimeRangeRequest.make_many(
            self.boto3_raw_data["TimeRanges"]
        )

    CronExpression = field("CronExpression")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInstanceEventWindowRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceEventWindowRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceExportTaskRequest:
    boto3_raw_data: "type_defs.CreateInstanceExportTaskRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    TargetEnvironment = field("TargetEnvironment")

    @cached_property
    def ExportToS3Task(self):  # pragma: no cover
        return ExportToS3TaskSpecification.make_one(
            self.boto3_raw_data["ExportToS3Task"]
        )

    TagSpecifications = field("TagSpecifications")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInstanceExportTaskRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceExportTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInternetGatewayRequestServiceResourceCreateInternetGateway:
    boto3_raw_data: "type_defs.CreateInternetGatewayRequestServiceResourceCreateInternetGatewayTypeDef" = (dataclasses.field())

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInternetGatewayRequestServiceResourceCreateInternetGatewayTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateInternetGatewayRequestServiceResourceCreateInternetGatewayTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInternetGatewayRequest:
    boto3_raw_data: "type_defs.CreateInternetGatewayRequestTypeDef" = (
        dataclasses.field()
    )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateInternetGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInternetGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamExternalResourceVerificationTokenRequest:
    boto3_raw_data: (
        "type_defs.CreateIpamExternalResourceVerificationTokenRequestTypeDef"
    ) = dataclasses.field()

    IpamId = field("IpamId")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateIpamExternalResourceVerificationTokenRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateIpamExternalResourceVerificationTokenRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamPoolRequest:
    boto3_raw_data: "type_defs.CreateIpamPoolRequestTypeDef" = dataclasses.field()

    IpamScopeId = field("IpamScopeId")
    AddressFamily = field("AddressFamily")
    DryRun = field("DryRun")
    Locale = field("Locale")
    SourceIpamPoolId = field("SourceIpamPoolId")
    Description = field("Description")
    AutoImport = field("AutoImport")
    PubliclyAdvertisable = field("PubliclyAdvertisable")
    AllocationMinNetmaskLength = field("AllocationMinNetmaskLength")
    AllocationMaxNetmaskLength = field("AllocationMaxNetmaskLength")
    AllocationDefaultNetmaskLength = field("AllocationDefaultNetmaskLength")

    @cached_property
    def AllocationResourceTags(self):  # pragma: no cover
        return RequestIpamResourceTag.make_many(
            self.boto3_raw_data["AllocationResourceTags"]
        )

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    AwsService = field("AwsService")
    PublicIpSource = field("PublicIpSource")

    @cached_property
    def SourceResource(self):  # pragma: no cover
        return IpamPoolSourceResourceRequest.make_one(
            self.boto3_raw_data["SourceResource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIpamPoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamPoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamRequest:
    boto3_raw_data: "type_defs.CreateIpamRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    Description = field("Description")

    @cached_property
    def OperatingRegions(self):  # pragma: no cover
        return AddIpamOperatingRegion.make_many(self.boto3_raw_data["OperatingRegions"])

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    Tier = field("Tier")
    EnablePrivateGua = field("EnablePrivateGua")
    MeteredAccount = field("MeteredAccount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateIpamRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamResourceDiscoveryRequest:
    boto3_raw_data: "type_defs.CreateIpamResourceDiscoveryRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    Description = field("Description")

    @cached_property
    def OperatingRegions(self):  # pragma: no cover
        return AddIpamOperatingRegion.make_many(self.boto3_raw_data["OperatingRegions"])

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateIpamResourceDiscoveryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamResourceDiscoveryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIpamScopeRequest:
    boto3_raw_data: "type_defs.CreateIpamScopeRequestTypeDef" = dataclasses.field()

    IpamId = field("IpamId")
    DryRun = field("DryRun")
    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIpamScopeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIpamScopeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateKeyPairRequestServiceResourceCreateKeyPair:
    boto3_raw_data: (
        "type_defs.CreateKeyPairRequestServiceResourceCreateKeyPairTypeDef"
    ) = dataclasses.field()

    KeyName = field("KeyName")
    KeyType = field("KeyType")
    TagSpecifications = field("TagSpecifications")
    KeyFormat = field("KeyFormat")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateKeyPairRequestServiceResourceCreateKeyPairTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateKeyPairRequestServiceResourceCreateKeyPairTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateKeyPairRequest:
    boto3_raw_data: "type_defs.CreateKeyPairRequestTypeDef" = dataclasses.field()

    KeyName = field("KeyName")
    KeyType = field("KeyType")
    TagSpecifications = field("TagSpecifications")
    KeyFormat = field("KeyFormat")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateKeyPairRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateKeyPairRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayId = field("LocalGatewayId")
    Mode = field("Mode")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest:
    boto3_raw_data: "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef" = (dataclasses.field())

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayRouteTableVpcAssociationRequest:
    boto3_raw_data: (
        "type_defs.CreateLocalGatewayRouteTableVpcAssociationRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayRouteTableId = field("LocalGatewayRouteTableId")
    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayRouteTableVpcAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateLocalGatewayRouteTableVpcAssociationRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayVirtualInterfaceGroupRequest:
    boto3_raw_data: (
        "type_defs.CreateLocalGatewayVirtualInterfaceGroupRequestTypeDef"
    ) = dataclasses.field()

    LocalGatewayId = field("LocalGatewayId")
    LocalBgpAsn = field("LocalBgpAsn")
    LocalBgpAsnExtended = field("LocalBgpAsnExtended")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayVirtualInterfaceGroupRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateLocalGatewayVirtualInterfaceGroupRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLocalGatewayVirtualInterfaceRequest:
    boto3_raw_data: "type_defs.CreateLocalGatewayVirtualInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    LocalGatewayVirtualInterfaceGroupId = field("LocalGatewayVirtualInterfaceGroupId")
    OutpostLagId = field("OutpostLagId")
    Vlan = field("Vlan")
    LocalAddress = field("LocalAddress")
    PeerAddress = field("PeerAddress")
    PeerBgpAsn = field("PeerBgpAsn")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    PeerBgpAsnExtended = field("PeerBgpAsnExtended")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLocalGatewayVirtualInterfaceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLocalGatewayVirtualInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMacSystemIntegrityProtectionModificationTaskRequest:
    boto3_raw_data: (
        "type_defs.CreateMacSystemIntegrityProtectionModificationTaskRequestTypeDef"
    ) = dataclasses.field()

    InstanceId = field("InstanceId")
    MacSystemIntegrityProtectionStatus = field("MacSystemIntegrityProtectionStatus")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    MacCredentials = field("MacCredentials")

    @cached_property
    def MacSystemIntegrityProtectionConfiguration(self):  # pragma: no cover
        return MacSystemIntegrityProtectionConfigurationRequest.make_one(
            self.boto3_raw_data["MacSystemIntegrityProtectionConfiguration"]
        )

    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateMacSystemIntegrityProtectionModificationTaskRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateMacSystemIntegrityProtectionModificationTaskRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateManagedPrefixListRequest:
    boto3_raw_data: "type_defs.CreateManagedPrefixListRequestTypeDef" = (
        dataclasses.field()
    )

    PrefixListName = field("PrefixListName")
    MaxEntries = field("MaxEntries")
    AddressFamily = field("AddressFamily")
    DryRun = field("DryRun")

    @cached_property
    def Entries(self):  # pragma: no cover
        return AddPrefixListEntry.make_many(self.boto3_raw_data["Entries"])

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateManagedPrefixListRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateManagedPrefixListRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNatGatewayRequest:
    boto3_raw_data: "type_defs.CreateNatGatewayRequestTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    AllocationId = field("AllocationId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")
    ConnectivityType = field("ConnectivityType")
    PrivateIpAddress = field("PrivateIpAddress")
    SecondaryAllocationIds = field("SecondaryAllocationIds")
    SecondaryPrivateIpAddresses = field("SecondaryPrivateIpAddresses")
    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNatGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNatGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclRequestServiceResourceCreateNetworkAcl:
    boto3_raw_data: (
        "type_defs.CreateNetworkAclRequestServiceResourceCreateNetworkAclTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkAclRequestServiceResourceCreateNetworkAclTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateNetworkAclRequestServiceResourceCreateNetworkAclTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclRequest:
    boto3_raw_data: "type_defs.CreateNetworkAclRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNetworkAclRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkAclRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclRequestVpcCreateNetworkAcl:
    boto3_raw_data: "type_defs.CreateNetworkAclRequestVpcCreateNetworkAclTypeDef" = (
        dataclasses.field()
    )

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkAclRequestVpcCreateNetworkAclTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkAclRequestVpcCreateNetworkAclTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInsightsPathRequest:
    boto3_raw_data: "type_defs.CreateNetworkInsightsPathRequestTypeDef" = (
        dataclasses.field()
    )

    Source = field("Source")
    Protocol = field("Protocol")
    ClientToken = field("ClientToken")
    SourceIp = field("SourceIp")
    DestinationIp = field("DestinationIp")
    Destination = field("Destination")
    DestinationPort = field("DestinationPort")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @cached_property
    def FilterAtSource(self):  # pragma: no cover
        return PathRequestFilter.make_one(self.boto3_raw_data["FilterAtSource"])

    @cached_property
    def FilterAtDestination(self):  # pragma: no cover
        return PathRequestFilter.make_one(self.boto3_raw_data["FilterAtDestination"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateNetworkInsightsPathRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInsightsPathRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfaceRequestServiceResourceCreateNetworkInterface:
    boto3_raw_data: "type_defs.CreateNetworkInterfaceRequestServiceResourceCreateNetworkInterfaceTypeDef" = (dataclasses.field())

    SubnetId = field("SubnetId")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    InterfaceType = field("InterfaceType")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    Description = field("Description")
    PrivateIpAddress = field("PrivateIpAddress")
    Groups = field("Groups")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    Ipv6AddressCount = field("Ipv6AddressCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInterfaceRequestServiceResourceCreateNetworkInterfaceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateNetworkInterfaceRequestServiceResourceCreateNetworkInterfaceTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfaceRequestSubnetCreateNetworkInterface:
    boto3_raw_data: (
        "type_defs.CreateNetworkInterfaceRequestSubnetCreateNetworkInterfaceTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    InterfaceType = field("InterfaceType")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    Description = field("Description")
    PrivateIpAddress = field("PrivateIpAddress")
    Groups = field("Groups")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    Ipv6AddressCount = field("Ipv6AddressCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInterfaceRequestSubnetCreateNetworkInterfaceTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateNetworkInterfaceRequestSubnetCreateNetworkInterfaceTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfaceRequest:
    boto3_raw_data: "type_defs.CreateNetworkInterfaceRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecificationRequest.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")
    InterfaceType = field("InterfaceType")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def ConnectionTrackingSpecification(self):  # pragma: no cover
        return ConnectionTrackingSpecificationRequest.make_one(
            self.boto3_raw_data["ConnectionTrackingSpecification"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    Description = field("Description")
    PrivateIpAddress = field("PrivateIpAddress")
    Groups = field("Groups")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return PrivateIpAddressSpecification.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    Ipv6AddressCount = field("Ipv6AddressCount")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateNetworkInterfaceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInterfaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePlacementGroupRequestServiceResourceCreatePlacementGroup:
    boto3_raw_data: "type_defs.CreatePlacementGroupRequestServiceResourceCreatePlacementGroupTypeDef" = (dataclasses.field())

    PartitionCount = field("PartitionCount")
    TagSpecifications = field("TagSpecifications")
    SpreadLevel = field("SpreadLevel")
    DryRun = field("DryRun")
    GroupName = field("GroupName")
    Strategy = field("Strategy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePlacementGroupRequestServiceResourceCreatePlacementGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreatePlacementGroupRequestServiceResourceCreatePlacementGroupTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePlacementGroupRequest:
    boto3_raw_data: "type_defs.CreatePlacementGroupRequestTypeDef" = dataclasses.field()

    PartitionCount = field("PartitionCount")
    TagSpecifications = field("TagSpecifications")
    SpreadLevel = field("SpreadLevel")
    DryRun = field("DryRun")
    GroupName = field("GroupName")
    Strategy = field("Strategy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePlacementGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePlacementGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePublicIpv4PoolRequest:
    boto3_raw_data: "type_defs.CreatePublicIpv4PoolRequestTypeDef" = dataclasses.field()

    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePublicIpv4PoolRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePublicIpv4PoolRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateReplaceRootVolumeTaskRequest:
    boto3_raw_data: "type_defs.CreateReplaceRootVolumeTaskRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceId = field("InstanceId")
    SnapshotId = field("SnapshotId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")
    ImageId = field("ImageId")
    DeleteReplacedRootVolume = field("DeleteReplacedRootVolume")
    VolumeInitializationRate = field("VolumeInitializationRate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateReplaceRootVolumeTaskRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateReplaceRootVolumeTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRestoreImageTaskRequest:
    boto3_raw_data: "type_defs.CreateRestoreImageTaskRequestTypeDef" = (
        dataclasses.field()
    )

    Bucket = field("Bucket")
    ObjectKey = field("ObjectKey")
    Name = field("Name")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateRestoreImageTaskRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRestoreImageTaskRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerEndpointRequest:
    boto3_raw_data: "type_defs.CreateRouteServerEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerId = field("RouteServerId")
    SubnetId = field("SubnetId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateRouteServerEndpointRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerPeerRequest:
    boto3_raw_data: "type_defs.CreateRouteServerPeerRequestTypeDef" = (
        dataclasses.field()
    )

    RouteServerEndpointId = field("RouteServerEndpointId")
    PeerAddress = field("PeerAddress")

    @cached_property
    def BgpOptions(self):  # pragma: no cover
        return RouteServerBgpOptionsRequest.make_one(self.boto3_raw_data["BgpOptions"])

    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteServerPeerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerPeerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteServerRequest:
    boto3_raw_data: "type_defs.CreateRouteServerRequestTypeDef" = dataclasses.field()

    AmazonSideAsn = field("AmazonSideAsn")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    PersistRoutes = field("PersistRoutes")
    PersistRoutesDuration = field("PersistRoutesDuration")
    SnsNotificationsEnabled = field("SnsNotificationsEnabled")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteServerRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteTableRequestServiceResourceCreateRouteTable:
    boto3_raw_data: (
        "type_defs.CreateRouteTableRequestServiceResourceCreateRouteTableTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateRouteTableRequestServiceResourceCreateRouteTableTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateRouteTableRequestServiceResourceCreateRouteTableTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteTableRequest:
    boto3_raw_data: "type_defs.CreateRouteTableRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteTableRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteTableRequestVpcCreateRouteTable:
    boto3_raw_data: "type_defs.CreateRouteTableRequestVpcCreateRouteTableTypeDef" = (
        dataclasses.field()
    )

    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateRouteTableRequestVpcCreateRouteTableTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteTableRequestVpcCreateRouteTableTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSecurityGroupRequestServiceResourceCreateSecurityGroup:
    boto3_raw_data: (
        "type_defs.CreateSecurityGroupRequestServiceResourceCreateSecurityGroupTypeDef"
    ) = dataclasses.field()

    Description = field("Description")
    GroupName = field("GroupName")
    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSecurityGroupRequestServiceResourceCreateSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateSecurityGroupRequestServiceResourceCreateSecurityGroupTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSecurityGroupRequest:
    boto3_raw_data: "type_defs.CreateSecurityGroupRequestTypeDef" = dataclasses.field()

    Description = field("Description")
    GroupName = field("GroupName")
    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSecurityGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSecurityGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSecurityGroupRequestVpcCreateSecurityGroup:
    boto3_raw_data: (
        "type_defs.CreateSecurityGroupRequestVpcCreateSecurityGroupTypeDef"
    ) = dataclasses.field()

    Description = field("Description")
    GroupName = field("GroupName")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSecurityGroupRequestVpcCreateSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateSecurityGroupRequestVpcCreateSecurityGroupTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSnapshotRequestServiceResourceCreateSnapshot:
    boto3_raw_data: (
        "type_defs.CreateSnapshotRequestServiceResourceCreateSnapshotTypeDef"
    ) = dataclasses.field()

    VolumeId = field("VolumeId")
    Description = field("Description")
    OutpostArn = field("OutpostArn")
    TagSpecifications = field("TagSpecifications")
    Location = field("Location")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSnapshotRequestServiceResourceCreateSnapshotTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateSnapshotRequestServiceResourceCreateSnapshotTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSnapshotRequest:
    boto3_raw_data: "type_defs.CreateSnapshotRequestTypeDef" = dataclasses.field()

    VolumeId = field("VolumeId")
    Description = field("Description")
    OutpostArn = field("OutpostArn")
    TagSpecifications = field("TagSpecifications")
    Location = field("Location")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSnapshotRequestVolumeCreateSnapshot:
    boto3_raw_data: "type_defs.CreateSnapshotRequestVolumeCreateSnapshotTypeDef" = (
        dataclasses.field()
    )

    Description = field("Description")
    OutpostArn = field("OutpostArn")
    TagSpecifications = field("TagSpecifications")
    Location = field("Location")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSnapshotRequestVolumeCreateSnapshotTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSnapshotRequestVolumeCreateSnapshotTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSnapshotsRequest:
    boto3_raw_data: "type_defs.CreateSnapshotsRequestTypeDef" = dataclasses.field()

    @cached_property
    def InstanceSpecification(self):  # pragma: no cover
        return InstanceSpecification.make_one(
            self.boto3_raw_data["InstanceSpecification"]
        )

    Description = field("Description")
    OutpostArn = field("OutpostArn")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    CopyTagsFromSource = field("CopyTagsFromSource")
    Location = field("Location")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSnapshotsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSnapshotsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetCidrReservationRequest:
    boto3_raw_data: "type_defs.CreateSubnetCidrReservationRequestTypeDef" = (
        dataclasses.field()
    )

    SubnetId = field("SubnetId")
    Cidr = field("Cidr")
    ReservationType = field("ReservationType")
    Description = field("Description")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSubnetCidrReservationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSubnetCidrReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetRequestServiceResourceCreateSubnet:
    boto3_raw_data: (
        "type_defs.CreateSubnetRequestServiceResourceCreateSubnetTypeDef"
    ) = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    OutpostArn = field("OutpostArn")
    Ipv6Native = field("Ipv6Native")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSubnetRequestServiceResourceCreateSubnetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateSubnetRequestServiceResourceCreateSubnetTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetRequest:
    boto3_raw_data: "type_defs.CreateSubnetRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    OutpostArn = field("OutpostArn")
    Ipv6Native = field("Ipv6Native")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSubnetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSubnetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetRequestVpcCreateSubnet:
    boto3_raw_data: "type_defs.CreateSubnetRequestVpcCreateSubnetTypeDef" = (
        dataclasses.field()
    )

    TagSpecifications = field("TagSpecifications")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    CidrBlock = field("CidrBlock")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    OutpostArn = field("OutpostArn")
    Ipv6Native = field("Ipv6Native")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateSubnetRequestVpcCreateSubnetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSubnetRequestVpcCreateSubnetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorFilterRequest:
    boto3_raw_data: "type_defs.CreateTrafficMirrorFilterRequestTypeDef" = (
        dataclasses.field()
    )

    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTrafficMirrorFilterRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorFilterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorFilterRuleRequest:
    boto3_raw_data: "type_defs.CreateTrafficMirrorFilterRuleRequestTypeDef" = (
        dataclasses.field()
    )

    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    TrafficDirection = field("TrafficDirection")
    RuleNumber = field("RuleNumber")
    RuleAction = field("RuleAction")
    DestinationCidrBlock = field("DestinationCidrBlock")
    SourceCidrBlock = field("SourceCidrBlock")

    @cached_property
    def DestinationPortRange(self):  # pragma: no cover
        return TrafficMirrorPortRangeRequest.make_one(
            self.boto3_raw_data["DestinationPortRange"]
        )

    @cached_property
    def SourcePortRange(self):  # pragma: no cover
        return TrafficMirrorPortRangeRequest.make_one(
            self.boto3_raw_data["SourcePortRange"]
        )

    Protocol = field("Protocol")
    Description = field("Description")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTrafficMirrorFilterRuleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorFilterRuleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorSessionRequest:
    boto3_raw_data: "type_defs.CreateTrafficMirrorSessionRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    TrafficMirrorTargetId = field("TrafficMirrorTargetId")
    TrafficMirrorFilterId = field("TrafficMirrorFilterId")
    SessionNumber = field("SessionNumber")
    PacketLength = field("PacketLength")
    VirtualNetworkId = field("VirtualNetworkId")
    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTrafficMirrorSessionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorSessionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorTargetRequest:
    boto3_raw_data: "type_defs.CreateTrafficMirrorTargetRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")
    NetworkLoadBalancerArn = field("NetworkLoadBalancerArn")
    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    GatewayLoadBalancerEndpointId = field("GatewayLoadBalancerEndpointId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTrafficMirrorTargetRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorTargetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayConnectPeerRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayConnectPeerRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayAttachmentId = field("TransitGatewayAttachmentId")
    PeerAddress = field("PeerAddress")
    InsideCidrBlocks = field("InsideCidrBlocks")
    TransitGatewayAddress = field("TransitGatewayAddress")

    @cached_property
    def BgpOptions(self):  # pragma: no cover
        return TransitGatewayConnectRequestBgpOptions.make_one(
            self.boto3_raw_data["BgpOptions"]
        )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayConnectPeerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayConnectPeerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayConnectRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayConnectRequestTypeDef" = (
        dataclasses.field()
    )

    TransportTransitGatewayAttachmentId = field("TransportTransitGatewayAttachmentId")

    @cached_property
    def Options(self):  # pragma: no cover
        return CreateTransitGatewayConnectRequestOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayConnectRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayConnectRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayMulticastDomainRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayMulticastDomainRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayId = field("TransitGatewayId")

    @cached_property
    def Options(self):  # pragma: no cover
        return CreateTransitGatewayMulticastDomainRequestOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayMulticastDomainRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayMulticastDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPeeringAttachmentRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayPeeringAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayId = field("TransitGatewayId")
    PeerTransitGatewayId = field("PeerTransitGatewayId")
    PeerAccountId = field("PeerAccountId")
    PeerRegion = field("PeerRegion")

    @cached_property
    def Options(self):  # pragma: no cover
        return CreateTransitGatewayPeeringAttachmentRequestOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPeeringAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayPeeringAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayPolicyTableRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayPolicyTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayId = field("TransitGatewayId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayPolicyTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayPolicyTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayRequestTypeDef" = dataclasses.field()

    Description = field("Description")

    @cached_property
    def Options(self):  # pragma: no cover
        return TransitGatewayRequestOptions.make_one(self.boto3_raw_data["Options"])

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTransitGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteTableAnnouncementRequest:
    boto3_raw_data: (
        "type_defs.CreateTransitGatewayRouteTableAnnouncementRequestTypeDef"
    ) = dataclasses.field()

    TransitGatewayRouteTableId = field("TransitGatewayRouteTableId")
    PeeringAttachmentId = field("PeeringAttachmentId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayRouteTableAnnouncementRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateTransitGatewayRouteTableAnnouncementRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayRouteTableRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayRouteTableRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayId = field("TransitGatewayId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayRouteTableRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayRouteTableRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayVpcAttachmentRequest:
    boto3_raw_data: "type_defs.CreateTransitGatewayVpcAttachmentRequestTypeDef" = (
        dataclasses.field()
    )

    TransitGatewayId = field("TransitGatewayId")
    VpcId = field("VpcId")
    SubnetIds = field("SubnetIds")

    @cached_property
    def Options(self):  # pragma: no cover
        return CreateTransitGatewayVpcAttachmentRequestOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayVpcAttachmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayVpcAttachmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointRequest:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessGroupId = field("VerifiedAccessGroupId")
    EndpointType = field("EndpointType")
    AttachmentType = field("AttachmentType")
    DomainCertificateArn = field("DomainCertificateArn")
    ApplicationDomain = field("ApplicationDomain")
    EndpointDomainPrefix = field("EndpointDomainPrefix")
    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def LoadBalancerOptions(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointLoadBalancerOptions.make_one(
            self.boto3_raw_data["LoadBalancerOptions"]
        )

    @cached_property
    def NetworkInterfaceOptions(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointEniOptions.make_one(
            self.boto3_raw_data["NetworkInterfaceOptions"]
        )

    Description = field("Description")
    PolicyDocument = field("PolicyDocument")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def RdsOptions(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointRdsOptions.make_one(
            self.boto3_raw_data["RdsOptions"]
        )

    @cached_property
    def CidrOptions(self):  # pragma: no cover
        return CreateVerifiedAccessEndpointCidrOptions.make_one(
            self.boto3_raw_data["CidrOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessGroupRequest:
    boto3_raw_data: "type_defs.CreateVerifiedAccessGroupRequestTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")
    Description = field("Description")
    PolicyDocument = field("PolicyDocument")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateVerifiedAccessGroupRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessInstanceRequest:
    boto3_raw_data: "type_defs.CreateVerifiedAccessInstanceRequestTypeDef" = (
        dataclasses.field()
    )

    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    FIPSEnabled = field("FIPSEnabled")
    CidrEndpointsCustomSubDomain = field("CidrEndpointsCustomSubDomain")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessInstanceRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessTrustProviderRequest:
    boto3_raw_data: "type_defs.CreateVerifiedAccessTrustProviderRequestTypeDef" = (
        dataclasses.field()
    )

    TrustProviderType = field("TrustProviderType")
    PolicyReferenceName = field("PolicyReferenceName")
    UserTrustProviderType = field("UserTrustProviderType")
    DeviceTrustProviderType = field("DeviceTrustProviderType")

    @cached_property
    def OidcOptions(self):  # pragma: no cover
        return CreateVerifiedAccessTrustProviderOidcOptions.make_one(
            self.boto3_raw_data["OidcOptions"]
        )

    @cached_property
    def DeviceOptions(self):  # pragma: no cover
        return CreateVerifiedAccessTrustProviderDeviceOptions.make_one(
            self.boto3_raw_data["DeviceOptions"]
        )

    Description = field("Description")
    TagSpecifications = field("TagSpecifications")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")

    @cached_property
    def SseSpecification(self):  # pragma: no cover
        return VerifiedAccessSseSpecificationRequest.make_one(
            self.boto3_raw_data["SseSpecification"]
        )

    @cached_property
    def NativeApplicationOidcOptions(self):  # pragma: no cover
        return CreateVerifiedAccessNativeApplicationOidcOptions.make_one(
            self.boto3_raw_data["NativeApplicationOidcOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessTrustProviderRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessTrustProviderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVolumeRequestServiceResourceCreateVolume:
    boto3_raw_data: (
        "type_defs.CreateVolumeRequestServiceResourceCreateVolumeTypeDef"
    ) = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Encrypted = field("Encrypted")
    Iops = field("Iops")
    KmsKeyId = field("KmsKeyId")
    OutpostArn = field("OutpostArn")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    VolumeType = field("VolumeType")
    TagSpecifications = field("TagSpecifications")
    MultiAttachEnabled = field("MultiAttachEnabled")
    Throughput = field("Throughput")
    ClientToken = field("ClientToken")
    VolumeInitializationRate = field("VolumeInitializationRate")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVolumeRequestServiceResourceCreateVolumeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVolumeRequestServiceResourceCreateVolumeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVolumeRequest:
    boto3_raw_data: "type_defs.CreateVolumeRequestTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    Encrypted = field("Encrypted")
    Iops = field("Iops")
    KmsKeyId = field("KmsKeyId")
    OutpostArn = field("OutpostArn")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    VolumeType = field("VolumeType")
    TagSpecifications = field("TagSpecifications")
    MultiAttachEnabled = field("MultiAttachEnabled")
    Throughput = field("Throughput")
    ClientToken = field("ClientToken")
    VolumeInitializationRate = field("VolumeInitializationRate")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVolumeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcBlockPublicAccessExclusionRequest:
    boto3_raw_data: "type_defs.CreateVpcBlockPublicAccessExclusionRequestTypeDef" = (
        dataclasses.field()
    )

    InternetGatewayExclusionMode = field("InternetGatewayExclusionMode")
    DryRun = field("DryRun")
    SubnetId = field("SubnetId")
    VpcId = field("VpcId")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcBlockPublicAccessExclusionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcBlockPublicAccessExclusionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointRequest:
    boto3_raw_data: "type_defs.CreateVpcEndpointRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    DryRun = field("DryRun")
    VpcEndpointType = field("VpcEndpointType")
    ServiceName = field("ServiceName")
    PolicyDocument = field("PolicyDocument")
    RouteTableIds = field("RouteTableIds")
    SubnetIds = field("SubnetIds")
    SecurityGroupIds = field("SecurityGroupIds")
    IpAddressType = field("IpAddressType")

    @cached_property
    def DnsOptions(self):  # pragma: no cover
        return DnsOptionsSpecification.make_one(self.boto3_raw_data["DnsOptions"])

    ClientToken = field("ClientToken")
    PrivateDnsEnabled = field("PrivateDnsEnabled")
    TagSpecifications = field("TagSpecifications")

    @cached_property
    def SubnetConfigurations(self):  # pragma: no cover
        return SubnetConfiguration.make_many(
            self.boto3_raw_data["SubnetConfigurations"]
        )

    ServiceNetworkArn = field("ServiceNetworkArn")
    ResourceConfigurationArn = field("ResourceConfigurationArn")
    ServiceRegion = field("ServiceRegion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpcEndpointRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcEndpointRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcEndpointServiceConfigurationRequest:
    boto3_raw_data: "type_defs.CreateVpcEndpointServiceConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    DryRun = field("DryRun")
    AcceptanceRequired = field("AcceptanceRequired")
    PrivateDnsName = field("PrivateDnsName")
    NetworkLoadBalancerArns = field("NetworkLoadBalancerArns")
    GatewayLoadBalancerArns = field("GatewayLoadBalancerArns")
    SupportedIpAddressTypes = field("SupportedIpAddressTypes")
    SupportedRegions = field("SupportedRegions")
    ClientToken = field("ClientToken")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcEndpointServiceConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcEndpointServiceConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcPeeringConnectionRequestServiceResourceCreateVpcPeeringConnection:
    boto3_raw_data: "type_defs.CreateVpcPeeringConnectionRequestServiceResourceCreateVpcPeeringConnectionTypeDef" = (dataclasses.field())

    VpcId = field("VpcId")
    PeerRegion = field("PeerRegion")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    PeerVpcId = field("PeerVpcId")
    PeerOwnerId = field("PeerOwnerId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcPeeringConnectionRequestServiceResourceCreateVpcPeeringConnectionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVpcPeeringConnectionRequestServiceResourceCreateVpcPeeringConnectionTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcPeeringConnectionRequest:
    boto3_raw_data: "type_defs.CreateVpcPeeringConnectionRequestTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    PeerRegion = field("PeerRegion")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    PeerVpcId = field("PeerVpcId")
    PeerOwnerId = field("PeerOwnerId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcPeeringConnectionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcPeeringConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcPeeringConnectionRequestVpcRequestVpcPeeringConnection:
    boto3_raw_data: "type_defs.CreateVpcPeeringConnectionRequestVpcRequestVpcPeeringConnectionTypeDef" = (dataclasses.field())

    PeerRegion = field("PeerRegion")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    PeerVpcId = field("PeerVpcId")
    PeerOwnerId = field("PeerOwnerId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcPeeringConnectionRequestVpcRequestVpcPeeringConnectionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateVpcPeeringConnectionRequestVpcRequestVpcPeeringConnectionTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcRequestServiceResourceCreateVpc:
    boto3_raw_data: "type_defs.CreateVpcRequestServiceResourceCreateVpcTypeDef" = (
        dataclasses.field()
    )

    CidrBlock = field("CidrBlock")
    Ipv6Pool = field("Ipv6Pool")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    Ipv6CidrBlockNetworkBorderGroup = field("Ipv6CidrBlockNetworkBorderGroup")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    InstanceTenancy = field("InstanceTenancy")
    AmazonProvidedIpv6CidrBlock = field("AmazonProvidedIpv6CidrBlock")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVpcRequestServiceResourceCreateVpcTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcRequestServiceResourceCreateVpcTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcRequest:
    boto3_raw_data: "type_defs.CreateVpcRequestTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")
    Ipv6Pool = field("Ipv6Pool")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    Ipv4IpamPoolId = field("Ipv4IpamPoolId")
    Ipv4NetmaskLength = field("Ipv4NetmaskLength")
    Ipv6IpamPoolId = field("Ipv6IpamPoolId")
    Ipv6NetmaskLength = field("Ipv6NetmaskLength")
    Ipv6CidrBlockNetworkBorderGroup = field("Ipv6CidrBlockNetworkBorderGroup")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    InstanceTenancy = field("InstanceTenancy")
    AmazonProvidedIpv6CidrBlock = field("AmazonProvidedIpv6CidrBlock")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateVpcRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpnGatewayRequest:
    boto3_raw_data: "type_defs.CreateVpnGatewayRequestTypeDef" = dataclasses.field()

    Type = field("Type")
    AvailabilityZone = field("AvailabilityZone")
    TagSpecifications = field("TagSpecifications")
    AmazonSideAsn = field("AmazonSideAsn")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpnGatewayRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpnGatewayRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportImageRequest:
    boto3_raw_data: "type_defs.ExportImageRequestTypeDef" = dataclasses.field()

    DiskImageFormat = field("DiskImageFormat")
    ImageId = field("ImageId")

    @cached_property
    def S3ExportLocation(self):  # pragma: no cover
        return ExportTaskS3LocationRequest.make_one(
            self.boto3_raw_data["S3ExportLocation"]
        )

    ClientToken = field("ClientToken")
    Description = field("Description")
    DryRun = field("DryRun")
    RoleName = field("RoleName")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportImageRequest:
    boto3_raw_data: "type_defs.ImportImageRequestTypeDef" = dataclasses.field()

    Architecture = field("Architecture")

    @cached_property
    def ClientData(self):  # pragma: no cover
        return ClientData.make_one(self.boto3_raw_data["ClientData"])

    ClientToken = field("ClientToken")
    Description = field("Description")

    @cached_property
    def DiskContainers(self):  # pragma: no cover
        return ImageDiskContainer.make_many(self.boto3_raw_data["DiskContainers"])

    DryRun = field("DryRun")
    Encrypted = field("Encrypted")
    Hypervisor = field("Hypervisor")
    KmsKeyId = field("KmsKeyId")
    LicenseType = field("LicenseType")
    Platform = field("Platform")
    RoleName = field("RoleName")

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return ImportImageLicenseConfigurationRequest.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    TagSpecifications = field("TagSpecifications")
    UsageOperation = field("UsageOperation")
    BootMode = field("BootMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportKeyPairRequestServiceResourceImportKeyPair:
    boto3_raw_data: (
        "type_defs.ImportKeyPairRequestServiceResourceImportKeyPairTypeDef"
    ) = dataclasses.field()

    KeyName = field("KeyName")
    PublicKeyMaterial = field("PublicKeyMaterial")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ImportKeyPairRequestServiceResourceImportKeyPairTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ImportKeyPairRequestServiceResourceImportKeyPairTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportKeyPairRequest:
    boto3_raw_data: "type_defs.ImportKeyPairRequestTypeDef" = dataclasses.field()

    KeyName = field("KeyName")
    PublicKeyMaterial = field("PublicKeyMaterial")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportKeyPairRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportKeyPairRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportSnapshotRequest:
    boto3_raw_data: "type_defs.ImportSnapshotRequestTypeDef" = dataclasses.field()

    @cached_property
    def ClientData(self):  # pragma: no cover
        return ClientData.make_one(self.boto3_raw_data["ClientData"])

    ClientToken = field("ClientToken")
    Description = field("Description")

    @cached_property
    def DiskContainer(self):  # pragma: no cover
        return SnapshotDiskContainer.make_one(self.boto3_raw_data["DiskContainer"])

    DryRun = field("DryRun")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    RoleName = field("RoleName")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportSnapshotRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportSnapshotRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisionByoipCidrRequest:
    boto3_raw_data: "type_defs.ProvisionByoipCidrRequestTypeDef" = dataclasses.field()

    Cidr = field("Cidr")

    @cached_property
    def CidrAuthorizationContext(self):  # pragma: no cover
        return CidrAuthorizationContext.make_one(
            self.boto3_raw_data["CidrAuthorizationContext"]
        )

    PubliclyAdvertisable = field("PubliclyAdvertisable")
    Description = field("Description")
    DryRun = field("DryRun")
    PoolTagSpecifications = field("PoolTagSpecifications")
    MultiRegion = field("MultiRegion")
    NetworkBorderGroup = field("NetworkBorderGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisionByoipCidrRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisionByoipCidrRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseCapacityBlockRequest:
    boto3_raw_data: "type_defs.PurchaseCapacityBlockRequestTypeDef" = (
        dataclasses.field()
    )

    CapacityBlockOfferingId = field("CapacityBlockOfferingId")
    InstancePlatform = field("InstancePlatform")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PurchaseCapacityBlockRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseCapacityBlockRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PurchaseHostReservationRequest:
    boto3_raw_data: "type_defs.PurchaseHostReservationRequestTypeDef" = (
        dataclasses.field()
    )

    HostIdSet = field("HostIdSet")
    OfferingId = field("OfferingId")
    ClientToken = field("ClientToken")
    CurrencyCode = field("CurrencyCode")
    LimitPrice = field("LimitPrice")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PurchaseHostReservationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PurchaseHostReservationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterImageRequestServiceResourceRegisterImage:
    boto3_raw_data: (
        "type_defs.RegisterImageRequestServiceResourceRegisterImageTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    ImageLocation = field("ImageLocation")
    BillingProducts = field("BillingProducts")
    BootMode = field("BootMode")
    TpmSupport = field("TpmSupport")
    UefiData = field("UefiData")
    ImdsSupport = field("ImdsSupport")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    Description = field("Description")
    Architecture = field("Architecture")
    KernelId = field("KernelId")
    RamdiskId = field("RamdiskId")
    RootDeviceName = field("RootDeviceName")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    VirtualizationType = field("VirtualizationType")
    SriovNetSupport = field("SriovNetSupport")
    EnaSupport = field("EnaSupport")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisterImageRequestServiceResourceRegisterImageTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisterImageRequestServiceResourceRegisterImageTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterImageRequest:
    boto3_raw_data: "type_defs.RegisterImageRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    ImageLocation = field("ImageLocation")
    BillingProducts = field("BillingProducts")
    BootMode = field("BootMode")
    TpmSupport = field("TpmSupport")
    UefiData = field("UefiData")
    ImdsSupport = field("ImdsSupport")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    Description = field("Description")
    Architecture = field("Architecture")
    KernelId = field("KernelId")
    RamdiskId = field("RamdiskId")
    RootDeviceName = field("RootDeviceName")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    VirtualizationType = field("VirtualizationType")
    SriovNetSupport = field("SriovNetSupport")
    EnaSupport = field("EnaSupport")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDeclarativePoliciesReportRequest:
    boto3_raw_data: "type_defs.StartDeclarativePoliciesReportRequestTypeDef" = (
        dataclasses.field()
    )

    S3Bucket = field("S3Bucket")
    TargetId = field("TargetId")
    DryRun = field("DryRun")
    S3Prefix = field("S3Prefix")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartDeclarativePoliciesReportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDeclarativePoliciesReportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartNetworkInsightsAccessScopeAnalysisRequest:
    boto3_raw_data: (
        "type_defs.StartNetworkInsightsAccessScopeAnalysisRequestTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartNetworkInsightsAccessScopeAnalysisRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.StartNetworkInsightsAccessScopeAnalysisRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartNetworkInsightsAnalysisRequest:
    boto3_raw_data: "type_defs.StartNetworkInsightsAnalysisRequestTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsPathId = field("NetworkInsightsPathId")
    ClientToken = field("ClientToken")
    AdditionalAccounts = field("AdditionalAccounts")
    FilterInArns = field("FilterInArns")
    FilterOutArns = field("FilterOutArns")
    DryRun = field("DryRun")
    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartNetworkInsightsAnalysisRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartNetworkInsightsAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PathComponent:
    boto3_raw_data: "type_defs.PathComponentTypeDef" = dataclasses.field()

    SequenceNumber = field("SequenceNumber")

    @cached_property
    def AclRule(self):  # pragma: no cover
        return AnalysisAclRule.make_one(self.boto3_raw_data["AclRule"])

    @cached_property
    def AttachedTo(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["AttachedTo"])

    @cached_property
    def Component(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Component"])

    @cached_property
    def DestinationVpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["DestinationVpc"])

    @cached_property
    def OutboundHeader(self):  # pragma: no cover
        return AnalysisPacketHeader.make_one(self.boto3_raw_data["OutboundHeader"])

    @cached_property
    def InboundHeader(self):  # pragma: no cover
        return AnalysisPacketHeader.make_one(self.boto3_raw_data["InboundHeader"])

    @cached_property
    def RouteTableRoute(self):  # pragma: no cover
        return AnalysisRouteTableRoute.make_one(self.boto3_raw_data["RouteTableRoute"])

    @cached_property
    def SecurityGroupRule(self):  # pragma: no cover
        return AnalysisSecurityGroupRule.make_one(
            self.boto3_raw_data["SecurityGroupRule"]
        )

    @cached_property
    def SourceVpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["SourceVpc"])

    @cached_property
    def Subnet(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Subnet"])

    @cached_property
    def Vpc(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["Vpc"])

    @cached_property
    def AdditionalDetails(self):  # pragma: no cover
        return AdditionalDetail.make_many(self.boto3_raw_data["AdditionalDetails"])

    @cached_property
    def TransitGateway(self):  # pragma: no cover
        return AnalysisComponent.make_one(self.boto3_raw_data["TransitGateway"])

    @cached_property
    def TransitGatewayRouteTableRoute(self):  # pragma: no cover
        return TransitGatewayRouteTableRoute.make_one(
            self.boto3_raw_data["TransitGatewayRouteTableRoute"]
        )

    @cached_property
    def Explanations(self):  # pragma: no cover
        return Explanation.make_many(self.boto3_raw_data["Explanations"])

    @cached_property
    def ElasticLoadBalancerListener(self):  # pragma: no cover
        return AnalysisComponent.make_one(
            self.boto3_raw_data["ElasticLoadBalancerListener"]
        )

    @cached_property
    def FirewallStatelessRule(self):  # pragma: no cover
        return FirewallStatelessRule.make_one(
            self.boto3_raw_data["FirewallStatelessRule"]
        )

    @cached_property
    def FirewallStatefulRule(self):  # pragma: no cover
        return FirewallStatefulRule.make_one(
            self.boto3_raw_data["FirewallStatefulRule"]
        )

    ServiceName = field("ServiceName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PathComponentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PathComponentTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRouteTableResult:
    boto3_raw_data: "type_defs.CreateRouteTableResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteTable(self):  # pragma: no cover
        return RouteTable.make_one(self.boto3_raw_data["RouteTable"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRouteTableResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRouteTableResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRouteTablesResult:
    boto3_raw_data: "type_defs.DescribeRouteTablesResultTypeDef" = dataclasses.field()

    @cached_property
    def RouteTables(self):  # pragma: no cover
        return RouteTable.make_many(self.boto3_raw_data["RouteTables"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeRouteTablesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRouteTablesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFlowLogsIntegrationTemplateRequest:
    boto3_raw_data: "type_defs.GetFlowLogsIntegrationTemplateRequestTypeDef" = (
        dataclasses.field()
    )

    FlowLogId = field("FlowLogId")
    ConfigDeliveryS3DestinationArn = field("ConfigDeliveryS3DestinationArn")

    @cached_property
    def IntegrateServices(self):  # pragma: no cover
        return IntegrateServices.make_one(self.boto3_raw_data["IntegrateServices"])

    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetFlowLogsIntegrationTemplateRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFlowLogsIntegrationTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfaceAttributeResult:
    boto3_raw_data: "type_defs.DescribeNetworkInterfaceAttributeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Attachment(self):  # pragma: no cover
        return NetworkInterfaceAttachment.make_one(self.boto3_raw_data["Attachment"])

    @cached_property
    def Description(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["Description"])

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInterfaceAttributeResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfaceAttributeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterface:
    boto3_raw_data: "type_defs.NetworkInterfaceTypeDef" = dataclasses.field()

    @cached_property
    def Association(self):  # pragma: no cover
        return NetworkInterfaceAssociation.make_one(self.boto3_raw_data["Association"])

    @cached_property
    def Attachment(self):  # pragma: no cover
        return NetworkInterfaceAttachment.make_one(self.boto3_raw_data["Attachment"])

    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def ConnectionTrackingConfiguration(self):  # pragma: no cover
        return ConnectionTrackingConfiguration.make_one(
            self.boto3_raw_data["ConnectionTrackingConfiguration"]
        )

    Description = field("Description")

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    InterfaceType = field("InterfaceType")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return NetworkInterfaceIpv6Address.make_many(
            self.boto3_raw_data["Ipv6Addresses"]
        )

    MacAddress = field("MacAddress")
    NetworkInterfaceId = field("NetworkInterfaceId")
    OutpostArn = field("OutpostArn")
    OwnerId = field("OwnerId")
    PrivateDnsName = field("PrivateDnsName")
    PublicDnsName = field("PublicDnsName")

    @cached_property
    def PublicIpDnsNameOptions(self):  # pragma: no cover
        return PublicIpDnsNameOptions.make_one(
            self.boto3_raw_data["PublicIpDnsNameOptions"]
        )

    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return NetworkInterfacePrivateIpAddress.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return Ipv4PrefixSpecification.make_many(self.boto3_raw_data["Ipv4Prefixes"])

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return Ipv6PrefixSpecification.make_many(self.boto3_raw_data["Ipv6Prefixes"])

    RequesterId = field("RequesterId")
    RequesterManaged = field("RequesterManaged")
    SourceDestCheck = field("SourceDestCheck")
    Status = field("Status")
    SubnetId = field("SubnetId")

    @cached_property
    def TagSet(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["TagSet"])

    VpcId = field("VpcId")
    DenyAllIgwTraffic = field("DenyAllIgwTraffic")
    Ipv6Native = field("Ipv6Native")
    Ipv6Address = field("Ipv6Address")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    AssociatedSubnets = field("AssociatedSubnets")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDhcpOptionsResult:
    boto3_raw_data: "type_defs.CreateDhcpOptionsResultTypeDef" = dataclasses.field()

    @cached_property
    def DhcpOptions(self):  # pragma: no cover
        return DhcpOptions.make_one(self.boto3_raw_data["DhcpOptions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDhcpOptionsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDhcpOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDhcpOptionsResult:
    boto3_raw_data: "type_defs.DescribeDhcpOptionsResultTypeDef" = dataclasses.field()

    @cached_property
    def DhcpOptions(self):  # pragma: no cover
        return DhcpOptions.make_many(self.boto3_raw_data["DhcpOptions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDhcpOptionsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDhcpOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHostsResult:
    boto3_raw_data: "type_defs.DescribeHostsResultTypeDef" = dataclasses.field()

    @cached_property
    def Hosts(self):  # pragma: no cover
        return Host.make_many(self.boto3_raw_data["Hosts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHostsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHostsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImagesResult:
    boto3_raw_data: "type_defs.DescribeImagesResultTypeDef" = dataclasses.field()

    @cached_property
    def Images(self):  # pragma: no cover
        return Image.make_many(self.boto3_raw_data["Images"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImagesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImagesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClientVpnEndpointsResult:
    boto3_raw_data: "type_defs.DescribeClientVpnEndpointsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClientVpnEndpoints(self):  # pragma: no cover
        return ClientVpnEndpoint.make_many(self.boto3_raw_data["ClientVpnEndpoints"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeClientVpnEndpointsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClientVpnEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnTunnelOptionsRequest:
    boto3_raw_data: "type_defs.ModifyVpnTunnelOptionsRequestTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    VpnTunnelOutsideIpAddress = field("VpnTunnelOutsideIpAddress")

    @cached_property
    def TunnelOptions(self):  # pragma: no cover
        return ModifyVpnTunnelOptionsSpecification.make_one(
            self.boto3_raw_data["TunnelOptions"]
        )

    DryRun = field("DryRun")
    SkipTunnelReplacement = field("SkipTunnelReplacement")
    PreSharedKeyStorage = field("PreSharedKeyStorage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyVpnTunnelOptionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnTunnelOptionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnConnectionOptionsSpecification:
    boto3_raw_data: "type_defs.VpnConnectionOptionsSpecificationTypeDef" = (
        dataclasses.field()
    )

    EnableAcceleration = field("EnableAcceleration")
    TunnelInsideIpVersion = field("TunnelInsideIpVersion")

    @cached_property
    def TunnelOptions(self):  # pragma: no cover
        return VpnTunnelOptionsSpecification.make_many(
            self.boto3_raw_data["TunnelOptions"]
        )

    LocalIpv4NetworkCidr = field("LocalIpv4NetworkCidr")
    RemoteIpv4NetworkCidr = field("RemoteIpv4NetworkCidr")
    LocalIpv6NetworkCidr = field("LocalIpv6NetworkCidr")
    RemoteIpv6NetworkCidr = field("RemoteIpv6NetworkCidr")
    OutsideIpAddressType = field("OutsideIpAddressType")
    TransportTransitGatewayAttachmentId = field("TransportTransitGatewayAttachmentId")
    StaticRoutesOnly = field("StaticRoutesOnly")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VpnConnectionOptionsSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnConnectionOptionsSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnConnectionOptions:
    boto3_raw_data: "type_defs.VpnConnectionOptionsTypeDef" = dataclasses.field()

    EnableAcceleration = field("EnableAcceleration")
    StaticRoutesOnly = field("StaticRoutesOnly")
    LocalIpv4NetworkCidr = field("LocalIpv4NetworkCidr")
    RemoteIpv4NetworkCidr = field("RemoteIpv4NetworkCidr")
    LocalIpv6NetworkCidr = field("LocalIpv6NetworkCidr")
    RemoteIpv6NetworkCidr = field("RemoteIpv6NetworkCidr")
    OutsideIpAddressType = field("OutsideIpAddressType")
    TransportTransitGatewayAttachmentId = field("TransportTransitGatewayAttachmentId")
    TunnelInsideIpVersion = field("TunnelInsideIpVersion")

    @cached_property
    def TunnelOptions(self):  # pragma: no cover
        return TunnelOption.make_many(self.boto3_raw_data["TunnelOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpnConnectionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpnConnectionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceRequirementsOutput:
    boto3_raw_data: "type_defs.InstanceRequirementsOutputTypeDef" = dataclasses.field()

    @cached_property
    def VCpuCount(self):  # pragma: no cover
        return VCpuCountRange.make_one(self.boto3_raw_data["VCpuCount"])

    @cached_property
    def MemoryMiB(self):  # pragma: no cover
        return MemoryMiB.make_one(self.boto3_raw_data["MemoryMiB"])

    CpuManufacturers = field("CpuManufacturers")

    @cached_property
    def MemoryGiBPerVCpu(self):  # pragma: no cover
        return MemoryGiBPerVCpu.make_one(self.boto3_raw_data["MemoryGiBPerVCpu"])

    ExcludedInstanceTypes = field("ExcludedInstanceTypes")
    InstanceGenerations = field("InstanceGenerations")
    SpotMaxPricePercentageOverLowestPrice = field(
        "SpotMaxPricePercentageOverLowestPrice"
    )
    OnDemandMaxPricePercentageOverLowestPrice = field(
        "OnDemandMaxPricePercentageOverLowestPrice"
    )
    BareMetal = field("BareMetal")
    BurstablePerformance = field("BurstablePerformance")
    RequireHibernateSupport = field("RequireHibernateSupport")

    @cached_property
    def NetworkInterfaceCount(self):  # pragma: no cover
        return NetworkInterfaceCount.make_one(
            self.boto3_raw_data["NetworkInterfaceCount"]
        )

    LocalStorage = field("LocalStorage")
    LocalStorageTypes = field("LocalStorageTypes")

    @cached_property
    def TotalLocalStorageGB(self):  # pragma: no cover
        return TotalLocalStorageGB.make_one(self.boto3_raw_data["TotalLocalStorageGB"])

    @cached_property
    def BaselineEbsBandwidthMbps(self):  # pragma: no cover
        return BaselineEbsBandwidthMbps.make_one(
            self.boto3_raw_data["BaselineEbsBandwidthMbps"]
        )

    AcceleratorTypes = field("AcceleratorTypes")

    @cached_property
    def AcceleratorCount(self):  # pragma: no cover
        return AcceleratorCount.make_one(self.boto3_raw_data["AcceleratorCount"])

    AcceleratorManufacturers = field("AcceleratorManufacturers")
    AcceleratorNames = field("AcceleratorNames")

    @cached_property
    def AcceleratorTotalMemoryMiB(self):  # pragma: no cover
        return AcceleratorTotalMemoryMiB.make_one(
            self.boto3_raw_data["AcceleratorTotalMemoryMiB"]
        )

    @cached_property
    def NetworkBandwidthGbps(self):  # pragma: no cover
        return NetworkBandwidthGbps.make_one(
            self.boto3_raw_data["NetworkBandwidthGbps"]
        )

    AllowedInstanceTypes = field("AllowedInstanceTypes")
    MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = field(
        "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"
    )

    @cached_property
    def BaselinePerformanceFactors(self):  # pragma: no cover
        return BaselinePerformanceFactorsOutput.make_one(
            self.boto3_raw_data["BaselinePerformanceFactors"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceRequirementsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceRequirementsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BaselinePerformanceFactors:
    boto3_raw_data: "type_defs.BaselinePerformanceFactorsTypeDef" = dataclasses.field()

    Cpu = field("Cpu")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BaselinePerformanceFactorsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BaselinePerformanceFactorsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceRequirementsRequest:
    boto3_raw_data: "type_defs.InstanceRequirementsRequestTypeDef" = dataclasses.field()

    @cached_property
    def VCpuCount(self):  # pragma: no cover
        return VCpuCountRangeRequest.make_one(self.boto3_raw_data["VCpuCount"])

    @cached_property
    def MemoryMiB(self):  # pragma: no cover
        return MemoryMiBRequest.make_one(self.boto3_raw_data["MemoryMiB"])

    CpuManufacturers = field("CpuManufacturers")

    @cached_property
    def MemoryGiBPerVCpu(self):  # pragma: no cover
        return MemoryGiBPerVCpuRequest.make_one(self.boto3_raw_data["MemoryGiBPerVCpu"])

    ExcludedInstanceTypes = field("ExcludedInstanceTypes")
    InstanceGenerations = field("InstanceGenerations")
    SpotMaxPricePercentageOverLowestPrice = field(
        "SpotMaxPricePercentageOverLowestPrice"
    )
    OnDemandMaxPricePercentageOverLowestPrice = field(
        "OnDemandMaxPricePercentageOverLowestPrice"
    )
    BareMetal = field("BareMetal")
    BurstablePerformance = field("BurstablePerformance")
    RequireHibernateSupport = field("RequireHibernateSupport")

    @cached_property
    def NetworkInterfaceCount(self):  # pragma: no cover
        return NetworkInterfaceCountRequest.make_one(
            self.boto3_raw_data["NetworkInterfaceCount"]
        )

    LocalStorage = field("LocalStorage")
    LocalStorageTypes = field("LocalStorageTypes")

    @cached_property
    def TotalLocalStorageGB(self):  # pragma: no cover
        return TotalLocalStorageGBRequest.make_one(
            self.boto3_raw_data["TotalLocalStorageGB"]
        )

    @cached_property
    def BaselineEbsBandwidthMbps(self):  # pragma: no cover
        return BaselineEbsBandwidthMbpsRequest.make_one(
            self.boto3_raw_data["BaselineEbsBandwidthMbps"]
        )

    AcceleratorTypes = field("AcceleratorTypes")

    @cached_property
    def AcceleratorCount(self):  # pragma: no cover
        return AcceleratorCountRequest.make_one(self.boto3_raw_data["AcceleratorCount"])

    AcceleratorManufacturers = field("AcceleratorManufacturers")
    AcceleratorNames = field("AcceleratorNames")

    @cached_property
    def AcceleratorTotalMemoryMiB(self):  # pragma: no cover
        return AcceleratorTotalMemoryMiBRequest.make_one(
            self.boto3_raw_data["AcceleratorTotalMemoryMiB"]
        )

    @cached_property
    def NetworkBandwidthGbps(self):  # pragma: no cover
        return NetworkBandwidthGbpsRequest.make_one(
            self.boto3_raw_data["NetworkBandwidthGbps"]
        )

    AllowedInstanceTypes = field("AllowedInstanceTypes")
    MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = field(
        "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"
    )

    @cached_property
    def BaselinePerformanceFactors(self):  # pragma: no cover
        return BaselinePerformanceFactorsRequest.make_one(
            self.boto3_raw_data["BaselinePerformanceFactors"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceRequirementsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceRequirementsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkAclResult:
    boto3_raw_data: "type_defs.CreateNetworkAclResultTypeDef" = dataclasses.field()

    @cached_property
    def NetworkAcl(self):  # pragma: no cover
        return NetworkAcl.make_one(self.boto3_raw_data["NetworkAcl"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNetworkAclResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkAclResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkAclsResult:
    boto3_raw_data: "type_defs.DescribeNetworkAclsResultTypeDef" = dataclasses.field()

    @cached_property
    def NetworkAcls(self):  # pragma: no cover
        return NetworkAcl.make_many(self.boto3_raw_data["NetworkAcls"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNetworkAclsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkAclsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableFastSnapshotRestoresResult:
    boto3_raw_data: "type_defs.DisableFastSnapshotRestoresResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Successful(self):  # pragma: no cover
        return DisableFastSnapshotRestoreSuccessItem.make_many(
            self.boto3_raw_data["Successful"]
        )

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return DisableFastSnapshotRestoreErrorItem.make_many(
            self.boto3_raw_data["Unsuccessful"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableFastSnapshotRestoresResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableFastSnapshotRestoresResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConversionTask:
    boto3_raw_data: "type_defs.ConversionTaskTypeDef" = dataclasses.field()

    ConversionTaskId = field("ConversionTaskId")
    ExpirationTime = field("ExpirationTime")

    @cached_property
    def ImportInstance(self):  # pragma: no cover
        return ImportInstanceTaskDetails.make_one(self.boto3_raw_data["ImportInstance"])

    @cached_property
    def ImportVolume(self):  # pragma: no cover
        return ImportVolumeTaskDetails.make_one(self.boto3_raw_data["ImportVolume"])

    State = field("State")
    StatusMessage = field("StatusMessage")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ConversionTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ConversionTaskTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceAttribute:
    boto3_raw_data: "type_defs.InstanceAttributeTypeDef" = dataclasses.field()

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return InstanceBlockDeviceMapping.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def DisableApiTermination(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(
            self.boto3_raw_data["DisableApiTermination"]
        )

    @cached_property
    def EnaSupport(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EnaSupport"])

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return EnclaveOptions.make_one(self.boto3_raw_data["EnclaveOptions"])

    @cached_property
    def EbsOptimized(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["EbsOptimized"])

    InstanceId = field("InstanceId")

    @cached_property
    def InstanceInitiatedShutdownBehavior(self):  # pragma: no cover
        return AttributeValue.make_one(
            self.boto3_raw_data["InstanceInitiatedShutdownBehavior"]
        )

    @cached_property
    def InstanceType(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["InstanceType"])

    @cached_property
    def KernelId(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["KernelId"])

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    @cached_property
    def RamdiskId(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["RamdiskId"])

    @cached_property
    def RootDeviceName(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["RootDeviceName"])

    @cached_property
    def SourceDestCheck(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["SourceDestCheck"])

    @cached_property
    def SriovNetSupport(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["SriovNetSupport"])

    @cached_property
    def UserData(self):  # pragma: no cover
        return AttributeValue.make_one(self.boto3_raw_data["UserData"])

    @cached_property
    def DisableApiStop(self):  # pragma: no cover
        return AttributeBooleanValue.make_one(self.boto3_raw_data["DisableApiStop"])

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceAttributeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchSpecification:
    boto3_raw_data: "type_defs.LaunchSpecificationTypeDef" = dataclasses.field()

    UserData = field("UserData")
    AddressingType = field("AddressingType")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return InstanceNetworkInterfaceSpecificationOutput.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return SpotPlacement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SubnetId = field("SubnetId")

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["SecurityGroups"])

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return RunInstancesMonitoringEnabled.make_one(self.boto3_raw_data["Monitoring"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableFastSnapshotRestoresResult:
    boto3_raw_data: "type_defs.EnableFastSnapshotRestoresResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Successful(self):  # pragma: no cover
        return EnableFastSnapshotRestoreSuccessItem.make_many(
            self.boto3_raw_data["Successful"]
        )

    @cached_property
    def Unsuccessful(self):  # pragma: no cover
        return EnableFastSnapshotRestoreErrorItem.make_many(
            self.boto3_raw_data["Unsuccessful"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnableFastSnapshotRestoresResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableFastSnapshotRestoresResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInsightsPathResult:
    boto3_raw_data: "type_defs.CreateNetworkInsightsPathResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsPath(self):  # pragma: no cover
        return NetworkInsightsPath.make_one(self.boto3_raw_data["NetworkInsightsPath"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateNetworkInsightsPathResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInsightsPathResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsPathsResult:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsPathsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsPaths(self):  # pragma: no cover
        return NetworkInsightsPath.make_many(
            self.boto3_raw_data["NetworkInsightsPaths"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsPathsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsPathsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageUsageReportsResult:
    boto3_raw_data: "type_defs.DescribeImageUsageReportsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImageUsageReports(self):  # pragma: no cover
        return ImageUsageReport.make_many(self.boto3_raw_data["ImageUsageReports"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageUsageReportsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageUsageReportsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceNetworkInterface:
    boto3_raw_data: "type_defs.InstanceNetworkInterfaceTypeDef" = dataclasses.field()

    @cached_property
    def Association(self):  # pragma: no cover
        return InstanceNetworkInterfaceAssociation.make_one(
            self.boto3_raw_data["Association"]
        )

    @cached_property
    def Attachment(self):  # pragma: no cover
        return InstanceNetworkInterfaceAttachment.make_one(
            self.boto3_raw_data["Attachment"]
        )

    Description = field("Description")

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    MacAddress = field("MacAddress")
    NetworkInterfaceId = field("NetworkInterfaceId")
    OwnerId = field("OwnerId")
    PrivateDnsName = field("PrivateDnsName")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return InstancePrivateIpAddress.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SourceDestCheck = field("SourceDestCheck")
    Status = field("Status")
    SubnetId = field("SubnetId")
    VpcId = field("VpcId")
    InterfaceType = field("InterfaceType")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return InstanceIpv4Prefix.make_many(self.boto3_raw_data["Ipv4Prefixes"])

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return InstanceIpv6Prefix.make_many(self.boto3_raw_data["Ipv6Prefixes"])

    @cached_property
    def ConnectionTrackingConfiguration(self):  # pragma: no cover
        return ConnectionTrackingSpecificationResponse.make_one(
            self.boto3_raw_data["ConnectionTrackingConfiguration"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceNetworkInterfaceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceNetworkInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInstanceConnectEndpointResult:
    boto3_raw_data: "type_defs.CreateInstanceConnectEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceConnectEndpoint(self):  # pragma: no cover
        return Ec2InstanceConnectEndpoint.make_one(
            self.boto3_raw_data["InstanceConnectEndpoint"]
        )

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInstanceConnectEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInstanceConnectEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInstanceConnectEndpointResult:
    boto3_raw_data: "type_defs.DeleteInstanceConnectEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceConnectEndpoint(self):  # pragma: no cover
        return Ec2InstanceConnectEndpoint.make_one(
            self.boto3_raw_data["InstanceConnectEndpoint"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteInstanceConnectEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInstanceConnectEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceConnectEndpointsResult:
    boto3_raw_data: "type_defs.DescribeInstanceConnectEndpointsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceConnectEndpoints(self):  # pragma: no cover
        return Ec2InstanceConnectEndpoint.make_many(
            self.boto3_raw_data["InstanceConnectEndpoints"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInstanceConnectEndpointsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceConnectEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceStatusResult:
    boto3_raw_data: "type_defs.DescribeInstanceStatusResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InstanceStatuses(self):  # pragma: no cover
        return InstanceStatus.make_many(self.boto3_raw_data["InstanceStatuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstanceStatusResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityGroupsResult:
    boto3_raw_data: "type_defs.DescribeSecurityGroupsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return SecurityGroup.make_many(self.boto3_raw_data["SecurityGroups"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSecurityGroupsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityGroupsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupEgressRequestSecurityGroupAuthorizeEgress:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupEgressRequestSecurityGroupAuthorizeEgressTypeDef" = (dataclasses.field())

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIp = field("CidrIp")
    IpPermissions = field("IpPermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupEgressRequestSecurityGroupAuthorizeEgressTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AuthorizeSecurityGroupEgressRequestSecurityGroupAuthorizeEgressTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupEgressRequest:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupEgressRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIp = field("CidrIp")
    IpPermissions = field("IpPermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupEgressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeSecurityGroupEgressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupIngressRequestSecurityGroupAuthorizeIngress:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupIngressRequestSecurityGroupAuthorizeIngressTypeDef" = (dataclasses.field())

    CidrIp = field("CidrIp")
    FromPort = field("FromPort")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")
    IpProtocol = field("IpProtocol")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    ToPort = field("ToPort")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupIngressRequestSecurityGroupAuthorizeIngressTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AuthorizeSecurityGroupIngressRequestSecurityGroupAuthorizeIngressTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizeSecurityGroupIngressRequest:
    boto3_raw_data: "type_defs.AuthorizeSecurityGroupIngressRequestTypeDef" = (
        dataclasses.field()
    )

    CidrIp = field("CidrIp")
    FromPort = field("FromPort")
    GroupId = field("GroupId")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")
    IpProtocol = field("IpProtocol")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    ToPort = field("ToPort")
    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AuthorizeSecurityGroupIngressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizeSecurityGroupIngressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupEgressRequestSecurityGroupRevokeEgress:
    boto3_raw_data: (
        "type_defs.RevokeSecurityGroupEgressRequestSecurityGroupRevokeEgressTypeDef"
    ) = dataclasses.field()

    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIp = field("CidrIp")
    IpPermissions = field("IpPermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RevokeSecurityGroupEgressRequestSecurityGroupRevokeEgressTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RevokeSecurityGroupEgressRequestSecurityGroupRevokeEgressTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupEgressRequest:
    boto3_raw_data: "type_defs.RevokeSecurityGroupEgressRequestTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")
    CidrIp = field("CidrIp")
    IpPermissions = field("IpPermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RevokeSecurityGroupEgressRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeSecurityGroupEgressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupIngressRequestSecurityGroupRevokeIngress:
    boto3_raw_data: (
        "type_defs.RevokeSecurityGroupIngressRequestSecurityGroupRevokeIngressTypeDef"
    ) = dataclasses.field()

    CidrIp = field("CidrIp")
    FromPort = field("FromPort")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")
    IpProtocol = field("IpProtocol")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    ToPort = field("ToPort")
    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RevokeSecurityGroupIngressRequestSecurityGroupRevokeIngressTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RevokeSecurityGroupIngressRequestSecurityGroupRevokeIngressTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RevokeSecurityGroupIngressRequest:
    boto3_raw_data: "type_defs.RevokeSecurityGroupIngressRequestTypeDef" = (
        dataclasses.field()
    )

    CidrIp = field("CidrIp")
    FromPort = field("FromPort")
    GroupId = field("GroupId")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")
    IpProtocol = field("IpProtocol")
    SourceSecurityGroupName = field("SourceSecurityGroupName")
    SourceSecurityGroupOwnerId = field("SourceSecurityGroupOwnerId")
    ToPort = field("ToPort")
    SecurityGroupRuleIds = field("SecurityGroupRuleIds")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RevokeSecurityGroupIngressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RevokeSecurityGroupIngressRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityGroupRuleDescriptionsEgressRequest:
    boto3_raw_data: (
        "type_defs.UpdateSecurityGroupRuleDescriptionsEgressRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    GroupId = field("GroupId")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")

    @cached_property
    def SecurityGroupRuleDescriptions(self):  # pragma: no cover
        return SecurityGroupRuleDescription.make_many(
            self.boto3_raw_data["SecurityGroupRuleDescriptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSecurityGroupRuleDescriptionsEgressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateSecurityGroupRuleDescriptionsEgressRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityGroupRuleDescriptionsIngressRequest:
    boto3_raw_data: (
        "type_defs.UpdateSecurityGroupRuleDescriptionsIngressRequestTypeDef"
    ) = dataclasses.field()

    DryRun = field("DryRun")
    GroupId = field("GroupId")
    GroupName = field("GroupName")
    IpPermissions = field("IpPermissions")

    @cached_property
    def SecurityGroupRuleDescriptions(self):  # pragma: no cover
        return SecurityGroupRuleDescription.make_many(
            self.boto3_raw_data["SecurityGroupRuleDescriptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSecurityGroupRuleDescriptionsIngressRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateSecurityGroupRuleDescriptionsIngressRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStaleSecurityGroupsResult:
    boto3_raw_data: "type_defs.DescribeStaleSecurityGroupsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StaleSecurityGroupSet(self):  # pragma: no cover
        return StaleSecurityGroup.make_many(
            self.boto3_raw_data["StaleSecurityGroupSet"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStaleSecurityGroupsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStaleSecurityGroupsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetIpamDiscoveredPublicAddressesResult:
    boto3_raw_data: "type_defs.GetIpamDiscoveredPublicAddressesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IpamDiscoveredPublicAddresses(self):  # pragma: no cover
        return IpamDiscoveredPublicAddress.make_many(
            self.boto3_raw_data["IpamDiscoveredPublicAddresses"]
        )

    OldestSampleTime = field("OldestSampleTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetIpamDiscoveredPublicAddressesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetIpamDiscoveredPublicAddressesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedInstancesModificationsResult:
    boto3_raw_data: "type_defs.DescribeReservedInstancesModificationsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ReservedInstancesModifications(self):  # pragma: no cover
        return ReservedInstancesModification.make_many(
            self.boto3_raw_data["ReservedInstancesModifications"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeReservedInstancesModificationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedInstancesModificationsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceTypeInfo:
    boto3_raw_data: "type_defs.InstanceTypeInfoTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    CurrentGeneration = field("CurrentGeneration")
    FreeTierEligible = field("FreeTierEligible")
    SupportedUsageClasses = field("SupportedUsageClasses")
    SupportedRootDeviceTypes = field("SupportedRootDeviceTypes")
    SupportedVirtualizationTypes = field("SupportedVirtualizationTypes")
    BareMetal = field("BareMetal")
    Hypervisor = field("Hypervisor")

    @cached_property
    def ProcessorInfo(self):  # pragma: no cover
        return ProcessorInfo.make_one(self.boto3_raw_data["ProcessorInfo"])

    @cached_property
    def VCpuInfo(self):  # pragma: no cover
        return VCpuInfo.make_one(self.boto3_raw_data["VCpuInfo"])

    @cached_property
    def MemoryInfo(self):  # pragma: no cover
        return MemoryInfo.make_one(self.boto3_raw_data["MemoryInfo"])

    InstanceStorageSupported = field("InstanceStorageSupported")

    @cached_property
    def InstanceStorageInfo(self):  # pragma: no cover
        return InstanceStorageInfo.make_one(self.boto3_raw_data["InstanceStorageInfo"])

    @cached_property
    def EbsInfo(self):  # pragma: no cover
        return EbsInfo.make_one(self.boto3_raw_data["EbsInfo"])

    @cached_property
    def NetworkInfo(self):  # pragma: no cover
        return NetworkInfo.make_one(self.boto3_raw_data["NetworkInfo"])

    @cached_property
    def GpuInfo(self):  # pragma: no cover
        return GpuInfo.make_one(self.boto3_raw_data["GpuInfo"])

    @cached_property
    def FpgaInfo(self):  # pragma: no cover
        return FpgaInfo.make_one(self.boto3_raw_data["FpgaInfo"])

    @cached_property
    def PlacementGroupInfo(self):  # pragma: no cover
        return PlacementGroupInfo.make_one(self.boto3_raw_data["PlacementGroupInfo"])

    @cached_property
    def InferenceAcceleratorInfo(self):  # pragma: no cover
        return InferenceAcceleratorInfo.make_one(
            self.boto3_raw_data["InferenceAcceleratorInfo"]
        )

    HibernationSupported = field("HibernationSupported")
    BurstablePerformanceSupported = field("BurstablePerformanceSupported")
    DedicatedHostsSupported = field("DedicatedHostsSupported")
    AutoRecoverySupported = field("AutoRecoverySupported")
    SupportedBootModes = field("SupportedBootModes")
    NitroEnclavesSupport = field("NitroEnclavesSupport")
    NitroTpmSupport = field("NitroTpmSupport")

    @cached_property
    def NitroTpmInfo(self):  # pragma: no cover
        return NitroTpmInfo.make_one(self.boto3_raw_data["NitroTpmInfo"])

    @cached_property
    def MediaAcceleratorInfo(self):  # pragma: no cover
        return MediaAcceleratorInfo.make_one(
            self.boto3_raw_data["MediaAcceleratorInfo"]
        )

    @cached_property
    def NeuronInfo(self):  # pragma: no cover
        return NeuronInfo.make_one(self.boto3_raw_data["NeuronInfo"])

    PhcSupport = field("PhcSupport")
    RebootMigrationSupport = field("RebootMigrationSupport")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceTypeInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceTypeInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInsightsAccessScopeRequest:
    boto3_raw_data: "type_defs.CreateNetworkInsightsAccessScopeRequestTypeDef" = (
        dataclasses.field()
    )

    ClientToken = field("ClientToken")

    @cached_property
    def MatchPaths(self):  # pragma: no cover
        return AccessScopePathRequest.make_many(self.boto3_raw_data["MatchPaths"])

    @cached_property
    def ExcludePaths(self):  # pragma: no cover
        return AccessScopePathRequest.make_many(self.boto3_raw_data["ExcludePaths"])

    TagSpecifications = field("TagSpecifications")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInsightsAccessScopeRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInsightsAccessScopeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInsightsAccessScopeContent:
    boto3_raw_data: "type_defs.NetworkInsightsAccessScopeContentTypeDef" = (
        dataclasses.field()
    )

    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")

    @cached_property
    def MatchPaths(self):  # pragma: no cover
        return AccessScopePath.make_many(self.boto3_raw_data["MatchPaths"])

    @cached_property
    def ExcludePaths(self):  # pragma: no cover
        return AccessScopePath.make_many(self.boto3_raw_data["ExcludePaths"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NetworkInsightsAccessScopeContentTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInsightsAccessScopeContentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BundleInstanceResult:
    boto3_raw_data: "type_defs.BundleInstanceResultTypeDef" = dataclasses.field()

    @cached_property
    def BundleTask(self):  # pragma: no cover
        return BundleTask.make_one(self.boto3_raw_data["BundleTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BundleInstanceResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BundleInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelBundleTaskResult:
    boto3_raw_data: "type_defs.CancelBundleTaskResultTypeDef" = dataclasses.field()

    @cached_property
    def BundleTask(self):  # pragma: no cover
        return BundleTask.make_one(self.boto3_raw_data["BundleTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelBundleTaskResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelBundleTaskResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBundleTasksResult:
    boto3_raw_data: "type_defs.DescribeBundleTasksResultTypeDef" = dataclasses.field()

    @cached_property
    def BundleTasks(self):  # pragma: no cover
        return BundleTask.make_many(self.boto3_raw_data["BundleTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeBundleTasksResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBundleTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunScheduledInstancesRequest:
    boto3_raw_data: "type_defs.RunScheduledInstancesRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchSpecification(self):  # pragma: no cover
        return ScheduledInstancesLaunchSpecification.make_one(
            self.boto3_raw_data["LaunchSpecification"]
        )

    ScheduledInstanceId = field("ScheduledInstanceId")
    ClientToken = field("ClientToken")
    DryRun = field("DryRun")
    InstanceCount = field("InstanceCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RunScheduledInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RunScheduledInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportImageTasksResult:
    boto3_raw_data: "type_defs.DescribeImportImageTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImportImageTasks(self):  # pragma: no cover
        return ImportImageTask.make_many(self.boto3_raw_data["ImportImageTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImportImageTasksResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportImageTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImportSnapshotTasksResult:
    boto3_raw_data: "type_defs.DescribeImportSnapshotTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImportSnapshotTasks(self):  # pragma: no cover
        return ImportSnapshotTask.make_many(self.boto3_raw_data["ImportSnapshotTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImportSnapshotTasksResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImportSnapshotTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDefaultSubnetResult:
    boto3_raw_data: "type_defs.CreateDefaultSubnetResultTypeDef" = dataclasses.field()

    @cached_property
    def Subnet(self):  # pragma: no cover
        return Subnet.make_one(self.boto3_raw_data["Subnet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDefaultSubnetResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDefaultSubnetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSubnetResult:
    boto3_raw_data: "type_defs.CreateSubnetResultTypeDef" = dataclasses.field()

    @cached_property
    def Subnet(self):  # pragma: no cover
        return Subnet.make_one(self.boto3_raw_data["Subnet"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSubnetResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSubnetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubnetsResult:
    boto3_raw_data: "type_defs.DescribeSubnetsResultTypeDef" = dataclasses.field()

    @cached_property
    def Subnets(self):  # pragma: no cover
        return Subnet.make_many(self.boto3_raw_data["Subnets"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSubnetsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubnetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrafficMirrorFilterResult:
    boto3_raw_data: "type_defs.CreateTrafficMirrorFilterResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorFilter(self):  # pragma: no cover
        return TrafficMirrorFilter.make_one(self.boto3_raw_data["TrafficMirrorFilter"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateTrafficMirrorFilterResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrafficMirrorFilterResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrafficMirrorFiltersResult:
    boto3_raw_data: "type_defs.DescribeTrafficMirrorFiltersResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrafficMirrorFilters(self):  # pragma: no cover
        return TrafficMirrorFilter.make_many(
            self.boto3_raw_data["TrafficMirrorFilters"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTrafficMirrorFiltersResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrafficMirrorFiltersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyTrafficMirrorFilterNetworkServicesResult:
    boto3_raw_data: (
        "type_defs.ModifyTrafficMirrorFilterNetworkServicesResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TrafficMirrorFilter(self):  # pragma: no cover
        return TrafficMirrorFilter.make_one(self.boto3_raw_data["TrafficMirrorFilter"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyTrafficMirrorFilterNetworkServicesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyTrafficMirrorFilterNetworkServicesResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransitGatewayConnectPeerResult:
    boto3_raw_data: "type_defs.CreateTransitGatewayConnectPeerResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnectPeer(self):  # pragma: no cover
        return TransitGatewayConnectPeer.make_one(
            self.boto3_raw_data["TransitGatewayConnectPeer"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTransitGatewayConnectPeerResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransitGatewayConnectPeerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTransitGatewayConnectPeerResult:
    boto3_raw_data: "type_defs.DeleteTransitGatewayConnectPeerResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnectPeer(self):  # pragma: no cover
        return TransitGatewayConnectPeer.make_one(
            self.boto3_raw_data["TransitGatewayConnectPeer"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTransitGatewayConnectPeerResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTransitGatewayConnectPeerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransitGatewayConnectPeersResult:
    boto3_raw_data: "type_defs.DescribeTransitGatewayConnectPeersResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayConnectPeers(self):  # pragma: no cover
        return TransitGatewayConnectPeer.make_many(
            self.boto3_raw_data["TransitGatewayConnectPeers"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTransitGatewayConnectPeersResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransitGatewayConnectPeersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetTransitGatewayPolicyTableEntriesResult:
    boto3_raw_data: "type_defs.GetTransitGatewayPolicyTableEntriesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransitGatewayPolicyTableEntries(self):  # pragma: no cover
        return TransitGatewayPolicyTableEntry.make_many(
            self.boto3_raw_data["TransitGatewayPolicyTableEntries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetTransitGatewayPolicyTableEntriesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetTransitGatewayPolicyTableEntriesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVerifiedAccessEndpointResult:
    boto3_raw_data: "type_defs.CreateVerifiedAccessEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessEndpoint(self):  # pragma: no cover
        return VerifiedAccessEndpoint.make_one(
            self.boto3_raw_data["VerifiedAccessEndpoint"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateVerifiedAccessEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVerifiedAccessEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVerifiedAccessEndpointResult:
    boto3_raw_data: "type_defs.DeleteVerifiedAccessEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessEndpoint(self):  # pragma: no cover
        return VerifiedAccessEndpoint.make_one(
            self.boto3_raw_data["VerifiedAccessEndpoint"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteVerifiedAccessEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVerifiedAccessEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessEndpointsResult:
    boto3_raw_data: "type_defs.DescribeVerifiedAccessEndpointsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessEndpoints(self):  # pragma: no cover
        return VerifiedAccessEndpoint.make_many(
            self.boto3_raw_data["VerifiedAccessEndpoints"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessEndpointsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVerifiedAccessEndpointsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessEndpointResult:
    boto3_raw_data: "type_defs.ModifyVerifiedAccessEndpointResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VerifiedAccessEndpoint(self):  # pragma: no cover
        return VerifiedAccessEndpoint.make_one(
            self.boto3_raw_data["VerifiedAccessEndpoint"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessEndpointResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVerifiedAccessEndpointResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VerifiedAccessInstanceLoggingConfiguration:
    boto3_raw_data: "type_defs.VerifiedAccessInstanceLoggingConfigurationTypeDef" = (
        dataclasses.field()
    )

    VerifiedAccessInstanceId = field("VerifiedAccessInstanceId")

    @cached_property
    def AccessLogs(self):  # pragma: no cover
        return VerifiedAccessLogs.make_one(self.boto3_raw_data["AccessLogs"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VerifiedAccessInstanceLoggingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VerifiedAccessInstanceLoggingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVolumeStatusResult:
    boto3_raw_data: "type_defs.DescribeVolumeStatusResultTypeDef" = dataclasses.field()

    @cached_property
    def VolumeStatuses(self):  # pragma: no cover
        return VolumeStatusItem.make_many(self.boto3_raw_data["VolumeStatuses"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVolumeStatusResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVolumeStatusResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Vpc:
    boto3_raw_data: "type_defs.VpcTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    InstanceTenancy = field("InstanceTenancy")

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return VpcIpv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    @cached_property
    def CidrBlockAssociationSet(self):  # pragma: no cover
        return VpcCidrBlockAssociation.make_many(
            self.boto3_raw_data["CidrBlockAssociationSet"]
        )

    IsDefault = field("IsDefault")

    @cached_property
    def EncryptionControl(self):  # pragma: no cover
        return VpcEncryptionControl.make_one(self.boto3_raw_data["EncryptionControl"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def BlockPublicAccessStates(self):  # pragma: no cover
        return BlockPublicAccessStates.make_one(
            self.boto3_raw_data["BlockPublicAccessStates"]
        )

    VpcId = field("VpcId")
    State = field("State")
    CidrBlock = field("CidrBlock")
    DhcpOptionsId = field("DhcpOptionsId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptVpcPeeringConnectionResult:
    boto3_raw_data: "type_defs.AcceptVpcPeeringConnectionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcPeeringConnection(self):  # pragma: no cover
        return VpcPeeringConnection.make_one(
            self.boto3_raw_data["VpcPeeringConnection"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AcceptVpcPeeringConnectionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptVpcPeeringConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcPeeringConnectionResult:
    boto3_raw_data: "type_defs.CreateVpcPeeringConnectionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcPeeringConnection(self):  # pragma: no cover
        return VpcPeeringConnection.make_one(
            self.boto3_raw_data["VpcPeeringConnection"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateVpcPeeringConnectionResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpcPeeringConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcPeeringConnectionsResult:
    boto3_raw_data: "type_defs.DescribeVpcPeeringConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpcPeeringConnections(self):  # pragma: no cover
        return VpcPeeringConnection.make_many(
            self.boto3_raw_data["VpcPeeringConnections"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVpcPeeringConnectionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcPeeringConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccessScopeAnalysisFinding:
    boto3_raw_data: "type_defs.AccessScopeAnalysisFindingTypeDef" = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    NetworkInsightsAccessScopeId = field("NetworkInsightsAccessScopeId")
    FindingId = field("FindingId")

    @cached_property
    def FindingComponents(self):  # pragma: no cover
        return PathComponent.make_many(self.boto3_raw_data["FindingComponents"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AccessScopeAnalysisFindingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AccessScopeAnalysisFindingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInsightsAnalysis:
    boto3_raw_data: "type_defs.NetworkInsightsAnalysisTypeDef" = dataclasses.field()

    NetworkInsightsAnalysisId = field("NetworkInsightsAnalysisId")
    NetworkInsightsAnalysisArn = field("NetworkInsightsAnalysisArn")
    NetworkInsightsPathId = field("NetworkInsightsPathId")
    AdditionalAccounts = field("AdditionalAccounts")
    FilterInArns = field("FilterInArns")
    FilterOutArns = field("FilterOutArns")
    StartDate = field("StartDate")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    WarningMessage = field("WarningMessage")
    NetworkPathFound = field("NetworkPathFound")

    @cached_property
    def ForwardPathComponents(self):  # pragma: no cover
        return PathComponent.make_many(self.boto3_raw_data["ForwardPathComponents"])

    @cached_property
    def ReturnPathComponents(self):  # pragma: no cover
        return PathComponent.make_many(self.boto3_raw_data["ReturnPathComponents"])

    @cached_property
    def Explanations(self):  # pragma: no cover
        return Explanation.make_many(self.boto3_raw_data["Explanations"])

    @cached_property
    def AlternatePathHints(self):  # pragma: no cover
        return AlternatePathHint.make_many(self.boto3_raw_data["AlternatePathHints"])

    SuggestedAccounts = field("SuggestedAccounts")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkInsightsAnalysisTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInsightsAnalysisTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInterfaceResult:
    boto3_raw_data: "type_defs.CreateNetworkInterfaceResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInterface(self):  # pragma: no cover
        return NetworkInterface.make_one(self.boto3_raw_data["NetworkInterface"])

    ClientToken = field("ClientToken")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNetworkInterfaceResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInterfaceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInterfacesResult:
    boto3_raw_data: "type_defs.DescribeNetworkInterfacesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return NetworkInterface.make_many(self.boto3_raw_data["NetworkInterfaces"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeNetworkInterfacesResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInterfacesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BundleInstanceRequest:
    boto3_raw_data: "type_defs.BundleInstanceRequestTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Storage = field("Storage")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BundleInstanceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BundleInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpnConnectionRequest:
    boto3_raw_data: "type_defs.CreateVpnConnectionRequestTypeDef" = dataclasses.field()

    CustomerGatewayId = field("CustomerGatewayId")
    Type = field("Type")
    VpnGatewayId = field("VpnGatewayId")
    TransitGatewayId = field("TransitGatewayId")
    TagSpecifications = field("TagSpecifications")
    PreSharedKeyStorage = field("PreSharedKeyStorage")
    DryRun = field("DryRun")

    @cached_property
    def Options(self):  # pragma: no cover
        return VpnConnectionOptionsSpecification.make_one(
            self.boto3_raw_data["Options"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpnConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpnConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpnConnection:
    boto3_raw_data: "type_defs.VpnConnectionTypeDef" = dataclasses.field()

    Category = field("Category")
    TransitGatewayId = field("TransitGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    CoreNetworkAttachmentArn = field("CoreNetworkAttachmentArn")
    GatewayAssociationState = field("GatewayAssociationState")

    @cached_property
    def Options(self):  # pragma: no cover
        return VpnConnectionOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def Routes(self):  # pragma: no cover
        return VpnStaticRoute.make_many(self.boto3_raw_data["Routes"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def VgwTelemetry(self):  # pragma: no cover
        return VgwTelemetry.make_many(self.boto3_raw_data["VgwTelemetry"])

    PreSharedKeyArn = field("PreSharedKeyArn")
    VpnConnectionId = field("VpnConnectionId")
    State = field("State")
    CustomerGatewayConfiguration = field("CustomerGatewayConfiguration")
    Type = field("Type")
    CustomerGatewayId = field("CustomerGatewayId")
    VpnGatewayId = field("VpnGatewayId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpnConnectionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpnConnectionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateOverrides:
    boto3_raw_data: "type_defs.FleetLaunchTemplateOverridesTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    MaxPrice = field("MaxPrice")
    SubnetId = field("SubnetId")
    AvailabilityZone = field("AvailabilityZone")
    WeightedCapacity = field("WeightedCapacity")
    Priority = field("Priority")

    @cached_property
    def Placement(self):  # pragma: no cover
        return PlacementResponse.make_one(self.boto3_raw_data["Placement"])

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsOutput.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    ImageId = field("ImageId")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMappingResponse.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FleetLaunchTemplateOverridesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateOverridesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateOverridesOutput:
    boto3_raw_data: "type_defs.LaunchTemplateOverridesOutputTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    SpotPrice = field("SpotPrice")
    SubnetId = field("SubnetId")
    AvailabilityZone = field("AvailabilityZone")
    WeightedCapacity = field("WeightedCapacity")
    Priority = field("Priority")

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsOutput.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LaunchTemplateOverridesOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateOverridesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseLaunchTemplateData:
    boto3_raw_data: "type_defs.ResponseLaunchTemplateDataTypeDef" = dataclasses.field()

    KernelId = field("KernelId")
    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return LaunchTemplateIamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return LaunchTemplateBlockDeviceMapping.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return LaunchTemplateInstanceNetworkInterfaceSpecification.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return LaunchTemplatesMonitoring.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def Placement(self):  # pragma: no cover
        return LaunchTemplatePlacement.make_one(self.boto3_raw_data["Placement"])

    RamDiskId = field("RamDiskId")
    DisableApiTermination = field("DisableApiTermination")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    UserData = field("UserData")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return LaunchTemplateTagSpecification.make_many(
            self.boto3_raw_data["TagSpecifications"]
        )

    @cached_property
    def ElasticGpuSpecifications(self):  # pragma: no cover
        return ElasticGpuSpecificationResponse.make_many(
            self.boto3_raw_data["ElasticGpuSpecifications"]
        )

    @cached_property
    def ElasticInferenceAccelerators(self):  # pragma: no cover
        return LaunchTemplateElasticInferenceAcceleratorResponse.make_many(
            self.boto3_raw_data["ElasticInferenceAccelerators"]
        )

    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMarketOptions.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return CreditSpecification.make_one(self.boto3_raw_data["CreditSpecification"])

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return LaunchTemplateCpuOptions.make_one(self.boto3_raw_data["CpuOptions"])

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return LaunchTemplateCapacityReservationSpecificationResponse.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return LaunchTemplateLicenseConfiguration.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return LaunchTemplateHibernationOptions.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMetadataOptions.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return LaunchTemplateEnclaveOptions.make_one(
            self.boto3_raw_data["EnclaveOptions"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsOutput.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return LaunchTemplatePrivateDnsNameOptions.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMaintenanceOptions.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    DisableApiStop = field("DisableApiStop")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return LaunchTemplateNetworkPerformanceOptions.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResponseLaunchTemplateDataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResponseLaunchTemplateDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetLaunchSpecificationOutput:
    boto3_raw_data: "type_defs.SpotFleetLaunchSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    AddressingType = field("AddressingType")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return SpotFleetMonitoring.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return InstanceNetworkInterfaceSpecificationOutput.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return SpotPlacement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SpotPrice = field("SpotPrice")
    SubnetId = field("SubnetId")
    UserData = field("UserData")
    WeightedCapacity = field("WeightedCapacity")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return SpotFleetTagSpecificationOutput.make_many(
            self.boto3_raw_data["TagSpecifications"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsOutput.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["SecurityGroups"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SpotFleetLaunchSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetLaunchSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateOverridesRequest:
    boto3_raw_data: "type_defs.FleetLaunchTemplateOverridesRequestTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    MaxPrice = field("MaxPrice")
    SubnetId = field("SubnetId")
    AvailabilityZone = field("AvailabilityZone")
    WeightedCapacity = field("WeightedCapacity")
    Priority = field("Priority")

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return FleetBlockDeviceMappingRequest.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsRequest.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    ImageId = field("ImageId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FleetLaunchTemplateOverridesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateOverridesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceTypesFromInstanceRequirementsRequestPaginate:
    boto3_raw_data: (
        "type_defs.GetInstanceTypesFromInstanceRequirementsRequestPaginateTypeDef"
    ) = dataclasses.field()

    ArchitectureTypes = field("ArchitectureTypes")
    VirtualizationTypes = field("VirtualizationTypes")

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsRequest.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    DryRun = field("DryRun")
    Context = field("Context")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetInstanceTypesFromInstanceRequirementsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetInstanceTypesFromInstanceRequirementsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInstanceTypesFromInstanceRequirementsRequest:
    boto3_raw_data: (
        "type_defs.GetInstanceTypesFromInstanceRequirementsRequestTypeDef"
    ) = dataclasses.field()

    ArchitectureTypes = field("ArchitectureTypes")
    VirtualizationTypes = field("VirtualizationTypes")

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsRequest.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    Context = field("Context")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetInstanceTypesFromInstanceRequirementsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetInstanceTypesFromInstanceRequirementsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceRequirementsWithMetadataRequest:
    boto3_raw_data: "type_defs.InstanceRequirementsWithMetadataRequestTypeDef" = (
        dataclasses.field()
    )

    ArchitectureTypes = field("ArchitectureTypes")
    VirtualizationTypes = field("VirtualizationTypes")

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsRequest.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceRequirementsWithMetadataRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceRequirementsWithMetadataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestLaunchTemplateData:
    boto3_raw_data: "type_defs.RequestLaunchTemplateDataTypeDef" = dataclasses.field()

    KernelId = field("KernelId")
    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return LaunchTemplateIamInstanceProfileSpecificationRequest.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return LaunchTemplateBlockDeviceMappingRequest.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return LaunchTemplateInstanceNetworkInterfaceSpecificationRequest.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return LaunchTemplatesMonitoringRequest.make_one(
            self.boto3_raw_data["Monitoring"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return LaunchTemplatePlacementRequest.make_one(self.boto3_raw_data["Placement"])

    RamDiskId = field("RamDiskId")
    DisableApiTermination = field("DisableApiTermination")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    UserData = field("UserData")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return LaunchTemplateTagSpecificationRequest.make_many(
            self.boto3_raw_data["TagSpecifications"]
        )

    @cached_property
    def ElasticGpuSpecifications(self):  # pragma: no cover
        return ElasticGpuSpecification.make_many(
            self.boto3_raw_data["ElasticGpuSpecifications"]
        )

    @cached_property
    def ElasticInferenceAccelerators(self):  # pragma: no cover
        return LaunchTemplateElasticInferenceAccelerator.make_many(
            self.boto3_raw_data["ElasticInferenceAccelerators"]
        )

    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMarketOptionsRequest.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return CreditSpecificationRequest.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return LaunchTemplateCpuOptionsRequest.make_one(
            self.boto3_raw_data["CpuOptions"]
        )

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return LaunchTemplateCapacityReservationSpecificationRequest.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return LaunchTemplateLicenseConfigurationRequest.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return LaunchTemplateHibernationOptionsRequest.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMetadataOptionsRequest.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return LaunchTemplateEnclaveOptionsRequest.make_one(
            self.boto3_raw_data["EnclaveOptions"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirementsRequest.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return LaunchTemplatePrivateDnsNameOptionsRequest.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return LaunchTemplateInstanceMaintenanceOptionsRequest.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    DisableApiStop = field("DisableApiStop")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return LaunchTemplateNetworkPerformanceOptionsRequest.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestLaunchTemplateDataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestLaunchTemplateDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeConversionTasksResult:
    boto3_raw_data: "type_defs.DescribeConversionTasksResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConversionTasks(self):  # pragma: no cover
        return ConversionTask.make_many(self.boto3_raw_data["ConversionTasks"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeConversionTasksResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeConversionTasksResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportInstanceResult:
    boto3_raw_data: "type_defs.ImportInstanceResultTypeDef" = dataclasses.field()

    @cached_property
    def ConversionTask(self):  # pragma: no cover
        return ConversionTask.make_one(self.boto3_raw_data["ConversionTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportInstanceResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportInstanceResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportVolumeResult:
    boto3_raw_data: "type_defs.ImportVolumeResultTypeDef" = dataclasses.field()

    @cached_property
    def ConversionTask(self):  # pragma: no cover
        return ConversionTask.make_one(self.boto3_raw_data["ConversionTask"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportVolumeResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportVolumeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotInstanceRequest:
    boto3_raw_data: "type_defs.SpotInstanceRequestTypeDef" = dataclasses.field()

    ActualBlockHourlyPrice = field("ActualBlockHourlyPrice")
    AvailabilityZoneGroup = field("AvailabilityZoneGroup")
    BlockDurationMinutes = field("BlockDurationMinutes")
    CreateTime = field("CreateTime")

    @cached_property
    def Fault(self):  # pragma: no cover
        return SpotInstanceStateFault.make_one(self.boto3_raw_data["Fault"])

    InstanceId = field("InstanceId")
    LaunchGroup = field("LaunchGroup")

    @cached_property
    def LaunchSpecification(self):  # pragma: no cover
        return LaunchSpecification.make_one(self.boto3_raw_data["LaunchSpecification"])

    LaunchedAvailabilityZone = field("LaunchedAvailabilityZone")
    LaunchedAvailabilityZoneId = field("LaunchedAvailabilityZoneId")
    ProductDescription = field("ProductDescription")
    SpotInstanceRequestId = field("SpotInstanceRequestId")
    SpotPrice = field("SpotPrice")
    State = field("State")

    @cached_property
    def Status(self):  # pragma: no cover
        return SpotInstanceStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotInstanceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotInstanceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestSpotLaunchSpecification:
    boto3_raw_data: "type_defs.RequestSpotLaunchSpecificationTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")
    AddressingType = field("AddressingType")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return RunInstancesMonitoringEnabled.make_one(self.boto3_raw_data["Monitoring"])

    NetworkInterfaces = field("NetworkInterfaces")

    @cached_property
    def Placement(self):  # pragma: no cover
        return SpotPlacement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SubnetId = field("SubnetId")
    UserData = field("UserData")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RequestSpotLaunchSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestSpotLaunchSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunInstancesRequestServiceResourceCreateInstances:
    boto3_raw_data: (
        "type_defs.RunInstancesRequestServiceResourceCreateInstancesTypeDef"
    ) = dataclasses.field()

    MaxCount = field("MaxCount")
    MinCount = field("MinCount")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return RunInstancesMonitoringEnabled.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")
    SubnetId = field("SubnetId")
    UserData = field("UserData")

    @cached_property
    def ElasticGpuSpecification(self):  # pragma: no cover
        return ElasticGpuSpecification.make_many(
            self.boto3_raw_data["ElasticGpuSpecification"]
        )

    @cached_property
    def ElasticInferenceAccelerators(self):  # pragma: no cover
        return ElasticInferenceAccelerator.make_many(
            self.boto3_raw_data["ElasticInferenceAccelerators"]
        )

    TagSpecifications = field("TagSpecifications")

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return InstanceMarketOptionsRequest.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return CreditSpecificationRequest.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return CpuOptionsRequest.make_one(self.boto3_raw_data["CpuOptions"])

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return CapacityReservationSpecification.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return HibernationOptionsRequest.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return LicenseConfigurationRequest.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return InstanceMetadataOptionsRequest.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return EnclaveOptionsRequest.make_one(self.boto3_raw_data["EnclaveOptions"])

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return PrivateDnsNameOptionsRequest.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return InstanceMaintenanceOptionsRequest.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    DisableApiStop = field("DisableApiStop")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return InstanceNetworkPerformanceOptionsRequest.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    DryRun = field("DryRun")
    DisableApiTermination = field("DisableApiTermination")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    PrivateIpAddress = field("PrivateIpAddress")
    ClientToken = field("ClientToken")
    AdditionalInfo = field("AdditionalInfo")
    NetworkInterfaces = field("NetworkInterfaces")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    EbsOptimized = field("EbsOptimized")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RunInstancesRequestServiceResourceCreateInstancesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RunInstancesRequestServiceResourceCreateInstancesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunInstancesRequestSubnetCreateInstances:
    boto3_raw_data: "type_defs.RunInstancesRequestSubnetCreateInstancesTypeDef" = (
        dataclasses.field()
    )

    MaxCount = field("MaxCount")
    MinCount = field("MinCount")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return RunInstancesMonitoringEnabled.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")
    UserData = field("UserData")

    @cached_property
    def ElasticGpuSpecification(self):  # pragma: no cover
        return ElasticGpuSpecification.make_many(
            self.boto3_raw_data["ElasticGpuSpecification"]
        )

    @cached_property
    def ElasticInferenceAccelerators(self):  # pragma: no cover
        return ElasticInferenceAccelerator.make_many(
            self.boto3_raw_data["ElasticInferenceAccelerators"]
        )

    TagSpecifications = field("TagSpecifications")

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return InstanceMarketOptionsRequest.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return CreditSpecificationRequest.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return CpuOptionsRequest.make_one(self.boto3_raw_data["CpuOptions"])

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return CapacityReservationSpecification.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return HibernationOptionsRequest.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return LicenseConfigurationRequest.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return InstanceMetadataOptionsRequest.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return EnclaveOptionsRequest.make_one(self.boto3_raw_data["EnclaveOptions"])

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return PrivateDnsNameOptionsRequest.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return InstanceMaintenanceOptionsRequest.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    DisableApiStop = field("DisableApiStop")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return InstanceNetworkPerformanceOptionsRequest.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    DryRun = field("DryRun")
    DisableApiTermination = field("DisableApiTermination")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    PrivateIpAddress = field("PrivateIpAddress")
    ClientToken = field("ClientToken")
    AdditionalInfo = field("AdditionalInfo")
    NetworkInterfaces = field("NetworkInterfaces")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    EbsOptimized = field("EbsOptimized")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RunInstancesRequestSubnetCreateInstancesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RunInstancesRequestSubnetCreateInstancesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RunInstancesRequest:
    boto3_raw_data: "type_defs.RunInstancesRequestTypeDef" = dataclasses.field()

    MaxCount = field("MaxCount")
    MinCount = field("MinCount")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return InstanceIpv6Address.make_many(self.boto3_raw_data["Ipv6Addresses"])

    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return RunInstancesMonitoringEnabled.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SecurityGroupIds = field("SecurityGroupIds")
    SecurityGroups = field("SecurityGroups")
    SubnetId = field("SubnetId")
    UserData = field("UserData")

    @cached_property
    def ElasticGpuSpecification(self):  # pragma: no cover
        return ElasticGpuSpecification.make_many(
            self.boto3_raw_data["ElasticGpuSpecification"]
        )

    @cached_property
    def ElasticInferenceAccelerators(self):  # pragma: no cover
        return ElasticInferenceAccelerator.make_many(
            self.boto3_raw_data["ElasticInferenceAccelerators"]
        )

    TagSpecifications = field("TagSpecifications")

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return LaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return InstanceMarketOptionsRequest.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return CreditSpecificationRequest.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return CpuOptionsRequest.make_one(self.boto3_raw_data["CpuOptions"])

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return CapacityReservationSpecification.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return HibernationOptionsRequest.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def LicenseSpecifications(self):  # pragma: no cover
        return LicenseConfigurationRequest.make_many(
            self.boto3_raw_data["LicenseSpecifications"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return InstanceMetadataOptionsRequest.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return EnclaveOptionsRequest.make_one(self.boto3_raw_data["EnclaveOptions"])

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return PrivateDnsNameOptionsRequest.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return InstanceMaintenanceOptionsRequest.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    DisableApiStop = field("DisableApiStop")
    EnablePrimaryIpv6 = field("EnablePrimaryIpv6")

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return InstanceNetworkPerformanceOptionsRequest.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    DryRun = field("DryRun")
    DisableApiTermination = field("DisableApiTermination")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")
    PrivateIpAddress = field("PrivateIpAddress")
    ClientToken = field("ClientToken")
    AdditionalInfo = field("AdditionalInfo")
    NetworkInterfaces = field("NetworkInterfaces")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    EbsOptimized = field("EbsOptimized")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RunInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RunInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Instance:
    boto3_raw_data: "type_defs.InstanceTypeDef" = dataclasses.field()

    Architecture = field("Architecture")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return InstanceBlockDeviceMapping.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    ClientToken = field("ClientToken")
    EbsOptimized = field("EbsOptimized")
    EnaSupport = field("EnaSupport")
    Hypervisor = field("Hypervisor")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfile.make_one(self.boto3_raw_data["IamInstanceProfile"])

    InstanceLifecycle = field("InstanceLifecycle")

    @cached_property
    def ElasticGpuAssociations(self):  # pragma: no cover
        return ElasticGpuAssociation.make_many(
            self.boto3_raw_data["ElasticGpuAssociations"]
        )

    @cached_property
    def ElasticInferenceAcceleratorAssociations(self):  # pragma: no cover
        return ElasticInferenceAcceleratorAssociation.make_many(
            self.boto3_raw_data["ElasticInferenceAcceleratorAssociations"]
        )

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return InstanceNetworkInterface.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    OutpostArn = field("OutpostArn")
    RootDeviceName = field("RootDeviceName")
    RootDeviceType = field("RootDeviceType")

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["SecurityGroups"])

    SourceDestCheck = field("SourceDestCheck")
    SpotInstanceRequestId = field("SpotInstanceRequestId")
    SriovNetSupport = field("SriovNetSupport")

    @cached_property
    def StateReason(self):  # pragma: no cover
        return StateReason.make_one(self.boto3_raw_data["StateReason"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VirtualizationType = field("VirtualizationType")

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return CpuOptions.make_one(self.boto3_raw_data["CpuOptions"])

    CapacityBlockId = field("CapacityBlockId")
    CapacityReservationId = field("CapacityReservationId")

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return CapacityReservationSpecificationResponse.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return HibernationOptions.make_one(self.boto3_raw_data["HibernationOptions"])

    @cached_property
    def Licenses(self):  # pragma: no cover
        return LicenseConfiguration.make_many(self.boto3_raw_data["Licenses"])

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return InstanceMetadataOptionsResponse.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return EnclaveOptions.make_one(self.boto3_raw_data["EnclaveOptions"])

    BootMode = field("BootMode")
    PlatformDetails = field("PlatformDetails")
    UsageOperation = field("UsageOperation")
    UsageOperationUpdateTime = field("UsageOperationUpdateTime")

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return PrivateDnsNameOptionsResponse.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    Ipv6Address = field("Ipv6Address")
    TpmSupport = field("TpmSupport")

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return InstanceMaintenanceOptions.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    CurrentInstanceBootMode = field("CurrentInstanceBootMode")

    @cached_property
    def NetworkPerformanceOptions(self):  # pragma: no cover
        return InstanceNetworkPerformanceOptions.make_one(
            self.boto3_raw_data["NetworkPerformanceOptions"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    InstanceId = field("InstanceId")
    ImageId = field("ImageId")

    @cached_property
    def State(self):  # pragma: no cover
        return InstanceState.make_one(self.boto3_raw_data["State"])

    PrivateDnsName = field("PrivateDnsName")
    PublicDnsName = field("PublicDnsName")
    StateTransitionReason = field("StateTransitionReason")
    KeyName = field("KeyName")
    AmiLaunchIndex = field("AmiLaunchIndex")

    @cached_property
    def ProductCodes(self):  # pragma: no cover
        return ProductCode.make_many(self.boto3_raw_data["ProductCodes"])

    InstanceType = field("InstanceType")
    LaunchTime = field("LaunchTime")

    @cached_property
    def Placement(self):  # pragma: no cover
        return Placement.make_one(self.boto3_raw_data["Placement"])

    KernelId = field("KernelId")
    RamdiskId = field("RamdiskId")
    Platform = field("Platform")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return Monitoring.make_one(self.boto3_raw_data["Monitoring"])

    SubnetId = field("SubnetId")
    VpcId = field("VpcId")
    PrivateIpAddress = field("PrivateIpAddress")
    PublicIpAddress = field("PublicIpAddress")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstanceTypesResult:
    boto3_raw_data: "type_defs.DescribeInstanceTypesResultTypeDef" = dataclasses.field()

    @cached_property
    def InstanceTypes(self):  # pragma: no cover
        return InstanceTypeInfo.make_many(self.boto3_raw_data["InstanceTypes"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstanceTypesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstanceTypesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNetworkInsightsAccessScopeResult:
    boto3_raw_data: "type_defs.CreateNetworkInsightsAccessScopeResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAccessScope(self):  # pragma: no cover
        return NetworkInsightsAccessScope.make_one(
            self.boto3_raw_data["NetworkInsightsAccessScope"]
        )

    @cached_property
    def NetworkInsightsAccessScopeContent(self):  # pragma: no cover
        return NetworkInsightsAccessScopeContent.make_one(
            self.boto3_raw_data["NetworkInsightsAccessScopeContent"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNetworkInsightsAccessScopeResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNetworkInsightsAccessScopeResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetNetworkInsightsAccessScopeContentResult:
    boto3_raw_data: "type_defs.GetNetworkInsightsAccessScopeContentResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAccessScopeContent(self):  # pragma: no cover
        return NetworkInsightsAccessScopeContent.make_one(
            self.boto3_raw_data["NetworkInsightsAccessScopeContent"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetNetworkInsightsAccessScopeContentResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetNetworkInsightsAccessScopeContentResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVerifiedAccessInstanceLoggingConfigurationsResult:
    boto3_raw_data: (
        "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LoggingConfigurations(self):  # pragma: no cover
        return VerifiedAccessInstanceLoggingConfiguration.make_many(
            self.boto3_raw_data["LoggingConfigurations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeVerifiedAccessInstanceLoggingConfigurationsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVerifiedAccessInstanceLoggingConfigurationResult:
    boto3_raw_data: (
        "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationResultTypeDef"
    ) = dataclasses.field()

    @cached_property
    def LoggingConfiguration(self):  # pragma: no cover
        return VerifiedAccessInstanceLoggingConfiguration.make_one(
            self.boto3_raw_data["LoggingConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ModifyVerifiedAccessInstanceLoggingConfigurationResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDefaultVpcResult:
    boto3_raw_data: "type_defs.CreateDefaultVpcResultTypeDef" = dataclasses.field()

    @cached_property
    def Vpc(self):  # pragma: no cover
        return Vpc.make_one(self.boto3_raw_data["Vpc"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDefaultVpcResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDefaultVpcResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpcResult:
    boto3_raw_data: "type_defs.CreateVpcResultTypeDef" = dataclasses.field()

    @cached_property
    def Vpc(self):  # pragma: no cover
        return Vpc.make_one(self.boto3_raw_data["Vpc"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateVpcResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CreateVpcResultTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpcsResult:
    boto3_raw_data: "type_defs.DescribeVpcsResultTypeDef" = dataclasses.field()

    @cached_property
    def Vpcs(self):  # pragma: no cover
        return Vpc.make_many(self.boto3_raw_data["Vpcs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpcsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpcsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetNetworkInsightsAccessScopeAnalysisFindingsResult:
    boto3_raw_data: (
        "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsResultTypeDef"
    ) = dataclasses.field()

    NetworkInsightsAccessScopeAnalysisId = field("NetworkInsightsAccessScopeAnalysisId")
    AnalysisStatus = field("AnalysisStatus")

    @cached_property
    def AnalysisFindings(self):  # pragma: no cover
        return AccessScopeAnalysisFinding.make_many(
            self.boto3_raw_data["AnalysisFindings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetNetworkInsightsAccessScopeAnalysisFindingsResultTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNetworkInsightsAnalysesResult:
    boto3_raw_data: "type_defs.DescribeNetworkInsightsAnalysesResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAnalyses(self):  # pragma: no cover
        return NetworkInsightsAnalysis.make_many(
            self.boto3_raw_data["NetworkInsightsAnalyses"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNetworkInsightsAnalysesResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNetworkInsightsAnalysesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartNetworkInsightsAnalysisResult:
    boto3_raw_data: "type_defs.StartNetworkInsightsAnalysisResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NetworkInsightsAnalysis(self):  # pragma: no cover
        return NetworkInsightsAnalysis.make_one(
            self.boto3_raw_data["NetworkInsightsAnalysis"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartNetworkInsightsAnalysisResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartNetworkInsightsAnalysisResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVpnConnectionResult:
    boto3_raw_data: "type_defs.CreateVpnConnectionResultTypeDef" = dataclasses.field()

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return VpnConnection.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVpnConnectionResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVpnConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVpnConnectionsResult:
    boto3_raw_data: "type_defs.DescribeVpnConnectionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpnConnections(self):  # pragma: no cover
        return VpnConnection.make_many(self.boto3_raw_data["VpnConnections"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVpnConnectionsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVpnConnectionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnConnectionOptionsResult:
    boto3_raw_data: "type_defs.ModifyVpnConnectionOptionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return VpnConnection.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyVpnConnectionOptionsResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnConnectionOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnConnectionResult:
    boto3_raw_data: "type_defs.ModifyVpnConnectionResultTypeDef" = dataclasses.field()

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return VpnConnection.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpnConnectionResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnConnectionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnTunnelCertificateResult:
    boto3_raw_data: "type_defs.ModifyVpnTunnelCertificateResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return VpnConnection.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifyVpnTunnelCertificateResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnTunnelCertificateResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyVpnTunnelOptionsResult:
    boto3_raw_data: "type_defs.ModifyVpnTunnelOptionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VpnConnection(self):  # pragma: no cover
        return VpnConnection.make_one(self.boto3_raw_data["VpnConnection"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyVpnTunnelOptionsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyVpnTunnelOptionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateConfig:
    boto3_raw_data: "type_defs.FleetLaunchTemplateConfigTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return FleetLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return FleetLaunchTemplateOverrides.make_many(self.boto3_raw_data["Overrides"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FleetLaunchTemplateConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateAndOverridesResponse:
    boto3_raw_data: "type_defs.LaunchTemplateAndOverridesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return FleetLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return FleetLaunchTemplateOverrides.make_one(self.boto3_raw_data["Overrides"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LaunchTemplateAndOverridesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateAndOverridesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateConfigOutput:
    boto3_raw_data: "type_defs.LaunchTemplateConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return FleetLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return LaunchTemplateOverridesOutput.make_many(self.boto3_raw_data["Overrides"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetLaunchTemplateDataResult:
    boto3_raw_data: "type_defs.GetLaunchTemplateDataResultTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateData(self):  # pragma: no cover
        return ResponseLaunchTemplateData.make_one(
            self.boto3_raw_data["LaunchTemplateData"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetLaunchTemplateDataResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetLaunchTemplateDataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateVersion:
    boto3_raw_data: "type_defs.LaunchTemplateVersionTypeDef" = dataclasses.field()

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    VersionNumber = field("VersionNumber")
    VersionDescription = field("VersionDescription")
    CreateTime = field("CreateTime")
    CreatedBy = field("CreatedBy")
    DefaultVersion = field("DefaultVersion")

    @cached_property
    def LaunchTemplateData(self):  # pragma: no cover
        return ResponseLaunchTemplateData.make_one(
            self.boto3_raw_data["LaunchTemplateData"]
        )

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorResponse.make_one(self.boto3_raw_data["Operator"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateVersionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateVersionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceRequirements:
    boto3_raw_data: "type_defs.InstanceRequirementsTypeDef" = dataclasses.field()

    @cached_property
    def VCpuCount(self):  # pragma: no cover
        return VCpuCountRange.make_one(self.boto3_raw_data["VCpuCount"])

    @cached_property
    def MemoryMiB(self):  # pragma: no cover
        return MemoryMiB.make_one(self.boto3_raw_data["MemoryMiB"])

    CpuManufacturers = field("CpuManufacturers")

    @cached_property
    def MemoryGiBPerVCpu(self):  # pragma: no cover
        return MemoryGiBPerVCpu.make_one(self.boto3_raw_data["MemoryGiBPerVCpu"])

    ExcludedInstanceTypes = field("ExcludedInstanceTypes")
    InstanceGenerations = field("InstanceGenerations")
    SpotMaxPricePercentageOverLowestPrice = field(
        "SpotMaxPricePercentageOverLowestPrice"
    )
    OnDemandMaxPricePercentageOverLowestPrice = field(
        "OnDemandMaxPricePercentageOverLowestPrice"
    )
    BareMetal = field("BareMetal")
    BurstablePerformance = field("BurstablePerformance")
    RequireHibernateSupport = field("RequireHibernateSupport")

    @cached_property
    def NetworkInterfaceCount(self):  # pragma: no cover
        return NetworkInterfaceCount.make_one(
            self.boto3_raw_data["NetworkInterfaceCount"]
        )

    LocalStorage = field("LocalStorage")
    LocalStorageTypes = field("LocalStorageTypes")

    @cached_property
    def TotalLocalStorageGB(self):  # pragma: no cover
        return TotalLocalStorageGB.make_one(self.boto3_raw_data["TotalLocalStorageGB"])

    @cached_property
    def BaselineEbsBandwidthMbps(self):  # pragma: no cover
        return BaselineEbsBandwidthMbps.make_one(
            self.boto3_raw_data["BaselineEbsBandwidthMbps"]
        )

    AcceleratorTypes = field("AcceleratorTypes")

    @cached_property
    def AcceleratorCount(self):  # pragma: no cover
        return AcceleratorCount.make_one(self.boto3_raw_data["AcceleratorCount"])

    AcceleratorManufacturers = field("AcceleratorManufacturers")
    AcceleratorNames = field("AcceleratorNames")

    @cached_property
    def AcceleratorTotalMemoryMiB(self):  # pragma: no cover
        return AcceleratorTotalMemoryMiB.make_one(
            self.boto3_raw_data["AcceleratorTotalMemoryMiB"]
        )

    @cached_property
    def NetworkBandwidthGbps(self):  # pragma: no cover
        return NetworkBandwidthGbps.make_one(
            self.boto3_raw_data["NetworkBandwidthGbps"]
        )

    AllowedInstanceTypes = field("AllowedInstanceTypes")
    MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = field(
        "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"
    )
    BaselinePerformanceFactors = field("BaselinePerformanceFactors")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceRequirementsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceRequirementsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetLaunchTemplateConfigRequest:
    boto3_raw_data: "type_defs.FleetLaunchTemplateConfigRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return FleetLaunchTemplateSpecificationRequest.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return FleetLaunchTemplateOverridesRequest.make_many(
            self.boto3_raw_data["Overrides"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FleetLaunchTemplateConfigRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FleetLaunchTemplateConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSpotPlacementScoresRequestPaginate:
    boto3_raw_data: "type_defs.GetSpotPlacementScoresRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    TargetCapacity = field("TargetCapacity")
    InstanceTypes = field("InstanceTypes")
    TargetCapacityUnitType = field("TargetCapacityUnitType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    RegionNames = field("RegionNames")

    @cached_property
    def InstanceRequirementsWithMetadata(self):  # pragma: no cover
        return InstanceRequirementsWithMetadataRequest.make_one(
            self.boto3_raw_data["InstanceRequirementsWithMetadata"]
        )

    DryRun = field("DryRun")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSpotPlacementScoresRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSpotPlacementScoresRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSpotPlacementScoresRequest:
    boto3_raw_data: "type_defs.GetSpotPlacementScoresRequestTypeDef" = (
        dataclasses.field()
    )

    TargetCapacity = field("TargetCapacity")
    InstanceTypes = field("InstanceTypes")
    TargetCapacityUnitType = field("TargetCapacityUnitType")
    SingleAvailabilityZone = field("SingleAvailabilityZone")
    RegionNames = field("RegionNames")

    @cached_property
    def InstanceRequirementsWithMetadata(self):  # pragma: no cover
        return InstanceRequirementsWithMetadataRequest.make_one(
            self.boto3_raw_data["InstanceRequirementsWithMetadata"]
        )

    DryRun = field("DryRun")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetSpotPlacementScoresRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSpotPlacementScoresRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLaunchTemplateRequest:
    boto3_raw_data: "type_defs.CreateLaunchTemplateRequestTypeDef" = dataclasses.field()

    LaunchTemplateName = field("LaunchTemplateName")

    @cached_property
    def LaunchTemplateData(self):  # pragma: no cover
        return RequestLaunchTemplateData.make_one(
            self.boto3_raw_data["LaunchTemplateData"]
        )

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    VersionDescription = field("VersionDescription")

    @cached_property
    def Operator(self):  # pragma: no cover
        return OperatorRequest.make_one(self.boto3_raw_data["Operator"])

    TagSpecifications = field("TagSpecifications")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateLaunchTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLaunchTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLaunchTemplateVersionRequest:
    boto3_raw_data: "type_defs.CreateLaunchTemplateVersionRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplateData(self):  # pragma: no cover
        return RequestLaunchTemplateData.make_one(
            self.boto3_raw_data["LaunchTemplateData"]
        )

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")
    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    SourceVersion = field("SourceVersion")
    VersionDescription = field("VersionDescription")
    ResolveAlias = field("ResolveAlias")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLaunchTemplateVersionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLaunchTemplateVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotInstanceRequestsResult:
    boto3_raw_data: "type_defs.DescribeSpotInstanceRequestsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotInstanceRequests(self):  # pragma: no cover
        return SpotInstanceRequest.make_many(
            self.boto3_raw_data["SpotInstanceRequests"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotInstanceRequestsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotInstanceRequestsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestSpotInstancesResult:
    boto3_raw_data: "type_defs.RequestSpotInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def SpotInstanceRequests(self):  # pragma: no cover
        return SpotInstanceRequest.make_many(
            self.boto3_raw_data["SpotInstanceRequests"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestSpotInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestSpotInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestSpotInstancesRequest:
    boto3_raw_data: "type_defs.RequestSpotInstancesRequestTypeDef" = dataclasses.field()

    @cached_property
    def LaunchSpecification(self):  # pragma: no cover
        return RequestSpotLaunchSpecification.make_one(
            self.boto3_raw_data["LaunchSpecification"]
        )

    TagSpecifications = field("TagSpecifications")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")
    DryRun = field("DryRun")
    SpotPrice = field("SpotPrice")
    ClientToken = field("ClientToken")
    InstanceCount = field("InstanceCount")
    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    LaunchGroup = field("LaunchGroup")
    AvailabilityZoneGroup = field("AvailabilityZoneGroup")
    BlockDurationMinutes = field("BlockDurationMinutes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestSpotInstancesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestSpotInstancesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservationResponse:
    boto3_raw_data: "type_defs.ReservationResponseTypeDef" = dataclasses.field()

    ReservationId = field("ReservationId")
    OwnerId = field("OwnerId")
    RequesterId = field("RequesterId")

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def Instances(self):  # pragma: no cover
        return Instance.make_many(self.boto3_raw_data["Instances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservationResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Reservation:
    boto3_raw_data: "type_defs.ReservationTypeDef" = dataclasses.field()

    ReservationId = field("ReservationId")
    OwnerId = field("OwnerId")
    RequesterId = field("RequesterId")

    @cached_property
    def Groups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def Instances(self):  # pragma: no cover
        return Instance.make_many(self.boto3_raw_data["Instances"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ReservationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ReservationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFleetError:
    boto3_raw_data: "type_defs.CreateFleetErrorTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateAndOverrides(self):  # pragma: no cover
        return LaunchTemplateAndOverridesResponse.make_one(
            self.boto3_raw_data["LaunchTemplateAndOverrides"]
        )

    Lifecycle = field("Lifecycle")
    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateFleetErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFleetErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFleetInstance:
    boto3_raw_data: "type_defs.CreateFleetInstanceTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateAndOverrides(self):  # pragma: no cover
        return LaunchTemplateAndOverridesResponse.make_one(
            self.boto3_raw_data["LaunchTemplateAndOverrides"]
        )

    Lifecycle = field("Lifecycle")
    InstanceIds = field("InstanceIds")
    InstanceType = field("InstanceType")
    Platform = field("Platform")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFleetInstanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFleetInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetError:
    boto3_raw_data: "type_defs.DescribeFleetErrorTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateAndOverrides(self):  # pragma: no cover
        return LaunchTemplateAndOverridesResponse.make_one(
            self.boto3_raw_data["LaunchTemplateAndOverrides"]
        )

    Lifecycle = field("Lifecycle")
    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetsInstances:
    boto3_raw_data: "type_defs.DescribeFleetsInstancesTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateAndOverrides(self):  # pragma: no cover
        return LaunchTemplateAndOverridesResponse.make_one(
            self.boto3_raw_data["LaunchTemplateAndOverrides"]
        )

    Lifecycle = field("Lifecycle")
    InstanceIds = field("InstanceIds")
    InstanceType = field("InstanceType")
    Platform = field("Platform")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetsInstancesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetsInstancesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetRequestConfigDataOutput:
    boto3_raw_data: "type_defs.SpotFleetRequestConfigDataOutputTypeDef" = (
        dataclasses.field()
    )

    IamFleetRole = field("IamFleetRole")
    TargetCapacity = field("TargetCapacity")
    AllocationStrategy = field("AllocationStrategy")
    OnDemandAllocationStrategy = field("OnDemandAllocationStrategy")

    @cached_property
    def SpotMaintenanceStrategies(self):  # pragma: no cover
        return SpotMaintenanceStrategies.make_one(
            self.boto3_raw_data["SpotMaintenanceStrategies"]
        )

    ClientToken = field("ClientToken")
    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")
    FulfilledCapacity = field("FulfilledCapacity")
    OnDemandFulfilledCapacity = field("OnDemandFulfilledCapacity")

    @cached_property
    def LaunchSpecifications(self):  # pragma: no cover
        return SpotFleetLaunchSpecificationOutput.make_many(
            self.boto3_raw_data["LaunchSpecifications"]
        )

    @cached_property
    def LaunchTemplateConfigs(self):  # pragma: no cover
        return LaunchTemplateConfigOutput.make_many(
            self.boto3_raw_data["LaunchTemplateConfigs"]
        )

    SpotPrice = field("SpotPrice")
    OnDemandTargetCapacity = field("OnDemandTargetCapacity")
    OnDemandMaxTotalPrice = field("OnDemandMaxTotalPrice")
    SpotMaxTotalPrice = field("SpotMaxTotalPrice")
    TerminateInstancesWithExpiration = field("TerminateInstancesWithExpiration")
    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    ReplaceUnhealthyInstances = field("ReplaceUnhealthyInstances")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @cached_property
    def LoadBalancersConfig(self):  # pragma: no cover
        return LoadBalancersConfigOutput.make_one(
            self.boto3_raw_data["LoadBalancersConfig"]
        )

    InstancePoolsToUseCount = field("InstancePoolsToUseCount")
    Context = field("Context")
    TargetCapacityUnitType = field("TargetCapacityUnitType")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return TagSpecificationOutput.make_many(
            self.boto3_raw_data["TagSpecifications"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SpotFleetRequestConfigDataOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetRequestConfigDataOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLaunchTemplateVersionResult:
    boto3_raw_data: "type_defs.CreateLaunchTemplateVersionResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplateVersion(self):  # pragma: no cover
        return LaunchTemplateVersion.make_one(
            self.boto3_raw_data["LaunchTemplateVersion"]
        )

    @cached_property
    def Warning(self):  # pragma: no cover
        return ValidationWarning.make_one(self.boto3_raw_data["Warning"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateLaunchTemplateVersionResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLaunchTemplateVersionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLaunchTemplateVersionsResult:
    boto3_raw_data: "type_defs.DescribeLaunchTemplateVersionsResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LaunchTemplateVersions(self):  # pragma: no cover
        return LaunchTemplateVersion.make_many(
            self.boto3_raw_data["LaunchTemplateVersions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeLaunchTemplateVersionsResultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLaunchTemplateVersionsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetLaunchSpecification:
    boto3_raw_data: "type_defs.SpotFleetLaunchSpecificationTypeDef" = (
        dataclasses.field()
    )

    AddressingType = field("AddressingType")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return BlockDeviceMapping.make_many(self.boto3_raw_data["BlockDeviceMappings"])

    EbsOptimized = field("EbsOptimized")

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return IamInstanceProfileSpecification.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return SpotFleetMonitoring.make_one(self.boto3_raw_data["Monitoring"])

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return InstanceNetworkInterfaceSpecification.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return SpotPlacement.make_one(self.boto3_raw_data["Placement"])

    RamdiskId = field("RamdiskId")
    SpotPrice = field("SpotPrice")
    SubnetId = field("SubnetId")
    UserData = field("UserData")
    WeightedCapacity = field("WeightedCapacity")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return SpotFleetTagSpecification.make_many(
            self.boto3_raw_data["TagSpecifications"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return InstanceRequirements.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return GroupIdentifier.make_many(self.boto3_raw_data["SecurityGroups"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotFleetLaunchSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetLaunchSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFleetRequest:
    boto3_raw_data: "type_defs.CreateFleetRequestTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateConfigs(self):  # pragma: no cover
        return FleetLaunchTemplateConfigRequest.make_many(
            self.boto3_raw_data["LaunchTemplateConfigs"]
        )

    @cached_property
    def TargetCapacitySpecification(self):  # pragma: no cover
        return TargetCapacitySpecificationRequest.make_one(
            self.boto3_raw_data["TargetCapacitySpecification"]
        )

    DryRun = field("DryRun")
    ClientToken = field("ClientToken")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return SpotOptionsRequest.make_one(self.boto3_raw_data["SpotOptions"])

    @cached_property
    def OnDemandOptions(self):  # pragma: no cover
        return OnDemandOptionsRequest.make_one(self.boto3_raw_data["OnDemandOptions"])

    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")
    TerminateInstancesWithExpiration = field("TerminateInstancesWithExpiration")
    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    ReplaceUnhealthyInstances = field("ReplaceUnhealthyInstances")
    TagSpecifications = field("TagSpecifications")
    Context = field("Context")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifyFleetRequest:
    boto3_raw_data: "type_defs.ModifyFleetRequestTypeDef" = dataclasses.field()

    FleetId = field("FleetId")
    DryRun = field("DryRun")
    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")

    @cached_property
    def LaunchTemplateConfigs(self):  # pragma: no cover
        return FleetLaunchTemplateConfigRequest.make_many(
            self.boto3_raw_data["LaunchTemplateConfigs"]
        )

    @cached_property
    def TargetCapacitySpecification(self):  # pragma: no cover
        return TargetCapacitySpecificationRequest.make_one(
            self.boto3_raw_data["TargetCapacitySpecification"]
        )

    Context = field("Context")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModifyFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifyFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInstancesResult:
    boto3_raw_data: "type_defs.DescribeInstancesResultTypeDef" = dataclasses.field()

    @cached_property
    def Reservations(self):  # pragma: no cover
        return Reservation.make_many(self.boto3_raw_data["Reservations"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeInstancesResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInstancesResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFleetResult:
    boto3_raw_data: "type_defs.CreateFleetResultTypeDef" = dataclasses.field()

    FleetId = field("FleetId")

    @cached_property
    def Errors(self):  # pragma: no cover
        return CreateFleetError.make_many(self.boto3_raw_data["Errors"])

    @cached_property
    def Instances(self):  # pragma: no cover
        return CreateFleetInstance.make_many(self.boto3_raw_data["Instances"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateFleetResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFleetResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FleetData:
    boto3_raw_data: "type_defs.FleetDataTypeDef" = dataclasses.field()

    ActivityStatus = field("ActivityStatus")
    CreateTime = field("CreateTime")
    FleetId = field("FleetId")
    FleetState = field("FleetState")
    ClientToken = field("ClientToken")
    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")
    FulfilledCapacity = field("FulfilledCapacity")
    FulfilledOnDemandCapacity = field("FulfilledOnDemandCapacity")

    @cached_property
    def LaunchTemplateConfigs(self):  # pragma: no cover
        return FleetLaunchTemplateConfig.make_many(
            self.boto3_raw_data["LaunchTemplateConfigs"]
        )

    @cached_property
    def TargetCapacitySpecification(self):  # pragma: no cover
        return TargetCapacitySpecification.make_one(
            self.boto3_raw_data["TargetCapacitySpecification"]
        )

    TerminateInstancesWithExpiration = field("TerminateInstancesWithExpiration")
    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    ReplaceUnhealthyInstances = field("ReplaceUnhealthyInstances")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return SpotOptions.make_one(self.boto3_raw_data["SpotOptions"])

    @cached_property
    def OnDemandOptions(self):  # pragma: no cover
        return OnDemandOptions.make_one(self.boto3_raw_data["OnDemandOptions"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def Errors(self):  # pragma: no cover
        return DescribeFleetError.make_many(self.boto3_raw_data["Errors"])

    @cached_property
    def Instances(self):  # pragma: no cover
        return DescribeFleetsInstances.make_many(self.boto3_raw_data["Instances"])

    Context = field("Context")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FleetDataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FleetDataTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetRequestConfig:
    boto3_raw_data: "type_defs.SpotFleetRequestConfigTypeDef" = dataclasses.field()

    ActivityStatus = field("ActivityStatus")
    CreateTime = field("CreateTime")

    @cached_property
    def SpotFleetRequestConfig(self):  # pragma: no cover
        return SpotFleetRequestConfigDataOutput.make_one(
            self.boto3_raw_data["SpotFleetRequestConfig"]
        )

    SpotFleetRequestId = field("SpotFleetRequestId")
    SpotFleetRequestState = field("SpotFleetRequestState")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotFleetRequestConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetRequestConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateOverrides:
    boto3_raw_data: "type_defs.LaunchTemplateOverridesTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    SpotPrice = field("SpotPrice")
    SubnetId = field("SubnetId")
    AvailabilityZone = field("AvailabilityZone")
    WeightedCapacity = field("WeightedCapacity")
    Priority = field("Priority")
    InstanceRequirements = field("InstanceRequirements")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateOverridesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateOverridesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFleetsResult:
    boto3_raw_data: "type_defs.DescribeFleetsResultTypeDef" = dataclasses.field()

    @cached_property
    def Fleets(self):  # pragma: no cover
        return FleetData.make_many(self.boto3_raw_data["Fleets"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFleetsResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFleetsResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpotFleetRequestsResponse:
    boto3_raw_data: "type_defs.DescribeSpotFleetRequestsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SpotFleetRequestConfigs(self):  # pragma: no cover
        return SpotFleetRequestConfig.make_many(
            self.boto3_raw_data["SpotFleetRequestConfigs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSpotFleetRequestsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpotFleetRequestsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LaunchTemplateConfig:
    boto3_raw_data: "type_defs.LaunchTemplateConfigTypeDef" = dataclasses.field()

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return FleetLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    Overrides = field("Overrides")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LaunchTemplateConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LaunchTemplateConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpotFleetRequestConfigData:
    boto3_raw_data: "type_defs.SpotFleetRequestConfigDataTypeDef" = dataclasses.field()

    IamFleetRole = field("IamFleetRole")
    TargetCapacity = field("TargetCapacity")
    AllocationStrategy = field("AllocationStrategy")
    OnDemandAllocationStrategy = field("OnDemandAllocationStrategy")

    @cached_property
    def SpotMaintenanceStrategies(self):  # pragma: no cover
        return SpotMaintenanceStrategies.make_one(
            self.boto3_raw_data["SpotMaintenanceStrategies"]
        )

    ClientToken = field("ClientToken")
    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")
    FulfilledCapacity = field("FulfilledCapacity")
    OnDemandFulfilledCapacity = field("OnDemandFulfilledCapacity")

    @cached_property
    def LaunchSpecifications(self):  # pragma: no cover
        return SpotFleetLaunchSpecification.make_many(
            self.boto3_raw_data["LaunchSpecifications"]
        )

    @cached_property
    def LaunchTemplateConfigs(self):  # pragma: no cover
        return LaunchTemplateConfig.make_many(
            self.boto3_raw_data["LaunchTemplateConfigs"]
        )

    SpotPrice = field("SpotPrice")
    OnDemandTargetCapacity = field("OnDemandTargetCapacity")
    OnDemandMaxTotalPrice = field("OnDemandMaxTotalPrice")
    SpotMaxTotalPrice = field("SpotMaxTotalPrice")
    TerminateInstancesWithExpiration = field("TerminateInstancesWithExpiration")
    Type = field("Type")
    ValidFrom = field("ValidFrom")
    ValidUntil = field("ValidUntil")
    ReplaceUnhealthyInstances = field("ReplaceUnhealthyInstances")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")

    @cached_property
    def LoadBalancersConfig(self):  # pragma: no cover
        return LoadBalancersConfig.make_one(self.boto3_raw_data["LoadBalancersConfig"])

    InstancePoolsToUseCount = field("InstancePoolsToUseCount")
    Context = field("Context")
    TargetCapacityUnitType = field("TargetCapacityUnitType")

    @cached_property
    def TagSpecifications(self):  # pragma: no cover
        return TagSpecification.make_many(self.boto3_raw_data["TagSpecifications"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpotFleetRequestConfigDataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpotFleetRequestConfigDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModifySpotFleetRequestRequest:
    boto3_raw_data: "type_defs.ModifySpotFleetRequestRequestTypeDef" = (
        dataclasses.field()
    )

    SpotFleetRequestId = field("SpotFleetRequestId")
    LaunchTemplateConfigs = field("LaunchTemplateConfigs")
    OnDemandTargetCapacity = field("OnDemandTargetCapacity")
    Context = field("Context")
    TargetCapacity = field("TargetCapacity")
    ExcessCapacityTerminationPolicy = field("ExcessCapacityTerminationPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModifySpotFleetRequestRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModifySpotFleetRequestRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RequestSpotFleetRequest:
    boto3_raw_data: "type_defs.RequestSpotFleetRequestTypeDef" = dataclasses.field()

    SpotFleetRequestConfig = field("SpotFleetRequestConfig")
    DryRun = field("DryRun")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RequestSpotFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RequestSpotFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]
