"""
malware_classifier.py: Model for malware classification.
"""

import os
import json
from box import Box

class MalwareClassifier:
    """
    Model for malware classification.
    This class handles data extraction, vectorization, training, and prediction.
    """
    
    def __init__(self, config_path: str = "./config.json"):
        """
        Read the configuration file, create necessary directories, and setup logging.

        Parameters:
        config_path (str): Path to the configuration file (default: "./config.json").
        """
        # Read config.json
        self.config_path = config_path
        with open(config_path, encoding='utf-8') as f:
            self.config = Box(json.load(f))
        
        # Create necessary directories
        self.mkdir()

    def get_feature(self):
        """
        Extracts features from the malware dataset.
        """
        raise NotImplementedError("This method (get_feature) should be overridden by subclasses")

    def get_vector(self):
        """
        Vectorizes the extracted features.
        """
        raise NotImplementedError("This method (get_vector) should be overridden by subclasses")

    def get_model(self, action: str = "train"):
        """
        Trains the model.
        
        Parameters:
        action (str): The action to perform (default: "train").
            - "train": Train the model.
            - "predict": Perform inference with the model.
        """
        raise NotImplementedError("This method (get_model) should be overridden by subclasses")

    def get_prediction(self):
        """
        Predicts the given files.
        """
        raise NotImplementedError("This method (get_prediction) should be overridden by subclasses")
        
    def mkdir(self):
        """
        Creates necessary directories for the model.
        """
        for folder_path in self.config.folder.values():
            os.makedirs(folder_path, exist_ok=True)
        
if __name__ == "__main__":
    classifier = MalwareClassifier()
    classifier.get_feature()
    classifier.get_vector()
    classifier.get_model(action="train")
    classifier.get_prediction()