[tool.poetry]
name = "kbot-py-client"
version = "2.1.2"
description = "Client for Konverso Kbot."
authors = ["Konverso <contact@konverso.ai>"]
classifiers=[
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
readme = "README.md"
license = "MIT"
packages = [
    { include = "kbot_client" },
]

[tool.poetry.urls]
Homepage = "https://www.konverso.ai/"
Source = "https://github.com/konverso-ai/kbot-py-client"

[tool.poetry.dependencies]
python = ">=3.10"
requests = ">=2.27.1"

[tool.poetry.group.dev.dependencies]
pylint = "^3.3.4"
ruff = "^0.9.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint]
# Master section
extension-pkg-whitelist = []
ignore = ["CVS", ".git", ".ruff_cache", ".venv"]
ignore-patterns = []
jobs = 1
load-plugins = ["pylint.extensions.no_self_use"]
persistent = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
confidence = []
disable = [
    "invalid-name",
    "fixme",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "bare-except",
    "broad-except",
    "no-self-use",
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-instance-attributes",
    "too-many-nested-blocks",
    "too-many-statements",
    "too-many-return-statements",
    "unused-argument",
    "too-many-ancestors",
    "wildcard-import",
    "abstract-method",
    "missing-docstring"
]
enable = []

[tool.pylint.reports]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
msg-template = "{path}:{module}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
output-format = "colorized"
reports = true
score = true

[tool.pylint.refactoring]
max-nested-blocks = 5

[tool.pylint.basic]
argument-rgx = "(([a-z][A-Za-z0-9_]{2,30})|(_[a-z0-9_]*))$"
attr-rgx = "(([a-z][A-Za-z0-9_]{2,30})|(_[a-z0-9_]*))$"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
const-rgx = "(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$"
docstring-min-length = -1
function-rgx = "(([a-zA-Z][A-Za-z0-9_]{2,30})|(_[a-zA-Z0-9_]*))$"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = false
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
method-rgx = "(([a-zA-Z][a-zA-Z0-9_]{2,40})|(_[a-zA-Z0-9_]*))$"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
name-group = []
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-rgx = "(([a-z][A-Za-z0-9_]{0,30})|(_[a-z0-9_]*))$"

[tool.pylint.format]
expected-line-ending-format = "LF"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = false
single-line-if-stmt = false

[tool.pylint.spelling]
spelling-dict = ""
spelling-ignore-words = []
spelling-private-dict-file = ""
spelling-store-unknown-words = false

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = false
min-similarity-lines = 4

[tool.pylint.variables]
additional-builtins = []
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy"
ignored-argument-names = "_.*"
init-import = false
redefining-builtins-modules = ["six.moves", "future.builtins"]

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
generated-members = []
ignore-mixin-members = true
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
ignored-modules = []
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.logging]
logging-modules = ["logging"]

[tool.pylint.imports]
allow-wildcard-with-all = false
analyse-fallback-blocks = false
deprecated-modules = ["optparse", "tkinter.tix"]
ext-import-graph = ""
import-graph = ""
int-import-graph = ""
known-standard-library = []
known-third-party = ["enchant"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.Exception"]

[tool.pylint.'MASTER']
ignore-patterns = "test*.py"


[tool.pytest]
testpaths = "tests"
addopts = "-vv"
python_files = "test_*.py"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

output-format = "grouped"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    "D100",
    "D106",
    "D203",
    "D213",
    "ARG002",
    "ANN002",
    "ANN003",
    "S101",
    "FBT001",
    "FBT002",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.extend-per-file-ignores]
# Also ignore `E402` in all `__init__.py` files.
"__init__.py" = ["D104", "E402", "F401"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["kbot_client"]
