[build-system]
requires = ["setuptools>=69.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastapi-ai-sdk"
version = "0.1.0"
description = "FastAPI helper library for Vercel AI SDK backend implementation"
readme = "README.md"
authors = [{ name = "Arif Dogan", email = "me@arif.sh" }]
license = { text = "MIT" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
dependencies = [
    "fastapi>=0.115.0",
    "pydantic>=2.9.0",
    "typing-extensions>=4.12.0",
]
keywords = ["fastapi", "vercel", "ai", "sdk", "streaming", "sse", "llm"]

[project.urls]
"Homepage" = "https://github.com/doganarif/fastapi-ai-sdk"
"Bug Reports" = "https://github.com/doganarif/fastapi-ai-sdk/issues"
"Source" = "https://github.com/doganarif/fastapi-ai-sdk"
"Documentation" = "https://github.com/doganarif/fastapi-ai-sdk#readme"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.10.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.13.0",
    "httpx>=0.27.0",
    "uvicorn>=0.32.0",
    "ruff>=0.7.0",
]
examples = ["uvicorn>=0.32.0", "python-multipart>=0.0.12"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["fastapi_ai_sdk"]
default_section = "THIRDPARTY"
skip = [".venv", "venv", "build", "dist"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["fastapi_ai_sdk"]
omit = ["*/tests/*", "*/test_*.py", "*/__init__.py", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short --strict-markers"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".coverage",
]

[tool.ruff.isort]
known-first-party = ["fastapi_ai_sdk"]
