import typing as t

_C = t.TypeVar("_C", covariant=True)
class Interpolable(t.Generic[_C], t.Protocol):
    def __add__(self, other: t.Self) -> t.Self: ...
    def __sub__(self, other: t.Self) -> t.Self: ...
    def __mul__(self, other: float) -> t.Self: ...
    def __rmul__(self, other: float) -> t.Self: ...
    def __truediv__(self, other: float) -> t.Self: ...
    def __rtruediv__(self, other: float) -> t.Self: ...

    def get_interpolated_object(self) -> _C: ...


class HasInterpolator(t.Protocol):
    @property
    def interpolator(self) -> Interpolable[t.Self]: ...


Keyframe: t.TypeAlias = tuple[Interpolable[_C], float]
InterpolationFunction: t.TypeAlias = t.Callable[
    [float, Keyframe[_C], *tuple[Keyframe[_C], ...]],
    Interpolable[_C]]
Setter: t.TypeAlias = t.Callable[[_C], t.Any]