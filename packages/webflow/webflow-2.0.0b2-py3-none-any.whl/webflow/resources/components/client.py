# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.component_list import ComponentList
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...errors.bad_request_error import BadRequestError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.error import Error
from ...errors.not_found_error import NotFoundError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.component_dom import ComponentDom
from .types.component_dom_write_nodes_item import ComponentDomWriteNodesItem
from .types.components_update_content_response import ComponentsUpdateContentResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...errors.forbidden_error import ForbiddenError
from ...types.component_properties import ComponentProperties
from .types.component_properties_write_properties_item import ComponentPropertiesWritePropertiesItem
from .types.components_update_properties_response import ComponentsUpdatePropertiesResponse
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ComponentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        site_id: str,
        *,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentList:
        """
        List of all components for a site.

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentList
            Request was successful

        Examples
        --------
        from webflow import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.components.list(
            site_id="580e63e98c9a982ac9b8b741",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentList,
                    parse_obj_as(
                        type_=ComponentList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_content(
        self,
        site_id: str,
        component_id: str,
        *,
        locale_id: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentDom:
        """
        Get static content from a component definition. This includes text nodes, image nodes and nested component instances.
        To retrieve dynamic content set by component properties, use the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint.

        <Note>If you do not provide a Locale ID in your request, the response will return any content that can be localized from the Primary locale.</Note>

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentDom
            Request was successful

        Examples
        --------
        from webflow import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.components.get_content(
            site_id="580e63e98c9a982ac9b8b741",
            component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
            locale_id="65427cf400e02b306eaa04a0",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/dom",
            method="GET",
            params={
                "localeId": locale_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentDom,
                    parse_obj_as(
                        type_=ComponentDom,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_content(
        self,
        site_id: str,
        component_id: str,
        *,
        nodes: typing.Sequence[ComponentDomWriteNodesItem],
        locale_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentsUpdateContentResponse:
        """
        This endpoint updates content within a component defintion for **secondary locales**. It supports updating up to 1000 nodes in a single request.

        Before making updates:
        1. Use the [get component content](/data/reference/pages-and-components/components/get-content) endpoint to identify available content nodes and their types
        2. If your component definition has a component instance nested within it, retrieve the nested component instance's properties that you'll override using the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint

        <Note>
          This endpoint is specifically for localizing component definitions. Ensure that the specified `localeId` is a valid **secondary locale** for the site otherwise the request will fail.
        </Note>

        Required scope | `components:write`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        nodes : typing.Sequence[ComponentDomWriteNodesItem]
            List of DOM Nodes with the new content that will be updated in each node.

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentsUpdateContentResponse
            Request was successful

        Examples
        --------
        from webflow import (
            ComponentInstanceNodePropertyOverridesWrite,
            ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem,
            TextNodeWrite,
            Webflow,
        )

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.components.update_content(
            site_id="580e63e98c9a982ac9b8b741",
            component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
            locale_id="65427cf400e02b306eaa04a0",
            nodes=[
                TextNodeWrite(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    text="<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                ),
                TextNodeWrite(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text="<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                ),
                ComponentInstanceNodePropertyOverridesWrite(
                    node_id="a245c12d-995b-55ee-5ec7-aa36a6cad629",
                    property_overrides=[
                        ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem(
                            property_id="7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
                            text="<div><h1>Time is an <em>illusion</em></h1></div>",
                        ),
                        ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem(
                            property_id="7dd14c08-2e96-8d3d-2b19-b5c03642a0f1",
                            text="Life, the Universe and Everything",
                        ),
                    ],
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/dom",
            method="POST",
            params={
                "localeId": locale_id,
            },
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[ComponentDomWriteNodesItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentsUpdateContentResponse,
                    parse_obj_as(
                        type_=ComponentsUpdateContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_properties(
        self,
        site_id: str,
        component_id: str,
        *,
        locale_id: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentProperties:
        """
        Get the property default values of a component definition.

        <Note>If you do not provide a Locale ID in your request, the response will return any properties that can be localized from the Primary locale.</Note>

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentProperties
            Request was successful

        Examples
        --------
        from webflow import Webflow

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.components.get_properties(
            site_id="580e63e98c9a982ac9b8b741",
            component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
            locale_id="65427cf400e02b306eaa04a0",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/properties",
            method="GET",
            params={
                "localeId": locale_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentProperties,
                    parse_obj_as(
                        type_=ComponentProperties,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_properties(
        self,
        site_id: str,
        component_id: str,
        *,
        properties: typing.Sequence[ComponentPropertiesWritePropertiesItem],
        locale_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentsUpdatePropertiesResponse:
        """
        Update the property default values of a component definition in a specificed locale.

        Before making updates:
        1. Use the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint to identify available properties

        <Note>The request requires a secondary locale ID. If a locale is missing, the request will not be processed and will result in an error.</Note>

        Required scope | `components:write`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        properties : typing.Sequence[ComponentPropertiesWritePropertiesItem]
            A list of component properties to update within the specified secondary locale.

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentsUpdatePropertiesResponse
            Request was successful

        Examples
        --------
        from webflow import Webflow
        from webflow.resources.components import ComponentPropertiesWritePropertiesItem

        client = Webflow(
            access_token="YOUR_ACCESS_TOKEN",
        )
        client.components.update_properties(
            site_id="580e63e98c9a982ac9b8b741",
            component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
            locale_id="65427cf400e02b306eaa04a0",
            properties=[
                ComponentPropertiesWritePropertiesItem(
                    property_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    text="The Hitchhiker’s Guide to the Galaxy",
                ),
                ComponentPropertiesWritePropertiesItem(
                    property_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text="<div><h3>Dont Panic!</h3><p>Always know where your towel is.</p></div>",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/properties",
            method="POST",
            params={
                "localeId": locale_id,
            },
            json={
                "properties": convert_and_respect_annotation_metadata(
                    object_=properties,
                    annotation=typing.Sequence[ComponentPropertiesWritePropertiesItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentsUpdatePropertiesResponse,
                    parse_obj_as(
                        type_=ComponentsUpdatePropertiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncComponentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        site_id: str,
        *,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentList:
        """
        List of all components for a site.

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentList
            Request was successful

        Examples
        --------
        import asyncio

        from webflow import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )


        async def main() -> None:
            await client.components.list(
                site_id="580e63e98c9a982ac9b8b741",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentList,
                    parse_obj_as(
                        type_=ComponentList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_content(
        self,
        site_id: str,
        component_id: str,
        *,
        locale_id: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentDom:
        """
        Get static content from a component definition. This includes text nodes, image nodes and nested component instances.
        To retrieve dynamic content set by component properties, use the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint.

        <Note>If you do not provide a Locale ID in your request, the response will return any content that can be localized from the Primary locale.</Note>

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentDom
            Request was successful

        Examples
        --------
        import asyncio

        from webflow import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )


        async def main() -> None:
            await client.components.get_content(
                site_id="580e63e98c9a982ac9b8b741",
                component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
                locale_id="65427cf400e02b306eaa04a0",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/dom",
            method="GET",
            params={
                "localeId": locale_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentDom,
                    parse_obj_as(
                        type_=ComponentDom,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_content(
        self,
        site_id: str,
        component_id: str,
        *,
        nodes: typing.Sequence[ComponentDomWriteNodesItem],
        locale_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentsUpdateContentResponse:
        """
        This endpoint updates content within a component defintion for **secondary locales**. It supports updating up to 1000 nodes in a single request.

        Before making updates:
        1. Use the [get component content](/data/reference/pages-and-components/components/get-content) endpoint to identify available content nodes and their types
        2. If your component definition has a component instance nested within it, retrieve the nested component instance's properties that you'll override using the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint

        <Note>
          This endpoint is specifically for localizing component definitions. Ensure that the specified `localeId` is a valid **secondary locale** for the site otherwise the request will fail.
        </Note>

        Required scope | `components:write`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        nodes : typing.Sequence[ComponentDomWriteNodesItem]
            List of DOM Nodes with the new content that will be updated in each node.

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentsUpdateContentResponse
            Request was successful

        Examples
        --------
        import asyncio

        from webflow import (
            AsyncWebflow,
            ComponentInstanceNodePropertyOverridesWrite,
            ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem,
            TextNodeWrite,
        )

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )


        async def main() -> None:
            await client.components.update_content(
                site_id="580e63e98c9a982ac9b8b741",
                component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
                locale_id="65427cf400e02b306eaa04a0",
                nodes=[
                    TextNodeWrite(
                        node_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                        text="<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                    ),
                    TextNodeWrite(
                        node_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                        text="<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                    ),
                    ComponentInstanceNodePropertyOverridesWrite(
                        node_id="a245c12d-995b-55ee-5ec7-aa36a6cad629",
                        property_overrides=[
                            ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem(
                                property_id="7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
                                text="<div><h1>Time is an <em>illusion</em></h1></div>",
                            ),
                            ComponentInstanceNodePropertyOverridesWritePropertyOverridesItem(
                                property_id="7dd14c08-2e96-8d3d-2b19-b5c03642a0f1",
                                text="Life, the Universe and Everything",
                            ),
                        ],
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/dom",
            method="POST",
            params={
                "localeId": locale_id,
            },
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[ComponentDomWriteNodesItem], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentsUpdateContentResponse,
                    parse_obj_as(
                        type_=ComponentsUpdateContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_properties(
        self,
        site_id: str,
        component_id: str,
        *,
        locale_id: typing.Optional[str] = None,
        limit: typing.Optional[float] = None,
        offset: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentProperties:
        """
        Get the property default values of a component definition.

        <Note>If you do not provide a Locale ID in your request, the response will return any properties that can be localized from the Primary locale.</Note>

        Required scope | `components:read`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        limit : typing.Optional[float]
            Maximum number of records to be returned (max limit: 100)

        offset : typing.Optional[float]
            Offset used for pagination if the results have more than limit records

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentProperties
            Request was successful

        Examples
        --------
        import asyncio

        from webflow import AsyncWebflow

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )


        async def main() -> None:
            await client.components.get_properties(
                site_id="580e63e98c9a982ac9b8b741",
                component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
                locale_id="65427cf400e02b306eaa04a0",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/properties",
            method="GET",
            params={
                "localeId": locale_id,
                "limit": limit,
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentProperties,
                    parse_obj_as(
                        type_=ComponentProperties,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_properties(
        self,
        site_id: str,
        component_id: str,
        *,
        properties: typing.Sequence[ComponentPropertiesWritePropertiesItem],
        locale_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComponentsUpdatePropertiesResponse:
        """
        Update the property default values of a component definition in a specificed locale.

        Before making updates:
        1. Use the [get component properties](/data/reference/pages-and-components/components/get-properties) endpoint to identify available properties

        <Note>The request requires a secondary locale ID. If a locale is missing, the request will not be processed and will result in an error.</Note>

        Required scope | `components:write`

        Parameters
        ----------
        site_id : str
            Unique identifier for a Site

        component_id : str
            Unique identifier for a Component

        properties : typing.Sequence[ComponentPropertiesWritePropertiesItem]
            A list of component properties to update within the specified secondary locale.

        locale_id : typing.Optional[str]
            Unique identifier for a specific locale. Applicable, when using localization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComponentsUpdatePropertiesResponse
            Request was successful

        Examples
        --------
        import asyncio

        from webflow import AsyncWebflow
        from webflow.resources.components import ComponentPropertiesWritePropertiesItem

        client = AsyncWebflow(
            access_token="YOUR_ACCESS_TOKEN",
        )


        async def main() -> None:
            await client.components.update_properties(
                site_id="580e63e98c9a982ac9b8b741",
                component_id="8505ba55-ef72-629e-f85c-33e4b703d48b",
                locale_id="65427cf400e02b306eaa04a0",
                properties=[
                    ComponentPropertiesWritePropertiesItem(
                        property_id="a245c12d-995b-55ee-5ec7-aa36a6cad623",
                        text="The Hitchhiker’s Guide to the Galaxy",
                    ),
                    ComponentPropertiesWritePropertiesItem(
                        property_id="a245c12d-995b-55ee-5ec7-aa36a6cad627",
                        text="<div><h3>Dont Panic!</h3><p>Always know where your towel is.</p></div>",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sites/{jsonable_encoder(site_id)}/components/{jsonable_encoder(component_id)}/properties",
            method="POST",
            params={
                "localeId": locale_id,
            },
            json={
                "properties": convert_and_respect_annotation_metadata(
                    object_=properties,
                    annotation=typing.Sequence[ComponentPropertiesWritePropertiesItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ComponentsUpdatePropertiesResponse,
                    parse_obj_as(
                        type_=ComponentsUpdatePropertiesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
