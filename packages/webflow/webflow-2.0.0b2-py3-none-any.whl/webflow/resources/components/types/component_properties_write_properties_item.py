# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ....core.serialization import FieldMetadata
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ComponentPropertiesWritePropertiesItem(UniversalBaseModel):
    property_id: typing_extensions.Annotated[str, FieldMetadata(alias="propertyId")] = pydantic.Field()
    """
    The ID of the property.
    """

    text: str = pydantic.Field()
    """
    The new string or HTML value used to update the component property in the secondary locale.
    
    The provided value must be compatible with the type of the component property.
    
    For example, attempting to update a single-line plain-text property with a multi-line 
    value will result in an error.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
