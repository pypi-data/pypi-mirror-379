# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FormSubmission(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The unique ID of the Form submission
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    The Form name displayed on the site
    """

    site_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="siteId")] = pydantic.Field(
        default=None
    )
    """
    The unique ID of the Site the Form belongs to
    """

    workspace_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workspaceId")] = (
        pydantic.Field(default=None)
    )
    """
    The unique ID of the Workspace the Site belongs to
    """

    date_submitted: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="dateSubmitted")] = (
        pydantic.Field(default=None)
    )
    """
    Date that the Form was submitted on
    """

    form_response: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="formResponse")
    ] = pydantic.Field(default=None)
    """
    The data submitted in the Form
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
