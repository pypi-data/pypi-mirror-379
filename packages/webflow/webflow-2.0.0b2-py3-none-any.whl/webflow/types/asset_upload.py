# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .asset_upload_upload_details import AssetUploadUploadDetails
from ..core.serialization import FieldMetadata
import pydantic
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AssetUpload(UniversalBaseModel):
    upload_details: typing_extensions.Annotated[
        typing.Optional[AssetUploadUploadDetails], FieldMetadata(alias="uploadDetails")
    ] = pydantic.Field(default=None)
    """
    Metadata for uploading the asset binary
    """

    content_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contentType")] = None
    id: typing.Optional[str] = None
    parent_folder: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parentFolder")] = (
        pydantic.Field(default=None)
    )
    """
    Parent folder for the asset
    """

    upload_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="uploadUrl")] = None
    asset_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assetUrl")] = pydantic.Field(
        default=None
    )
    """
    S3 link to the asset
    """

    hosted_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="hostedUrl")] = pydantic.Field(
        default=None
    )
    """
    Represents the link to the asset
    """

    original_file_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originalFileName")] = (
        pydantic.Field(default=None)
    )
    """
    Original file name when uploaded. If not specified at time of upload, it may be extracted from the raw file name
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    Date the asset metadata was created
    """

    last_updated: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    Date the asset metadata was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
