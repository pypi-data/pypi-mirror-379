# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .sku_property_list import SkuPropertyList
from ..core.serialization import FieldMetadata
from .product_field_data_tax_category import ProductFieldDataTaxCategory
from .product_field_data_ec_product_type import ProductFieldDataEcProductType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ProductFieldData(UniversalBaseModel):
    """
    Contains content-specific details for a product, covering both standard (e.g., title, description)  and custom fields tailored to the product setup.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the Product
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL structure of the Product in your site.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description of your product
    """

    shippable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Boolean determining if the Product is shippable
    """

    sku_properties: typing_extensions.Annotated[
        typing.Optional[typing.List[SkuPropertyList]], FieldMetadata(alias="sku-properties")
    ] = pydantic.Field(default=None)
    """
    Variant types to include in SKUs
    """

    categories: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The categories your product belongs to.
    """

    tax_category: typing_extensions.Annotated[
        typing.Optional[ProductFieldDataTaxCategory], FieldMetadata(alias="tax-category")
    ] = pydantic.Field(default=None)
    """
    Product tax class
    """

    default_sku: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="default-sku")] = pydantic.Field(
        default=None
    )
    """
    The default SKU associated with this product.
    """

    ec_product_type: typing_extensions.Annotated[
        typing.Optional[ProductFieldDataEcProductType], FieldMetadata(alias="ec-product-type")
    ] = pydantic.Field(default=None)
    """
    <a href="https://university.webflow.com/lesson/add-and-manage-products-and-categories?topics=ecommerce#how-to-understand-product-types">Product types.</a> Enums reflect the following values in order: Physical, Digital, Service, Advanced"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
