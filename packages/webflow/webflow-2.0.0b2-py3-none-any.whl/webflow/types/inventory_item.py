# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .inventory_item_inventory_type import InventoryItemInventoryType
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class InventoryItem(UniversalBaseModel):
    """
    The availabile inventory for an item
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for a SKU item
    """

    quantity: typing.Optional[float] = pydantic.Field(default=None)
    """
    Total quantity of items remaining in inventory (if inventoryType is finite)
    """

    inventory_type: typing_extensions.Annotated[
        typing.Optional[InventoryItemInventoryType], FieldMetadata(alias="inventoryType")
    ] = pydantic.Field(default=None)
    """
    infinite or finite
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
