# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .trigger_type import TriggerType
from ..core.serialization import FieldMetadata
from .webhook_filter import WebhookFilter
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Webhook(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the Webhook registration
    """

    trigger_type: typing_extensions.Annotated[typing.Optional[TriggerType], FieldMetadata(alias="triggerType")] = None
    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL to send the Webhook payload to
    """

    workspace_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workspaceId")] = (
        pydantic.Field(default=None)
    )
    """
    Unique identifier for the Workspace the Webhook is registered in
    """

    site_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="siteId")] = pydantic.Field(
        default=None
    )
    """
    Unique identifier for the Site the Webhook is registered in
    """

    filter: typing.Optional[WebhookFilter] = pydantic.Field(default=None)
    """
    Only supported for the `form_submission` trigger type. Filter for the form you want Webhooks to be sent for.
    """

    last_triggered: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastTriggered")] = (
        pydantic.Field(default=None)
    )
    """
    Date the Webhook instance was last triggered
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    Date the Webhook registration was created
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
