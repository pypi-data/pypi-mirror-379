# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .component_property import ComponentProperty
from .pagination import Pagination
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ComponentProperties(UniversalBaseModel):
    """
    The Component Properties schema represents a list of properties that store text content. Each property has a unique identifier and can be of different types like plain text or rich text. The schema also provides pagination details for scenarios where there more properties than the limit.
    """

    component_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="componentId")] = (
        pydantic.Field(default=None)
    )
    """
    Component ID
    """

    properties: typing.Optional[typing.List[ComponentProperty]] = None
    pagination: typing.Optional[Pagination] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
