# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from .order_purchased_item_variant_image_file_variants_item import OrderPurchasedItemVariantImageFileVariantsItem
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OrderPurchasedItemVariantImageFile(UniversalBaseModel):
    size: typing.Optional[float] = pydantic.Field(default=None)
    """
    The image size in bytes
    """

    original_file_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originalFileName")] = (
        pydantic.Field(default=None)
    )
    """
    the original name of the image
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The creation timestamp of the image
    """

    content_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contentType")] = (
        pydantic.Field(default=None)
    )
    """
    The MIME type of the image
    """

    width: typing.Optional[int] = pydantic.Field(default=None)
    """
    The image width in pixels
    """

    height: typing.Optional[int] = pydantic.Field(default=None)
    """
    The image height in pixels
    """

    variants: typing.Optional[typing.List[OrderPurchasedItemVariantImageFileVariantsItem]] = pydantic.Field(
        default=None
    )
    """
    Variants of the supplied image
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
