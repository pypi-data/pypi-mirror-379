# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .order_address_type import OrderAddressType
import pydantic
import typing_extensions
from .order_address_japan_type import OrderAddressJapanType
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OrderAddress(UniversalBaseModel):
    """
    A customer address
    """

    type: typing.Optional[OrderAddressType] = pydantic.Field(default=None)
    """
    The type of the order address (billing or shipping)
    """

    japan_type: typing_extensions.Annotated[
        typing.Optional[OrderAddressJapanType], FieldMetadata(alias="japanType")
    ] = pydantic.Field(default=None)
    """
    Represents a Japan-only address format. This field will only appear on orders placed from Japan.
    """

    addressee: typing.Optional[str] = pydantic.Field(default=None)
    """
    Display name on the address
    """

    line_1: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="line1")] = pydantic.Field(
        default=None
    )
    """
    The first line of the address
    """

    line_2: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="line2")] = pydantic.Field(
        default=None
    )
    """
    The second line of the address
    """

    city: typing.Optional[str] = pydantic.Field(default=None)
    """
    The city of the address.
    """

    state: typing.Optional[str] = pydantic.Field(default=None)
    """
    The state or province of the address
    """

    country: typing.Optional[str] = pydantic.Field(default=None)
    """
    The country of the address
    """

    postal_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="postalCode")] = pydantic.Field(
        default=None
    )
    """
    The postal code of the address
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
