# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .bulk_collection_item_field_data import BulkCollectionItemFieldData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BulkCollectionItem(UniversalBaseModel):
    """
    The fields that define the schema for a given Item are based on the Collection that Item belongs to. Beyond the user defined fields, there are a handful of additional fields that are automatically created for all items
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the Item
    """

    cms_locale_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="cmsLocaleIds")
    ] = pydantic.Field(default=None)
    """
    Array of identifiers for the locales where the item will be created
    """

    last_published: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lastPublished")] = (
        pydantic.Field(default=None)
    )
    """
    The date the item was last published
    """

    last_updated: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The date the item was last updated
    """

    created_on: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdOn")] = pydantic.Field(
        default=None
    )
    """
    The date the item was created
    """

    is_archived: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArchived")] = pydantic.Field(
        default=None
    )
    """
    Boolean determining if the Item is set to archived
    """

    is_draft: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isDraft")] = pydantic.Field(
        default=None
    )
    """
    Boolean determining if the Item is set to draft
    """

    field_data: typing_extensions.Annotated[
        typing.Optional[BulkCollectionItemFieldData], FieldMetadata(alias="fieldData")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
