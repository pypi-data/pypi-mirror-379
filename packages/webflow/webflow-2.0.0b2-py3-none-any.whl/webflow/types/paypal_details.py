# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class PaypalDetails(UniversalBaseModel):
    order_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="orderId")] = pydantic.Field(
        default=None
    )
    """
    PayPal order identifier
    """

    payer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="payerId")] = pydantic.Field(
        default=None
    )
    """
    PayPal payer identifier
    """

    capture_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="captureId")] = pydantic.Field(
        default=None
    )
    """
    PayPal capture identifier
    """

    refund_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="refundId")] = pydantic.Field(
        default=None
    )
    """
    PayPal refund identifier
    """

    refund_reason: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="refundReason")] = (
        pydantic.Field(default=None)
    )
    """
    PayPal-issued reason for the refund
    """

    dispute_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="disputeId")] = pydantic.Field(
        default=None
    )
    """
    PayPal dispute identifier
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
