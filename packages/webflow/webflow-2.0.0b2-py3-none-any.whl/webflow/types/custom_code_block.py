# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .custom_code_block_type import CustomCodeBlockType
from .scripts import Scripts
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CustomCodeBlock(UniversalBaseModel):
    """
    A specific instance of Custom Code applied to a Site or Page
    """

    site_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="siteId")] = pydantic.Field(
        default=None
    )
    """
    The Site ID where the custom code was applied
    """

    page_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pageId")] = pydantic.Field(
        default=None
    )
    """
    The Page ID (if applied at Page-level)
    """

    type: typing.Optional[CustomCodeBlockType] = pydantic.Field(default=None)
    """
    Whether the Custom Code script is applied at the Site-level or Page-level
    """

    scripts: typing.Optional[Scripts] = None
    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Block was created
    """

    last_updated: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Block was most recently updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
