# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CollectionListArrayItem(UniversalBaseModel):
    """
    A collection object
    """

    id: str = pydantic.Field()
    """
    Unique identifier for a Collection
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    Name given to the Collection
    """

    singular_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="singularName")] = (
        pydantic.Field(default=None)
    )
    """
    The name of one Item in Collection (e.g. ”Blog Post” if the Collection is called “Blog Posts”)
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    Slug of Collection in Site URL structure
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The date the collection was created
    """

    last_updated: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The date the collection was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
