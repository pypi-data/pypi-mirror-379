# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from .collection_item_post_single_field_data import CollectionItemPostSingleFieldData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CollectionItemPostSingle(UniversalBaseModel):
    """
    A Collection Item represents a single entry in your collection. Each item includes:

    - **System metadata** - Automatically managed fields like IDs and timestamp <br/>
    - **Status flags** - Controls for managing content state: `isDraft`, `isArchived `<br/>
    - **Content fields** - Stored in `fieldData`. Each item needs a `name` and `slug`, and may include additional fields matching your collection's schema definition.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the Item
    """

    cms_locale_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cmsLocaleId")] = (
        pydantic.Field(default=None)
    )
    """
    Identifier for the locale of the CMS item
    """

    last_published: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lastPublished")] = (
        pydantic.Field(default=None)
    )
    """
    The date the item was last published
    """

    last_updated: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The date the item was last updated
    """

    created_on: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdOn")] = pydantic.Field(
        default=None
    )
    """
    The date the item was created
    """

    is_archived: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArchived")] = pydantic.Field(
        default=None
    )
    """
    Boolean determining if the Item is in an archived state.
    """

    is_draft: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isDraft")] = pydantic.Field(
        default=None
    )
    """
    Boolean determining if the Item is in a draft state.
    """

    field_data: typing_extensions.Annotated[CollectionItemPostSingleFieldData, FieldMetadata(alias="fieldData")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
