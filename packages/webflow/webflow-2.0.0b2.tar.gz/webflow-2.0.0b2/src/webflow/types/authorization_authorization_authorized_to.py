# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AuthorizationAuthorizationAuthorizedTo(UniversalBaseModel):
    site_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.Optional[typing.Any]]], FieldMetadata(alias="siteIds")
    ] = pydantic.Field(default=None)
    """
    Array of Sites this app is authorized to
    """

    workspace_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.Optional[typing.Any]]], FieldMetadata(alias="workspaceIds")
    ] = pydantic.Field(default=None)
    """
    Array of Workspaces this app is authorized to
    """

    user_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.Optional[typing.Any]]], FieldMetadata(alias="userIds")
    ] = pydantic.Field(default=None)
    """
    Array of Users this app is authorized to
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
