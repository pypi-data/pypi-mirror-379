# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import datetime as dt
from .page_seo import PageSeo
from .page_open_graph import PageOpenGraph
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Page(UniversalBaseModel):
    """
    The Page object
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the Page
    """

    site_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="siteId")] = pydantic.Field(
        default=None
    )
    """
    Unique identifier for the Site
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Title of the Page
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    slug of the Page (derived from title)
    """

    parent_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parentId")] = pydantic.Field(
        default=None
    )
    """
    Identifier of the parent folder
    """

    collection_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="collectionId")] = (
        pydantic.Field(default=None)
    )
    """
    Unique identifier for a linked Collection, value will be null if the Page is not part of a Collection.
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Page was created
    """

    last_updated: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Page was most recently updated
    """

    archived: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the Page has been archived
    """

    draft: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the Page is a draft
    """

    can_branch: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="canBranch")] = pydantic.Field(
        default=None
    )
    """
    Indicates whether the Page supports [Page Branching](https://university.webflow.com/lesson/page-branching)
    """

    is_branch: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isBranch")] = pydantic.Field(
        default=None
    )
    """
    Indicates whether the Page is a Branch of another Page [Page Branching](https://university.webflow.com/lesson/page-branching)
    """

    is_members_only: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isMembersOnly")] = (
        pydantic.Field(default=None)
    )
    """
    Indicates whether the Page is restricted by [Memberships Controls](https://university.webflow.com/lesson/webflow-memberships-overview#how-to-manage-page-restrictions)
    """

    seo: typing.Optional[PageSeo] = pydantic.Field(default=None)
    """
    SEO-related fields for the Page
    """

    open_graph: typing_extensions.Annotated[typing.Optional[PageOpenGraph], FieldMetadata(alias="openGraph")] = (
        pydantic.Field(default=None)
    )
    """
    Open Graph fields for the Page
    """

    locale_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="localeId")] = pydantic.Field(
        default=None
    )
    """
    Unique ID of the page locale
    """

    published_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="publishedPath")] = (
        pydantic.Field(default=None)
    )
    """
    Relative path of the published page URL
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
