# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class AssetUploadUploadDetails(UniversalBaseModel):
    """
    Metadata for uploading the asset binary
    """

    acl: typing.Optional[str] = None
    bucket: typing.Optional[str] = None
    x_amz_algorithm: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="X-Amz-Algorithm")] = None
    x_amz_credential: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="X-Amz-Credential")] = None
    x_amz_date: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="X-Amz-Date")] = None
    key: typing.Optional[str] = None
    policy: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Policy")] = None
    x_amz_signature: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="X-Amz-Signature")] = None
    success_action_status: typing.Optional[str] = None
    content_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="content-type")] = None
    cache_control: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Cache-Control")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
