# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AccessGroup(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the Access Group
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the the Access Group
    """

    short_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="shortId")] = pydantic.Field(
        default=None
    )
    """
    Shortened unique identifier based on name, optimized for its use in the userâ€™s JWT
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    Shortened unique identifier based on name, optimized for human readability and public API use
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Access Group was created
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
