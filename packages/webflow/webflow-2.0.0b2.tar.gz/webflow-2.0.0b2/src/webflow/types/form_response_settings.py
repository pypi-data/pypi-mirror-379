# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FormResponseSettings(UniversalBaseModel):
    """
    Settings for form responses
    """

    redirect_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The url or path to redirect the user to after form submission
    """

    redirect_method: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectMethod")] = (
        pydantic.Field(default=None)
    )
    """
    The HTTP request method to use for the redirectUrl (eg. POST or GET)
    """

    redirect_action: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectAction")] = (
        pydantic.Field(default=None)
    )
    """
    The action to take after form submission
    """

    send_email_confirmation: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="sendEmailConfirmation")
    ] = pydantic.Field(default=None)
    """
    Whether to send an email confirmation to the user
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
