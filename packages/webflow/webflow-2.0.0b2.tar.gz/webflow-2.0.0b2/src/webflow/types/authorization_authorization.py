# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
import datetime as dt
from ..core.serialization import FieldMetadata
from .authorization_authorization_authorized_to import AuthorizationAuthorizationAuthorizedTo
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AuthorizationAuthorization(UniversalBaseModel):
    """
    The Authorization object
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The unique ID of the Authorization instance
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Authorization was created
    """

    last_used: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUsed")] = (
        pydantic.Field(default=None)
    )
    """
    The date the Authorization was last used
    """

    grant_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="grantType")] = pydantic.Field(
        default=None
    )
    """
    The grant type of the Authorization
    """

    rate_limit: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="rateLimit")] = pydantic.Field(
        default=None
    )
    """
    The default rate limit for the Authorization (requests/min)
    """

    scope: typing.Optional[str] = pydantic.Field(default=None)
    """
    Comma separted list of OAuth scopes corresponding to the Authorization
    """

    authorized_to: typing_extensions.Annotated[
        typing.Optional[AuthorizationAuthorizationAuthorizedTo], FieldMetadata(alias="authorizedTo")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
