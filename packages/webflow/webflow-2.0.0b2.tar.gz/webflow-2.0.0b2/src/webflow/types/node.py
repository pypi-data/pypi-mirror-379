# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .text_node_text import TextNodeText
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .image_node_image import ImageNodeImage
import typing_extensions
from ..core.serialization import FieldMetadata
from .component_property import ComponentProperty


class Node_Text(UniversalBaseModel):
    """
    A generic representation of a content element within the Document Object Model (DOM). Each node has a unique identifier and a specific type that determines its content structure and attributes.
    """

    type: typing.Literal["text"] = "text"
    id: typing.Optional[str] = None
    text: typing.Optional[TextNodeText] = None
    attributes: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Node_Image(UniversalBaseModel):
    """
    A generic representation of a content element within the Document Object Model (DOM). Each node has a unique identifier and a specific type that determines its content structure and attributes.
    """

    type: typing.Literal["image"] = "image"
    id: typing.Optional[str] = None
    image: typing.Optional[ImageNodeImage] = None
    attributes: typing.Optional[typing.Dict[str, str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Node_ComponentInstance(UniversalBaseModel):
    """
    A generic representation of a content element within the Document Object Model (DOM). Each node has a unique identifier and a specific type that determines its content structure and attributes.
    """

    type: typing.Literal["component-instance"] = "component-instance"
    id: typing.Optional[str] = None
    component_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="componentId")] = None
    property_overrides: typing_extensions.Annotated[
        typing.Optional[typing.List[ComponentProperty]], FieldMetadata(alias="propertyOverrides")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Node = typing.Union[Node_Text, Node_Image, Node_ComponentInstance]
