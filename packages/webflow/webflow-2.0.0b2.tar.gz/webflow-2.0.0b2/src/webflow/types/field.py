# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import typing
from .field_type import FieldType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Field(UniversalBaseModel):
    """
    The details of a field in a collection
    """

    id: str = pydantic.Field()
    """
    Unique identifier for a Field
    """

    is_required: typing_extensions.Annotated[bool, FieldMetadata(alias="isRequired")] = pydantic.Field()
    """
    define whether a field is required in a collection
    """

    is_editable: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isEditable")] = pydantic.Field(
        default=None
    )
    """
    Define whether the field is editable
    """

    type: FieldType = pydantic.Field()
    """
    Choose these appropriate field type for your collection data
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    Slug of Field in Site URL structure. Slugs should be all lowercase with no spaces. Any spaces will be converted to "-."
    """

    display_name: typing_extensions.Annotated[str, FieldMetadata(alias="displayName")] = pydantic.Field()
    """
    The name of a field
    """

    help_text: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="helpText")] = pydantic.Field(
        default=None
    )
    """
    Additional text to help anyone filling out this field
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
