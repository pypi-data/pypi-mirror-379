# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from .user_status import UserStatus
from .user_access_groups_item import UserAccessGroupsItem
from .user_data import UserData
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class User(UniversalBaseModel):
    """
    The fields that define the schema for a given Item are based on the Collection that Item belongs to. Beyond the user defined fields, there are a handful of additional fields that are automatically created for all items
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the User
    """

    is_email_verified: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isEmailVerified")] = (
        pydantic.Field(default=None)
    )
    """
    Shows whether the user has verified their email address
    """

    last_updated: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp the user was updated
    """

    invited_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="invitedOn")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp the user was invited
    """

    created_on: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdOn")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp the user was created
    """

    last_login: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastLogin")] = (
        pydantic.Field(default=None)
    )
    """
    The timestamp the user was logged in
    """

    status: typing.Optional[UserStatus] = pydantic.Field(default=None)
    """
    The status of the user
    """

    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[UserAccessGroupsItem]], FieldMetadata(alias="accessGroups")
    ] = pydantic.Field(default=None)
    """
    Access groups the user belongs to
    """

    data: typing.Optional[UserData] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
