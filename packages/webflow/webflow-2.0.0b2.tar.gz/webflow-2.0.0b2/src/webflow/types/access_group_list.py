# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .access_group import AccessGroup
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AccessGroupList(UniversalBaseModel):
    """
    The list access groups results
    """

    count: typing.Optional[float] = pydantic.Field(default=None)
    """
    Number of access groups returned
    """

    limit: typing.Optional[float] = pydantic.Field(default=None)
    """
    The limit specified in the request
    """

    offset: typing.Optional[float] = pydantic.Field(default=None)
    """
    The offset specified for pagination
    """

    total: typing.Optional[float] = pydantic.Field(default=None)
    """
    Total number of access groups in the collection
    """

    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[AccessGroup]], FieldMetadata(alias="accessGroups")
    ] = pydantic.Field(default=None)
    """
    List of Site Access Groups
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
