# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .component_property_type import ComponentPropertyType
from .text import Text
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ComponentProperty(UniversalBaseModel):
    """
    Represents a property of a component instance in the DOM. A property contains a list of both the raw text and the HTML representation, allowing for flexibility in rendering and processing. Additional attributes can be associated with the text for styling or other purposes.
    """

    property_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="propertyId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the property.
    """

    type: typing.Optional[ComponentPropertyType] = pydantic.Field(default=None)
    """
    The type of the property.
    """

    label: typing.Optional[str] = pydantic.Field(default=None)
    """
    The label of the property in the UI.
    """

    text: typing.Optional[Text] = pydantic.Field(default=None)
    """
    Represents text content within the DOM. It contains both the raw text and its HTML representation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
