# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .stripe_card_brand import StripeCardBrand
from .stripe_card_expires import StripeCardExpires
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class StripeCard(UniversalBaseModel):
    """
    Details on the card used to fulfill this order, if this order was finalized with Stripe.
    """

    last_4: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="last4")] = pydantic.Field(
        default=None
    )
    """
    The last 4 digits on the card as a string
    """

    brand: typing.Optional[StripeCardBrand] = pydantic.Field(default=None)
    """
    The card's brand (ie. credit card network)
    """

    owner_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ownerName")] = pydantic.Field(
        default=None
    )
    """
    The name on the card.
    """

    expires: typing.Optional[StripeCardExpires] = pydantic.Field(default=None)
    """
    The card's expiration date.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
