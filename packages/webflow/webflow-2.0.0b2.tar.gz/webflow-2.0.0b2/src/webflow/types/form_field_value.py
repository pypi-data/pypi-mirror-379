# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .form_field_value_type import FormFieldValueType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FormFieldValue(UniversalBaseModel):
    """
    An object containing field info for a specific fieldID.
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    The field name displayed on the site
    """

    type: typing.Optional[FormFieldValueType] = pydantic.Field(default=None)
    """
    The field type
    """

    placeholder: typing.Optional[str] = pydantic.Field(default=None)
    """
    The placeholder text for the field
    """

    user_visible: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="userVisible")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the field is visible to the user
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
