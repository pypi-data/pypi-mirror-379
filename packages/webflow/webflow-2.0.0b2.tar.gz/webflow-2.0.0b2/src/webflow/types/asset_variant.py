# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AssetVariant(UniversalBaseModel):
    hosted_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="hostedUrl")] = pydantic.Field(
        default=None
    )
    """
    URL of where the asset variant is hosted
    """

    original_file_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originalFileName")] = (
        pydantic.Field(default=None)
    )
    """
    Original file name of the variant
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    Display name of the variant
    """

    format: typing.Optional[str] = pydantic.Field(default=None)
    """
    format of the variant
    """

    width: typing.Optional[int] = pydantic.Field(default=None)
    """
    Width in pixels
    """

    height: typing.Optional[int] = pydantic.Field(default=None)
    """
    Height in pixels
    """

    quality: typing.Optional[int] = pydantic.Field(default=None)
    """
    Value between 0 and 100 representing the image quality
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Any associated validation errors
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
