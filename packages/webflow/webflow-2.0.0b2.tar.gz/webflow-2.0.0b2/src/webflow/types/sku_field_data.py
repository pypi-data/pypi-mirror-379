# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .sku_value_list import SkuValueList
from ..core.serialization import FieldMetadata
import pydantic
from .sku_field_data_price import SkuFieldDataPrice
from .sku_field_data_compare_at_price import SkuFieldDataCompareAtPrice
from .sku_field_data_ec_sku_billing_method import SkuFieldDataEcSkuBillingMethod
from .sku_field_data_ec_sku_subscription_plan import SkuFieldDataEcSkuSubscriptionPlan
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SkuFieldData(UniversalBaseModel):
    """
    Standard and Custom fields for a SKU
    """

    sku_values: typing_extensions.Annotated[typing.Optional[SkuValueList], FieldMetadata(alias="sku-values")] = None
    name: str = pydantic.Field()
    """
    Name of the Product
    """

    slug: str = pydantic.Field()
    """
    URL structure of the Product in your site.
    """

    price: SkuFieldDataPrice = pydantic.Field()
    """
    price of SKU
    """

    compare_at_price: typing_extensions.Annotated[
        typing.Optional[SkuFieldDataCompareAtPrice], FieldMetadata(alias="compare-at-price")
    ] = pydantic.Field(default=None)
    """
    comparison price of SKU
    """

    ec_sku_billing_method: typing_extensions.Annotated[
        typing.Optional[SkuFieldDataEcSkuBillingMethod], FieldMetadata(alias="ec-sku-billing-method")
    ] = None
    ec_sku_subscription_plan: typing_extensions.Annotated[
        typing.Optional[SkuFieldDataEcSkuSubscriptionPlan], FieldMetadata(alias="ec-sku-subscription-plan")
    ] = None
    track_inventory: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="track-inventory")] = (
        pydantic.Field(default=None)
    )
    """
    A boolean indicating whether inventory for this product should be tracked.
    """

    quantity: typing.Optional[float] = pydantic.Field(default=None)
    """
    Quantity of SKU that will be tracked as items are ordered.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
