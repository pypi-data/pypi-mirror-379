# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CustomCodeHostedResponse(UniversalBaseModel):
    """
    Registered custom code for application
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Human readable id, derived from the user-specified display name
    """

    can_copy: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="canCopy")] = pydantic.Field(
        default=None
    )
    """
    Define whether the script can be copied on site duplication and transfer
    """

    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = (
        pydantic.Field(default=None)
    )
    """
    User-facing name for the script. Must be between 1 and 50 alphanumeric characters
    """

    hosted_location: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="hostedLocation")] = (
        pydantic.Field(default=None)
    )
    """
    URI for an externally hosted script location
    """

    integrity_hash: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="integrityHash")] = (
        pydantic.Field(default=None)
    )
    """
    Sub-Resource Integrity Hash. Only required for externally hosted scripts (passed via hostedLocation)
    """

    created_on: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="createdOn")] = pydantic.Field(
        default=None
    )
    """
    Timestamp when the script version was created
    """

    last_updated: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the script version was last updated
    """

    version: typing.Optional[str] = pydantic.Field(default=None)
    """
    A Semantic Version (SemVer) string, denoting the version of the script
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
