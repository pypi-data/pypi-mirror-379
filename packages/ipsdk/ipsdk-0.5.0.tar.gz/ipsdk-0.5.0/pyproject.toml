[project]
name = "ipsdk"
description = "Itential Python SDK"

license = {text = "GPL-3.0-or-later"}
readme = "README.md"
requires-python = ">=3.8"

dependencies = [
    "httpx>=0.28.1"
]

dynamic = [
    "version"
]

keywords = [
    "itential",
    "automation",
    "platform",
    "gateway",
    "rest",
    "api",
]


classifiers = [
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[[project.authors]]
name = "Itential"
email = "opensource@itential.com"

[project.urls]
Homepage = "https://itential.com"
Repository = "https://github.com/itential/ipsdk"
Documentation = "https://github.com/itential/ipsdk"


[dependency-groups]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "q",
    "ruff",
    "mypy",
    "coverage",
    "build",
    "bandit[toml]",
    "pre-commit",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.setuptools.dynamic]
version = { attr = "ipsdk.metadata.version" } 

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"


[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    # pycodestyle
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    # Pyflakes
    "F",     # Pyflakes
    # pyupgrade
    "UP",    # pyupgrade
    # flake8-bugbear
    "B",     # flake8-bugbear
    # flake8-simplify
    "SIM",   # flake8-simplify
    # isort
    "I",     # isort
    # flake8-comprehensions
    "C4",    # flake8-comprehensions
    # flake8-pie
    "PIE",   # flake8-pie
    # flake8-unused-arguments
    "ARG",   # flake8-unused-arguments
    # flake8-use-pathlib
    "PTH",   # flake8-use-pathlib
    # flake8-quotes
    "Q",     # flake8-quotes
    # flake8-return
    "RET",   # flake8-return
    # flake8-raise
    "RSE",   # flake8-raise
    # flake8-self
    "SLF",   # flake8-self
    # flake8-type-checking
    "TCH",   # flake8-type-checking
    # pylint
    "PL",    # pylint
    # pygrep-hooks
    "PGH",   # pygrep-hooks
    # Ruff-specific rules
    "RUF",   # Ruff-specific rules
    # flake8-logging-format
    "G",     # flake8-logging-format
    # flake8-annotations
    "ANN",   # flake8-annotations
    # flake8-async
    "ASYNC", # flake8-async
    # flake8-bandit
    "S",     # flake8-bandit (security)
    # flake8-boolean-trap
    "FBT",   # flake8-boolean-trap
    # flake8-datetime
    "DTZ",   # flake8-datetime
    # flake8-errmsg
    "EM",    # flake8-errmsg
    # flake8-executable
    "EXE",   # flake8-executable
    # flake8-implicit-str-concat
    "ISC",   # flake8-implicit-str-concat
    # flake8-import-conventions
    "ICN",   # flake8-import-conventions
    # flake8-logging
    "LOG",   # flake8-logging
    # flake8-no-pep420
    "INP",   # flake8-no-pep420
    # flake8-print
    "T20",   # flake8-print
    # flake8-pytest-style
    "PT",    # flake8-pytest-style
    # flake8-slots
    "SLOT",  # flake8-slots
    # flake8-tidy-imports
    "TID",   # flake8-tidy-imports
    # tryceratops
    "TRY",   # tryceratops
    # perflint
    "PERF",  # perflint
    # refurb
    "FURB",  # refurb
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords (S105, S106 - hardcoded strings, S107 - default params)
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow assert statements (used for internal validation in SDK)
    "S101",
    # Allow subprocess without shell=False (we control the input)
    "S603",
    # Allow start-process-with-partial-path
    "S607",
    # Allow use of `typing.Any`
    "ANN401",
    # Allow missing docstrings for magic methods
    "D105",
    # Allow missing docstrings in __init__
    "D107",
    # Allow relative imports for local packages
    "TID252",
    # Allow catching broad exceptions (necessary for HTTP client)
    "BLE001",
    # Allow raise without from inside except
    "TRY200",
    # Allow too many return statements
    "PLR0911",
    # Allow too many arguments
    "PLR0913",
    # Allow implicit string concatenation (useful for long strings)
    "ISC001",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = [
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of assert detected
    "TID252",   # Relative imports from parent modules are banned
    "ANN",      # Missing type annotations
    "ARG",      # Unused function arguments
    "FBT",      # Boolean trap
    "PT011",    # pytest.raises too broad
    "SLF001",   # Private member accessed (tests need to access private methods)
    "TRY301",   # Abstract raise to inner function (acceptable in test patterns)
    "PT017",    # Assert on exception in except block (acceptable test pattern)
    "PERF203",  # try-except within loop (acceptable in tests)
]

# Public API functions can use boolean parameters
"src/ipsdk/connection.py" = [
    "FBT001",   # Boolean-typed positional argument (part of public API)
    "FBT002",   # Boolean default positional argument (part of public API)
    "TRY301",   # Abstract raise to inner function (acceptable for error handling)
]

"src/ipsdk/platform.py" = [
    "FBT001",   # Boolean-typed positional argument (part of public API)
    "FBT002",   # Boolean default positional argument (part of public API)
    "TRY301",   # Abstract raise to inner function (acceptable for error handling)
]

"src/ipsdk/gateway.py" = [
    "FBT001",   # Boolean-typed positional argument (part of public API)
    "FBT002",   # Boolean default positional argument (part of public API)
]

"src/ipsdk/exceptions.py" = [
    "S110",     # try-except-pass (intentional for error handling)
]

"src/ipsdk/logging.py" = [
    "FBT001",   # Boolean-typed positional argument (part of public API)
    "FBT002",   # Boolean default positional argument (part of public API)
    "G004",     # Logging statement uses f-string (acceptable for informational logging)
    "E501",     # Line too long (docstrings can be longer)
]

[tool.ruff.lint.isort]
known-first-party = ["ipsdk"]
force-single-line = true

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.lint.flake8-type-checking]
strict = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
# Security exceptions for SDK development:
# B101: assert_used - Asserts used for internal validation and type checking
# B107: hardcoded_password_default - Default values are examples for documentation only
# B110: try_except_pass - Intentional pass in exception handling for graceful degradation
skips = ["B101", "B107", "B110"]

# Additional bandit configuration
[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
