[project]
name = "sicoob-sdk"
version = "0.1.27"
description = "A Python SDK for Sicoob API"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Fábio Thomaz", email = "fabio@ladder.dev.br"}
]
license = "MIT"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "requests>=2.25.1",
    "python-dotenv>=0.15.0",
    "requests-pkcs12>=1.25",
    "pypix-api==0.7.0",
    "aiohttp>=3.8.0",
    "aiofiles>=24.0.0",
    "pytest-asyncio>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.6.1",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "ruff>=0.4.2",
]


[tool.ruff]
# Configurações base do Ruff
line-length = 88
exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by black)
    "S101", # Use of print (handled by black)
    "ANN401", # Dynamically typed expressions (Any) - comum em frameworks
    "S301", # Pickle usage - controlado internamente para cache
    "S110", # Try-except-pass - aceitável para operações best-effort
    "ANN204", # Missing return type annotation for special method
    "ANN202", # Missing return type annotation for private function
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "B904", # Raise without from inside except - pode ser aceitável
    "C901", # Complex structure - algumas funções precisam ser complexas
    "RUF012", # Mutable class default - dataclasses com defaults mutáveis
    "B023", # Function uses loop variable - comportamento aceitável
    "S311", # Random usage - usado para jitter, não criptografia
    "F821", # Undefined name - será corrigido em desenvolvimento
]

# Configurações específicas
[tool.ruff.lint.isort]
known-first-party = ["sicoob"]

[tool.ruff.format]
quote-style = "single"

# Configuração do coverage
[tool.coverage.run]
source = ["sicoob"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

# Configuração do pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=sicoob",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "myst-parser>=4.0.1",
    "pytest-cov>=6.2.1",
    "sphinx>=8.1.3",
    "sphinx-autodoc-typehints>=3.0.1",
    "sphinx-rtd-theme>=3.0.2",
]
