quiz_info:
  min_supported_app_version: 0.0.18
user_info:
  email: Клондайк аналитика
quizes:
  python_basics:
    title: Основы Python
    questions:
      Изменить порядок слов в предложении:
        text: 'Дано предложение, без запятых, только английские символы, используются
          только строчные буквы.

          Написать функцию, меняющую порядок слов в предложении на обратный.

          Например ''the sky is blue'' -> ''blue is sky the'''
        code_template: "def solution(s: str) -> str:\n  pass"
        code: "def solution(s: str) -> str:\n  return \" \".join(reversed(s.split()))"
        test_cases:
        - s: hello
          expected: hello
        - s: hello world
          expected: world hello
        - s: all work and no play makes jack a dull boy
          expected: boy dull a jack makes play no and work all
        is_passed: passed
        params:
          s: str
          return: str
      Сумма всех четных чисел до N:
        text: Напишите функцию, которая вычисляем сумму всех четных чисел в промежутке
          от 1 до N, включая N.
        code_template: "def solution(n: int):\n  return 0"
        code: "def solution(n: int):\n  return sum(x for x in range(n+1) if x % 2\
          \ == 0)"
        test_cases:
        - n: 1
          expected: 0
        - n: 10
          expected: 30
        - n: 19
          expected: 90
        is_passed: passed
        params:
          n: int
          return: int
      Разворот числа:
        text: ' Напишите программу, которая развернет число: 12345 -> 54321. Для отрицательных
          чисел вернуть тоже самое число (без разворотов). Считаем, что функция принимает
          только натуральные числа.'
        code_template: "def solution(n: int):\n  return n"
        code: "def solution(n: int):\n  return \"\".join(reversed(str(n)))"
        test_cases:
        - n: 0
          expected: 0
        - n: 123
          expected: 321
        - n: 123456
          expected: 654321
        is_passed: passed
        params:
          n: int
          return: int
  more_difficult_tasks:
    title: Сложные задачи по Python
    questions:
      Самый длинный префикс:
        text: 'Дан список слов. Найти самый длинный префикс.

          Например, [''flower'', ''flow'', ''flight''] -> ''fl'''
        code_template: "def solution(words: list[str]) -> str:\n\treturn ''"
        code: "def solution(words: list[str]) -> str:\n\t\n\tdef get_prefix(pref_len:\
          \ int) -> list[str]:\n\t\treturn [\n\t\t\tw[:pref_len] for w in words\n\t\
          \t]\n\t\n\t\n\tmin_common_len = min(len(w) for w in words)\n\tfor l in range(min_common_len,0,-1):\n\
          \t\tprefixes = get_prefix(l)\n\t\tare_the_same = len(set(prefixes)) == 1\n\
          \t\tif are_the_same:\n\t\t\treturn prefixes[0]\n\treturn ''"
        test_cases:
        - words:
          - flower
          - flow
          - flight
          expected: fl
        - words:
          - abc
          - xyz
          - hgf
          expected: ''
        - words:
          - europe
          - europe
          - europe
          expected: europe
        is_passed: passed
        params:
          words: list
          return: str
      Сумма чисел:
        text: ' Дан массив чисел и число target. Написать функцию, которая вернет
          список, состоящий из двух индексов элементов, которые в сумме дают число
          target. Допустим, что в массиве существует только одна пара таких элементов'
        code_template: "def solution(nums: list, target: int) -> list[int]:\n\treturn\
          \ []"
        code: "def solution(nums: list, target: int) -> list[int]:\n\tdef get_freq_dict()\
          \ -> dict[int, int]:\n\t\tfreq = {}\n\t\tfor i,n in enumerate(nums):\n\t\
          \t\tfreq[n] = i\n\t\treturn freq\n\t\n\tfreq = get_freq_dict()\n\tfor i,n\
          \ in enumerate(nums):\n\t\tother = target - n\n\t\tif other in freq:\n\t\
          \t\treturn [i, freq[other]] \n\traise ValueError(\"Fail to find pair\")\n\
          \t"
        test_cases:
        - nums:
          - 2
          - 7
          - 11
          - 15
          target: 9
          expected:
          - 0
          - 1
        is_passed: passed
        params:
          nums: list
          target: int
          return: list
      Группировка палиндромов:
        text: 'Написать функцию, которая группирует слова-палиндромы вместе.

          Например для списка слов [''eat'',''tea'',''the'',''teh'',''hte'',''abc'',''edf'']
          функция должна вернуть

          [[''eat'',''tea''], [''the'',''teh'',''hte''], ''abc'',''edf'']'
        code_template: "def solution(words: list):\n\treturn []"
        code: "def solution(words: list):\n\twords_dict = dict()\n\tfor w in words:\n\
          \t\tsorted_word = \"\".join(sorted(w))\n\t\tif sorted_word not in words_dict:\n\
          \t\t\twords_dict[sorted_word] = [w]\n\t\telse:\n\t\t\twords_dict[sorted_word].append(w)\n\
          \tfinal_list = [\n\t\tlst if len(lst) > 1 else lst[0]\n\t\t for lst in words_dict.values()\n\
          \t]\n\treturn final_list"
        test_cases:
        - words:
          - eat
          - tea
          - the
          - teh
          - hte
          - abc
          - edf
          expected:
          - - eat
            - tea
          - - the
            - teh
            - hte
          - abc
          - edf
        is_passed: passed
        params:
          words: list
          return: list
      Поиск подстрок:
        text: 'Написать функцию, которая ищет позиции всех вхождений подстроки subs

          в строке long_string. Номера позиций начинаются с нуля.

          Например подстрока "hello" встречается в строке "hello, world, all people
          hello"

          два раза: на позиции 0 (начало строки) и 25. Т.е. для этих параметров

          функция вернет спис'
        code_template: "def solution(subs: str, long_string: str):\n\treturn []"
        code: "def solution(subs: str, long_string: str):\n\tindexes = []\n\tfor i\
          \ in range(len(long_string) - len(subs) + 1):\n\t\ts = long_string[i:i+len(subs)]\n\
          \t\tif s == subs:\n\t\t\tindexes.append(i)\n\treturn indexes"
        test_cases:
        - subs: abc
          long_string: _abc_abc
          expected:
          - 1
          - 5
        - subs: hello
          long_string: hello world hello
          expected:
          - 0
          - 12
        is_passed: passed
        params:
          subs: str
          long_string: str
          return: list
