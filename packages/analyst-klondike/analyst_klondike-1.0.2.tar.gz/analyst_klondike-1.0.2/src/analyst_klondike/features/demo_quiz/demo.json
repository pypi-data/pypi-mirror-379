{
    "quiz_info": {
        "min_supported_app_version": "0.0.18"
    },
    "user_info": {
        "email": "Клондайк аналитика"
    },
    "quizes": [
        {
            "id": "python_basics",
            "title": "Основы Python",
            "questions": [
                {
                    "id": 1,
                    "title": "Изменить порядок слов в предложении",
                    "text": "Дано предложение, без запятых, только английские символы, используются только строчные буквы.\nНаписать функцию, меняющую порядок слов в предложении на обратный.\nНапример 'the sky is blue' -> 'blue is sky the'",
                    "code_template": "def solution(s: str) -> str:\n\tpass",
                    "code": "def solution(s: str) -> str:\n\treturn \"\".join(reversed(s.split()))",
                    "test_cases": [
                        {
                            "s": {
                                "value": "hello",
                                "type": "str"
                            },
                            "expected": {
                                "value": "hello",
                                "type": "str"
                            }
                        },
                        {
                            "s": {
                                "value": "hello world",
                                "type": "str"
                            },
                            "expected": {
                                "value": "world hello",
                                "type": "str"
                            }
                        },
                        {
                            "s": {
                                "value": "all work and no play makes jack a dull boy",
                                "type": "str"
                            },
                            "expected": {
                                "value": "boy dull a jack makes play no and work all",
                                "type": "str"
                            }
                        }
                    ],
                    "is_passed": "failed"
                },
                {
                    "id": 2,
                    "title": "Сумма всех четных чисел до N",
                    "text": "Напишите функцию, которая вычисляем сумму всех четных чисел в промежутке от 1 до N, включая N.",
                    "code_template": "def solution(n: int):\n\treturn 0",
                    "code": "def solution(n: int):\n\treturn sum(x for x in range(n+1) if x % 2 == 0)",
                    "test_cases": [
                        {
                            "n": {
                                "value": "1",
                                "type": "int"
                            },
                            "expected": {
                                "value": "0",
                                "type": "int"
                            }
                        },
                        {
                            "n": {
                                "value": "10",
                                "type": "int"
                            },
                            "expected": {
                                "value": "30",
                                "type": "int"
                            }
                        },
                        {
                            "n": {
                                "value": "19",
                                "type": "int"
                            },
                            "expected": {
                                "value": "90",
                                "type": "int"
                            }
                        }
                    ],
                    "is_passed": "passed"
                },
                {
                    "id": 3,
                    "title": "Разворот числа",
                    "text": "Напишите программу, которая развернет число: 12345 -> 54321. Для отрицательных чисел вернуть тоже самое число (без разворотов). Считаем, что функция принимает только натуральные числа.",
                    "code_template": "def solution(n: int) -> int:\n\treturn None",
                    "code": "def solution(n: int) -> int:\n\treversed_numbers = reversed(\n\t\t[i for i in str(n)]\n\t)\n\t\n\treturn \"\".join(reversed_numbers)",
                    "test_cases": [
                        {
                            "n": {
                                "value": "0",
                                "type": "int"
                            },
                            "expected": {
                                "value": "0",
                                "type": "int"
                            }
                        },
                        {
                            "n": {
                                "value": "123",
                                "type": "int"
                            },
                            "expected": {
                                "value": "321",
                                "type": "int"
                            }
                        },
                        {
                            "n": {
                                "value": "123456",
                                "type": "int"
                            },
                            "expected": {
                                "value": "654321",
                                "type": "int"
                            }
                        }
                    ],
                    "is_passed": "passed"
                }
            ]
        },
        {
            "id": "more_difficult_tasks",
            "title": "Сложные задачи по Python",
            "questions": [
                {
                    "id": 4,
                    "title": "Самый длинный префикс",
                    "text": "Дан список слов. Найти самый длинный префикс.\nНапример, ['flower', 'flow', 'flight'] -> 'fl'",
                    "code_template": "def solution(words: list[str]) -> str:\n\treturn ''",
                    "code": "def solution(words: list[str]) -> str:\n\t\n\tdef get_prefix(pref_len: int) -> list[str]:\n\t\treturn [\n\t\t\tw[:pref_len] for w in words\n\t\t]\n\t\n\t\n\tmin_common_len = min(len(w) for w in words)\n\tfor l in range(min_common_len,0,-1):\n\t\tprefixes = get_prefix(l)\n\t\tare_the_same = len(set(prefixes)) == 1\n\t\tif are_the_same:\n\t\t\treturn prefixes[0]\n\treturn ''",
                    "test_cases": [
                        {
                            "words": {
                                "value": [
                                    "flower",
                                    "flow",
                                    "flight"
                                ],
                                "type": "list"
                            },
                            "expected": {
                                "value": "fl",
                                "type": "str"
                            }
                        },
                        {
                            "words": {
                                "value": [
                                    "abc",
                                    "xyz",
                                    "hgf"
                                ],
                                "type": "list"
                            },
                            "expected": {
                                "value": "",
                                "type": "str"
                            }
                        },
                        {
                            "words": {
                                "value": [
                                    "europe",
                                    "europe",
                                    "europe"
                                ],
                                "type": "list"
                            },
                            "expected": {
                                "value": "europe",
                                "type": "str"
                            }
                        }
                    ],
                    "is_passed": "passed"
                },
                {
                    "id": 5,
                    "title": "Сумма чисел",
                    "text": "Дан массив чисел и число target. Написать функцию, которая вернет список, состоящий из двух индексов элементов, которые в сумме дают число target. Допустим, что в массиве существует только одна пара таких элементов",
                    "code_template": "def solution(nums: list, target: int) -> list[int]:\n\treturn []",
                    "code": "def solution(nums: list, target: int) -> list[int]:\n\tdef get_freq_dict() -> dict[int, int]:\n\t\tfreq = {}\n\t\tfor i,n in enumerate(nums):\n\t\t\tfreq[n] = i\n\t\treturn freq\n\t\n\tfreq = get_freq_dict()\n\tfor i,n in enumerate(nums):\n\t\tother = target - n\n\t\tif other in freq:\n\t\t\treturn [i, freq[other]] \n\traise ValueError(\"Fail to find pair\")\n\t",
                    "test_cases": [
                        {
                            "nums": {
                                "value": [
                                    2,
                                    7,
                                    11,
                                    15
                                ],
                                "type": "list"
                            },
                            "target": {
                                "value": 9,
                                "type": "int"
                            },
                            "expected": {
                                "value": [
                                    0,
                                    1
                                ],
                                "type": "list"
                            }
                        }
                    ],
                    "is_passed": "passed"
                }
            ]
        }
    ]
}