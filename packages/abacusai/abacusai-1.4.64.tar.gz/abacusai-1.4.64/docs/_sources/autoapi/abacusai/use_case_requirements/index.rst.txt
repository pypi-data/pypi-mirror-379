abacusai.use_case_requirements
==============================

.. py:module:: abacusai.use_case_requirements


Classes
-------

.. autoapisummary::

   abacusai.use_case_requirements.UseCaseRequirements


Module Contents
---------------

.. py:class:: UseCaseRequirements(client, datasetType=None, name=None, description=None, required=None, multi=None, allowedFeatureMappings=None, allowedNestedFeatureMappings=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Use Case Requirements

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param datasetType: The project-specific enum value of the dataset type.
   :type datasetType: str
   :param name: The user-friendly name of the dataset type.
   :type name: str
   :param description: The description of the dataset type.
   :type description: str
   :param required: True if the dataset type is required for this project.
   :type required: bool
   :param multi: If true, multiple versions of the dataset type can be used for training.
   :type multi: bool
   :param allowedFeatureMappings: A collection of key-value pairs, with each key being a column mapping enum (see a list of column mapping enums here) and each value being in the following dictionary format: { "description": str, "allowed_feature_types": feature_type_enum, "required": bool }.
   :type allowedFeatureMappings: dict
   :param allowedNestedFeatureMappings: A collection of key-value pairs, with each key being a column mapping enum (see a list of column mapping enums here) and each value being in the following dictionary format: { "description": str, "allowed_feature_types": feature_type_enum, "required": bool }.
   :type allowedNestedFeatureMappings: dict


   .. py:attribute:: dataset_type
      :value: None



   .. py:attribute:: name
      :value: None



   .. py:attribute:: description
      :value: None



   .. py:attribute:: required
      :value: None



   .. py:attribute:: multi
      :value: None



   .. py:attribute:: allowed_feature_mappings
      :value: None



   .. py:attribute:: allowed_nested_feature_mappings
      :value: None



   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



