abacusai.feature_group_export
=============================

.. py:module:: abacusai.feature_group_export


Classes
-------

.. autoapisummary::

   abacusai.feature_group_export.FeatureGroupExport


Module Contents
---------------

.. py:class:: FeatureGroupExport(client, featureGroupExportId=None, failedWrites=None, totalWrites=None, featureGroupVersion=None, connectorType=None, outputLocation=None, fileFormat=None, databaseConnectorId=None, objectName=None, writeMode=None, databaseFeatureMapping=None, idColumn=None, status=None, createdAt=None, exportCompletedAt=None, additionalIdColumns=None, error=None, databaseOutputError=None, projectConfig={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   A feature Group Export Job

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param featureGroupExportId: Unique identifier for this export.
   :type featureGroupExportId: str
   :param failedWrites: Number of failed writes.
   :type failedWrites: int
   :param totalWrites: Total number of writes.
   :type totalWrites: int
   :param featureGroupVersion: Version of the feature group being exported.
   :type featureGroupVersion: str
   :param connectorType: The type of connector
   :type connectorType: str
   :param outputLocation: File Connector location the feature group is being written to.
   :type outputLocation: str
   :param fileFormat: File format being written to `output_location`.
   :type fileFormat: str
   :param databaseConnectorId: Database connector ID used.
   :type databaseConnectorId: str
   :param objectName: Database connector's object to write to.
   :type objectName: str
   :param writeMode: `UPSERT` or `INSERT` for writing to the database connector.
   :type writeMode: str
   :param databaseFeatureMapping: Column/feature pairs mapping the features to the database columns.
   :type databaseFeatureMapping: dict
   :param idColumn: ID column to use as the upsert key.
   :type idColumn: str
   :param status: Current status of the export.
   :type status: str
   :param createdAt: Timestamp at which the export was created (ISO-8601 format).
   :type createdAt: str
   :param exportCompletedAt: Timestamp at which the export completed (ISO-8601 format).
   :type exportCompletedAt: str
   :param additionalIdColumns: For database connectors which support it, additional ID columns to use as a complex key for upserting.
   :type additionalIdColumns: list[str]
   :param error: If `status` is `FAILED`, this field will be populated with an error.
   :type error: str
   :param databaseOutputError: If `True`, there were errors reported by the database connector while writing.
   :type databaseOutputError: bool
   :param projectConfig: Project config for this feature group.
   :type projectConfig: ProjectConfig


   .. py:attribute:: feature_group_export_id
      :value: None



   .. py:attribute:: failed_writes
      :value: None



   .. py:attribute:: total_writes
      :value: None



   .. py:attribute:: feature_group_version
      :value: None



   .. py:attribute:: connector_type
      :value: None



   .. py:attribute:: output_location
      :value: None



   .. py:attribute:: file_format
      :value: None



   .. py:attribute:: database_connector_id
      :value: None



   .. py:attribute:: object_name
      :value: None



   .. py:attribute:: write_mode
      :value: None



   .. py:attribute:: database_feature_mapping
      :value: None



   .. py:attribute:: id_column
      :value: None



   .. py:attribute:: status
      :value: None



   .. py:attribute:: created_at
      :value: None



   .. py:attribute:: export_completed_at
      :value: None



   .. py:attribute:: additional_id_columns
      :value: None



   .. py:attribute:: error
      :value: None



   .. py:attribute:: database_output_error
      :value: None



   .. py:attribute:: project_config


   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: get_feature_group_version_export_download_url()

      Get a link to download the feature group version.

      :param feature_group_export_id: Unique identifier of the Feature Group Export to get a signed URL for.
      :type feature_group_export_id: str

      :returns: Instance containing the download URL and expiration time for the Feature Group Export.
      :rtype: FeatureGroupExportDownloadUrl



   .. py:method:: refresh()

      Calls describe and refreshes the current object's fields

      :returns: The current object
      :rtype: FeatureGroupExport



   .. py:method:: describe()

      A feature group export

      :param feature_group_export_id: Unique identifier of the feature group export.
      :type feature_group_export_id: str

      :returns: The feature group export object.
      :rtype: FeatureGroupExport



   .. py:method:: get_connector_errors()

      Returns a stream containing the write errors of the feature group export database connection, if any writes failed to the database connector.

      :param feature_group_export_id: Unique identifier of the feature group export to get the errors for.
      :type feature_group_export_id: str



   .. py:method:: wait_for_results(timeout=3600)

      A waiting call until feature group export is created.

      :param timeout: The waiting time given to the call to finish, if it doesn't finish by the allocated time, the call is said to be timed out.
      :type timeout: int



   .. py:method:: wait_for_export(timeout=3600)

      A waiting call until feature group export is created.

      :param timeout: The waiting time given to the call to finish, if it doesn't finish by the allocated time, the call is said to be timed out.
      :type timeout: int



   .. py:method:: get_status()

      Gets the status of the feature group export.

      :returns: A string describing the status of a feature group export (pending, complete, etc.).
      :rtype: str



