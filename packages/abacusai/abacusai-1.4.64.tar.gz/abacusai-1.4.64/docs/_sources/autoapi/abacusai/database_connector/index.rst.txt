abacusai.database_connector
===========================

.. py:module:: abacusai.database_connector


Classes
-------

.. autoapisummary::

   abacusai.database_connector.DatabaseConnector


Module Contents
---------------

.. py:class:: DatabaseConnector(client, databaseConnectorId=None, service=None, name=None, status=None, auth=None, createdAt=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   A connector to an external service

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param databaseConnectorId: A unique string identifier for the connection.
   :type databaseConnectorId: str
   :param service: An enum string indicating the service this connection connects to.
   :type service: str
   :param name: A user-friendly name for the service.
   :type name: str
   :param status: The status of the database connector.
   :type status: str
   :param auth: Non-secret connection information for this connector.
   :type auth: dict
   :param createdAt: The ISO-8601 string indicating when the API key was created.
   :type createdAt: str


   .. py:attribute:: database_connector_id
      :value: None



   .. py:attribute:: service
      :value: None



   .. py:attribute:: name
      :value: None



   .. py:attribute:: status
      :value: None



   .. py:attribute:: auth
      :value: None



   .. py:attribute:: created_at
      :value: None



   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: list_objects(fetch_raw_data = False)

      Lists querable objects in the database connector.

      :param fetch_raw_data: If true, return unfiltered objects.
      :type fetch_raw_data: bool



   .. py:method:: get_object_schema(object_name = None, fetch_raw_data = False)

      Get the schema of an object in an database connector.

      :param object_name: Unique identifier for the object in the external system.
      :type object_name: str
      :param fetch_raw_data: If true, return unfiltered list of columns.
      :type fetch_raw_data: bool

      :returns: The schema of the object.
      :rtype: DatabaseConnectorSchema



   .. py:method:: rename(name)

      Renames a Database Connector

      :param name: The new name for the Database Connector.
      :type name: str



   .. py:method:: verify()

      Checks if Abacus.AI can access the specified database.

      :param database_connector_id: Unique string identifier for the database connector.
      :type database_connector_id: str



   .. py:method:: delete()

      Delete a database connector.

      :param database_connector_id: The unique identifier for the database connector.
      :type database_connector_id: str



   .. py:method:: query(query)

      Runs a query in the specified database connector.

      :param query: The query to be run in the database connector.
      :type query: str



   .. py:method:: query_datallm(query)

      Runs a read-only query in the specified database connector. This API is specifically designed for DataLLM

      and enforces read-only access with user-specific access control.


      :param query: The query to be run in the database connector (must be read-only).
      :type query: str



   .. py:method:: get_auth()

      Get the authentication details for a given database connector.

      :param database_connector_id: The unique ID associated with the database connector.
      :type database_connector_id: str

      :returns: The database connector with the authentication details.
      :rtype: DatabaseConnector



