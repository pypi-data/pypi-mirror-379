abacusai.api_class.batch_prediction
===================================

.. py:module:: abacusai.api_class.batch_prediction


Classes
-------

.. autoapisummary::

   abacusai.api_class.batch_prediction.BatchPredictionArgs
   abacusai.api_class.batch_prediction.ForecastingBatchPredictionArgs
   abacusai.api_class.batch_prediction.NamedEntityExtractionBatchPredictionArgs
   abacusai.api_class.batch_prediction.PersonalizationBatchPredictionArgs
   abacusai.api_class.batch_prediction.PredictiveModelingBatchPredictionArgs
   abacusai.api_class.batch_prediction.PretrainedModelsBatchPredictionArgs
   abacusai.api_class.batch_prediction.SentenceBoundaryDetectionBatchPredictionArgs
   abacusai.api_class.batch_prediction.ThemeAnalysisBatchPredictionArgs
   abacusai.api_class.batch_prediction.ChatLLMBatchPredictionArgs
   abacusai.api_class.batch_prediction.TrainablePlugAndPlayBatchPredictionArgs
   abacusai.api_class.batch_prediction.AIAgentBatchPredictionArgs
   abacusai.api_class.batch_prediction._BatchPredictionArgsFactory


Module Contents
---------------

.. py:class:: BatchPredictionArgs

   Bases: :py:obj:`abacusai.api_class.abstract.ApiClass`


   An abstract class for Batch Prediction args specific to problem type.


   .. py:attribute:: _support_kwargs
      :type:  bool
      :value: True



   .. py:attribute:: kwargs
      :type:  dict


   .. py:attribute:: problem_type
      :type:  abacusai.api_class.enums.ProblemType
      :value: None



   .. py:method:: _get_builder()
      :classmethod:



.. py:class:: ForecastingBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the FORECASTING problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation
   :type for_eval: bool
   :param predictions_start_date: The start date for predictions. Accepts timestamp integers and strings in many standard formats such as YYYY-MM-DD, YYYY-MM-DD HH:MM:SS, or YYYY-MM-DDTHH:MM:SS. If not specified, the prediction start date will be automatically defined.
   :type predictions_start_date: str
   :param use_prediction_offset: If True, use prediction offset.
   :type use_prediction_offset: bool
   :param start_date_offset: Sets prediction start date as this offset relative to the prediction start date.
   :type start_date_offset: int
   :param forecasting_horizon: The number of timestamps to predict in the future. Range: [1, 1000].
   :type forecasting_horizon: int
   :param item_attributes_to_include_in_the_result: List of columns to include in the prediction output.
   :type item_attributes_to_include_in_the_result: list
   :param explain_predictions: If True, calculates explanations for the forecasted values along with predictions.
   :type explain_predictions: bool
   :param create_monitor: Controls whether to automatically create a monitor to calculate the drift each time the batch prediction is run. Defaults to true if not specified.
   :type create_monitor: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: predictions_start_date
      :type:  str
      :value: None



   .. py:attribute:: use_prediction_offset
      :type:  bool
      :value: None



   .. py:attribute:: start_date_offset
      :type:  int
      :value: None



   .. py:attribute:: forecasting_horizon
      :type:  int
      :value: None



   .. py:attribute:: item_attributes_to_include_in_the_result
      :type:  list
      :value: None



   .. py:attribute:: explain_predictions
      :type:  bool
      :value: None



   .. py:attribute:: create_monitor
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: NamedEntityExtractionBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the NAMED_ENTITY_EXTRACTION problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: PersonalizationBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the PERSONALIZATION problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool
   :param number_of_items: Number of items to recommend.
   :type number_of_items: int
   :param item_attributes_to_include_in_the_result: List of columns to include in the prediction output.
   :type item_attributes_to_include_in_the_result: list
   :param score_field: If specified, relative item scores will be returned using a field with this name
   :type score_field: str


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: number_of_items
      :type:  int
      :value: None



   .. py:attribute:: item_attributes_to_include_in_the_result
      :type:  list
      :value: None



   .. py:attribute:: score_field
      :type:  str
      :value: None



   .. py:method:: __post_init__()


.. py:class:: PredictiveModelingBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the PREDICTIVE_MODELING problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool
   :param explainer_type: The type of explainer to use to generate explanations on the batch prediction.
   :type explainer_type: enums.ExplainerType
   :param number_of_samples_to_use_for_explainer: Number Of Samples To Use For Kernel Explainer.
   :type number_of_samples_to_use_for_explainer: int
   :param include_multi_class_explanations: If True, Includes explanations for all classes in multi-class classification.
   :type include_multi_class_explanations: bool
   :param features_considered_constant_for_explanations: Comma separate list of fields to treat as constant in SHAP explanations.
   :type features_considered_constant_for_explanations: str
   :param importance_of_records_in_nested_columns: Returns importance of each index in the specified nested column instead of SHAP column explanations.
   :type importance_of_records_in_nested_columns: str
   :param explanation_filter_lower_bound: If set explanations will be limited to predictions above this value, Range: [0, 1].
   :type explanation_filter_lower_bound: float
   :param explanation_filter_upper_bound: If set explanations will be limited to predictions below this value, Range: [0, 1].
   :type explanation_filter_upper_bound: float
   :param explanation_filter_label: For classification problems specifies the label to which the explanation bounds are applied.
   :type explanation_filter_label: str
   :param output_columns: A list of column names to include in the prediction result.
   :type output_columns: list
   :param explain_predictions: If True, calculates explanations for the predicted values along with predictions.
   :type explain_predictions: bool
   :param create_monitor: Controls whether to automatically create a monitor to calculate the drift each time the batch prediction is run. Defaults to true if not specified.
   :type create_monitor: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: explainer_type
      :type:  abacusai.api_class.enums.ExplainerType
      :value: None



   .. py:attribute:: number_of_samples_to_use_for_explainer
      :type:  int
      :value: None



   .. py:attribute:: include_multi_class_explanations
      :type:  bool
      :value: None



   .. py:attribute:: features_considered_constant_for_explanations
      :type:  str
      :value: None



   .. py:attribute:: importance_of_records_in_nested_columns
      :type:  str
      :value: None



   .. py:attribute:: explanation_filter_lower_bound
      :type:  float
      :value: None



   .. py:attribute:: explanation_filter_upper_bound
      :type:  float
      :value: None



   .. py:attribute:: explanation_filter_label
      :type:  str
      :value: None



   .. py:attribute:: output_columns
      :type:  list
      :value: None



   .. py:attribute:: explain_predictions
      :type:  bool
      :value: None



   .. py:attribute:: create_monitor
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: PretrainedModelsBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the PRETRAINED_MODELS problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool
   :param files_input_location: The input location for the files.
   :type files_input_location: str
   :param files_output_location_prefix: The output location prefix for the files.
   :type files_output_location_prefix: str
   :param channel_id_to_label_map: JSON string for the map from channel ids to their labels.
   :type channel_id_to_label_map: str


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: files_input_location
      :type:  str
      :value: None



   .. py:attribute:: files_output_location_prefix
      :type:  str
      :value: None



   .. py:attribute:: channel_id_to_label_map
      :type:  str
      :value: None



   .. py:method:: __post_init__()


.. py:class:: SentenceBoundaryDetectionBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the SENTENCE_BOUNDARY_DETECTION problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation
   :type for_eval: bool
   :param explode_output: Explode data so there is one sentence per row.
   :type explode_output: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: explode_output
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: ThemeAnalysisBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the THEME_ANALYSIS problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool
   :param analysis_frequency: The length of each analysis interval.
   :type analysis_frequency: str
   :param start_date: The end point for predictions.
   :type start_date: str
   :param analysis_days: How many days to analyze.
   :type analysis_days: int


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: analysis_frequency
      :type:  str
      :value: None



   .. py:attribute:: start_date
      :type:  str
      :value: None



   .. py:attribute:: analysis_days
      :type:  int
      :value: None



   .. py:method:: __post_init__()


.. py:class:: ChatLLMBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the ChatLLM problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: TrainablePlugAndPlayBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the TrainablePlugAndPlay problem type

   :param for_eval: If True, the test fold which was created during training and used for metrics calculation will be used as input data. These predictions are hence, used for model evaluation.
   :type for_eval: bool
   :param create_monitor: Controls whether to automatically create a monitor to calculate the drift each time the batch prediction is run. Defaults to true if not specified.
   :type create_monitor: bool


   .. py:attribute:: for_eval
      :type:  bool
      :value: None



   .. py:attribute:: create_monitor
      :type:  bool
      :value: None



   .. py:method:: __post_init__()


.. py:class:: AIAgentBatchPredictionArgs

   Bases: :py:obj:`BatchPredictionArgs`


   Batch Prediction Config for the AIAgents problem type


   .. py:method:: __post_init__()


.. py:class:: _BatchPredictionArgsFactory

   Bases: :py:obj:`abacusai.api_class.abstract._ApiClassFactory`


   .. py:attribute:: config_abstract_class


   .. py:attribute:: config_class_key
      :value: 'problem_type'



   .. py:attribute:: config_class_map


