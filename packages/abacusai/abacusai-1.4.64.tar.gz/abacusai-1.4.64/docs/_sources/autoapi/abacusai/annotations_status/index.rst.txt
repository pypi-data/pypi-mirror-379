abacusai.annotations_status
===========================

.. py:module:: abacusai.annotations_status


Classes
-------

.. autoapisummary::

   abacusai.annotations_status.AnnotationsStatus


Module Contents
---------------

.. py:class:: AnnotationsStatus(client, total=None, done=None, inProgress=None, todo=None, latestUpdatedAt=None, isMaterializationNeeded=None, latestMaterializedAnnotationConfig={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   The status of annotations for a feature group

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param total: The total number of documents annotated
   :type total: int
   :param done: The number of documents annotated
   :type done: int
   :param inProgress: The number of documents currently being annotated
   :type inProgress: int
   :param todo: The number of documents that need to be annotated
   :type todo: int
   :param latestUpdatedAt: The latest time an annotation was updated (ISO-8601 format)
   :type latestUpdatedAt: str
   :param isMaterializationNeeded: Whether feature group needs to be materialized before using for annotations
   :type isMaterializationNeeded: bool
   :param latestMaterializedAnnotationConfig: The annotation config corresponding to the latest materialized feature group
   :type latestMaterializedAnnotationConfig: AnnotationConfig


   .. py:attribute:: total
      :value: None



   .. py:attribute:: done
      :value: None



   .. py:attribute:: in_progress
      :value: None



   .. py:attribute:: todo
      :value: None



   .. py:attribute:: latest_updated_at
      :value: None



   .. py:attribute:: is_materialization_needed
      :value: None



   .. py:attribute:: latest_materialized_annotation_config


   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



