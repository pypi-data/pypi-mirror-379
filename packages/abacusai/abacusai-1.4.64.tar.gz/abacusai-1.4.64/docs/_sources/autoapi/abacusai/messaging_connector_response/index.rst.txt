abacusai.messaging_connector_response
=====================================

.. py:module:: abacusai.messaging_connector_response


Classes
-------

.. autoapisummary::

   abacusai.messaging_connector_response.MessagingConnectorResponse


Module Contents
---------------

.. py:class:: MessagingConnectorResponse(client, welcomeMessage=None, defaultMessage=None, disclaimer=None, messagingBotName=None, useDefaultLabel=None, initAckReq=None, defaultLabels=None, enabledExternalLinks=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   The response to view label data for Teams

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param welcomeMessage: on the first installation of the app the user will get this message
   :type welcomeMessage: str
   :param defaultMessage: when user triggers hi, hello, help they will get this message
   :type defaultMessage: str
   :param disclaimer: given along with every bot response
   :type disclaimer: str
   :param messagingBotName: the name you want to see at various places instead of Abacus.AI
   :type messagingBotName: str
   :param useDefaultLabel: to use the default Abacus.AI label in case it is set to true
   :type useDefaultLabel: bool
   :param initAckReq: Set to true if the initial Acknowledgment for the query is required by the user
   :type initAckReq: bool
   :param defaultLabels: Dictionary of default labels, if the user-specified labels aren't set
   :type defaultLabels: dict
   :param enabledExternalLinks: list of external application which have external links applicable
   :type enabledExternalLinks: list


   .. py:attribute:: welcome_message
      :value: None



   .. py:attribute:: default_message
      :value: None



   .. py:attribute:: disclaimer
      :value: None



   .. py:attribute:: messaging_bot_name
      :value: None



   .. py:attribute:: use_default_label
      :value: None



   .. py:attribute:: init_ack_req
      :value: None



   .. py:attribute:: default_labels
      :value: None



   .. py:attribute:: enabled_external_links
      :value: None



   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



