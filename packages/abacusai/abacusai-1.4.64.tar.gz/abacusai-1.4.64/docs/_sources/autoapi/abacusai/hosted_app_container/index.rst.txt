abacusai.hosted_app_container
=============================

.. py:module:: abacusai.hosted_app_container


Classes
-------

.. autoapisummary::

   abacusai.hosted_app_container.HostedAppContainer


Module Contents
---------------

.. py:class:: HostedAppContainer(client, hostedAppContainerId=None, hostedAppId=None, deploymentConversationId=None, hostedAppVersion=None, name=None, createdAt=None, updatedAt=None, containerImage=None, route=None, appConfig=None, isDev=None, isDeployable=None, isPreviewAvailable=None, lifecycle=None, status=None, deployedStatus=None, hostname=None, llmArtifactId=None, artifactType=None, deployedLlmArtifactId=None, hasDatabase=None, hasStorage=None, webAppProjectId=None, parentConversationId=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Hosted app + Deep agent container information.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param hostedAppContainerId: The ID of the hosted app container
   :type hostedAppContainerId: id
   :param hostedAppId: The ID of the hosted app
   :type hostedAppId: id
   :param deploymentConversationId: The deployment conversation ID
   :type deploymentConversationId: id
   :param hostedAppVersion: The instance of the hosted app
   :type hostedAppVersion: id
   :param name: The name of the hosted app
   :type name: str
   :param createdAt: Creation timestamp
   :type createdAt: str
   :param updatedAt: Last update timestamp
   :type updatedAt: str
   :param containerImage: Container image name
   :type containerImage: str
   :param route: Container route
   :type route: str
   :param appConfig: App configuration
   :type appConfig: dict
   :param isDev: Whether this is a dev container
   :type isDev: bool
   :param isDeployable: Can this version be deployed
   :type isDeployable: bool
   :param isPreviewAvailable: Is the dev preview available on the container
   :type isPreviewAvailable: bool
   :param lifecycle: Container lifecycle status (PENDING/DEPLOYING/ACTIVE/FAILED/STOPPED/DELETING)
   :type lifecycle: str
   :param status: Container status (RUNNING/STOPPED/DEPLOYING/FAILED)
   :type status: str
   :param deployedStatus: Deployment status (PENDING/ACTIVE/STOPPED/NOT_DEPLOYED)
   :type deployedStatus: str
   :param hostname: Hostname of the deployed app
   :type hostname: str
   :param llmArtifactId: The ID of the LLM artifact
   :type llmArtifactId: id
   :param artifactType: The type of the artifact
   :type artifactType: str
   :param deployedLlmArtifactId: The ID of the deployed LLM artifact
   :type deployedLlmArtifactId: id
   :param hasDatabase: Whether the app has a database associated to it
   :type hasDatabase: bool
   :param hasStorage: Whether the app has a cloud storage associated to it
   :type hasStorage: bool
   :param webAppProjectId: The ID of the web app project
   :type webAppProjectId: id
   :param parentConversationId: The ID of the parent conversation
   :type parentConversationId: id


   .. py:attribute:: hosted_app_container_id
      :value: None



   .. py:attribute:: hosted_app_id
      :value: None



   .. py:attribute:: deployment_conversation_id
      :value: None



   .. py:attribute:: hosted_app_version
      :value: None



   .. py:attribute:: name
      :value: None



   .. py:attribute:: created_at
      :value: None



   .. py:attribute:: updated_at
      :value: None



   .. py:attribute:: container_image
      :value: None



   .. py:attribute:: route
      :value: None



   .. py:attribute:: app_config
      :value: None



   .. py:attribute:: is_dev
      :value: None



   .. py:attribute:: is_deployable
      :value: None



   .. py:attribute:: is_preview_available
      :value: None



   .. py:attribute:: lifecycle
      :value: None



   .. py:attribute:: status
      :value: None



   .. py:attribute:: deployed_status
      :value: None



   .. py:attribute:: hostname
      :value: None



   .. py:attribute:: llm_artifact_id
      :value: None



   .. py:attribute:: artifact_type
      :value: None



   .. py:attribute:: deployed_llm_artifact_id
      :value: None



   .. py:attribute:: has_database
      :value: None



   .. py:attribute:: has_storage
      :value: None



   .. py:attribute:: web_app_project_id
      :value: None



   .. py:attribute:: parent_conversation_id
      :value: None



   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



