abacusai.refresh_pipeline_run
=============================

.. py:module:: abacusai.refresh_pipeline_run


Classes
-------

.. autoapisummary::

   abacusai.refresh_pipeline_run.RefreshPipelineRun


Module Contents
---------------

.. py:class:: RefreshPipelineRun(client, refreshPipelineRunId=None, refreshPolicyId=None, createdAt=None, startedAt=None, completedAt=None, status=None, refreshType=None, datasetVersions=None, featureGroupVersion=None, modelVersions=None, deploymentVersions=None, batchPredictions=None, refreshPolicy={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   This keeps track of the overall status of a refresh. A refresh can span multiple resources such as the creation of new dataset versions and the training of a new model version based on them.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param refreshPipelineRunId: The unique identifier for the refresh pipeline run.
   :type refreshPipelineRunId: str
   :param refreshPolicyId: Populated when the run was triggered by a refresh policy.
   :type refreshPolicyId: str
   :param createdAt: The time when this refresh pipeline run was created, in ISO-8601 format.
   :type createdAt: str
   :param startedAt: The time when the refresh pipeline run was started, in ISO-8601 format.
   :type startedAt: str
   :param completedAt: The time when the refresh pipeline run was completed, in ISO-8601 format.
   :type completedAt: str
   :param status: The status of the refresh pipeline run.
   :type status: str
   :param refreshType: The type of refresh policy to be run.
   :type refreshType: str
   :param datasetVersions: A list of dataset version IDs that this refresh pipeline run is monitoring.
   :type datasetVersions: list[str]
   :param featureGroupVersion: The feature group version ID that this refresh pipeline run is monitoring.
   :type featureGroupVersion: str
   :param modelVersions: A list of model version IDs that this refresh pipeline run is monitoring.
   :type modelVersions: list[str]
   :param deploymentVersions: A list of deployment version IDs that this refresh pipeline run is monitoring.
   :type deploymentVersions: list[str]
   :param batchPredictions: A list of batch prediction IDs that this refresh pipeline run is monitoring.
   :type batchPredictions: list[str]
   :param refreshPolicy: The refresh policy for this refresh policy run.
   :type refreshPolicy: RefreshPolicy


   .. py:attribute:: refresh_pipeline_run_id
      :value: None



   .. py:attribute:: refresh_policy_id
      :value: None



   .. py:attribute:: created_at
      :value: None



   .. py:attribute:: started_at
      :value: None



   .. py:attribute:: completed_at
      :value: None



   .. py:attribute:: status
      :value: None



   .. py:attribute:: refresh_type
      :value: None



   .. py:attribute:: dataset_versions
      :value: None



   .. py:attribute:: feature_group_version
      :value: None



   .. py:attribute:: model_versions
      :value: None



   .. py:attribute:: deployment_versions
      :value: None



   .. py:attribute:: batch_predictions
      :value: None



   .. py:attribute:: refresh_policy


   .. py:attribute:: deprecated_keys


   .. py:method:: __repr__()


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: refresh()

      Calls describe and refreshes the current object's fields

      :returns: The current object
      :rtype: RefreshPipelineRun



   .. py:method:: describe()

      Retrieve a single refresh pipeline run

      :param refresh_pipeline_run_id: Unique string identifier associated with the refresh pipeline run.
      :type refresh_pipeline_run_id: str

      :returns: A refresh pipeline run object.
      :rtype: RefreshPipelineRun



   .. py:method:: wait_for_complete(timeout=None)

      A waiting call until refresh pipeline run has completed.

      :param timeout: The waiting time given to the call to finish, if it doesn't finish by the allocated time, the call is said to be timed out.
      :type timeout: int



   .. py:method:: get_status()

      Gets the status of the refresh pipeline run.

      :returns: A string describing the status of a refresh pipeline run (pending, complete, etc.).
      :rtype: str



